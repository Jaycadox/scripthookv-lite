#![allow(dead_code)]
#![allow(unused_imports)]

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod system {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn wait(ms: i32) {
        call_native!(Void, 0x4EDE34FBADD967A6u64, ms);
    } // 0x4EDE34FBADD967A6 0x7715C03B b323
    pub unsafe fn start_new_script(script_name: *const i8, stack_size: i32) -> i32 {
        call_native!(i32, 0xE81651AD79516E48u64, script_name, stack_size)
    } // 0xE81651AD79516E48 0x3F166D0E b323
    pub unsafe fn start_new_script_with_args(
        script_name: *const i8,
        args: *mut Any,
        arg_count: i32,
        stack_size: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xB8BA7F44DF1575E1u64,
            script_name,
            args,
            arg_count,
            stack_size
        )
    } // 0xB8BA7F44DF1575E1 0x4A2100E4 b323
    pub unsafe fn start_new_script_with_name_hash(script_hash: Hash, stack_size: i32) -> i32 {
        call_native!(i32, 0xEB1C67C3A5333A92u64, script_hash, stack_size)
    } // 0xEB1C67C3A5333A92 0x8D15BE5D b323
    pub unsafe fn start_new_script_with_name_hash_and_args(
        script_hash: Hash,
        args: *mut Any,
        arg_count: i32,
        stack_size: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xC4BB298BD441BE78u64,
            script_hash,
            args,
            arg_count,
            stack_size
        )
    } // 0xC4BB298BD441BE78 0xE38A3AD4 b323
    pub unsafe fn timera() -> i32 {
        call_native!(i32, 0x83666F9FB8FEBD4Bu64)
    } // 0x83666F9FB8FEBD4B 0x45C8C188 b323
    pub unsafe fn timerb() -> i32 {
        call_native!(i32, 0xC9D9444186B5A374u64)
    } // 0xC9D9444186B5A374 0x330A9C0C b323
    pub unsafe fn settimera(value: i32) {
        call_native!(Void, 0xC1B1E9A034A63A62u64, value);
    } // 0xC1B1E9A034A63A62 0x35785333 b323
    pub unsafe fn settimerb(value: i32) {
        call_native!(Void, 0x5AE11BC36633DE4Eu64, value);
    } // 0x5AE11BC36633DE4E 0x27C1B7C6 b323
    pub unsafe fn timestep() -> f32 {
        call_native!(f32, 0x0000000050597EE2u64)
    } // 0x0000000050597EE2 0x50597EE2 b323
    pub unsafe fn sin(value: f32) -> f32 {
        call_native!(f32, 0x0BADBFA3B172435Fu64, value)
    } // 0x0BADBFA3B172435F 0xBF987F58 b323
    pub unsafe fn cos(value: f32) -> f32 {
        call_native!(f32, 0xD0FFB162F40A139Cu64, value)
    } // 0xD0FFB162F40A139C 0x00238FE9 b323
    pub unsafe fn sqrt(value: f32) -> f32 {
        call_native!(f32, 0x71D93B57D07F9804u64, value)
    } // 0x71D93B57D07F9804 0x145C7701 b323
    pub unsafe fn pow(base: f32, exponent: f32) -> f32 {
        call_native!(f32, 0xE3621CC40F31FE2Eu64, base, exponent)
    } // 0xE3621CC40F31FE2E 0x85D134F8 b323
    pub unsafe fn log10(value: f32) -> f32 {
        call_native!(f32, 0xE816E655DE37FE20u64, value)
    } // 0xE816E655DE37FE20  b1493
    pub unsafe fn vmag(x: f32, y: f32, z: f32) -> f32 {
        call_native!(f32, 0x652D2EEEF1D3E62Cu64, x, y, z)
    } // 0x652D2EEEF1D3E62C 0x1FCF1ECD b323
    pub unsafe fn vmag2(x: f32, y: f32, z: f32) -> f32 {
        call_native!(f32, 0xA8CEACB4F35AE058u64, x, y, z)
    } // 0xA8CEACB4F35AE058 0xE796E629 b323
    pub unsafe fn vdist(x_1: f32, y_1: f32, z_1: f32, x_2: f32, y_2: f32, z_2: f32) -> f32 {
        call_native!(f32, 0x2A488C176D52CCA5u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x2A488C176D52CCA5 0x3C08ECB7 b323
    pub unsafe fn vdist2(x_1: f32, y_1: f32, z_1: f32, x_2: f32, y_2: f32, z_2: f32) -> f32 {
        call_native!(f32, 0xB7A628320EFF8E47u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0xB7A628320EFF8E47 0xC85DEF1F b323
    pub unsafe fn shift_left(value: i32, bit_shift: i32) -> i32 {
        call_native!(i32, 0xEDD95A39E5544DE8u64, value, bit_shift)
    } // 0xEDD95A39E5544DE8 0x314CC6CD b323
    pub unsafe fn shift_right(value: i32, bit_shift: i32) -> i32 {
        call_native!(i32, 0x97EF1E5BCE9DC075u64, value, bit_shift)
    } // 0x97EF1E5BCE9DC075 0x352633CA b323
    pub unsafe fn floor(value: f32) -> i32 {
        call_native!(i32, 0xF34EE736CF047844u64, value)
    } // 0xF34EE736CF047844 0x32E9BE04 b323
    pub unsafe fn ceil(value: f32) -> i32 {
        call_native!(i32, 0x11E019C8F43ACC8Au64, value)
    } // 0x11E019C8F43ACC8A 0xD536A1DF b323
    pub unsafe fn round(value: f32) -> i32 {
        call_native!(i32, 0xF2DB717A73826179u64, value)
    } // 0xF2DB717A73826179 0x323B0E24 b323
    pub unsafe fn to_float(value: i32) -> f32 {
        call_native!(f32, 0xBBDA792448DB5A89u64, value)
    } // 0xBBDA792448DB5A89 0x67116627 b323
    pub unsafe fn set_this_thread_priority(priority: i32) {
        call_native!(Void, 0x42B65DEEF2EDF2A1u64, priority);
    } // 0x42B65DEEF2EDF2A1  b877
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod app {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn app_data_valid() -> bool {
        call_native!(bool, 0x846AA8E7D55EE5B6u64)
    } // 0x846AA8E7D55EE5B6 0x72BDE002 b323
    pub unsafe fn app_get_int(property: *const i8) -> i32 {
        call_native!(i32, 0xD3A58A12C77D9D4Bu64, property)
    } // 0xD3A58A12C77D9D4B 0x2942AAD2 b323
    pub unsafe fn app_get_float(property: *const i8) -> f32 {
        call_native!(f32, 0x1514FB24C02C2322u64, property)
    } // 0x1514FB24C02C2322 0xD87F3A1C b323
    pub unsafe fn app_get_string(property: *const i8) -> *const i8 {
        call_native!(*const i8, 0x749B023950D2311Cu64, property)
    } // 0x749B023950D2311C 0x849CEB80 b323
    pub unsafe fn app_set_int(property: *const i8, value: i32) {
        call_native!(Void, 0x607E8E3D3E4F9611u64, property, value);
    } // 0x607E8E3D3E4F9611 0x1B509C32 b323
    pub unsafe fn app_set_float(property: *const i8, value: f32) {
        call_native!(Void, 0x25D7687C68E0DAA4u64, property, value);
    } // 0x25D7687C68E0DAA4 0xF3076135 b323
    pub unsafe fn app_set_string(property: *const i8, value: *const i8) {
        call_native!(Void, 0x3FF2FCEC4B7721B4u64, property, value);
    } // 0x3FF2FCEC4B7721B4 0x23DF19A8 b323
    pub unsafe fn app_set_app(app_name: *const i8) {
        call_native!(Void, 0xCFD0406ADAF90D2Bu64, app_name);
    } // 0xCFD0406ADAF90D2B 0x8BAC4146 b323
    pub unsafe fn app_set_block(block_name: *const i8) {
        call_native!(Void, 0x262AB456A3D21F93u64, block_name);
    } // 0x262AB456A3D21F93 0xC2D54DD9 b323
    pub unsafe fn app_clear_block() {
        call_native!(Void, 0x5FE1DF3342DB7DBAu64);
    } // 0x5FE1DF3342DB7DBA 0xDAB86A18 b323
    pub unsafe fn app_close_app() {
        call_native!(Void, 0xE41C65E07A5F05FCu64);
    } // 0xE41C65E07A5F05FC 0x03767C7A b323
    pub unsafe fn app_close_block() {
        call_native!(Void, 0xE8E3FCF72EAC0EF8u64);
    } // 0xE8E3FCF72EAC0EF8 0xED97B202 b323
    pub unsafe fn app_has_linked_social_club_account() -> bool {
        call_native!(bool, 0x71EEE69745088DA0u64)
    } // 0x71EEE69745088DA0 0xD368BA15 b323
    pub unsafe fn app_has_synced_data(app_name: *const i8) -> bool {
        call_native!(bool, 0xCA52279A7271517Fu64, app_name)
    } // 0xCA52279A7271517F 0x1DE2A63D b323
    pub unsafe fn app_save_data() {
        call_native!(Void, 0x95C5D356CDA6E85Fu64);
    } // 0x95C5D356CDA6E85F 0x84A3918D b323
    pub unsafe fn app_get_deleted_file_status() -> i32 {
        call_native!(i32, 0xC9853A2BE3DED1A6u64)
    } // 0xC9853A2BE3DED1A6 0x784D550B b323
    pub unsafe fn app_delete_app_data(app_name: *const i8) -> bool {
        call_native!(bool, 0x44151AEA95C8A003u64, app_name)
    } // 0x44151AEA95C8A003 0x2A2FBD1C b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod audio {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn play_ped_ringtone(ringtone_name: *const i8, ped: Ped, p_2: bool) {
        call_native!(Void, 0xF9E56683CA8E11A5u64, ringtone_name, ped, p_2);
    } // 0xF9E56683CA8E11A5 0x1D530E47 b323
    pub unsafe fn is_ped_ringtone_playing(ped: Ped) -> bool {
        call_native!(bool, 0x1E8E5E20937E3137u64, ped)
    } // 0x1E8E5E20937E3137 0xFE576EE4 b323
    pub unsafe fn stop_ped_ringtone(ped: Ped) {
        call_native!(Void, 0x6C5AE23EFA885092u64, ped);
    } // 0x6C5AE23EFA885092 0xFEEA107C b323
    pub unsafe fn is_mobile_phone_call_ongoing() -> bool {
        call_native!(bool, 0x7497D2CE2C30D24Cu64)
    } // 0x7497D2CE2C30D24C 0x4ED1400A b323
    pub unsafe fn is_mobile_interference_active() -> bool {
        call_native!(bool, 0xC8B1B2425604CDD0u64)
    } // 0xC8B1B2425604CDD0 0x16FB88B5 b323
    pub unsafe fn get_current_tv_show_play_time() -> i32 {
        call_native!(i32, 0xDD3AA743AB7D4D75u64)
    } // 0xDD3AA743AB7D4D75  b3095
    pub unsafe fn create_new_scripted_conversation() {
        call_native!(Void, 0xD2C91A0B572AAE56u64);
    } // 0xD2C91A0B572AAE56 0xB2BC25F8 b323
    pub unsafe fn add_line_to_conversation(
        index: i32,
        p_1: *const i8,
        p_2: *const i8,
        p_3: i32,
        p_4: i32,
        p_5: bool,
        p_6: bool,
        p_7: bool,
        p_8: bool,
        p_9: i32,
        p_1_0: bool,
        p_1_1: bool,
        p_1_2: bool,
    ) {
        call_native!(
            Void,
            0xC5EF963405593646u64,
            index,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2
        );
    } // 0xC5EF963405593646 0x96CD0513 b323
    pub unsafe fn add_ped_to_conversation(index: i32, ped: Ped, p_2: *const i8) {
        call_native!(Void, 0x95D9F4BC443956E7u64, index, ped, p_2);
    } // 0x95D9F4BC443956E7 0xF8D5EB86 b323
    pub unsafe fn set_position_for_null_conv_ped(p_0: Any, p_1: f32, p_2: f32, p_3: f32) {
        call_native!(Void, 0x33E3C6C6F2F0B506u64, p_0, p_1, p_2, p_3);
    } // 0x33E3C6C6F2F0B506 0x73C6F979 b323
    pub unsafe fn set_entity_for_null_conv_ped(p_0: i32, entity: Entity) {
        call_native!(Void, 0x892B6AB8F33606F5u64, p_0, entity);
    } // 0x892B6AB8F33606F5 0x88203DDA b323
    pub unsafe fn set_microphone_position(
        toggle: bool,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
    ) {
        call_native!(
            Void,
            0xB6AE90EDDE95C762u64,
            toggle,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3
        );
    } // 0xB6AE90EDDE95C762 0xAD7BB191 b323
    pub unsafe fn set_conversation_audio_controlled_by_anim(p_0: bool) {
        call_native!(Void, 0x0B568201DD99F0EBu64, p_0);
    } // 0x0B568201DD99F0EB 0x1193ED6E b323
    pub unsafe fn set_conversation_audio_placeholder(p_0: bool) {
        call_native!(Void, 0x61631F5DF50D1C34u64, p_0);
    } // 0x61631F5DF50D1C34  b323
    pub unsafe fn start_script_phone_conversation(p_0: bool, p_1: bool) {
        call_native!(Void, 0x252E5F915EABB675u64, p_0, p_1);
    } // 0x252E5F915EABB675 0x38E42D07 b323
    pub unsafe fn preload_script_phone_conversation(p_0: bool, p_1: bool) {
        call_native!(Void, 0x6004BCB0E226AAEAu64, p_0, p_1);
    } // 0x6004BCB0E226AAEA 0x9ACB213A b323
    pub unsafe fn start_script_conversation(p_0: bool, p_1: bool, p_2: bool, p_3: bool) {
        call_native!(Void, 0x6B17C62C9635D2DCu64, p_0, p_1, p_2, p_3);
    } // 0x6B17C62C9635D2DC 0xE5DE7D9D b323
    pub unsafe fn preload_script_conversation(p_0: bool, p_1: bool, p_2: bool, p_3: bool) {
        call_native!(Void, 0x3B3CAD6166916D87u64, p_0, p_1, p_2, p_3);
    } // 0x3B3CAD6166916D87 0xDDF5C579 b323
    pub unsafe fn start_preloaded_conversation() {
        call_native!(Void, 0x23641AFE870AF385u64);
    } // 0x23641AFE870AF385 0xA170261B b323
    pub unsafe fn get_is_preloaded_conversation_ready() -> bool {
        call_native!(bool, 0xE73364DB90778FFAu64)
    } // 0xE73364DB90778FFA 0x336F3D35 b323
    pub unsafe fn is_scripted_conversation_ongoing() -> bool {
        call_native!(bool, 0x16754C556D2EDE3Du64)
    } // 0x16754C556D2EDE3D 0xCB8FD96F b323
    pub unsafe fn is_scripted_conversation_loaded() -> bool {
        call_native!(bool, 0xDF0D54BE7A776737u64)
    } // 0xDF0D54BE7A776737 0xE1870EA9 b323
    pub unsafe fn get_current_scripted_conversation_line() -> i32 {
        call_native!(i32, 0x480357EE890C295Au64)
    } // 0x480357EE890C295A 0x9620E41F b323
    pub unsafe fn pause_scripted_conversation(p_0: bool) {
        call_native!(Void, 0x8530AD776CD72B12u64, p_0);
    } // 0x8530AD776CD72B12 0xE2C9C6F8 b323
    pub unsafe fn restart_scripted_conversation() {
        call_native!(Void, 0x9AEB285D1818C9ACu64);
    } // 0x9AEB285D1818C9AC 0x6CB24B56 b323
    pub unsafe fn stop_scripted_conversation(p_0: bool) -> i32 {
        call_native!(i32, 0xD79DEEFB53455EBAu64, p_0)
    } // 0xD79DEEFB53455EBA 0xAB77DA7D b323
    pub unsafe fn skip_to_next_scripted_conversation_line() {
        call_native!(Void, 0x9663FE6B7A61EB00u64);
    } // 0x9663FE6B7A61EB00 0x85C98304 b323
    pub unsafe fn interrupt_conversation(ped: Ped, voiceline: *const i8, speaker: *const i8) {
        call_native!(Void, 0xA018A12E5C5C2FA6u64, ped, voiceline, speaker);
    } // 0xA018A12E5C5C2FA6 0xF3A67AF3 b323
    pub unsafe fn interrupt_conversation_and_pause(ped: Ped, p_1: *const i8, speaker: *const i8) {
        call_native!(Void, 0x8A694D7A68F8DC38u64, ped, p_1, speaker);
    } // 0x8A694D7A68F8DC38 0xDD4A3F1F b323
    pub unsafe fn get_variation_chosen_for_scripted_line(p_0: *mut Any) -> i32 {
        call_native!(i32, 0xAA19F5572C38B564u64, p_0)
    } // 0xAA19F5572C38B564 0xB58B8FF3 b323
    pub unsafe fn set_no_ducking_for_conversation(p_0: bool) {
        call_native!(Void, 0xB542DE8C3D1CB210u64, p_0);
    } // 0xB542DE8C3D1CB210 0x789D8C6C b323
    pub unsafe fn register_script_with_audio(p_0: i32) {
        call_native!(Void, 0xC6ED9D5092438D91u64, p_0);
    } // 0xC6ED9D5092438D91 0xA6203643 b323
    pub unsafe fn unregister_script_with_audio() {
        call_native!(Void, 0xA8638BE228D4751Au64);
    } // 0xA8638BE228D4751A 0x66728EFE b323
    pub unsafe fn request_mission_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0x7345BDD95E62E0F2u64, audio_bank, p_1, p_2)
    } // 0x7345BDD95E62E0F2 0x916E37CA b323
    pub unsafe fn request_ambient_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0xFE02FFBED8CA9D99u64, audio_bank, p_1, p_2)
    } // 0xFE02FFBED8CA9D99 0x23C88BC7 b323
    pub unsafe fn request_script_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0x2F844A8B08D76685u64, audio_bank, p_1, p_2)
    } // 0x2F844A8B08D76685 0x21322887 b323
    pub unsafe fn hint_mission_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0x40763EA7B9B783E7u64, audio_bank, p_1, p_2)
    } // 0x40763EA7B9B783E7  b573
    pub unsafe fn hint_ambient_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0x8F8C0E370AE62F5Cu64, audio_bank, p_1, p_2)
    } // 0x8F8C0E370AE62F5C 0xF1850DDC b323
    pub unsafe fn hint_script_audio_bank(audio_bank: *const i8, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0xFB380A29641EC31Au64, audio_bank, p_1, p_2)
    } // 0xFB380A29641EC31A 0x41FA0E51 b323
    pub unsafe fn release_mission_audio_bank() {
        call_native!(Void, 0x0EC92A1BF0857187u64);
    } // 0x0EC92A1BF0857187 0x8E8824C7 b323
    pub unsafe fn release_ambient_audio_bank() {
        call_native!(Void, 0x65475A218FFAA93Du64);
    } // 0x65475A218FFAA93D 0x8C938784 b323
    pub unsafe fn release_named_script_audio_bank(audio_bank: *const i8) {
        call_native!(Void, 0x77ED170667F50170u64, audio_bank);
    } // 0x77ED170667F50170 0x16707ABC b323
    pub unsafe fn release_script_audio_bank() {
        call_native!(Void, 0x7A2D8AD0A9EB9C3Fu64);
    } // 0x7A2D8AD0A9EB9C3F 0x22F865E5 b323
    pub unsafe fn unhint_ambient_audio_bank() {
        call_native!(Void, 0x19AF7ED9B9D23058u64);
    } // 0x19AF7ED9B9D23058 0xA58BBF4F b323
    pub unsafe fn unhint_script_audio_bank() {
        call_native!(Void, 0x9AC92EED5E4793ABu64);
    } // 0x9AC92EED5E4793AB 0xE67446E9 b323
    pub unsafe fn unhint_named_script_audio_bank(audio_bank: *const i8) {
        call_native!(Void, 0x11579D940949C49Eu64, audio_bank);
    } // 0x11579D940949C49E  b678
    pub unsafe fn get_sound_id() -> i32 {
        call_native!(i32, 0x430386FE9BF80B45u64)
    } // 0x430386FE9BF80B45 0x6AE0AD56 b323
    pub unsafe fn release_sound_id(sound_id: i32) {
        call_native!(Void, 0x353FC880830B88FAu64, sound_id);
    } // 0x353FC880830B88FA 0x9C080899 b323
    pub unsafe fn play_sound(
        sound_id: i32,
        audio_name: *const i8,
        audio_ref: *const i8,
        p_3: bool,
        p_4: Any,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x7FF4944CC209192Du64,
            sound_id,
            audio_name,
            audio_ref,
            p_3,
            p_4,
            p_5
        );
    } // 0x7FF4944CC209192D 0xB6E1917F b323
    pub unsafe fn play_sound_frontend(
        sound_id: i32,
        audio_name: *const i8,
        audio_ref: *const i8,
        p_3: bool,
    ) {
        call_native!(
            Void,
            0x67C540AA08E4A6F5u64,
            sound_id,
            audio_name,
            audio_ref,
            p_3
        );
    } // 0x67C540AA08E4A6F5 0x2E458F74 b323
    pub unsafe fn play_deferred_sound_frontend(sound_name: *const i8, soundset_name: *const i8) {
        call_native!(Void, 0xCADA5A0D0702381Eu64, sound_name, soundset_name);
    } // 0xCADA5A0D0702381E 0xC70E6CFA b323
    pub unsafe fn play_sound_from_entity(
        sound_id: i32,
        audio_name: *const i8,
        entity: Entity,
        audio_ref: *const i8,
        is_network: bool,
        p_5: Any,
    ) {
        call_native!(
            Void,
            0xE65F427EB70AB1EDu64,
            sound_id,
            audio_name,
            entity,
            audio_ref,
            is_network,
            p_5
        );
    } // 0xE65F427EB70AB1ED 0x95AE00F8 b323
    pub unsafe fn play_sound_from_entity_hash(
        sound_id: i32,
        model: Hash,
        entity: Entity,
        sound_set_hash: Hash,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(
            Void,
            0x5B9853296731E88Du64,
            sound_id,
            model,
            entity,
            sound_set_hash,
            p_4,
            p_5
        );
    } // 0x5B9853296731E88D  b877
    pub unsafe fn play_sound_from_coord(
        sound_id: i32,
        audio_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        audio_ref: *const i8,
        is_network: bool,
        range: i32,
        p_8: bool,
    ) {
        call_native!(
            Void,
            0x8D8686B622B88120u64,
            sound_id,
            audio_name,
            x,
            y,
            z,
            audio_ref,
            is_network,
            range,
            p_8
        );
    } // 0x8D8686B622B88120 0xCAD3E2D5 b323
    pub unsafe fn update_sound_coord(sound_id: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x7EC3C679D0E7E46Bu64, sound_id, x, y, z);
    } // 0x7EC3C679D0E7E46B  b678
    pub unsafe fn stop_sound(sound_id: i32) {
        call_native!(Void, 0xA3B0C41BA5CC0BB5u64, sound_id);
    } // 0xA3B0C41BA5CC0BB5 0xCD7F4030 b323
    pub unsafe fn get_network_id_from_sound_id(sound_id: i32) -> i32 {
        call_native!(i32, 0x2DE3F0A134FFBC0Du64, sound_id)
    } // 0x2DE3F0A134FFBC0D 0x2576F610 b323
    pub unsafe fn get_sound_id_from_network_id(net_id: i32) -> i32 {
        call_native!(i32, 0x75262FD12D0A1C84u64, net_id)
    } // 0x75262FD12D0A1C84 0xD064D4DC b323
    pub unsafe fn set_variable_on_sound(sound_id: i32, variable: *const i8, p_2: f32) {
        call_native!(Void, 0xAD6B3148A78AE9B6u64, sound_id, variable, p_2);
    } // 0xAD6B3148A78AE9B6 0x606EE5FA b323
    pub unsafe fn set_variable_on_stream(variable: *const i8, p_1: f32) {
        call_native!(Void, 0x2F9D3834AEB9EF79u64, variable, p_1);
    } // 0x2F9D3834AEB9EF79 0xF67BB44C b323
    pub unsafe fn override_underwater_stream(p_0: *const i8, p_1: bool) {
        call_native!(Void, 0xF2A9CDABCEA04BD6u64, p_0, p_1);
    } // 0xF2A9CDABCEA04BD6 0x9A083B7E b323
    pub unsafe fn set_variable_on_under_water_stream(variable_name: *const i8, value: f32) {
        call_native!(Void, 0x733ADF241531E5C2u64, variable_name, value);
    } // 0x733ADF241531E5C2 0x62D026BE b323
    pub unsafe fn has_sound_finished(sound_id: i32) -> bool {
        call_native!(bool, 0xFCBDCE714A7C88E5u64, sound_id)
    } // 0xFCBDCE714A7C88E5 0xE85AEC2E b323
    pub unsafe fn play_ped_ambient_speech_native(
        ped: Ped,
        speech_name: *const i8,
        speech_param: *const i8,
        p_3: Any,
    ) {
        call_native!(
            Void,
            0x8E04FEDD28D42462u64,
            ped,
            speech_name,
            speech_param,
            p_3
        );
    } // 0x8E04FEDD28D42462 0x5C57B85D b323
    pub unsafe fn play_ped_ambient_speech_and_clone_native(
        ped: Ped,
        speech_name: *const i8,
        speech_param: *const i8,
        p_3: Any,
    ) {
        call_native!(
            Void,
            0xC6941B4A3A8FBBB9u64,
            ped,
            speech_name,
            speech_param,
            p_3
        );
    } // 0xC6941B4A3A8FBBB9 0x444180DB b323
    pub unsafe fn play_ped_ambient_speech_with_voice_native(
        ped: Ped,
        speech_name: *const i8,
        voice_name: *const i8,
        speech_param: *const i8,
        p_4: bool,
    ) {
        call_native!(
            Void,
            0x3523634255FC3318u64,
            ped,
            speech_name,
            voice_name,
            speech_param,
            p_4
        );
    } // 0x3523634255FC3318 0x8386AE28 b323
    pub unsafe fn play_ambient_speech_from_position_native(
        speech_name: *const i8,
        voice_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        speech_param: *const i8,
    ) {
        call_native!(
            Void,
            0xED640017ED337E45u64,
            speech_name,
            voice_name,
            x,
            y,
            z,
            speech_param
        );
    } // 0xED640017ED337E45 0xA1A1402E b323
    pub unsafe fn override_trevor_rage(voice_effect: *const i8) {
        call_native!(Void, 0x13AD665062541A7Eu64, voice_effect);
    } // 0x13AD665062541A7E 0x05B9B5CF b323
    pub unsafe fn reset_trevor_rage() {
        call_native!(Void, 0xE78503B10C4314E0u64);
    } // 0xE78503B10C4314E0 0xE80CF0D4 b323
    pub unsafe fn set_player_angry(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEA241BB04110F091u64, ped, toggle);
    } // 0xEA241BB04110F091 0x782CA58D b323
    pub unsafe fn play_pain(ped: Ped, pain_i_d: i32, p_1: i32, p_3: Any) {
        call_native!(Void, 0xBC9AE166038A5CECu64, ped, pain_i_d, p_1, p_3);
    } // 0xBC9AE166038A5CEC 0x874BD6CB b323
    pub unsafe fn release_weapon_audio() {
        call_native!(Void, 0xCE4AC0439F607045u64);
    } // 0xCE4AC0439F607045 0x6096504C b323
    pub unsafe fn activate_audio_slowmo_mode(mode: *const i8) {
        call_native!(Void, 0xD01005D2BA2EB778u64, mode);
    } // 0xD01005D2BA2EB778 0x59A3A17D b323
    pub unsafe fn deactivate_audio_slowmo_mode(mode: *const i8) {
        call_native!(Void, 0xDDC635D5B3262C56u64, mode);
    } // 0xDDC635D5B3262C56 0x0E387BFE b323
    pub unsafe fn set_ambient_voice_name(ped: Ped, name: *const i8) {
        call_native!(Void, 0x6C8065A3B780185Bu64, ped, name);
    } // 0x6C8065A3B780185B 0xBD2EA1A1 b323
    pub unsafe fn set_ambient_voice_name_hash(ped: Ped, hash: Hash) {
        call_native!(Void, 0x9A53DED9921DE990u64, ped, hash);
    } // 0x9A53DED9921DE990  b463
    pub unsafe fn get_ambient_voice_name_hash(ped: Ped) -> Hash {
        call_native!(Hash, 0x5E203DA2BA15D436u64, ped)
    } // 0x5E203DA2BA15D436  b463
    pub unsafe fn set_ped_voice_full(ped: Ped) {
        call_native!(Void, 0x40CF0D12D142A9E8u64, ped);
    } // 0x40CF0D12D142A9E8  b323
    pub unsafe fn set_ped_race_and_voice_group(ped: Ped, p_1: i32, voice_group: Hash) {
        call_native!(Void, 0x1B7ABE26CBCBF8C7u64, ped, p_1, voice_group);
    } // 0x1B7ABE26CBCBF8C7  b372
    pub unsafe fn set_ped_voice_group(ped: Ped, voice_group_hash: Hash) {
        call_native!(Void, 0x7CDC8C3B89F661B3u64, ped, voice_group_hash);
    } // 0x7CDC8C3B89F661B3  b323
    pub unsafe fn set_ped_voice_group_from_race_to_pvg(ped: Ped, voice_group_hash: Hash) {
        call_native!(Void, 0x0BABC1345ABBFB16u64, ped, voice_group_hash);
    } // 0x0BABC1345ABBFB16  b2699
    pub unsafe fn set_ped_gender(ped: Ped, p_1: bool) {
        call_native!(Void, 0xA5342D390CDA41D6u64, ped, p_1);
    } // 0xA5342D390CDA41D6  b323
    pub unsafe fn stop_current_playing_speech(ped: Ped) {
        call_native!(Void, 0x7A73D05A607734C7u64, ped);
    } // 0x7A73D05A607734C7 0x5B7463F4 b323
    pub unsafe fn stop_current_playing_ambient_speech(ped: Ped) {
        call_native!(Void, 0xB8BEC0CA6F0EDB0Fu64, ped);
    } // 0xB8BEC0CA6F0EDB0F 0xBB8E64BF b323
    pub unsafe fn is_ambient_speech_playing(ped: Ped) -> bool {
        call_native!(bool, 0x9072C8B49907BFADu64, ped)
    } // 0x9072C8B49907BFAD 0x1972E8AA b323
    pub unsafe fn is_scripted_speech_playing(p_0: Ped) -> bool {
        call_native!(bool, 0xCC9AA18DCC7084F4u64, p_0)
    } // 0xCC9AA18DCC7084F4 0x2C653904 b323
    pub unsafe fn is_any_speech_playing(ped: Ped) -> bool {
        call_native!(bool, 0x729072355FA39EC9u64, ped)
    } // 0x729072355FA39EC9 0x2B74A6D6 b323
    pub unsafe fn is_any_positional_speech_playing() -> bool {
        call_native!(bool, 0x30CA2EF91D15ADF8u64)
    } // 0x30CA2EF91D15ADF8  b2189
    pub unsafe fn does_context_exist_for_this_ped(
        ped: Ped,
        speech_name: *const i8,
        p_2: bool,
    ) -> bool {
        call_native!(bool, 0x49B99BF3FDA89A7Au64, ped, speech_name, p_2)
    } // 0x49B99BF3FDA89A7A 0x8BD5F11E b323
    pub unsafe fn is_ped_in_current_conversation(ped: Ped) -> bool {
        call_native!(bool, 0x049E937F18F4020Cu64, ped)
    } // 0x049E937F18F4020C 0x7B2F0743 b323
    pub unsafe fn set_ped_is_drunk(ped: Ped, toggle: bool) {
        call_native!(Void, 0x95D2D383D5396B8Au64, ped, toggle);
    } // 0x95D2D383D5396B8A 0xD2EA77A3 b323
    pub unsafe fn play_animal_vocalization(ped_handle: Ped, p_1: i32, speech_name: *const i8) {
        call_native!(Void, 0xEE066C7006C49C0Au64, ped_handle, p_1, speech_name);
    } // 0xEE066C7006C49C0A 0x498849F3 b323
    pub unsafe fn is_animal_vocalization_playing(ped_handle: Ped) -> bool {
        call_native!(bool, 0xC265DF9FB44A9FBDu64, ped_handle)
    } // 0xC265DF9FB44A9FBD 0x0CBAF2EF b323
    pub unsafe fn set_animal_mood(animal: Ped, mood: i32) {
        call_native!(Void, 0xCC97B29285B1DC3Bu64, animal, mood);
    } // 0xCC97B29285B1DC3B 0x3EA7C6CB b323
    pub unsafe fn is_mobile_phone_radio_active() -> bool {
        call_native!(bool, 0xB35CE999E8EF317Eu64)
    } // 0xB35CE999E8EF317E 0x6E502A5B b323
    pub unsafe fn set_mobile_phone_radio_state(state: bool) {
        call_native!(Void, 0xBF286C554784F3DFu64, state);
    } // 0xBF286C554784F3DF 0xE1E0ED34 b323
    pub unsafe fn get_player_radio_station_index() -> i32 {
        call_native!(i32, 0xE8AF77C4C06ADC93u64)
    } // 0xE8AF77C4C06ADC93 0x1C4946AC b323
    pub unsafe fn get_player_radio_station_name() -> *const i8 {
        call_native!(*const i8, 0xF6D733C32076AD03u64)
    } // 0xF6D733C32076AD03 0xD909C107 b323
    pub unsafe fn get_radio_station_name(radio_station: i32) -> *const i8 {
        call_native!(*const i8, 0xB28ECA15046CA8B9u64, radio_station)
    } // 0xB28ECA15046CA8B9 0x3DF493BC b323
    pub unsafe fn get_player_radio_station_genre() -> i32 {
        call_native!(i32, 0xA571991A7FE6CCEBu64)
    } // 0xA571991A7FE6CCEB 0x872CF0EA b323
    pub unsafe fn is_radio_retuning() -> bool {
        call_native!(bool, 0xA151A7394A214E65u64)
    } // 0xA151A7394A214E65 0xCF29097B b323
    pub unsafe fn is_radio_faded_out() -> bool {
        call_native!(bool, 0x0626A247D2405330u64)
    } // 0x0626A247D2405330 0x815CAE99 b323
    pub unsafe fn set_radio_retune_up() {
        call_native!(Void, 0xFF266D1D0EB1195Du64);
    } // 0xFF266D1D0EB1195D 0x53DB6994 b323
    pub unsafe fn set_radio_retune_down() {
        call_native!(Void, 0xDD6BCF9E94425DF9u64);
    } // 0xDD6BCF9E94425DF9 0xD70ECC80 b323
    pub unsafe fn set_radio_to_station_name(station_name: *const i8) {
        call_native!(Void, 0xC69EDA28699D5107u64, station_name);
    } // 0xC69EDA28699D5107 0x7B36E35E b323
    pub unsafe fn set_veh_radio_station(vehicle: Vehicle, radio_station: *const i8) {
        call_native!(Void, 0x1B9C0099CB942AC6u64, vehicle, radio_station);
    } // 0x1B9C0099CB942AC6 0xE391F55F b323
    pub unsafe fn set_veh_has_normal_radio(vehicle: Vehicle) {
        call_native!(Void, 0x3E45765F3FBB582Fu64, vehicle);
    } // 0x3E45765F3FBB582F  b2372
    pub unsafe fn is_vehicle_radio_on(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x0BE4BE946463F917u64, vehicle)
    } // 0x0BE4BE946463F917  b505
    pub unsafe fn set_veh_forced_radio_this_frame(vehicle: Vehicle) {
        call_native!(Void, 0xC1805D05E6D4FE10u64, vehicle);
    } // 0xC1805D05E6D4FE10 0x7ABB89D2 b323
    pub unsafe fn set_emitter_radio_station(
        emitter_name: *const i8,
        radio_station: *const i8,
        p_2: Any,
    ) {
        call_native!(
            Void,
            0xACF57305B12AF907u64,
            emitter_name,
            radio_station,
            p_2
        );
    } // 0xACF57305B12AF907 0x87431585 b323
    pub unsafe fn set_static_emitter_enabled(emitter_name: *const i8, toggle: bool) {
        call_native!(Void, 0x399D2D3B33F1B8EBu64, emitter_name, toggle);
    } // 0x399D2D3B33F1B8EB 0x91F72E92 b323
    pub unsafe fn link_static_emitter_to_entity(emitter_name: *const i8, entity: Entity) {
        call_native!(Void, 0x651D3228960D08AFu64, emitter_name, entity);
    } // 0x651D3228960D08AF  b505
    pub unsafe fn set_radio_to_station_index(radio_station: i32) {
        call_native!(Void, 0xA619B168B8A8570Fu64, radio_station);
    } // 0xA619B168B8A8570F 0x1D82766D b323
    pub unsafe fn set_frontend_radio_active(active: bool) {
        call_native!(Void, 0xF7F26C6E9CC9EBB8u64, active);
    } // 0xF7F26C6E9CC9EBB8 0xB1172075 b323
    pub unsafe fn unlock_mission_news_story(news_story: i32) {
        call_native!(Void, 0xB165AB7C248B2DC1u64, news_story);
    } // 0xB165AB7C248B2DC1 0xCCD9ABE4 b323
    pub unsafe fn is_mission_news_story_unlocked(news_story: i32) -> bool {
        call_native!(bool, 0x66E49BF55B4B1874u64, news_story)
    } // 0x66E49BF55B4B1874 0x27305D37 b323
    pub unsafe fn get_audible_music_track_text_id() -> i32 {
        call_native!(i32, 0x50B196FC9ED6545Bu64)
    } // 0x50B196FC9ED6545B 0xA2B88CA7 b323
    pub unsafe fn play_end_credits_music(play: bool) {
        call_native!(Void, 0xCD536C4D33DCC900u64, play);
    } // 0xCD536C4D33DCC900 0x8E88B3CC b323
    pub unsafe fn skip_radio_forward() {
        call_native!(Void, 0x6DDBBDD98E2E9C25u64);
    } // 0x6DDBBDD98E2E9C25 0x10D36630 b323
    pub unsafe fn freeze_radio_station(radio_station: *const i8) {
        call_native!(Void, 0x344F393B027E38C3u64, radio_station);
    } // 0x344F393B027E38C3 0x286BF543 b323
    pub unsafe fn unfreeze_radio_station(radio_station: *const i8) {
        call_native!(Void, 0xFC00454CF60B91DDu64, radio_station);
    } // 0xFC00454CF60B91DD 0x4D46202C b323
    pub unsafe fn set_radio_auto_unfreeze(toggle: bool) {
        call_native!(Void, 0xC1AA9F53CE982990u64, toggle);
    } // 0xC1AA9F53CE982990 0xA40196BF b323
    pub unsafe fn set_initial_player_station(radio_station: *const i8) {
        call_native!(Void, 0x88795F13FACDA88Du64, radio_station);
    } // 0x88795F13FACDA88D 0x9B069233 b323
    pub unsafe fn set_user_radio_control_enabled(toggle: bool) {
        call_native!(Void, 0x19F21E63AE6EAE4Eu64, toggle);
    } // 0x19F21E63AE6EAE4E 0x52E054CE b323
    pub unsafe fn set_radio_track(radio_station: *const i8, radio_track: *const i8) {
        call_native!(Void, 0xB39786F201FEE30Bu64, radio_station, radio_track);
    } // 0xB39786F201FEE30B 0x76E96212 b323
    pub unsafe fn set_radio_track_with_start_offset(
        radio_station_name: *const i8,
        mix_name: *const i8,
        p_2: i32,
    ) {
        call_native!(
            Void,
            0x2CB0075110BE1E56u64,
            radio_station_name,
            mix_name,
            p_2
        );
    } // 0x2CB0075110BE1E56  b1493
    pub unsafe fn set_next_radio_track(
        radio_name: *const i8,
        radio_track: *const i8,
        p_2: *const i8,
        p_3: *const i8,
    ) {
        call_native!(
            Void,
            0x55ECF4D13D9903B0u64,
            radio_name,
            radio_track,
            p_2,
            p_3
        );
    } // 0x55ECF4D13D9903B0  b1868
    pub unsafe fn set_vehicle_radio_loud(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xBB6F1CAEC68B0BCEu64, vehicle, toggle);
    } // 0xBB6F1CAEC68B0BCE 0x8D9EDD99 b323
    pub unsafe fn can_vehicle_receive_cb_radio(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x032A116663A4D5ACu64, vehicle)
    } // 0x032A116663A4D5AC 0xCBA99F4A b323
    pub unsafe fn set_mobile_radio_enabled_during_gameplay(toggle: bool) {
        call_native!(Void, 0x1098355A16064BB3u64, toggle);
    } // 0x1098355A16064BB3 0x990085F0 b323
    pub unsafe fn does_player_veh_have_radio() -> bool {
        call_native!(bool, 0x109697E2FFBAC8A1u64)
    } // 0x109697E2FFBAC8A1 0x46B0C696 b323
    pub unsafe fn is_player_veh_radio_enable() -> bool {
        call_native!(bool, 0x5F43D83FD6738741u64)
    } // 0x5F43D83FD6738741 0x2A3E5E8B b323
    pub unsafe fn set_vehicle_radio_enabled(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x3B988190C0AA6C0Bu64, vehicle, toggle);
    } // 0x3B988190C0AA6C0B 0x6F812CAB b323
    pub unsafe fn set_positioned_player_vehicle_radio_emitter_enabled(p_0: Any) {
        call_native!(Void, 0xDA07819E452FFE8Fu64, p_0);
    } // 0xDA07819E452FFE8F  b505
    pub unsafe fn set_custom_radio_track_list(
        radio_station: *const i8,
        track_list_name: *const i8,
        p_2: bool,
    ) {
        call_native!(
            Void,
            0x4E404A9361F75BB2u64,
            radio_station,
            track_list_name,
            p_2
        );
    } // 0x4E404A9361F75BB2 0x128C3873 b323
    pub unsafe fn clear_custom_radio_track_list(radio_station: *const i8) {
        call_native!(Void, 0x1654F24A88A8E3FEu64, radio_station);
    } // 0x1654F24A88A8E3FE 0x1D766976 b323
    pub unsafe fn get_num_unlocked_radio_stations() -> i32 {
        call_native!(i32, 0xF1620ECB50E01DE7u64)
    } // 0xF1620ECB50E01DE7 0xCC91FCF5 b323
    pub unsafe fn find_radio_station_index(station_name_hash: Hash) -> i32 {
        call_native!(i32, 0x8D67489793FF428Bu64, station_name_hash)
    } // 0x8D67489793FF428B 0xECA1512F b323
    pub unsafe fn set_radio_station_music_only(radio_station: *const i8, toggle: bool) {
        call_native!(Void, 0x774BD811F656A122u64, radio_station, toggle);
    } // 0x774BD811F656A122 0xB1FF7137 b323
    pub unsafe fn set_radio_frontend_fade_time(fade_time: f32) {
        call_native!(Void, 0x2C96CDB04FCA358Eu64, fade_time);
    } // 0x2C96CDB04FCA358E 0xC8B514E2 b323
    pub unsafe fn unlock_radio_station_track_list(
        radio_station: *const i8,
        track_list_name: *const i8,
    ) {
        call_native!(Void, 0x031ACB6ABA18C729u64, radio_station, track_list_name);
    } // 0x031ACB6ABA18C729 0xBE998184 b323
    pub unsafe fn lock_radio_station_track_list(
        radio_station: *const i8,
        track_list_name: *const i8,
    ) {
        call_native!(Void, 0xFF5E5EA2DCEEACF3u64, radio_station, track_list_name);
    } // 0xFF5E5EA2DCEEACF3  b2372
    pub unsafe fn update_unlockable_dj_radio_tracks(enable_mixes: bool) {
        call_native!(Void, 0x47AED84213A47510u64, enable_mixes);
    } // 0x47AED84213A47510  b1493
    pub unsafe fn lock_radio_station(radio_station_name: *const i8, toggle: bool) {
        call_native!(Void, 0x477D9DB48F889591u64, radio_station_name, toggle);
    } // 0x477D9DB48F889591  b1493
    pub unsafe fn set_radio_station_as_favourite(radio_station: *const i8, toggle: bool) {
        call_native!(Void, 0x4CAFEBFA21EC188Du64, radio_station, toggle);
    } // 0x4CAFEBFA21EC188D  b2372
    pub unsafe fn is_radio_station_favourited(radio_station: *const i8) -> bool {
        call_native!(bool, 0x2B1784DB08AFEA79u64, radio_station)
    } // 0x2B1784DB08AFEA79  b2699
    pub unsafe fn get_next_audible_beat(out_1: *mut f32, out_2: *mut f32, out_3: *mut i32) -> bool {
        call_native!(bool, 0xC64A06D939F826F5u64, out_1, out_2, out_3)
    } // 0xC64A06D939F826F5  b1493
    pub unsafe fn force_music_track_list(
        radio_station: *const i8,
        track_list_name: *const i8,
        milliseconds: i32,
    ) {
        call_native!(
            Void,
            0x4E0AF9114608257Cu64,
            radio_station,
            track_list_name,
            milliseconds
        );
    } // 0x4E0AF9114608257C  b2372
    pub unsafe fn get_current_track_play_time(radio_station_name: *const i8) -> i32 {
        call_native!(i32, 0x3E65CDE5215832C1u64, radio_station_name)
    } // 0x3E65CDE5215832C1  b1493
    pub unsafe fn get_current_track_sound_name(radio_station_name: *const i8) -> Hash {
        call_native!(Hash, 0x34D66BC058019CE0u64, radio_station_name)
    } // 0x34D66BC058019CE0  b1493
    pub unsafe fn set_vehicle_missile_warning_enabled(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xF3365489E0DD50F9u64, vehicle, toggle);
    } // 0xF3365489E0DD50F9 0x8AFC488D b323
    pub unsafe fn set_ambient_zone_state(zone_name: *const i8, p_1: bool, p_2: bool) {
        call_native!(Void, 0xBDA07E5950085E46u64, zone_name, p_1, p_2);
    } // 0xBDA07E5950085E46 0x2849CAC9 b323
    pub unsafe fn clear_ambient_zone_state(zone_name: *const i8, p_1: bool) {
        call_native!(Void, 0x218DD44AAAC964FFu64, zone_name, p_1);
    } // 0x218DD44AAAC964FF 0xCDFF3C82 b323
    pub unsafe fn set_ambient_zone_list_state(ambient_zone: *const i8, p_1: bool, p_2: bool) {
        call_native!(Void, 0x9748FA4DE50CCE3Eu64, ambient_zone, p_1, p_2);
    } // 0x9748FA4DE50CCE3E 0xBF80B412 b323
    pub unsafe fn clear_ambient_zone_list_state(ambient_zone: *const i8, p_1: bool) {
        call_native!(Void, 0x120C48C614909FA4u64, ambient_zone, p_1);
    } // 0x120C48C614909FA4 0x38B9B8D4 b323
    pub unsafe fn set_ambient_zone_state_persistent(ambient_zone: *const i8, p_1: bool, p_2: bool) {
        call_native!(Void, 0x1D6650420CEC9D3Bu64, ambient_zone, p_1, p_2);
    } // 0x1D6650420CEC9D3B 0xC1FFB672 b323
    pub unsafe fn set_ambient_zone_list_state_persistent(
        ambient_zone: *const i8,
        p_1: bool,
        p_2: bool,
    ) {
        call_native!(Void, 0xF3638DAE8C4045E1u64, ambient_zone, p_1, p_2);
    } // 0xF3638DAE8C4045E1 0x5F5A2605 b323
    pub unsafe fn is_ambient_zone_enabled(ambient_zone: *const i8) -> bool {
        call_native!(bool, 0x01E2817A479A7F9Bu64, ambient_zone)
    } // 0x01E2817A479A7F9B 0xBFABD872 b323
    pub unsafe fn refresh_closest_ocean_shoreline() {
        call_native!(Void, 0x5D2BFAAB8D956E0Eu64);
    } // 0x5D2BFAAB8D956E0E  b573
    pub unsafe fn set_cutscene_audio_override(name: *const i8) {
        call_native!(Void, 0x3B4BF5F0859204D9u64, name);
    } // 0x3B4BF5F0859204D9 0xCE1332B7 b323
    pub unsafe fn set_variable_on_synch_scene_audio(variable_name: *const i8, value: f32) {
        call_native!(Void, 0xBCC29F935ED07688u64, variable_name, value);
    } // 0xBCC29F935ED07688 0xD63CF33A b323
    pub unsafe fn play_police_report(name: *const i8, p_1: f32) -> i32 {
        call_native!(i32, 0xDFEBD56D9BD1EB16u64, name, p_1)
    } // 0xDFEBD56D9BD1EB16 0x3F277B62 b323
    pub unsafe fn cancel_all_police_reports() {
        call_native!(Void, 0xB4F90FAF7670B16Fu64);
    } // 0xB4F90FAF7670B16F  b323
    pub unsafe fn blip_siren(vehicle: Vehicle) {
        call_native!(Void, 0x1B9025BDA76822B6u64, vehicle);
    } // 0x1B9025BDA76822B6 0xC0EB6924 b323
    pub unsafe fn override_veh_horn(vehicle: Vehicle, _override: bool, horn_hash: i32) {
        call_native!(Void, 0x3CDC1E622CCE0356u64, vehicle, _override, horn_hash);
    } // 0x3CDC1E622CCE0356 0x2ACAB783 b323
    pub unsafe fn is_horn_active(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x9D6BFC12B05C6121u64, vehicle)
    } // 0x9D6BFC12B05C6121 0x20E2BDD0 b323
    pub unsafe fn set_aggressive_horns(toggle: bool) {
        call_native!(Void, 0x395BF71085D1B1D9u64, toggle);
    } // 0x395BF71085D1B1D9 0x01D6EABE b323
    pub unsafe fn set_radio_position_audio_mute(p_0: bool) {
        call_native!(Void, 0x02E93C796ABD3A97u64, p_0);
    } // 0x02E93C796ABD3A97 0x3C395AEE b323
    pub unsafe fn set_vehicle_conversations_persist(p_0: bool, p_1: bool) {
        call_native!(Void, 0x58BB377BEC7CD5F4u64, p_0, p_1);
    } // 0x58BB377BEC7CD5F4 0x8CE63FA1 b323
    pub unsafe fn set_vehicle_conversations_persist_new(p_0: bool, p_1: bool, p_2: bool) {
        call_native!(Void, 0x9BD7BD55E4533183u64, p_0, p_1, p_2);
    } // 0x9BD7BD55E4533183  b1290
    pub unsafe fn is_stream_playing() -> bool {
        call_native!(bool, 0xD11FA52EB849D978u64)
    } // 0xD11FA52EB849D978 0xF1F51A14 b323
    pub unsafe fn get_stream_play_time() -> i32 {
        call_native!(i32, 0x4E72BBDBCA58A3DBu64)
    } // 0x4E72BBDBCA58A3DB 0xB4F0AD56 b323
    pub unsafe fn load_stream(stream_name: *const i8, sound_set: *const i8) -> bool {
        call_native!(bool, 0x1F1F957154EC51DFu64, stream_name, sound_set)
    } // 0x1F1F957154EC51DF 0x0D89599D b323
    pub unsafe fn load_stream_with_start_offset(
        stream_name: *const i8,
        start_offset: i32,
        sound_set: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0x59C16B79F53B3712u64,
            stream_name,
            start_offset,
            sound_set
        )
    } // 0x59C16B79F53B3712 0xE5B5745C b323
    pub unsafe fn play_stream_from_ped(ped: Ped) {
        call_native!(Void, 0x89049DD63C08B5D1u64, ped);
    } // 0x89049DD63C08B5D1 0xA1D7FABE b323
    pub unsafe fn play_stream_from_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0xB70374A758007DFAu64, vehicle);
    } // 0xB70374A758007DFA 0xF8E4BDA2 b323
    pub unsafe fn play_stream_from_object(object: Object) {
        call_native!(Void, 0xEBAA9B64D76356FDu64, object);
    } // 0xEBAA9B64D76356FD 0xC5266BF7 b323
    pub unsafe fn play_stream_frontend() {
        call_native!(Void, 0x58FCE43488F9F5F4u64);
    } // 0x58FCE43488F9F5F4 0x2C2A16BC b323
    pub unsafe fn play_stream_from_position(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x21442F412E8DE56Bu64, x, y, z);
    } // 0x21442F412E8DE56B 0x6FE5D865 b323
    pub unsafe fn stop_stream() {
        call_native!(Void, 0xA4718A1419D18151u64);
    } // 0xA4718A1419D18151 0xD1E364DE b323
    pub unsafe fn stop_ped_speaking(ped: Ped, shaking: bool) {
        call_native!(Void, 0x9D64D7405520E3D3u64, ped, shaking);
    } // 0x9D64D7405520E3D3 0xFF92B49D b323
    pub unsafe fn block_all_speech_from_ped(ped: Ped, p_1: bool, p_2: bool) {
        call_native!(Void, 0xF8AD2EED7C47E8FEu64, ped, p_1, p_2);
    } // 0xF8AD2EED7C47E8FE  b1734
    pub unsafe fn stop_ped_speaking_synced(ped: Ped, p_1: bool) {
        call_native!(Void, 0xAB6781A5F3101470u64, ped, p_1);
    } // 0xAB6781A5F3101470  b1868
    pub unsafe fn disable_ped_pain_audio(ped: Ped, toggle: bool) {
        call_native!(Void, 0xA9A41C1E940FB0E8u64, ped, toggle);
    } // 0xA9A41C1E940FB0E8 0x3B8E2D5F b323
    pub unsafe fn is_ambient_speech_disabled(ped: Ped) -> bool {
        call_native!(bool, 0x932C2D096A2C3FFFu64, ped)
    } // 0x932C2D096A2C3FFF 0x109D1F89 b323
    pub unsafe fn block_speech_context_group(p_0: *const i8, p_1: i32) {
        call_native!(Void, 0xA8A7D434AFB4B97Bu64, p_0, p_1);
    } // 0xA8A7D434AFB4B97B  b1493
    pub unsafe fn unblock_speech_context_group(p_0: *const i8) {
        call_native!(Void, 0x2ACABED337622DF2u64, p_0);
    } // 0x2ACABED337622DF2  b1493
    pub unsafe fn set_siren_with_no_driver(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1FEF0683B96EBCF2u64, vehicle, toggle);
    } // 0x1FEF0683B96EBCF2 0x77182D58 b323
    pub unsafe fn set_siren_bypass_mp_driver_check(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xF584CF8529B51434u64, vehicle, toggle);
    } // 0xF584CF8529B51434  b2372
    pub unsafe fn trigger_siren_audio(vehicle: Vehicle) {
        call_native!(Void, 0x66C3FB05206041BAu64, vehicle);
    } // 0x66C3FB05206041BA  b1290
    pub unsafe fn set_horn_permanently_on(vehicle: Vehicle) {
        call_native!(Void, 0x9C11908013EA4715u64, vehicle);
    } // 0x9C11908013EA4715 0xDE8BA3CD b323
    pub unsafe fn set_horn_enabled(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x76D683C108594D0Eu64, vehicle, toggle);
    } // 0x76D683C108594D0E 0x6EB92D05 b323
    pub unsafe fn set_audio_vehicle_priority(vehicle: Vehicle, p_1: Any) {
        call_native!(Void, 0xE5564483E407F914u64, vehicle, p_1);
    } // 0xE5564483E407F914 0x271A9766 b323
    pub unsafe fn set_horn_permanently_on_time(vehicle: Vehicle, time: f32) {
        call_native!(Void, 0x9D3AF56E94C9AE98u64, vehicle, time);
    } // 0x9D3AF56E94C9AE98 0x2F0A16D1 b323
    pub unsafe fn use_siren_as_horn(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xFA932DE350266EF8u64, vehicle, toggle);
    } // 0xFA932DE350266EF8 0xC6BC16F3 b323
    pub unsafe fn force_use_audio_game_object(vehicle: Vehicle, audio_name: *const i8) {
        call_native!(Void, 0x4F0C413926060B38u64, vehicle, audio_name);
    } // 0x4F0C413926060B38 0x33B0B007 b323
    pub unsafe fn preload_vehicle_audio_bank(vehicle_model: Hash) {
        call_native!(Void, 0xCA4CEA6AE0000A7Eu64, vehicle_model);
    } // 0xCA4CEA6AE0000A7E  b1180
    pub unsafe fn set_vehicle_startup_rev_sound(vehicle: Vehicle, p_1: *const i8, p_2: *const i8) {
        call_native!(Void, 0xF1F8157B8C3F171Cu64, vehicle, p_1, p_2);
    } // 0xF1F8157B8C3F171C 0x1C0C5E4C b323
    pub unsafe fn reset_vehicle_startup_rev_sound(vehicle: Vehicle) {
        call_native!(Void, 0xD2DCCD8E16E20997u64, vehicle);
    } // 0xD2DCCD8E16E20997  b323
    pub unsafe fn set_vehicle_force_reverse_warning(p_0: Any, p_1: Any) {
        call_native!(Void, 0x97FFB4ADEED08066u64, p_0, p_1);
    } // 0x97FFB4ADEED08066  b2372
    pub unsafe fn is_vehicle_audibly_damaged(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x5DB8010EE71FDEF2u64, vehicle)
    } // 0x5DB8010EE71FDEF2 0x6E660D3F b323
    pub unsafe fn set_vehicle_audio_engine_damage_factor(vehicle: Vehicle, damage_factor: f32) {
        call_native!(Void, 0x59E7B488451F4D3Au64, vehicle, damage_factor);
    } // 0x59E7B488451F4D3A 0x23BE6432 b323
    pub unsafe fn set_vehicle_audio_body_damage_factor(vehicle: Vehicle, intensity: f32) {
        call_native!(Void, 0x01BB4D577D38BD9Eu64, vehicle, intensity);
    } // 0x01BB4D577D38BD9E 0xE81FAC68 b323
    pub unsafe fn enable_vehicle_fanbelt_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1C073274E065C6D2u64, vehicle, toggle);
    } // 0x1C073274E065C6D2 0x9365E042 b323
    pub unsafe fn enable_vehicle_exhaust_pops(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x2BE4BC731D039D5Au64, vehicle, toggle);
    } // 0x2BE4BC731D039D5A 0x2A60A90E b323
    pub unsafe fn set_vehicle_boost_active(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x4A04DE7CAB2739A1u64, vehicle, toggle);
    } // 0x4A04DE7CAB2739A1 0x072F15F2 b323
    pub unsafe fn set_player_vehicle_alarm_audio_active(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x6FDDAD856E36988Au64, vehicle, toggle);
    } // 0x6FDDAD856E36988A 0x934BE749 b323
    pub unsafe fn set_script_update_door_audio(door_hash: Hash, toggle: bool) {
        call_native!(Void, 0x06C0023BED16DD6Bu64, door_hash, toggle);
    } // 0x06C0023BED16DD6B 0xE61110A2 b323
    pub unsafe fn play_vehicle_door_open_sound(vehicle: Vehicle, door_id: i32) {
        call_native!(Void, 0x3A539D52857EA82Du64, vehicle, door_id);
    } // 0x3A539D52857EA82D 0x84930330 b323
    pub unsafe fn play_vehicle_door_close_sound(vehicle: Vehicle, door_id: i32) {
        call_native!(Void, 0x62A456AA4769EF34u64, vehicle, door_id);
    } // 0x62A456AA4769EF34 0xBA2CF407 b323
    pub unsafe fn enable_stall_warning_sounds(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xC15907D667F7CFB2u64, vehicle, toggle);
    } // 0xC15907D667F7CFB2 0x563B635D b323
    pub unsafe fn _enable_drag_race_stationary_warning_sounds(vehicle: Vehicle, enable: bool) {
        call_native!(Void, 0xBEFB80290414FD4Fu64, vehicle, enable);
    } // 0xBEFB80290414FD4F  b3095
    pub unsafe fn is_game_in_control_of_music() -> bool {
        call_native!(bool, 0x6D28DC1671E334FDu64)
    } // 0x6D28DC1671E334FD 0x7643170D b323
    pub unsafe fn set_gps_active(active: bool) {
        call_native!(Void, 0x3BD3F52BA9B1E4E8u64, active);
    } // 0x3BD3F52BA9B1E4E8 0x0FC3379A b323
    pub unsafe fn play_mission_complete_audio(audio_name: *const i8) {
        call_native!(Void, 0xB138AAB8A70D3C69u64, audio_name);
    } // 0xB138AAB8A70D3C69 0x3033EA1D b323
    pub unsafe fn is_mission_complete_playing() -> bool {
        call_native!(bool, 0x19A30C23F5827F8Au64)
    } // 0x19A30C23F5827F8A 0x939982A1 b323
    pub unsafe fn is_mission_complete_ready_for_ui() -> bool {
        call_native!(bool, 0x6F259F82D873B8B8u64)
    } // 0x6F259F82D873B8B8 0xCBE09AEC b323
    pub unsafe fn block_death_jingle(toggle: bool) {
        call_native!(Void, 0xF154B8D1775B2DECu64, toggle);
    } // 0xF154B8D1775B2DEC 0xD2858D8A b323
    pub unsafe fn start_audio_scene(scene: *const i8) -> bool {
        call_native!(bool, 0x013A80FC08F6E4F2u64, scene)
    } // 0x013A80FC08F6E4F2 0xE48D757B b323
    pub unsafe fn stop_audio_scene(scene: *const i8) {
        call_native!(Void, 0xDFE8422B3B94E688u64, scene);
    } // 0xDFE8422B3B94E688 0xA08D8C58 b323
    pub unsafe fn stop_audio_scenes() {
        call_native!(Void, 0xBAC7FC81A75EC1A1u64);
    } // 0xBAC7FC81A75EC1A1 0xF6C7342A b323
    pub unsafe fn is_audio_scene_active(scene: *const i8) -> bool {
        call_native!(bool, 0xB65B60556E2A9225u64, scene)
    } // 0xB65B60556E2A9225 0xACBED05C b323
    pub unsafe fn set_audio_scene_variable(scene: *const i8, variable: *const i8, value: f32) {
        call_native!(Void, 0xEF21A9EF089A2668u64, scene, variable, value);
    } // 0xEF21A9EF089A2668 0x19BB3CE8 b323
    pub unsafe fn set_audio_script_cleanup_time(time: i32) {
        call_native!(Void, 0xA5F377B175A699C5u64, time);
    } // 0xA5F377B175A699C5 0xE812925D b323
    pub unsafe fn add_entity_to_audio_mix_group(entity: Entity, group_name: *const i8, p_2: f32) {
        call_native!(Void, 0x153973AB99FE8980u64, entity, group_name, p_2);
    } // 0x153973AB99FE8980 0x2BC93264 b323
    pub unsafe fn remove_entity_from_audio_mix_group(entity: Entity, p_1: f32) {
        call_native!(Void, 0x18EB48CFC41F2EA0u64, entity, p_1);
    } // 0x18EB48CFC41F2EA0 0x308ED0EC b323
    pub unsafe fn audio_is_music_playing() -> bool {
        call_native!(bool, 0x845FFC3A4FEEFA3Eu64)
    } // 0x845FFC3A4FEEFA3E  b323
    pub unsafe fn audio_is_scripted_music_playing() -> bool {
        call_native!(bool, 0x2DD39BF3E2F9C47Fu64)
    } // 0x2DD39BF3E2F9C47F  b463
    pub unsafe fn prepare_music_event(event_name: *const i8) -> bool {
        call_native!(bool, 0x1E5185B72EF5158Au64, event_name)
    } // 0x1E5185B72EF5158A 0x534A5C1C b323
    pub unsafe fn cancel_music_event(event_name: *const i8) -> bool {
        call_native!(bool, 0x5B17A90291133DA5u64, event_name)
    } // 0x5B17A90291133DA5 0x89FF942D b323
    pub unsafe fn trigger_music_event(event_name: *const i8) -> bool {
        call_native!(bool, 0x706D57B0F50DA710u64, event_name)
    } // 0x706D57B0F50DA710 0xB6094948 b323
    pub unsafe fn is_music_oneshot_playing() -> bool {
        call_native!(bool, 0xA097AB275061FB21u64)
    } // 0xA097AB275061FB21 0x2705C4D5 b323
    pub unsafe fn get_music_playtime() -> i32 {
        call_native!(i32, 0xE7A0D23DC414507Bu64)
    } // 0xE7A0D23DC414507B 0xD633C809 b323
    pub unsafe fn set_global_radio_signal_level(p_0: Any) {
        call_native!(Void, 0x159B7318403A1CD8u64, p_0);
    } // 0x159B7318403A1CD8  b1103
    pub unsafe fn record_broken_glass(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0xFBE20329593DEC9Du64, x, y, z, radius);
    } // 0xFBE20329593DEC9D 0x53FC3FEC b323
    pub unsafe fn clear_all_broken_glass() {
        call_native!(Void, 0xB32209EFFDC04913u64);
    } // 0xB32209EFFDC04913 0xE6B033BF b323
    pub unsafe fn script_overrides_wind_elevation(p_0: bool, p_1: Any) {
        call_native!(Void, 0x70B8EC8FC108A634u64, p_0, p_1);
    } // 0x70B8EC8FC108A634 0x95050CAD b323
    pub unsafe fn set_ped_walla_density(p_0: f32, p_1: f32) {
        call_native!(Void, 0x149AEE66F0CB3A99u64, p_0, p_1);
    } // 0x149AEE66F0CB3A99 0xE64F97A0 b323
    pub unsafe fn set_ped_interior_walla_density(p_0: f32, p_1: f32) {
        call_native!(Void, 0x8BF907833BE275DEu64, p_0, p_1);
    } // 0x8BF907833BE275DE 0x2CD26D69 b323
    pub unsafe fn force_ped_panic_walla() {
        call_native!(Void, 0x062D5EAD4DA2FA6Au64);
    } // 0x062D5EAD4DA2FA6A 0xD87AF337 b323
    pub unsafe fn prepare_alarm(alarm_name: *const i8) -> bool {
        call_native!(bool, 0x9D74AE343DB65533u64, alarm_name)
    } // 0x9D74AE343DB65533 0x084932E8 b323
    pub unsafe fn start_alarm(alarm_name: *const i8, p_2: bool) {
        call_native!(Void, 0x0355EF116C4C97B2u64, alarm_name, p_2);
    } // 0x0355EF116C4C97B2 0x703F524B b323
    pub unsafe fn stop_alarm(alarm_name: *const i8, toggle: bool) {
        call_native!(Void, 0xA1CADDCD98415A41u64, alarm_name, toggle);
    } // 0xA1CADDCD98415A41 0xF987BE8C b323
    pub unsafe fn stop_all_alarms(stop: bool) {
        call_native!(Void, 0x2F794A877ADD4C92u64, stop);
    } // 0x2F794A877ADD4C92 0xC3CB9DC6 b323
    pub unsafe fn is_alarm_playing(alarm_name: *const i8) -> bool {
        call_native!(bool, 0x226435CB96CCFC8Cu64, alarm_name)
    } // 0x226435CB96CCFC8C 0x9D8E1D23 b323
    pub unsafe fn get_vehicle_default_horn(vehicle: Vehicle) -> Hash {
        call_native!(Hash, 0x02165D55000219ACu64, vehicle)
    } // 0x02165D55000219AC 0xE84ABC19 b323
    pub unsafe fn get_vehicle_default_horn_ignore_mods(vehicle: Vehicle) -> Hash {
        call_native!(Hash, 0xACB5DCCA1EC76840u64, vehicle)
    } // 0xACB5DCCA1EC76840 0xFD4B5B3B b323
    pub unsafe fn reset_ped_audio_flags(ped: Ped) {
        call_native!(Void, 0xF54BB7B61036F335u64, ped);
    } // 0xF54BB7B61036F335 0xDF720C86 b323
    pub unsafe fn set_ped_footsteps_events_enabled(ped: Ped, toggle: bool) {
        call_native!(Void, 0x0653B735BFBDFE87u64, ped, toggle);
    } // 0x0653B735BFBDFE87  b1493
    pub unsafe fn set_ped_cloth_events_enabled(ped: Ped, toggle: bool) {
        call_native!(Void, 0x29DA3CA8D8B2692Du64, ped, toggle);
    } // 0x29DA3CA8D8B2692D  b1493
    pub unsafe fn override_player_ground_material(hash: Hash, toggle: bool) {
        call_native!(Void, 0xD2CC78CD3D0B50F9u64, hash, toggle);
    } // 0xD2CC78CD3D0B50F9 0xC307D531 b323
    pub unsafe fn use_footstep_script_sweeteners(ped: Ped, p_1: bool, hash: Hash) {
        call_native!(Void, 0xBF4DC1784BE94DFAu64, ped, p_1, hash);
    } // 0xBF4DC1784BE94DFA 0xD99E275B b323
    pub unsafe fn override_microphone_settings(hash: Hash, toggle: bool) {
        call_native!(Void, 0x75773E11BA459E90u64, hash, toggle);
    } // 0x75773E11BA459E90  b323
    pub unsafe fn freeze_microphone() {
        call_native!(Void, 0xD57AAAE0E2214D11u64);
    } // 0xD57AAAE0E2214D11 0x2B9D91E8 b323
    pub unsafe fn distant_cop_car_sirens(value: bool) {
        call_native!(Void, 0x552369F549563AD5u64, value);
    } // 0x552369F549563AD5 0x13EB5861 b323
    pub unsafe fn set_siren_can_be_controlled_by_audio(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x43FA0DFC5DF87815u64, vehicle, p_1);
    } // 0x43FA0DFC5DF87815 0x7BED1872 b323
    pub unsafe fn enable_stunt_jump_audio() {
        call_native!(Void, 0xB81CF134AEB56FFBu64);
    } // 0xB81CF134AEB56FFB  b791
    pub unsafe fn set_audio_flag(flag_name: *const i8, toggle: bool) {
        call_native!(Void, 0xB9EFD5C25018725Au64, flag_name, toggle);
    } // 0xB9EFD5C25018725A 0x1C09C9E0 b323
    pub unsafe fn prepare_synchronized_audio_event(audio_event: *const i8, p_1: Any) -> bool {
        call_native!(bool, 0xC7ABCACA4985A766u64, audio_event, p_1)
    } // 0xC7ABCACA4985A766 0xE1D91FD0 b323
    pub unsafe fn prepare_synchronized_audio_event_for_scene(
        scene_i_d: i32,
        audio_event: *const i8,
    ) -> bool {
        call_native!(bool, 0x029FE7CD1B7E2E75u64, scene_i_d, audio_event)
    } // 0x029FE7CD1B7E2E75 0x7652DD49 b323
    pub unsafe fn play_synchronized_audio_event(scene_i_d: i32) -> bool {
        call_native!(bool, 0x8B2FD4560E55DD2Du64, scene_i_d)
    } // 0x8B2FD4560E55DD2D 0x507F3241 b323
    pub unsafe fn stop_synchronized_audio_event(scene_i_d: i32) -> bool {
        call_native!(bool, 0x92D6A88E64A94430u64, scene_i_d)
    } // 0x92D6A88E64A94430 0xADEED2B4 b323
    pub unsafe fn init_synch_scene_audio_with_position(
        audio_event: *const i8,
        x: f32,
        y: f32,
        z: f32,
    ) {
        call_native!(Void, 0xC8EDE9BDBCCBA6D4u64, audio_event, x, y, z);
    } // 0xC8EDE9BDBCCBA6D4 0x55A21772 b323
    pub unsafe fn init_synch_scene_audio_with_entity(audio_event: *const i8, entity: Entity) {
        call_native!(Void, 0x950A154B8DAB6185u64, audio_event, entity);
    } // 0x950A154B8DAB6185 0xA17F9AB0 b323
    pub unsafe fn set_audio_special_effect_mode(mode: i32) {
        call_native!(Void, 0x12561FCBB62D5B9Cu64, mode);
    } // 0x12561FCBB62D5B9C 0x62B43677 b323
    pub unsafe fn set_portal_settings_override(p_0: *const i8, p_1: *const i8) {
        call_native!(Void, 0x044DBAD7A7FA2BE5u64, p_0, p_1);
    } // 0x044DBAD7A7FA2BE5 0x8AD670EC b323
    pub unsafe fn remove_portal_settings_override(p_0: *const i8) {
        call_native!(Void, 0xB4BBFD9CD8B3922Bu64, p_0);
    } // 0xB4BBFD9CD8B3922B 0xD24B4D0C b323
    pub unsafe fn stop_smoke_grenade_explosion_sounds() {
        call_native!(Void, 0xE4E6DD5566D28C82u64);
    } // 0xE4E6DD5566D28C82 0x7262B5BA b323
    pub unsafe fn get_music_vol_slider() -> i32 {
        call_native!(i32, 0x3A48AB4445D499BEu64)
    } // 0x3A48AB4445D499BE 0x93A44A1F b323
    pub unsafe fn request_tennis_banks(ped: Ped) {
        call_native!(Void, 0x4ADA3F19BE4A6047u64, ped);
    } // 0x4ADA3F19BE4A6047 0x13777A0B b323
    pub unsafe fn unrequest_tennis_banks() {
        call_native!(Void, 0x0150B6FF25A9E2E5u64);
    } // 0x0150B6FF25A9E2E5 0x1134F68B b323
    pub unsafe fn set_skip_minigun_spin_up_audio(p_0: bool) {
        call_native!(Void, 0xBEF34B1D9624D5DDu64, p_0);
    } // 0xBEF34B1D9624D5DD 0xE0047BFD b323
    pub unsafe fn stop_cutscene_audio() {
        call_native!(Void, 0x806058BBDC136E06u64);
    } // 0x806058BBDC136E06 0x55461BE6 b323
    pub unsafe fn has_loaded_mp_data_set() -> bool {
        call_native!(bool, 0x544810ED9DB6BBE6u64)
    } // 0x544810ED9DB6BBE6  b323
    pub unsafe fn has_loaded_sp_data_set() -> bool {
        call_native!(bool, 0x5B50ABB1FE3746F4u64)
    } // 0x5B50ABB1FE3746F4  b323
    pub unsafe fn get_vehicle_horn_sound_index(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xD53F3A29BCE2580Eu64, vehicle)
    } // 0xD53F3A29BCE2580E  b1365
    pub unsafe fn set_vehicle_horn_sound_index(vehicle: Vehicle, value: i32) {
        call_native!(Void, 0x0350E7E17BA767D0u64, vehicle, value);
    } // 0x0350E7E17BA767D0  b1365
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod brain {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn add_script_to_random_ped(name: *const i8, model: Hash, p_2: f32, p_3: f32) {
        call_native!(Void, 0x4EE5367468A65CCCu64, name, model, p_2, p_3);
    } // 0x4EE5367468A65CCC 0xECC76C3D b323
    pub unsafe fn register_object_script_brain(
        script_name: *const i8,
        model_hash: Hash,
        p_2: i32,
        activation_range: f32,
        p_4: i32,
        p_5: i32,
    ) {
        call_native!(
            Void,
            0x0BE84C318BA6EC22u64,
            script_name,
            model_hash,
            p_2,
            activation_range,
            p_4,
            p_5
        );
    } // 0x0BE84C318BA6EC22 0xB6BCC608 b323
    pub unsafe fn is_object_within_brain_activation_range(object: Object) -> bool {
        call_native!(bool, 0xCCBA154209823057u64, object)
    } // 0xCCBA154209823057 0xBA4CAA56 b323
    pub unsafe fn register_world_point_script_brain(
        script_name: *const i8,
        activation_range: f32,
        p_2: i32,
    ) {
        call_native!(
            Void,
            0x3CDC7136613284BDu64,
            script_name,
            activation_range,
            p_2
        );
    } // 0x3CDC7136613284BD 0x725D91F7 b323
    pub unsafe fn is_world_point_within_brain_activation_range() -> bool {
        call_native!(bool, 0xC5042CC6F5E3D450u64)
    } // 0xC5042CC6F5E3D450 0x2CF305A0 b323
    pub unsafe fn enable_script_brain_set(brain_set: i32) {
        call_native!(Void, 0x67AA4D73F0CFA86Bu64, brain_set);
    } // 0x67AA4D73F0CFA86B 0x2765919F b323
    pub unsafe fn disable_script_brain_set(brain_set: i32) {
        call_native!(Void, 0x14D8518E9760F08Fu64, brain_set);
    } // 0x14D8518E9760F08F 0xFBD13FAD b323
    pub unsafe fn reactivate_all_world_brains_that_are_waiting_till_out_of_range() {
        call_native!(Void, 0x0B40ED49D7D6FF84u64);
    } // 0x0B40ED49D7D6FF84 0x19B27825 b323
    pub unsafe fn reactivate_all_object_brains_that_are_waiting_till_out_of_range() {
        call_native!(Void, 0x4D953DF78EBF8158u64);
    } // 0x4D953DF78EBF8158 0xF3A3AB08 b323
    pub unsafe fn reactivate_named_world_brains_waiting_till_out_of_range(script_name: *const i8) {
        call_native!(Void, 0x6D6840CEE8845831u64, script_name);
    } // 0x6D6840CEE8845831 0x949FE53E b323
    pub unsafe fn reactivate_named_object_brains_waiting_till_out_of_range(script_name: *const i8) {
        call_native!(Void, 0x6E91B04E08773030u64, script_name);
    } // 0x6E91B04E08773030 0x29CE8BAA b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod cam {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn render_script_cams(
        render: bool,
        ease: bool,
        ease_time: i32,
        p_3: bool,
        p_4: bool,
        p_5: Any,
    ) {
        call_native!(
            Void,
            0x07E5B515DB0636FCu64,
            render,
            ease,
            ease_time,
            p_3,
            p_4,
            p_5
        );
    } // 0x07E5B515DB0636FC 0x74337969 b323
    pub unsafe fn stop_rendering_script_cams_using_catch_up(
        render: bool,
        p_1: f32,
        p_2: i32,
        p_3: Any,
    ) {
        call_native!(Void, 0xC819F3CBB62BF692u64, render, p_1, p_2, p_3);
    } // 0xC819F3CBB62BF692 0xD3C08183 b323
    pub unsafe fn create_cam(cam_name: *const i8, p_1: bool) -> Cam {
        call_native!(Cam, 0xC3981DCE61D9E13Fu64, cam_name, p_1)
    } // 0xC3981DCE61D9E13F 0xE9BF2A7D b323
    pub unsafe fn create_cam_with_params(
        cam_name: *const i8,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        fov: f32,
        p_8: bool,
        p_9: i32,
    ) -> Cam {
        call_native!(
            Cam,
            0xB51194800B257161u64,
            cam_name,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            fov,
            p_8,
            p_9
        )
    } // 0xB51194800B257161 0x23B02F15 b323
    pub unsafe fn create_camera(cam_hash: Hash, p_1: bool) -> Cam {
        call_native!(Cam, 0x5E3CF89C6BCCA67Du64, cam_hash, p_1)
    } // 0x5E3CF89C6BCCA67D 0x5D6739AE b323
    pub unsafe fn create_camera_with_params(
        cam_hash: Hash,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        fov: f32,
        p_8: bool,
        p_9: Any,
    ) -> Cam {
        call_native!(
            Cam,
            0x6ABFA3E16460F22Du64,
            cam_hash,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            fov,
            p_8,
            p_9
        )
    } // 0x6ABFA3E16460F22D 0x0688BE9A b323
    pub unsafe fn destroy_cam(cam: Cam, b_script_host_cam: bool) {
        call_native!(Void, 0x865908C81A2C22E9u64, cam, b_script_host_cam);
    } // 0x865908C81A2C22E9 0xC39302BD b323
    pub unsafe fn destroy_all_cams(b_script_host_cam: bool) {
        call_native!(Void, 0x8E5FB15663F79120u64, b_script_host_cam);
    } // 0x8E5FB15663F79120 0x10C151CE b323
    pub unsafe fn does_cam_exist(cam: Cam) -> bool {
        call_native!(bool, 0xA7A932170592B50Eu64, cam)
    } // 0xA7A932170592B50E 0x1EF89DC0 b323
    pub unsafe fn set_cam_active(cam: Cam, active: bool) {
        call_native!(Void, 0x026FB97D0A425F84u64, cam, active);
    } // 0x026FB97D0A425F84 0x064659C2 b323
    pub unsafe fn is_cam_active(cam: Cam) -> bool {
        call_native!(bool, 0xDFB2B516207D3534u64, cam)
    } // 0xDFB2B516207D3534 0x4B58F177 b323
    pub unsafe fn is_cam_rendering(cam: Cam) -> bool {
        call_native!(bool, 0x02EC0AF5C5A49B7Au64, cam)
    } // 0x02EC0AF5C5A49B7A 0x6EC6B5B2 b323
    pub unsafe fn get_rendering_cam() -> Cam {
        call_native!(Cam, 0x5234F9F10919EABAu64)
    } // 0x5234F9F10919EABA 0x0FCF4DF1 b323
    pub unsafe fn get_cam_coord(cam: Cam) -> Vector3 {
        call_native!(Vector3, 0xBAC038F7459AE5AEu64, cam)
    } // 0xBAC038F7459AE5AE 0x7C40F09C b323
    pub unsafe fn get_cam_rot(cam: Cam, rotation_order: i32) -> Vector3 {
        call_native!(Vector3, 0x7D304C1C955E3E12u64, cam, rotation_order)
    } // 0x7D304C1C955E3E12 0xDAC84C9F b323
    pub unsafe fn get_cam_fov(cam: Cam) -> f32 {
        call_native!(f32, 0xC3330A45CCCDB26Au64, cam)
    } // 0xC3330A45CCCDB26A 0xD6E9FCF5 b323
    pub unsafe fn get_cam_near_clip(cam: Cam) -> f32 {
        call_native!(f32, 0xC520A34DAFBF24B1u64, cam)
    } // 0xC520A34DAFBF24B1 0xCFCD35EE b323
    pub unsafe fn get_cam_far_clip(cam: Cam) -> f32 {
        call_native!(f32, 0xB60A9CFEB21CA6AAu64, cam)
    } // 0xB60A9CFEB21CA6AA 0x09F119B8 b323
    pub unsafe fn get_cam_near_dof(cam: Cam) -> f32 {
        call_native!(f32, 0xC2612D223D915A1Cu64, cam)
    } // 0xC2612D223D915A1C  b2699
    pub unsafe fn get_cam_far_dof(cam: Cam) -> f32 {
        call_native!(f32, 0x255F8DAFD540D397u64, cam)
    } // 0x255F8DAFD540D397 0x98C5CCE9 b323
    pub unsafe fn get_cam_dof_strength(cam: Cam) -> f32 {
        call_native!(f32, 0x06D153C0B99B6128u64, cam)
    } // 0x06D153C0B99B6128  b2699
    pub unsafe fn set_cam_params(
        cam: Cam,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        field_of_view: f32,
        p_8: Any,
        p_9: i32,
        p_1_0: i32,
        p_1_1: i32,
    ) {
        call_native!(
            Void,
            0xBFD8727AEA3CCEBAu64,
            cam,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            field_of_view,
            p_8,
            p_9,
            p_1_0,
            p_1_1
        );
    } // 0xBFD8727AEA3CCEBA 0x2167CEBF b323
    pub unsafe fn set_cam_coord(cam: Cam, pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0x4D41783FB745E42Eu64, cam, pos_x, pos_y, pos_z);
    } // 0x4D41783FB745E42E 0x7A8053AF b323
    pub unsafe fn set_cam_rot(cam: Cam, rot_x: f32, rot_y: f32, rot_z: f32, rotation_order: i32) {
        call_native!(
            Void,
            0x85973643155D0B07u64,
            cam,
            rot_x,
            rot_y,
            rot_z,
            rotation_order
        );
    } // 0x85973643155D0B07 0xEE38B3C1 b323
    pub unsafe fn set_cam_fov(cam: Cam, field_of_view: f32) {
        call_native!(Void, 0xB13C14F66A00D047u64, cam, field_of_view);
    } // 0xB13C14F66A00D047 0xD3D5D74F b323
    pub unsafe fn set_cam_near_clip(cam: Cam, near_clip: f32) {
        call_native!(Void, 0xC7848EFCCC545182u64, cam, near_clip);
    } // 0xC7848EFCCC545182 0x46DB13B1 b323
    pub unsafe fn set_cam_far_clip(cam: Cam, far_clip: f32) {
        call_native!(Void, 0xAE306F2A904BF86Eu64, cam, far_clip);
    } // 0xAE306F2A904BF86E 0x0D23E381 b323
    pub unsafe fn force_cam_far_clip(cam: Cam, p_1: f32) {
        call_native!(Void, 0xAABD62873FFB1A33u64, cam, p_1);
    } // 0xAABD62873FFB1A33  b2189
    pub unsafe fn set_cam_motion_blur_strength(cam: Cam, strength: f32) {
        call_native!(Void, 0x6F0F77FBA9A8F2E6u64, cam, strength);
    } // 0x6F0F77FBA9A8F2E6 0xFD6E0D67 b323
    pub unsafe fn set_cam_near_dof(cam: Cam, near_d_o_f: f32) {
        call_native!(Void, 0x3FA4BF0A7AB7DE2Cu64, cam, near_d_o_f);
    } // 0x3FA4BF0A7AB7DE2C 0xF28254DF b323
    pub unsafe fn set_cam_far_dof(cam: Cam, far_d_o_f: f32) {
        call_native!(Void, 0xEDD91296CD01AEE0u64, cam, far_d_o_f);
    } // 0xEDD91296CD01AEE0 0x58515E8E b323
    pub unsafe fn set_cam_dof_strength(cam: Cam, dof_strength: f32) {
        call_native!(Void, 0x5EE29B4D7D5DF897u64, cam, dof_strength);
    } // 0x5EE29B4D7D5DF897 0x3CC4EB3F b323
    pub unsafe fn set_cam_dof_planes(cam: Cam, p_1: f32, p_2: f32, p_3: f32, p_4: f32) {
        call_native!(Void, 0x3CF48F6F96E749DCu64, cam, p_1, p_2, p_3, p_4);
    } // 0x3CF48F6F96E749DC 0xAD6C2B8F b323
    pub unsafe fn set_cam_use_shallow_dof_mode(cam: Cam, toggle: bool) {
        call_native!(Void, 0x16A96863A17552BBu64, cam, toggle);
    } // 0x16A96863A17552BB 0x8306C256 b323
    pub unsafe fn set_use_hi_dof() {
        call_native!(Void, 0xA13B0222F3D94A94u64);
    } // 0xA13B0222F3D94A94 0x8BBF2950 b323
    pub unsafe fn set_use_hi_dof_on_synced_scene_this_update() {
        call_native!(Void, 0x731A880555DA3647u64);
    } // 0x731A880555DA3647  b2699
    pub unsafe fn set_cam_dof_overridden_focus_distance(camera: Cam, p_1: f32) {
        call_native!(Void, 0xF55E4046F6F831DCu64, camera, p_1);
    } // 0xF55E4046F6F831DC  b323
    pub unsafe fn set_cam_dof_overridden_focus_distance_blend_level(p_0: Any, p_1: f32) {
        call_native!(Void, 0xE111A7C0D200CBC5u64, p_0, p_1);
    } // 0xE111A7C0D200CBC5  b323
    pub unsafe fn set_cam_dof_fnumber_of_lens(camera: Cam, p_1: f32) {
        call_native!(Void, 0x7DD234D6F3914C5Bu64, camera, p_1);
    } // 0x7DD234D6F3914C5B  b323
    pub unsafe fn set_cam_dof_focal_length_multiplier(camera: Cam, multiplier: f32) {
        call_native!(Void, 0x47B595D60664CFFAu64, camera, multiplier);
    } // 0x47B595D60664CFFA  b1011
    pub unsafe fn set_cam_dof_focus_distance_bias(camera: Cam, p_1: f32) {
        call_native!(Void, 0xC669EEA5D031B7DEu64, camera, p_1);
    } // 0xC669EEA5D031B7DE  b323
    pub unsafe fn set_cam_dof_max_near_in_focus_distance(camera: Cam, p_1: f32) {
        call_native!(Void, 0xC3654A441402562Du64, camera, p_1);
    } // 0xC3654A441402562D  b323
    pub unsafe fn set_cam_dof_max_near_in_focus_distance_blend_level(camera: Cam, p_1: f32) {
        call_native!(Void, 0x2C654B4943BDDF7Cu64, camera, p_1);
    } // 0x2C654B4943BDDF7C  b323
    pub unsafe fn set_cam_dof_should_keep_look_at_target_in_focus(camera: Cam, state: bool) {
        call_native!(Void, 0x7CF3AF51DCFE4108u64, camera, state);
    } // 0x7CF3AF51DCFE4108  b2944
    pub unsafe fn attach_cam_to_entity(
        cam: Cam,
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        is_relative: bool,
    ) {
        call_native!(
            Void,
            0xFEDB7D269E8C60E3u64,
            cam,
            entity,
            x_offset,
            y_offset,
            z_offset,
            is_relative
        );
    } // 0xFEDB7D269E8C60E3 0xAD7C45F6 b323
    pub unsafe fn attach_cam_to_ped_bone(
        cam: Cam,
        ped: Ped,
        bone_index: i32,
        x: f32,
        y: f32,
        z: f32,
        heading: bool,
    ) {
        call_native!(
            Void,
            0x61A3DBA14AB7F411u64,
            cam,
            ped,
            bone_index,
            x,
            y,
            z,
            heading
        );
    } // 0x61A3DBA14AB7F411 0x506BB35C b323
    pub unsafe fn hard_attach_cam_to_ped_bone(
        cam: Cam,
        ped: Ped,
        bone_index: i32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: bool,
    ) {
        call_native!(
            Void,
            0x149916F50C34A40Du64,
            cam,
            ped,
            bone_index,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0x149916F50C34A40D  b1180
    pub unsafe fn hard_attach_cam_to_entity(
        cam: Cam,
        entity: Entity,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        is_relative: bool,
    ) {
        call_native!(
            Void,
            0x202A5ED9CE01D6E7u64,
            cam,
            entity,
            x_rot,
            y_rot,
            z_rot,
            x_offset,
            y_offset,
            z_offset,
            is_relative
        );
    } // 0x202A5ED9CE01D6E7  b2189
    pub unsafe fn attach_cam_to_vehicle_bone(
        cam: Cam,
        vehicle: Vehicle,
        bone_index: i32,
        relative_rotation: bool,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        fixed_direction: bool,
    ) {
        call_native!(
            Void,
            0x8DB3F12A02CAEF72u64,
            cam,
            vehicle,
            bone_index,
            relative_rotation,
            rot_x,
            rot_y,
            rot_z,
            offset_x,
            offset_y,
            offset_z,
            fixed_direction
        );
    } // 0x8DB3F12A02CAEF72  b1290
    pub unsafe fn detach_cam(cam: Cam) {
        call_native!(Void, 0xA2FABBE87F4BAD82u64, cam);
    } // 0xA2FABBE87F4BAD82 0xF4FBF14A b323
    pub unsafe fn set_cam_inherit_roll_vehicle(cam: Cam, p_1: bool) {
        call_native!(Void, 0x45F1DE9C34B93AE6u64, cam, p_1);
    } // 0x45F1DE9C34B93AE6 0xE4BD5342 b323
    pub unsafe fn point_cam_at_coord(cam: Cam, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xF75497BB865F0803u64, cam, x, y, z);
    } // 0xF75497BB865F0803 0x914BC21A b323
    pub unsafe fn point_cam_at_entity(
        cam: Cam,
        entity: Entity,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: bool,
    ) {
        call_native!(Void, 0x5640BFF86B16E8DCu64, cam, entity, p_2, p_3, p_4, p_5);
    } // 0x5640BFF86B16E8DC 0x7597A0F7 b323
    pub unsafe fn point_cam_at_ped_bone(
        cam: Cam,
        ped: Ped,
        bone_index: i32,
        x: f32,
        y: f32,
        z: f32,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0x68B2B5F33BA63C41u64,
            cam,
            ped,
            bone_index,
            x,
            y,
            z,
            p_6
        );
    } // 0x68B2B5F33BA63C41 0x09F47049 b323
    pub unsafe fn stop_cam_pointing(cam: Cam) {
        call_native!(Void, 0xF33AB75780BA57DEu64, cam);
    } // 0xF33AB75780BA57DE 0x5435F6A5 b323
    pub unsafe fn set_cam_affects_aiming(cam: Cam, toggle: bool) {
        call_native!(Void, 0x8C1DC7770C51DC8Du64, cam, toggle);
    } // 0x8C1DC7770C51DC8D 0x0C74F9AF b323
    pub unsafe fn set_cam_controls_mini_map_heading(cam: Cam, toggle: bool) {
        call_native!(Void, 0x661B5C8654ADD825u64, cam, toggle);
    } // 0x661B5C8654ADD825 0xE1A0B2F1 b323
    pub unsafe fn set_cam_is_inside_vehicle(cam: Cam, toggle: bool) {
        call_native!(Void, 0xA2767257A320FC82u64, cam, toggle);
    } // 0xA2767257A320FC82  b323
    pub unsafe fn allow_motion_blur_decay(p_0: Any, p_1: bool) {
        call_native!(Void, 0x271017B9BA825366u64, p_0, p_1);
    } // 0x271017B9BA825366 0x43220969 b323
    pub unsafe fn set_cam_debug_name(camera: Cam, name: *const i8) {
        call_native!(Void, 0x1B93E0107865DD40u64, camera, name);
    } // 0x1B93E0107865DD40 0x9B00DF3F b323
    pub unsafe fn get_debug_cam() -> Cam {
        call_native!(Cam, 0x77C3CEC46BE286F6u64)
    } // 0x77C3CEC46BE286F6  b2372
    pub unsafe fn add_cam_spline_node(
        camera: Cam,
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        length: i32,
        smoothing_style: i32,
        rotation_order: i32,
    ) {
        call_native!(
            Void,
            0x8609C75EC438FB3Bu64,
            camera,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            length,
            smoothing_style,
            rotation_order
        );
    } // 0x8609C75EC438FB3B 0xAD3C7EAA b323
    pub unsafe fn add_cam_spline_node_using_camera_frame(
        cam: Cam,
        cam_2: Cam,
        length: i32,
        p_3: i32,
    ) {
        call_native!(Void, 0x0A9F2A468B328E74u64, cam, cam_2, length, p_3);
    } // 0x0A9F2A468B328E74 0x30510511 b323
    pub unsafe fn add_cam_spline_node_using_camera(cam: Cam, cam_2: Cam, length: i32, p_3: i32) {
        call_native!(Void, 0x0FB82563989CF4FBu64, cam, cam_2, length, p_3);
    } // 0x0FB82563989CF4FB 0xBA6C085B b323
    pub unsafe fn add_cam_spline_node_using_gameplay_frame(cam: Cam, length: i32, p_2: i32) {
        call_native!(Void, 0x609278246A29CA34u64, cam, length, p_2);
    } // 0x609278246A29CA34 0xB4737F03 b323
    pub unsafe fn set_cam_spline_phase(cam: Cam, p_1: f32) {
        call_native!(Void, 0x242B5874F0A4E052u64, cam, p_1);
    } // 0x242B5874F0A4E052 0xF0AED233 b323
    pub unsafe fn get_cam_spline_phase(cam: Cam) -> f32 {
        call_native!(f32, 0xB5349E36C546509Au64, cam)
    } // 0xB5349E36C546509A 0x39784DD9 b323
    pub unsafe fn get_cam_spline_node_phase(cam: Cam) -> f32 {
        call_native!(f32, 0xD9D0E694C8282C96u64, cam)
    } // 0xD9D0E694C8282C96 0x7B9522F6 b323
    pub unsafe fn set_cam_spline_duration(cam: Cam, time_duration: i32) {
        call_native!(Void, 0x1381539FEE034CDAu64, cam, time_duration);
    } // 0x1381539FEE034CDA 0x3E91FC8A b323
    pub unsafe fn set_cam_spline_smoothing_style(cam: Cam, smoothing_style: i32) {
        call_native!(Void, 0xD1B0F412F109EA5Du64, cam, smoothing_style);
    } // 0xD1B0F412F109EA5D 0x15E141CE b323
    pub unsafe fn get_cam_spline_node_index(cam: Cam) -> i32 {
        call_native!(i32, 0xB22B17DF858716A6u64, cam)
    } // 0xB22B17DF858716A6 0xF8AEB6BD b323
    pub unsafe fn set_cam_spline_node_ease(cam: Cam, easing_function: i32, p_2: i32, p_3: f32) {
        call_native!(Void, 0x83B8201ED82A9A2Du64, cam, easing_function, p_2, p_3);
    } // 0x83B8201ED82A9A2D 0x21D275DA b323
    pub unsafe fn set_cam_spline_node_velocity_scale(cam: Cam, p_1: i32, scale: f32) {
        call_native!(Void, 0xA6385DEB180F319Fu64, cam, p_1, scale);
    } // 0xA6385DEB180F319F 0xA3BD9E94 b323
    pub unsafe fn override_cam_spline_velocity(cam: Cam, p_1: i32, p_2: f32, p_3: f32) {
        call_native!(Void, 0x40B62FA033EB0346u64, cam, p_1, p_2, p_3);
    } // 0x40B62FA033EB0346 0x326A17E2 b323
    pub unsafe fn override_cam_spline_motion_blur(cam: Cam, p_1: i32, p_2: f32, p_3: f32) {
        call_native!(Void, 0x7DCF7C708D292D55u64, cam, p_1, p_2, p_3);
    } // 0x7DCF7C708D292D55 0x633179E6 b323
    pub unsafe fn set_cam_spline_node_extra_flags(cam: Cam, p_1: i32, flags: i32) {
        call_native!(Void, 0x7BF1A54AE67AC070u64, cam, p_1, flags);
    } // 0x7BF1A54AE67AC070 0xC90B2DDC b323
    pub unsafe fn is_cam_spline_paused(cam: Cam) -> bool {
        call_native!(bool, 0x0290F35C0AD97864u64, cam)
    } // 0x0290F35C0AD97864 0x60B34FF5 b323
    pub unsafe fn set_cam_active_with_interp(
        cam_to: Cam,
        cam_from: Cam,
        duration: i32,
        ease_location: i32,
        ease_rotation: i32,
    ) {
        call_native!(
            Void,
            0x9FBDA379383A52A4u64,
            cam_to,
            cam_from,
            duration,
            ease_location,
            ease_rotation
        );
    } // 0x9FBDA379383A52A4 0x7983E7F0 b323
    pub unsafe fn is_cam_interpolating(cam: Cam) -> bool {
        call_native!(bool, 0x036F97C908C2B52Cu64, cam)
    } // 0x036F97C908C2B52C 0x7159CB5D b323
    pub unsafe fn shake_cam(cam: Cam, _type: *const i8, amplitude: f32) {
        call_native!(Void, 0x6A25241C340D3822u64, cam, _type, amplitude);
    } // 0x6A25241C340D3822 0x1D4211B0 b323
    pub unsafe fn animated_shake_cam(
        cam: Cam,
        p_1: *const i8,
        p_2: *const i8,
        p_3: *const i8,
        amplitude: f32,
    ) {
        call_native!(Void, 0xA2746EEAE3E577CDu64, cam, p_1, p_2, p_3, amplitude);
    } // 0xA2746EEAE3E577CD 0xE1168767 b323
    pub unsafe fn is_cam_shaking(cam: Cam) -> bool {
        call_native!(bool, 0x6B24BFE83A2BE47Bu64, cam)
    } // 0x6B24BFE83A2BE47B 0x0961FD9B b323
    pub unsafe fn set_cam_shake_amplitude(cam: Cam, amplitude: f32) {
        call_native!(Void, 0xD93DB43B82BC0D00u64, cam, amplitude);
    } // 0xD93DB43B82BC0D00 0x60FF6382 b323
    pub unsafe fn stop_cam_shaking(cam: Cam, p_1: bool) {
        call_native!(Void, 0xBDECF64367884AC3u64, cam, p_1);
    } // 0xBDECF64367884AC3 0x40D0EB87 b323
    pub unsafe fn shake_script_global(p_0: *const i8, p_1: f32) {
        call_native!(Void, 0xF4C8CF9E353AFECAu64, p_0, p_1);
    } // 0xF4C8CF9E353AFECA 0x2B0F05CD b323
    pub unsafe fn animated_shake_script_global(
        p_0: *const i8,
        p_1: *const i8,
        p_2: *const i8,
        p_3: f32,
    ) {
        call_native!(Void, 0xC2EAE3FB8CDBED31u64, p_0, p_1, p_2, p_3);
    } // 0xC2EAE3FB8CDBED31 0xCB75BD9C b323
    pub unsafe fn is_script_global_shaking() -> bool {
        call_native!(bool, 0xC912AF078AF19212u64)
    } // 0xC912AF078AF19212 0x6AEFE6A5 b323
    pub unsafe fn stop_script_global_shaking(p_0: bool) {
        call_native!(Void, 0x1C9D7949FA533490u64, p_0);
    } // 0x1C9D7949FA533490 0x26FCFB96 b323
    pub unsafe fn trigger_vehicle_part_broken_camera_shake(vehicle: Vehicle, p_1: i32, p_2: f32) {
        call_native!(Void, 0x5D96CFB59DA076A0u64, vehicle, p_1, p_2);
    } // 0x5D96CFB59DA076A0  b2060
    pub unsafe fn play_cam_anim(
        cam: Cam,
        anim_name: *const i8,
        anim_dictionary: *const i8,
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        p_9: bool,
        p_1_0: i32,
    ) -> bool {
        call_native!(
            bool,
            0x9A2D0FB2E7852392u64,
            cam,
            anim_name,
            anim_dictionary,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            p_9,
            p_1_0
        )
    } // 0x9A2D0FB2E7852392 0xBCEFB87E b323
    pub unsafe fn is_cam_playing_anim(
        cam: Cam,
        anim_name: *const i8,
        anim_dictionary: *const i8,
    ) -> bool {
        call_native!(bool, 0xC90621D8A0CEECF2u64, cam, anim_name, anim_dictionary)
    } // 0xC90621D8A0CEECF2 0xB998CB49 b323
    pub unsafe fn set_cam_anim_current_phase(cam: Cam, phase: f32) {
        call_native!(Void, 0x4145A4C44FF3B5A6u64, cam, phase);
    } // 0x4145A4C44FF3B5A6 0x3CB1D17F b323
    pub unsafe fn get_cam_anim_current_phase(cam: Cam) -> f32 {
        call_native!(f32, 0xA10B2DB49E92A6B0u64, cam)
    } // 0xA10B2DB49E92A6B0 0x345F72D0 b323
    pub unsafe fn play_synchronized_cam_anim(
        p_0: Any,
        p_1: Any,
        anim_name: *const i8,
        anim_dictionary: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0xE32EFE9AB4A9AA0Cu64,
            p_0,
            p_1,
            anim_name,
            anim_dictionary
        )
    } // 0xE32EFE9AB4A9AA0C 0x9458459E b323
    pub unsafe fn set_fly_cam_horizontal_response(cam: Cam, p_1: f32, p_2: f32, p_3: f32) {
        call_native!(Void, 0x503F5920162365B2u64, cam, p_1, p_2, p_3);
    } // 0x503F5920162365B2 0x56F9ED27 b323
    pub unsafe fn set_fly_cam_vertical_response(cam: Cam, p_1: f32, p_2: f32, p_3: f32) {
        call_native!(Void, 0xE827B9382CFB41BAu64, cam, p_1, p_2, p_3);
    } // 0xE827B9382CFB41BA  b791
    pub unsafe fn set_fly_cam_max_height(cam: Cam, height: f32) {
        call_native!(Void, 0xF9D02130ECDD1D77u64, cam, height);
    } // 0xF9D02130ECDD1D77 0x71570DBA b323
    pub unsafe fn set_fly_cam_coord_and_constrain(cam: Cam, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xC91C6C55199308CAu64, cam, x, y, z);
    } // 0xC91C6C55199308CA 0x60B345DE b323
    pub unsafe fn set_fly_cam_vertical_controls_this_update(cam: Cam) {
        call_native!(Void, 0xC8B5C4A79CC18B94u64, cam);
    } // 0xC8B5C4A79CC18B94 0x44473EFC b323
    pub unsafe fn was_fly_cam_constrained_on_previous_udpate(cam: Cam) -> bool {
        call_native!(bool, 0x5C48A1D6E3B33179u64, cam)
    } // 0x5C48A1D6E3B33179 0xDA931D65 b323
    pub unsafe fn is_screen_faded_out() -> bool {
        call_native!(bool, 0xB16FCE9DDC7BA182u64)
    } // 0xB16FCE9DDC7BA182 0x9CAA05FA b323
    pub unsafe fn is_screen_faded_in() -> bool {
        call_native!(bool, 0x5A859503B0C08678u64)
    } // 0x5A859503B0C08678 0x4F37276D b323
    pub unsafe fn is_screen_fading_out() -> bool {
        call_native!(bool, 0x797AC7CB535BA28Fu64)
    } // 0x797AC7CB535BA28F 0x79275A57 b323
    pub unsafe fn is_screen_fading_in() -> bool {
        call_native!(bool, 0x5C544BC6C57AC575u64)
    } // 0x5C544BC6C57AC575 0xC7C82800 b323
    pub unsafe fn do_screen_fade_in(duration: i32) {
        call_native!(Void, 0xD4E8E24955024033u64, duration);
    } // 0xD4E8E24955024033 0x66C1BDEE b323
    pub unsafe fn do_screen_fade_out(duration: i32) {
        call_native!(Void, 0x891B5B39AC6302AFu64, duration);
    } // 0x891B5B39AC6302AF 0x89D01805 b323
    pub unsafe fn set_widescreen_borders(p_0: bool, p_1: i32) {
        call_native!(Void, 0xDCD4EA924F42D01Au64, p_0, p_1);
    } // 0xDCD4EA924F42D01A 0x1A75DC9A b323
    pub unsafe fn are_widescreen_borders_active() -> bool {
        call_native!(bool, 0x4879E4FE39074CDFu64)
    } // 0x4879E4FE39074CDF  b372
    pub unsafe fn get_gameplay_cam_coord() -> Vector3 {
        call_native!(Vector3, 0x14D6F5678D8F1B37u64)
    } // 0x14D6F5678D8F1B37 0x9388CF79 b323
    pub unsafe fn get_gameplay_cam_rot(rotation_order: i32) -> Vector3 {
        call_native!(Vector3, 0x837765A25378F0BBu64, rotation_order)
    } // 0x837765A25378F0BB 0x13A010B5 b323
    pub unsafe fn get_gameplay_cam_fov() -> f32 {
        call_native!(f32, 0x65019750A0324133u64)
    } // 0x65019750A0324133 0x4D6B3BFA b323
    pub unsafe fn set_gameplay_cam_motion_blur_scaling_this_update(p_0: f32) {
        call_native!(Void, 0x487A82C650EB7799u64, p_0);
    } // 0x487A82C650EB7799 0xA6E73135 b323
    pub unsafe fn set_gameplay_cam_max_motion_blur_strength_this_update(p_0: f32) {
        call_native!(Void, 0x0225778816FDC28Cu64, p_0);
    } // 0x0225778816FDC28C 0x1126E37C b323
    pub unsafe fn get_gameplay_cam_relative_heading() -> f32 {
        call_native!(f32, 0x743607648ADD4587u64)
    } // 0x743607648ADD4587 0xCAF839C2 b323
    pub unsafe fn set_gameplay_cam_relative_heading(heading: f32) {
        call_native!(Void, 0xB4EC2312F4E5B1F1u64, heading);
    } // 0xB4EC2312F4E5B1F1 0x20C6217C b323
    pub unsafe fn get_gameplay_cam_relative_pitch() -> f32 {
        call_native!(f32, 0x3A6867B4845BEDA2u64)
    } // 0x3A6867B4845BEDA2 0xFC5A4946 b323
    pub unsafe fn set_gameplay_cam_relative_pitch(angle: f32, scaling_factor: f32) {
        call_native!(Void, 0x6D0858B8EDFD2B7Du64, angle, scaling_factor);
    } // 0x6D0858B8EDFD2B7D 0x6381B963 b323
    pub unsafe fn reset_gameplay_cam_full_attach_parent_transform_timer() {
        call_native!(Void, 0x7295C203DD659DFEu64);
    } // 0x7295C203DD659DFE  b2699
    pub unsafe fn force_camera_relative_heading_and_pitch(roll: f32, pitch: f32, yaw: f32) {
        call_native!(Void, 0x48608C3464F58AB4u64, roll, pitch, yaw);
    } // 0x48608C3464F58AB4  b505
    pub unsafe fn force_bonnet_camera_relative_heading_and_pitch(p_0: f32, p_1: f32) {
        call_native!(Void, 0x28B022A17B068A3Au64, p_0, p_1);
    } // 0x28B022A17B068A3A  b1734
    pub unsafe fn set_first_person_shooter_camera_heading(yaw: f32) {
        call_native!(Void, 0x103991D4A307D472u64, yaw);
    } // 0x103991D4A307D472  b323
    pub unsafe fn set_first_person_shooter_camera_pitch(pitch: f32) {
        call_native!(Void, 0x759E13EBC1C15C5Au64, pitch);
    } // 0x759E13EBC1C15C5A  b323
    pub unsafe fn set_scripted_camera_is_first_person_this_frame(p_0: bool) {
        call_native!(Void, 0x469F2ECDEC046337u64, p_0);
    } // 0x469F2ECDEC046337  b323
    pub unsafe fn shake_gameplay_cam(shake_name: *const i8, intensity: f32) {
        call_native!(Void, 0xFD55E49555E017CFu64, shake_name, intensity);
    } // 0xFD55E49555E017CF 0xF2EFE660 b323
    pub unsafe fn is_gameplay_cam_shaking() -> bool {
        call_native!(bool, 0x016C090630DF1F89u64)
    } // 0x016C090630DF1F89 0x3457D681 b323
    pub unsafe fn set_gameplay_cam_shake_amplitude(amplitude: f32) {
        call_native!(Void, 0xA87E00932DB4D85Du64, amplitude);
    } // 0xA87E00932DB4D85D 0x9219D44A b323
    pub unsafe fn stop_gameplay_cam_shaking(p_0: bool) {
        call_native!(Void, 0x0EF93E9F3D08C178u64, p_0);
    } // 0x0EF93E9F3D08C178 0xFD569E4E b323
    pub unsafe fn set_gameplay_cam_follow_ped_this_update(ped: Ped) {
        call_native!(Void, 0x8BBACBF51DA047A8u64, ped);
    } // 0x8BBACBF51DA047A8 0x7D3007A2 b323
    pub unsafe fn is_gameplay_cam_rendering() -> bool {
        call_native!(bool, 0x39B5D1B10383F0C8u64)
    } // 0x39B5D1B10383F0C8 0x0EF276DA b323
    pub unsafe fn is_interpolating_from_script_cams() -> bool {
        call_native!(bool, 0x3044240D2E0FA842u64)
    } // 0x3044240D2E0FA842 0xC0B00C20 b323
    pub unsafe fn is_interpolating_to_script_cams() -> bool {
        call_native!(bool, 0x705A276EBFF3133Du64)
    } // 0x705A276EBFF3133D 0x60C23785 b323
    pub unsafe fn set_gameplay_cam_altitude_fov_scaling_state(p_0: bool) {
        call_native!(Void, 0xDB90C6CCA48940F1u64, p_0);
    } // 0xDB90C6CCA48940F1 0x20BFF6E5 b323
    pub unsafe fn disable_gameplay_cam_altitude_fov_scaling_this_update() {
        call_native!(Void, 0xEA7F0AD7E9BA676Fu64);
    } // 0xEA7F0AD7E9BA676F 0xA61FF9AC b323
    pub unsafe fn is_gameplay_cam_looking_behind() -> bool {
        call_native!(bool, 0x70FDA869F3317EA9u64)
    } // 0x70FDA869F3317EA9 0x33C83F17 b323
    pub unsafe fn set_gameplay_cam_ignore_entity_collision_this_update(entity: Entity) {
        call_native!(Void, 0x2AED6301F67007D5u64, entity);
    } // 0x2AED6301F67007D5 0x2701A9AD b323
    pub unsafe fn disable_cam_collision_for_object(entity: Entity) {
        call_native!(Void, 0x49482F9FCD825AAAu64, entity);
    } // 0x49482F9FCD825AAA 0xC4736ED3 b323
    pub unsafe fn bypass_camera_collision_buoyancy_test_this_update() {
        call_native!(Void, 0xA7092AFE81944852u64);
    } // 0xA7092AFE81944852  b2189
    pub unsafe fn set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(
        entity: Entity,
    ) {
        call_native!(Void, 0xFD3151CD37EA2245u64, entity);
    } // 0xFD3151CD37EA2245  b323
    pub unsafe fn disable_first_person_camera_water_clipping_test_this_update() {
        call_native!(Void, 0xB1381B97F70C7B30u64);
    } // 0xB1381B97F70C7B30  b1180
    pub unsafe fn set_follow_cam_ignore_attach_parent_movement_this_update() {
        call_native!(Void, 0xDD79DF9F4D26E1C9u64);
    } // 0xDD79DF9F4D26E1C9 0x6B0E9D57 b323
    pub unsafe fn is_sphere_visible(x: f32, y: f32, z: f32, radius: f32) -> bool {
        call_native!(bool, 0xE33D59DA70B58FDFu64, x, y, z, radius)
    } // 0xE33D59DA70B58FDF 0xDD1329E2 b323
    pub unsafe fn is_follow_ped_cam_active() -> bool {
        call_native!(bool, 0xC6D3D26810C8E0F9u64)
    } // 0xC6D3D26810C8E0F9 0x9F9E856C b323
    pub unsafe fn set_follow_ped_cam_this_update(cam_name: *const i8, p_1: i32) -> bool {
        call_native!(bool, 0x44A113DD6FFC48D1u64, cam_name, p_1)
    } // 0x44A113DD6FFC48D1 0x1425F6AC b323
    pub unsafe fn use_script_cam_for_ambient_population_origin_this_frame(p_0: bool, p_1: bool) {
        call_native!(Void, 0x271401846BD26E92u64, p_0, p_1);
    } // 0x271401846BD26E92 0x8DC53629 b323
    pub unsafe fn set_follow_ped_cam_ladder_align_this_update() {
        call_native!(Void, 0xC8391C309684595Au64);
    } // 0xC8391C309684595A 0x1F9DE6E4 b323
    pub unsafe fn set_third_person_cam_relative_heading_limits_this_update(
        minimum: f32,
        maximum: f32,
    ) {
        call_native!(Void, 0x8F993D26E0CA5E8Eu64, minimum, maximum);
    } // 0x8F993D26E0CA5E8E 0x749909AC b323
    pub unsafe fn set_third_person_cam_relative_pitch_limits_this_update(
        minimum: f32,
        maximum: f32,
    ) {
        call_native!(Void, 0xA516C198B7DCA1E1u64, minimum, maximum);
    } // 0xA516C198B7DCA1E1 0xFA3A16E7 b323
    pub unsafe fn set_third_person_cam_orbit_distance_limits_this_update(p_0: f32, distance: f32) {
        call_native!(Void, 0xDF2E1F7742402E81u64, p_0, distance);
    } // 0xDF2E1F7742402E81 0x77340650 b323
    pub unsafe fn _get_third_person_cam_min_orbit_distance_spring() -> f32 {
        call_native!(f32, 0xBC456FB703431785u64)
    } // 0xBC456FB703431785  b3095
    pub unsafe fn _get_third_person_cam_max_orbit_distance_spring() -> f32 {
        call_native!(f32, 0xD4592A16D36673EDu64)
    } // 0xD4592A16D36673ED  b3095
    pub unsafe fn set_in_vehicle_cam_state_this_update(p_0: Vehicle, p_1: i32) {
        call_native!(Void, 0xE9EA16D6E54CDCA4u64, p_0, p_1);
    } // 0xE9EA16D6E54CDCA4 0x4B22C5CB b323
    pub unsafe fn disable_on_foot_first_person_view_this_update() {
        call_native!(Void, 0xDE2EF5DA284CC8DFu64);
    } // 0xDE2EF5DA284CC8DF  b323
    pub unsafe fn disable_first_person_flash_effect_this_update() {
        call_native!(Void, 0x59424BD75174C9B1u64);
    } // 0x59424BD75174C9B1  b323
    pub unsafe fn block_first_person_orientation_reset_this_update() {
        call_native!(Void, 0x9F97DA93681F87EAu64);
    } // 0x9F97DA93681F87EA  b1734
    pub unsafe fn get_follow_ped_cam_zoom_level() -> i32 {
        call_native!(i32, 0x33E6C8EFD0CD93E9u64)
    } // 0x33E6C8EFD0CD93E9 0x57583DF1 b323
    pub unsafe fn get_follow_ped_cam_view_mode() -> i32 {
        call_native!(i32, 0x8D4D46230B2C353Au64)
    } // 0x8D4D46230B2C353A 0xA65FF946 b323
    pub unsafe fn set_follow_ped_cam_view_mode(view_mode: i32) {
        call_native!(Void, 0x5A4F9EDF1673F704u64, view_mode);
    } // 0x5A4F9EDF1673F704 0x495DBE8D b323
    pub unsafe fn is_follow_vehicle_cam_active() -> bool {
        call_native!(bool, 0xCBBDE6D335D6D496u64)
    } // 0xCBBDE6D335D6D496 0x8DD49B77 b323
    pub unsafe fn set_follow_vehicle_cam_high_angle_mode_this_update(p_0: bool) {
        call_native!(Void, 0x91EF6EE6419E5B97u64, p_0);
    } // 0x91EF6EE6419E5B97 0x9DB5D391 b323
    pub unsafe fn set_follow_vehicle_cam_high_angle_mode_every_update(p_0: bool, p_1: bool) {
        call_native!(Void, 0x9DFE13ECDC1EC196u64, p_0, p_1);
    } // 0x9DFE13ECDC1EC196 0x92302899 b323
    pub unsafe fn set_table_games_camera_this_update(hash: Hash) -> bool {
        call_native!(bool, 0x79C0E43EB9B944E2u64, hash)
    } // 0x79C0E43EB9B944E2  b1734
    pub unsafe fn get_follow_vehicle_cam_zoom_level() -> i32 {
        call_native!(i32, 0xEE82280AB767B690u64)
    } // 0xEE82280AB767B690 0x8CD67DE3 b323
    pub unsafe fn set_follow_vehicle_cam_zoom_level(zoom_level: i32) {
        call_native!(Void, 0x19464CB6E4078C8Au64, zoom_level);
    } // 0x19464CB6E4078C8A 0x8F55EBBE b323
    pub unsafe fn get_follow_vehicle_cam_view_mode() -> i32 {
        call_native!(i32, 0xA4FF579AC0E3AAAEu64)
    } // 0xA4FF579AC0E3AAAE 0xA4B4DB03 b323
    pub unsafe fn set_follow_vehicle_cam_view_mode(view_mode: i32) {
        call_native!(Void, 0xAC253D7842768F48u64, view_mode);
    } // 0xAC253D7842768F48 0xC4FBBBD3 b323
    pub unsafe fn get_cam_view_mode_for_context(context: i32) -> i32 {
        call_native!(i32, 0xEE778F8C7E1142E2u64, context)
    } // 0xEE778F8C7E1142E2 0xF3B148A6 b323
    pub unsafe fn set_cam_view_mode_for_context(context: i32, view_mode: i32) {
        call_native!(Void, 0x2A2173E46DAECD12u64, context, view_mode);
    } // 0x2A2173E46DAECD12 0x1DEBCB45 b323
    pub unsafe fn get_cam_active_view_mode_context() -> i32 {
        call_native!(i32, 0x19CAFA3C87F7C2FFu64)
    } // 0x19CAFA3C87F7C2FF  b323
    pub unsafe fn use_vehicle_cam_stunt_settings_this_update() {
        call_native!(Void, 0x6493CF69859B116Au64);
    } // 0x6493CF69859B116A  b791
    pub unsafe fn use_dedicated_stunt_camera_this_update(cam_name: *const i8) {
        call_native!(Void, 0x425A920FDB9A0DDAu64, cam_name);
    } // 0x425A920FDB9A0DDA  b1180
    pub unsafe fn force_vehicle_cam_stunt_settings_this_update() {
        call_native!(Void, 0x0AA27680A0BD43FAu64);
    } // 0x0AA27680A0BD43FA  b1103
    pub unsafe fn set_follow_vehicle_cam_seat_this_update(seat_index: i32) {
        call_native!(Void, 0x5C90CAB09951A12Fu64, seat_index);
    } // 0x5C90CAB09951A12F  b1365
    pub unsafe fn is_aim_cam_active() -> bool {
        call_native!(bool, 0x68EDDA28A5976D07u64)
    } // 0x68EDDA28A5976D07 0xC24B4F6F b323
    pub unsafe fn is_aim_cam_active_in_accurate_mode() -> bool {
        call_native!(bool, 0x74BD83EA840F6BC9u64)
    } // 0x74BD83EA840F6BC9 0x8F320DE4 b323
    pub unsafe fn is_first_person_aim_cam_active() -> bool {
        call_native!(bool, 0x5E346D934122613Fu64)
    } // 0x5E346D934122613F 0xD6280468 b323
    pub unsafe fn disable_aim_cam_this_update() {
        call_native!(Void, 0x1A31FE0049E542F6u64);
    } // 0x1A31FE0049E542F6 0x1BAA7182 b323
    pub unsafe fn get_first_person_aim_cam_zoom_factor() -> f32 {
        call_native!(f32, 0x7EC52CC40597D170u64)
    } // 0x7EC52CC40597D170 0x33951005 b323
    pub unsafe fn set_first_person_aim_cam_zoom_factor(zoom_factor: f32) {
        call_native!(Void, 0x70894BD0915C5BCAu64, zoom_factor);
    } // 0x70894BD0915C5BCA 0x9F4AF763 b323
    pub unsafe fn set_first_person_aim_cam_zoom_factor_limits_this_update(p_0: f32, p_1: f32) {
        call_native!(Void, 0xCED08CBE8EBB97C7u64, p_0, p_1);
    } // 0xCED08CBE8EBB97C7 0x68BA0730 b323
    pub unsafe fn set_first_person_aim_cam_relative_heading_limits_this_update(p_0: f32, p_1: f32) {
        call_native!(Void, 0x2F7F2B26DD3F18EEu64, p_0, p_1);
    } // 0x2F7F2B26DD3F18EE 0x2F29F0D5 b323
    pub unsafe fn set_first_person_aim_cam_relative_pitch_limits_this_update(p_0: f32, p_1: f32) {
        call_native!(Void, 0xBCFC632DB7673BF0u64, p_0, p_1);
    } // 0xBCFC632DB7673BF0 0x76DAC96C b323
    pub unsafe fn set_first_person_aim_cam_near_clip_this_update(p_0: f32) {
        call_native!(Void, 0x0AF7B437918103B3u64, p_0);
    } // 0x0AF7B437918103B3 0x0E21069D b323
    pub unsafe fn set_third_person_aim_cam_near_clip_this_update(p_0: f32) {
        call_native!(Void, 0x42156508606DE65Eu64, p_0);
    } // 0x42156508606DE65E 0x71E9C63E b323
    pub unsafe fn set_allow_custom_vehicle_drive_by_cam_this_update(p_0: bool) {
        call_native!(Void, 0x4008EDF7D6E48175u64, p_0);
    } // 0x4008EDF7D6E48175 0xD1EEBC45 b323
    pub unsafe fn force_tightspace_custom_framing_this_update() {
        call_native!(Void, 0x380B4968D1E09E55u64);
    } // 0x380B4968D1E09E55  b1290
    pub unsafe fn get_final_rendered_cam_coord() -> Vector3 {
        call_native!(Vector3, 0xA200EB1EE790F448u64)
    } // 0xA200EB1EE790F448 0x9C84BDA0 b323
    pub unsafe fn get_final_rendered_cam_rot(rotation_order: i32) -> Vector3 {
        call_native!(Vector3, 0x5B4E4C817FCC2DFBu64, rotation_order)
    } // 0x5B4E4C817FCC2DFB 0x1FFBEFC5 b323
    pub unsafe fn get_final_rendered_remote_player_cam_rot(
        player: Player,
        rotation_order: i32,
    ) -> Vector3 {
        call_native!(Vector3, 0x26903D9CD1175F2Cu64, player, rotation_order)
    } // 0x26903D9CD1175F2C 0xACADF916 b323
    pub unsafe fn get_final_rendered_cam_fov() -> f32 {
        call_native!(f32, 0x80EC114669DAEFF4u64)
    } // 0x80EC114669DAEFF4 0x721B763B b323
    pub unsafe fn get_final_rendered_remote_player_cam_fov(player: Player) -> f32 {
        call_native!(f32, 0x5F35F6732C3FBBA0u64, player)
    } // 0x5F35F6732C3FBBA0 0x23E3F106 b323
    pub unsafe fn get_final_rendered_cam_near_clip() -> f32 {
        call_native!(f32, 0xD0082607100D7193u64)
    } // 0xD0082607100D7193 0x457AE195 b323
    pub unsafe fn get_final_rendered_cam_far_clip() -> f32 {
        call_native!(f32, 0xDFC8CBC606FDB0FCu64)
    } // 0xDFC8CBC606FDB0FC 0x46CB3A49 b323
    pub unsafe fn get_final_rendered_cam_near_dof() -> f32 {
        call_native!(f32, 0xA03502FC581F7D9Bu64)
    } // 0xA03502FC581F7D9B 0x19297A7A b323
    pub unsafe fn get_final_rendered_cam_far_dof() -> f32 {
        call_native!(f32, 0x9780F32BCAF72431u64)
    } // 0x9780F32BCAF72431 0xF24777CA b323
    pub unsafe fn get_final_rendered_cam_motion_blur_strength() -> f32 {
        call_native!(f32, 0x162F9D995753DC19u64)
    } // 0x162F9D995753DC19 0x38992E83 b323
    pub unsafe fn set_gameplay_coord_hint(
        x: f32,
        y: f32,
        z: f32,
        duration: i32,
        blend_out_duration: i32,
        blend_in_duration: i32,
        p_6: i32,
    ) {
        call_native!(
            Void,
            0xD51ADCD2D8BC0FB3u64,
            x,
            y,
            z,
            duration,
            blend_out_duration,
            blend_in_duration,
            p_6
        );
    } // 0xD51ADCD2D8BC0FB3 0xF27483C9 b323
    pub unsafe fn set_gameplay_ped_hint(
        ped: Ped,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        p_4: bool,
        duration: i32,
        blend_out_duration: i32,
        blend_in_duration: i32,
    ) {
        call_native!(
            Void,
            0x2B486269ACD548D3u64,
            ped,
            x_1,
            y_1,
            z_1,
            p_4,
            duration,
            blend_out_duration,
            blend_in_duration
        );
    } // 0x2B486269ACD548D3 0x7C27343E b323
    pub unsafe fn set_gameplay_vehicle_hint(
        vehicle: Vehicle,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        p_4: bool,
        time: i32,
        ease_in_time: i32,
        ease_out_time: i32,
    ) {
        call_native!(
            Void,
            0xA2297E18F3E71C2Eu64,
            vehicle,
            offset_x,
            offset_y,
            offset_z,
            p_4,
            time,
            ease_in_time,
            ease_out_time
        );
    } // 0xA2297E18F3E71C2E 0x2C9A11D8 b323
    pub unsafe fn set_gameplay_object_hint(
        object: Object,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        p_4: bool,
        time: i32,
        ease_in_time: i32,
        ease_out_time: i32,
    ) {
        call_native!(
            Void,
            0x83E87508A2CA2AC6u64,
            object,
            x_offset,
            y_offset,
            z_offset,
            p_4,
            time,
            ease_in_time,
            ease_out_time
        );
    } // 0x83E87508A2CA2AC6 0x2ED5E2F8 b323
    pub unsafe fn set_gameplay_entity_hint(
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        p_4: bool,
        time: i32,
        ease_in_time: i32,
        ease_out_time: i32,
        p_8: i32,
    ) {
        call_native!(
            Void,
            0x189E955A8313E298u64,
            entity,
            x_offset,
            y_offset,
            z_offset,
            p_4,
            time,
            ease_in_time,
            ease_out_time,
            p_8
        );
    } // 0x189E955A8313E298 0x66C32306 b323
    pub unsafe fn is_gameplay_hint_active() -> bool {
        call_native!(bool, 0xE520FF1AD2785B40u64)
    } // 0xE520FF1AD2785B40 0xAD8DA205 b323
    pub unsafe fn stop_gameplay_hint(p_0: bool) {
        call_native!(Void, 0xF46C581C61718916u64, p_0);
    } // 0xF46C581C61718916 0x1BC28B7B b323
    pub unsafe fn stop_gameplay_hint_being_cancelled_this_update(p_0: bool) {
        call_native!(Void, 0xCCD078C2665D2973u64, p_0);
    } // 0xCCD078C2665D2973 0xCAFEE798 b323
    pub unsafe fn stop_code_gameplay_hint(p_0: bool) {
        call_native!(Void, 0x247ACBC4ABBC9D1Cu64, p_0);
    } // 0x247ACBC4ABBC9D1C  b323
    pub unsafe fn is_code_gameplay_hint_active() -> bool {
        call_native!(bool, 0xBF72910D0F26F025u64)
    } // 0xBF72910D0F26F025  b323
    pub unsafe fn set_gameplay_hint_fov(_f_o_v: f32) {
        call_native!(Void, 0x513403FB9C56211Fu64, _f_o_v);
    } // 0x513403FB9C56211F 0x96FD173B b323
    pub unsafe fn set_gameplay_hint_follow_distance_scalar(value: f32) {
        call_native!(Void, 0xF8BDBF3D573049A1u64, value);
    } // 0xF8BDBF3D573049A1 0x72E8CD3A b323
    pub unsafe fn set_gameplay_hint_base_orbit_pitch_offset(value: f32) {
        call_native!(Void, 0xD1F8363DFAD03848u64, value);
    } // 0xD1F8363DFAD03848 0x79472AE3 b323
    pub unsafe fn set_gameplay_hint_camera_relative_side_offset(x_offset: f32) {
        call_native!(Void, 0x5D7B620DAE436138u64, x_offset);
    } // 0x5D7B620DAE436138 0xFC7464A0 b323
    pub unsafe fn set_gameplay_hint_camera_relative_vertical_offset(y_offset: f32) {
        call_native!(Void, 0xC92717EF615B6704u64, y_offset);
    } // 0xC92717EF615B6704 0x3554AA0E b323
    pub unsafe fn set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(toggle: bool) {
        call_native!(Void, 0xE3433EADAAF7EE40u64, toggle);
    } // 0xE3433EADAAF7EE40 0x2F0CE859 b323
    pub unsafe fn set_cinematic_button_active(p_0: bool) {
        call_native!(Void, 0x51669F7D1FB53D9Fu64, p_0);
    } // 0x51669F7D1FB53D9F 0x3FBC5D00 b323
    pub unsafe fn is_cinematic_cam_rendering() -> bool {
        call_native!(bool, 0xB15162CB5826E9E8u64)
    } // 0xB15162CB5826E9E8 0x80471AD9 b323
    pub unsafe fn shake_cinematic_cam(shake_type: *const i8, amount: f32) {
        call_native!(Void, 0xDCE214D9ED58F3CFu64, shake_type, amount);
    } // 0xDCE214D9ED58F3CF 0x61815F31 b323
    pub unsafe fn is_cinematic_cam_shaking() -> bool {
        call_native!(bool, 0xBBC08F6B4CB8FF0Au64)
    } // 0xBBC08F6B4CB8FF0A 0x8376D939 b323
    pub unsafe fn set_cinematic_cam_shake_amplitude(p_0: f32) {
        call_native!(Void, 0xC724C701C30B2FE7u64, p_0);
    } // 0xC724C701C30B2FE7 0x67510C4B b323
    pub unsafe fn stop_cinematic_cam_shaking(p_0: bool) {
        call_native!(Void, 0x2238E588E588A6D7u64, p_0);
    } // 0x2238E588E588A6D7 0x71C12904 b323
    pub unsafe fn disable_cinematic_bonnet_camera_this_update() {
        call_native!(Void, 0xADFF1B2A555F5FBAu64);
    } // 0xADFF1B2A555F5FBA 0x5AC6DAC9 b323
    pub unsafe fn disable_cinematic_vehicle_idle_mode_this_update() {
        call_native!(Void, 0x62ECFCFDEE7885D6u64);
    } // 0x62ECFCFDEE7885D6 0x837F8581 b323
    pub unsafe fn invalidate_cinematic_vehicle_idle_mode() {
        call_native!(Void, 0x9E4CFFF989258472u64);
    } // 0x9E4CFFF989258472 0x65DDE8AF b323
    pub unsafe fn invalidate_idle_cam() {
        call_native!(Void, 0xF4F2C0D4EE209E20u64);
    } // 0xF4F2C0D4EE209E20 0xD75CDD75 b323
    pub unsafe fn is_cinematic_idle_cam_rendering() -> bool {
        call_native!(bool, 0xCA9D2AA3E326D720u64)
    } // 0xCA9D2AA3E326D720 0x96A07066 b323
    pub unsafe fn is_cinematic_first_person_vehicle_interior_cam_rendering() -> bool {
        call_native!(bool, 0x4F32C0D5A90A9B40u64)
    } // 0x4F32C0D5A90A9B40  b323
    pub unsafe fn create_cinematic_shot(p_0: Hash, time: i32, p_2: bool, entity: Entity) {
        call_native!(Void, 0x741B0129D4560F31u64, p_0, time, p_2, entity);
    } // 0x741B0129D4560F31 0xAC494E35 b323
    pub unsafe fn is_cinematic_shot_active(p_0: Hash) -> bool {
        call_native!(bool, 0xCC9F3371A7C28BC9u64, p_0)
    } // 0xCC9F3371A7C28BC9 0xA4049042 b323
    pub unsafe fn stop_cinematic_shot(p_0: Hash) {
        call_native!(Void, 0x7660C6E75D3A078Eu64, p_0);
    } // 0x7660C6E75D3A078E 0xD78358C5 b323
    pub unsafe fn force_cinematic_rendering_this_update(toggle: bool) {
        call_native!(Void, 0xA41BCD7213805AACu64, toggle);
    } // 0xA41BCD7213805AAC 0xFBB85E02 b323
    pub unsafe fn set_cinematic_news_channel_active_this_update() {
        call_native!(Void, 0xDC9DA9E8789F5246u64);
    } // 0xDC9DA9E8789F5246 0x4938C82F b323
    pub unsafe fn set_cinematic_mode_active(toggle: bool) {
        call_native!(Void, 0xDCF0754AC3D6FD4Eu64, toggle);
    } // 0xDCF0754AC3D6FD4E 0x2009E747 b323
    pub unsafe fn is_in_vehicle_mobile_phone_camera_rendering() -> bool {
        call_native!(bool, 0x1F2300CB7FA7B7F6u64)
    } // 0x1F2300CB7FA7B7F6 0x6739AD55 b323
    pub unsafe fn disable_cinematic_slow_mo_this_update() -> bool {
        call_native!(bool, 0x17FCA7199A530203u64)
    } // 0x17FCA7199A530203  b323
    pub unsafe fn is_bonnet_cinematic_cam_rendering() -> bool {
        call_native!(bool, 0xD7360051C885628Bu64)
    } // 0xD7360051C885628B 0x1DD55F13 b372
    pub unsafe fn is_cinematic_cam_input_active() -> bool {
        call_native!(bool, 0xF5F1E89A970B7796u64)
    } // 0xF5F1E89A970B7796 0x1A900C84 b1493
    pub unsafe fn ignore_menu_preference_for_bonnet_camera_this_update() {
        call_native!(Void, 0x7B8A361C1813FBEFu64);
    } // 0x7B8A361C1813FBEF  b573
    pub unsafe fn bypass_cutscene_cam_rendering_this_update() {
        call_native!(Void, 0xDB629FFD9285FA06u64);
    } // 0xDB629FFD9285FA06  b323
    pub unsafe fn stop_cutscene_cam_shaking(p_0: Any) {
        call_native!(Void, 0x324C5AA411DA7737u64, p_0);
    } // 0x324C5AA411DA7737  b323
    pub unsafe fn set_cutscene_cam_far_clip_this_update(p_0: f32) {
        call_native!(Void, 0x12DED8CA53D47EA5u64, p_0);
    } // 0x12DED8CA53D47EA5 0x067BA6F5 b323
    pub unsafe fn get_focus_ped_on_screen(
        p_0: f32,
        p_1: i32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: i32,
        p_8: i32,
    ) -> Ped {
        call_native!(
            Ped,
            0x89215EC747DF244Au64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        )
    } // 0x89215EC747DF244A 0xFD99BE2B b323
    pub unsafe fn disable_near_clip_scan_this_update() {
        call_native!(Void, 0x5A43C76F7FC7BA5Fu64);
    } // 0x5A43C76F7FC7BA5F 0xE206C450 b323
    pub unsafe fn set_cam_death_fail_effect_state(p_0: i32) {
        call_native!(Void, 0x80C8B1846639BB19u64, p_0);
    } // 0x80C8B1846639BB19 0xB06CCD38 b323
    pub unsafe fn set_first_person_flash_effect_type(p_0: Any) {
        call_native!(Void, 0x5C41E6BABC9E2112u64, p_0);
    } // 0x5C41E6BABC9E2112  b323
    pub unsafe fn set_first_person_flash_effect_vehicle_model_name(vehicle_name: *const i8) {
        call_native!(Void, 0x21E253A7F8DA5DFBu64, vehicle_name);
    } // 0x21E253A7F8DA5DFB  b323
    pub unsafe fn set_first_person_flash_effect_vehicle_model_hash(vehicle_model: Hash) {
        call_native!(Void, 0x11FA5D3479C7DD47u64, vehicle_model);
    } // 0x11FA5D3479C7DD47  b323
    pub unsafe fn is_allowed_independent_camera_modes() -> bool {
        call_native!(bool, 0xEAF0FA793D05C592u64)
    } // 0xEAF0FA793D05C592  b323
    pub unsafe fn camera_prevent_collision_settings_for_triplehead_in_interiors_this_update() {
        call_native!(Void, 0x62374889A4D59F72u64);
    } // 0x62374889A4D59F72  b877
    pub unsafe fn replay_get_max_distance_allowed_from_player() -> f32 {
        call_native!(f32, 0x8BFCEB5EA1B161B6u64)
    } // 0x8BFCEB5EA1B161B6  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod clock {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn set_clock_time(hour: i32, minute: i32, second: i32) {
        call_native!(Void, 0x47C3B5848C3E45D8u64, hour, minute, second);
    } // 0x47C3B5848C3E45D8 0x26F6AF14 b323
    pub unsafe fn pause_clock(toggle: bool) {
        call_native!(Void, 0x4055E40BD2DBEC1Du64, toggle);
    } // 0x4055E40BD2DBEC1D 0xB02D6124 b323
    pub unsafe fn advance_clock_time_to(hour: i32, minute: i32, second: i32) {
        call_native!(Void, 0xC8CA9670B9D83B3Bu64, hour, minute, second);
    } // 0xC8CA9670B9D83B3B 0x57B8DA7C b323
    pub unsafe fn add_to_clock_time(hours: i32, minutes: i32, seconds: i32) {
        call_native!(Void, 0xD716F30D8C8980E2u64, hours, minutes, seconds);
    } // 0xD716F30D8C8980E2 0xCC40D20D b323
    pub unsafe fn get_clock_hours() -> i32 {
        call_native!(i32, 0x25223CA6B4D20B7Fu64)
    } // 0x25223CA6B4D20B7F 0x7EF8316F b323
    pub unsafe fn get_clock_minutes() -> i32 {
        call_native!(i32, 0x13D2B8ADD79640F2u64)
    } // 0x13D2B8ADD79640F2 0x94AAC486 b323
    pub unsafe fn get_clock_seconds() -> i32 {
        call_native!(i32, 0x494E97C2EF27C470u64)
    } // 0x494E97C2EF27C470 0x099C927E b323
    pub unsafe fn set_clock_date(day: i32, month: i32, year: i32) {
        call_native!(Void, 0xB096419DF0D06CE7u64, day, month, year);
    } // 0xB096419DF0D06CE7 0x96891C94 b323
    pub unsafe fn get_clock_day_of_week() -> i32 {
        call_native!(i32, 0xD972E4BD7AEB235Fu64)
    } // 0xD972E4BD7AEB235F 0x84E4A289 b323
    pub unsafe fn get_clock_day_of_month() -> i32 {
        call_native!(i32, 0x3D10BC92A4DB1D35u64)
    } // 0x3D10BC92A4DB1D35 0xC7A5ACB7 b323
    pub unsafe fn get_clock_month() -> i32 {
        call_native!(i32, 0xBBC72712E80257A1u64)
    } // 0xBBC72712E80257A1 0x3C48A3D5 b323
    pub unsafe fn get_clock_year() -> i32 {
        call_native!(i32, 0x961777E64BDAF717u64)
    } // 0x961777E64BDAF717 0xB8BECF15 b323
    pub unsafe fn get_milliseconds_per_game_minute() -> i32 {
        call_native!(i32, 0x2F8B4D1C595B11DBu64)
    } // 0x2F8B4D1C595B11DB 0x3B74095C b323
    pub unsafe fn get_posix_time(
        year: *mut i32,
        month: *mut i32,
        day: *mut i32,
        hour: *mut i32,
        minute: *mut i32,
        second: *mut i32,
    ) {
        call_native!(
            Void,
            0xDA488F299A5B164Eu64,
            year,
            month,
            day,
            hour,
            minute,
            second
        );
    } // 0xDA488F299A5B164E 0xE15A5281 b323
    pub unsafe fn get_utc_time(
        year: *mut i32,
        month: *mut i32,
        day: *mut i32,
        hour: *mut i32,
        minute: *mut i32,
        second: *mut i32,
    ) {
        call_native!(
            Void,
            0x8117E09A19EEF4D3u64,
            year,
            month,
            day,
            hour,
            minute,
            second
        );
    } // 0x8117E09A19EEF4D3 0xC589CD7D b323
    pub unsafe fn get_local_time(
        year: *mut i32,
        month: *mut i32,
        day: *mut i32,
        hour: *mut i32,
        minute: *mut i32,
        second: *mut i32,
    ) {
        call_native!(
            Void,
            0x50C7A99057A69748u64,
            year,
            month,
            day,
            hour,
            minute,
            second
        );
    } // 0x50C7A99057A69748 0x124BCFA2 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod cutscene {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn request_cutscene(cutscene_name: *const i8, flags: i32) {
        call_native!(Void, 0x7A86743F475D9E09u64, cutscene_name, flags);
    } // 0x7A86743F475D9E09 0xB5977853 b323
    pub unsafe fn request_cutscene_with_playback_list(
        cutscene_name: *const i8,
        playback_flags: i32,
        flags: i32,
    ) {
        call_native!(
            Void,
            0xC23DE0E91C30B58Cu64,
            cutscene_name,
            playback_flags,
            flags
        );
    } // 0xC23DE0E91C30B58C 0xD98F656A b323
    pub unsafe fn remove_cutscene() {
        call_native!(Void, 0x440AF51A3462B86Fu64);
    } // 0x440AF51A3462B86F 0x8052F533 b323
    pub unsafe fn has_cutscene_loaded() -> bool {
        call_native!(bool, 0xC59F528E9AB9F339u64)
    } // 0xC59F528E9AB9F339 0xF9998582 b323
    pub unsafe fn has_this_cutscene_loaded(cutscene_name: *const i8) -> bool {
        call_native!(bool, 0x228D3D94F8A11C3Cu64, cutscene_name)
    } // 0x228D3D94F8A11C3C 0x3C5619F2 b323
    pub unsafe fn set_script_can_start_cutscene(thread_id: i32) {
        call_native!(Void, 0x8D9DF6ECA8768583u64, thread_id);
    } // 0x8D9DF6ECA8768583 0x25A2CABC b323
    pub unsafe fn can_request_assets_for_cutscene_entity() -> bool {
        call_native!(bool, 0xB56BBBCC2955D9CBu64)
    } // 0xB56BBBCC2955D9CB 0xDD8878E9 b323
    pub unsafe fn is_cutscene_playback_flag_set(flag: i32) -> bool {
        call_native!(bool, 0x71B74D2AE19338D0u64, flag)
    } // 0x71B74D2AE19338D0 0x7B93CDAA b323
    pub unsafe fn set_cutscene_entity_streaming_flags(
        cutscene_ent_name: *const i8,
        p_1: i32,
        p_2: i32,
    ) {
        call_native!(Void, 0x4C61C75BEE8184C2u64, cutscene_ent_name, p_1, p_2);
    } // 0x4C61C75BEE8184C2 0x47DB08A9 b323
    pub unsafe fn request_cut_file(cutscene_name: *const i8) {
        call_native!(Void, 0x06A3524161C502BAu64, cutscene_name);
    } // 0x06A3524161C502BA 0x0D732CD6 b323
    pub unsafe fn has_cut_file_loaded(cutscene_name: *const i8) -> bool {
        call_native!(bool, 0xA1C996C2A744262Eu64, cutscene_name)
    } // 0xA1C996C2A744262E 0x56D5B144 b323
    pub unsafe fn remove_cut_file(cutscene_name: *const i8) {
        call_native!(Void, 0xD00D76A7DFC9D852u64, cutscene_name);
    } // 0xD00D76A7DFC9D852 0xB70D7C6D b323
    pub unsafe fn get_cut_file_concat_count(cutscene_name: *const i8) -> i32 {
        call_native!(i32, 0x0ABC54DE641DC0FCu64, cutscene_name)
    } // 0x0ABC54DE641DC0FC 0xFD8B1AC2 b323
    pub unsafe fn start_cutscene(flags: i32) {
        call_native!(Void, 0x186D5CB5E7B0FF7Bu64, flags);
    } // 0x186D5CB5E7B0FF7B 0x210106F6 b323
    pub unsafe fn start_cutscene_at_coords(x: f32, y: f32, z: f32, flags: i32) {
        call_native!(Void, 0x1C9ADDA3244A1FBFu64, x, y, z, flags);
    } // 0x1C9ADDA3244A1FBF 0x58BEA436 b323
    pub unsafe fn stop_cutscene(p_0: bool) {
        call_native!(Void, 0xC7272775B4DC786Eu64, p_0);
    } // 0xC7272775B4DC786E 0x5EE84DC7 b323
    pub unsafe fn stop_cutscene_immediately() {
        call_native!(Void, 0xD220BDD222AC4A1Eu64);
    } // 0xD220BDD222AC4A1E 0xF528A2AD b323
    pub unsafe fn set_cutscene_origin(x: f32, y: f32, z: f32, p_3: f32, p_4: i32) {
        call_native!(Void, 0xB812B3FD1C01CF27u64, x, y, z, p_3, p_4);
    } // 0xB812B3FD1C01CF27 0xB0AD7792 b323
    pub unsafe fn set_cutscene_origin_and_orientation(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: i32,
    ) {
        call_native!(
            Void,
            0x011883F41211432Au64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6
        );
    } // 0x011883F41211432A  b323
    pub unsafe fn get_cutscene_time() -> i32 {
        call_native!(i32, 0xE625BEABBAFFDAB9u64)
    } // 0xE625BEABBAFFDAB9 0x53F5B5AB b323
    pub unsafe fn get_cutscene_total_duration() -> i32 {
        call_native!(i32, 0xEE53B14A19E480D4u64)
    } // 0xEE53B14A19E480D4 0x0824EBE8 b323
    pub unsafe fn get_cutscene_end_time() -> i32 {
        call_native!(i32, 0x971D7B15BCDBEF99u64)
    } // 0x971D7B15BCDBEF99  b1734
    pub unsafe fn get_cutscene_play_duration() -> i32 {
        call_native!(i32, 0x5D583F71C901F2A3u64)
    } // 0x5D583F71C901F2A3  b2802
    pub unsafe fn was_cutscene_skipped() -> bool {
        call_native!(bool, 0x40C8656EDAEDD569u64)
    } // 0x40C8656EDAEDD569 0xC9B6949D b323
    pub unsafe fn has_cutscene_finished() -> bool {
        call_native!(bool, 0x7C0A893088881D57u64)
    } // 0x7C0A893088881D57 0x5DED14B4 b323
    pub unsafe fn is_cutscene_active() -> bool {
        call_native!(bool, 0x991251AFC3981F84u64)
    } // 0x991251AFC3981F84 0xCCE2FE9D b323
    pub unsafe fn is_cutscene_playing() -> bool {
        call_native!(bool, 0xD3C2E180A40F031Eu64)
    } // 0xD3C2E180A40F031E 0xA3A78392 b323
    pub unsafe fn get_cutscene_section_playing() -> i32 {
        call_native!(i32, 0x49010A6A396553D8u64)
    } // 0x49010A6A396553D8 0x1026F0D6 b323
    pub unsafe fn get_entity_index_of_cutscene_entity(
        cutscene_ent_name: *const i8,
        model_hash: Hash,
    ) -> Entity {
        call_native!(Entity, 0x0A2E9FDB9A8C62F6u64, cutscene_ent_name, model_hash)
    } // 0x0A2E9FDB9A8C62F6 0x1D09ABC7 b323
    pub unsafe fn get_cutscene_concat_section_playing() -> i32 {
        call_native!(i32, 0x583DF8E3D4AFBD98u64)
    } // 0x583DF8E3D4AFBD98 0x5AE68AE6 b323
    pub unsafe fn is_cutscene_authorized(cutscene_name: *const i8) -> bool {
        call_native!(bool, 0x4CEBC1ED31E8925Eu64, cutscene_name)
    } // 0x4CEBC1ED31E8925E  b323
    pub unsafe fn does_cutscene_handle_exist(cutscene_handle: i32) -> i32 {
        call_native!(i32, 0x4FCD976DA686580Cu64, cutscene_handle)
    } // 0x4FCD976DA686580C  b1290
    pub unsafe fn register_entity_for_cutscene(
        cutscene_ped: Ped,
        cutscene_ent_name: *const i8,
        p_2: i32,
        model_hash: Hash,
        p_4: i32,
    ) {
        call_native!(
            Void,
            0xE40C1C56DF95C2E8u64,
            cutscene_ped,
            cutscene_ent_name,
            p_2,
            model_hash,
            p_4
        );
    } // 0xE40C1C56DF95C2E8 0x7CBC3EC7 b323
    pub unsafe fn get_entity_index_of_registered_entity(
        cutscene_ent_name: *const i8,
        model_hash: Hash,
    ) -> Entity {
        call_native!(Entity, 0xC0741A26499654CDu64, cutscene_ent_name, model_hash)
    } // 0xC0741A26499654CD 0x46D18755 b323
    pub unsafe fn set_vehicle_model_player_will_exit_scene(model_hash: Hash) {
        call_native!(Void, 0x7F96F23FA9B73327u64, model_hash);
    } // 0x7F96F23FA9B73327  b323
    pub unsafe fn set_cutscene_trigger_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) {
        call_native!(Void, 0x9896CE4721BE84BAu64, x_1, y_1, z_1, x_2, y_2, z_2);
    } // 0x9896CE4721BE84BA 0x9D76D9DE b323
    pub unsafe fn can_set_enter_state_for_registered_entity(
        cutscene_ent_name: *const i8,
        model_hash: Hash,
    ) -> bool {
        call_native!(bool, 0x645D0B458D8E17B5u64, cutscene_ent_name, model_hash)
    } // 0x645D0B458D8E17B5 0x55C30B26 b323
    pub unsafe fn can_set_exit_state_for_registered_entity(
        cutscene_ent_name: *const i8,
        model_hash: Hash,
    ) -> bool {
        call_native!(bool, 0x4C6A6451C79E4662u64, cutscene_ent_name, model_hash)
    } // 0x4C6A6451C79E4662 0x8FF5D3C4 b323
    pub unsafe fn can_set_exit_state_for_camera(p_0: bool) -> bool {
        call_native!(bool, 0xB2CBCD0930DFB420u64, p_0)
    } // 0xB2CBCD0930DFB420 0xEDAE6C02 b323
    pub unsafe fn set_pad_can_shake_during_cutscene(toggle: bool) {
        call_native!(Void, 0xC61B86C9F61EB404u64, toggle);
    } // 0xC61B86C9F61EB404 0x35721A08 b323
    pub unsafe fn set_cutscene_fade_values(p_0: bool, p_1: bool, p_2: bool, p_3: bool) {
        call_native!(Void, 0x8093F23ABACCC7D4u64, p_0, p_1, p_2, p_3);
    } // 0x8093F23ABACCC7D4 0xD19EF0DD b323
    pub unsafe fn set_cutscene_multihead_fade(p_0: bool, p_1: bool, p_2: bool, p_3: bool) {
        call_native!(Void, 0x20746F7B1032A3C7u64, p_0, p_1, p_2, p_3);
    } // 0x20746F7B1032A3C7  b323
    pub unsafe fn set_cutscene_multihead_fade_manual(p_0: bool) {
        call_native!(Void, 0x06EE9048FD080382u64, p_0);
    } // 0x06EE9048FD080382  b323
    pub unsafe fn is_multihead_fade_up() -> bool {
        call_native!(bool, 0xA0FE76168A189DDBu64)
    } // 0xA0FE76168A189DDB  b323
    pub unsafe fn network_set_mocap_cutscene_can_be_skipped(p_0: bool) {
        call_native!(Void, 0x2F137B508DE238F2u64, p_0);
    } // 0x2F137B508DE238F2 0x8338DA1D b323
    pub unsafe fn set_car_generators_can_update_during_cutscene(p_0: bool) {
        call_native!(Void, 0xE36A98D8AB3D3C66u64, p_0);
    } // 0xE36A98D8AB3D3C66 0x04377C10 b323
    pub unsafe fn can_use_mobile_phone_during_cutscene() -> bool {
        call_native!(bool, 0x5EDEF0CF8C1DAB3Cu64)
    } // 0x5EDEF0CF8C1DAB3C 0xDBD88708 b323
    pub unsafe fn set_cutscene_can_be_skipped(p_0: bool) {
        call_native!(Void, 0x41FAA8FB2ECE8720u64, p_0);
    } // 0x41FAA8FB2ECE8720 0x28D54A7F b323
    pub unsafe fn set_can_display_minimap_during_cutscene_this_update() {
        call_native!(Void, 0x2131046957F31B04u64);
    } // 0x2131046957F31B04 0xB60CFBB9 b323
    pub unsafe fn set_cutscene_ped_component_variation(
        cutscene_ent_name: *const i8,
        component_id: i32,
        drawable_id: i32,
        texture_id: i32,
        model_hash: Hash,
    ) {
        call_native!(
            Void,
            0xBA01E7B6DEEFBBC9u64,
            cutscene_ent_name,
            component_id,
            drawable_id,
            texture_id,
            model_hash
        );
    } // 0xBA01E7B6DEEFBBC9 0x6AF994A1 b323
    pub unsafe fn set_cutscene_ped_component_variation_from_ped(
        cutscene_ent_name: *const i8,
        ped: Ped,
        model_hash: Hash,
    ) {
        call_native!(
            Void,
            0x2A56C06EBEF2B0D9u64,
            cutscene_ent_name,
            ped,
            model_hash
        );
    } // 0x2A56C06EBEF2B0D9 0x1E7DA95E b323
    pub unsafe fn does_cutscene_entity_exist(
        cutscene_ent_name: *const i8,
        model_hash: Hash,
    ) -> bool {
        call_native!(bool, 0x499EF20C5DB25C59u64, cutscene_ent_name, model_hash)
    } // 0x499EF20C5DB25C59 0x58E67409 b323
    pub unsafe fn set_cutscene_ped_prop_variation(
        cutscene_ent_name: *const i8,
        component_id: i32,
        drawable_id: i32,
        texture_id: i32,
        model_hash: Hash,
    ) {
        call_native!(
            Void,
            0x0546524ADE2E9723u64,
            cutscene_ent_name,
            component_id,
            drawable_id,
            texture_id,
            model_hash
        );
    } // 0x0546524ADE2E9723 0x22E9A9DE b323
    pub unsafe fn has_cutscene_cut_this_frame() -> bool {
        call_native!(bool, 0x708BDD8CD795B043u64)
    } // 0x708BDD8CD795B043 0x4315A7C5 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod datafile {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn datafile_watch_request_id(request_id: i32) {
        call_native!(Void, 0xAD6875BBC0FC899Cu64, request_id);
    } // 0xAD6875BBC0FC899C 0x621388FF b323
    pub unsafe fn datafile_clear_watch_list() {
        call_native!(Void, 0x6CC86E78358D5119u64);
    } // 0x6CC86E78358D5119 0x5B39D0AC b323
    pub unsafe fn datafile_is_valid_request_id(index: i32) -> bool {
        call_native!(bool, 0xFCCAE5B92A830878u64, index)
    } // 0xFCCAE5B92A830878 0x01393D16 b323
    pub unsafe fn datafile_has_loaded_file_data(request_id: i32) -> bool {
        call_native!(bool, 0x15FF52B809DB2353u64, request_id)
    } // 0x15FF52B809DB2353 0x36FB8B3F b323
    pub unsafe fn datafile_has_valid_file_data(request_id: i32) -> bool {
        call_native!(bool, 0xF8CC1EBE0B62E29Fu64, request_id)
    } // 0xF8CC1EBE0B62E29F 0x2A9411DA b323
    pub unsafe fn datafile_select_active_file(request_id: i32, p_1: Any) -> bool {
        call_native!(bool, 0x22DA66936E0FFF37u64, request_id, p_1)
    } // 0x22DA66936E0FFF37 0xB41064A4 b323
    pub unsafe fn datafile_delete_requested_file(request_id: i32) -> bool {
        call_native!(bool, 0x8F5EA1C01D65A100u64, request_id)
    } // 0x8F5EA1C01D65A100 0x9DB63CFF b323
    pub unsafe fn ugc_create_content(
        data: *mut Any,
        data_count: i32,
        content_name: *const i8,
        description: *const i8,
        tags_csv: *const i8,
        content_type_name: *const i8,
        publish: bool,
        p_7: Any,
    ) -> bool {
        call_native!(
            bool,
            0xC84527E235FCA219u64,
            data,
            data_count,
            content_name,
            description,
            tags_csv,
            content_type_name,
            publish,
            p_7
        )
    } // 0xC84527E235FCA219 0xF09157B0 b323
    pub unsafe fn ugc_create_mission(
        content_name: *const i8,
        description: *const i8,
        tags_csv: *const i8,
        content_type_name: *const i8,
        publish: bool,
        p_5: Any,
    ) -> bool {
        call_native!(
            bool,
            0xA5EFC3E847D60507u64,
            content_name,
            description,
            tags_csv,
            content_type_name,
            publish,
            p_5
        )
    } // 0xA5EFC3E847D60507 0xD96860FC b323
    pub unsafe fn ugc_update_content(
        content_id: *const i8,
        data: *mut Any,
        data_count: i32,
        content_name: *const i8,
        description: *const i8,
        tags_csv: *const i8,
        content_type_name: *const i8,
        p_7: Any,
    ) -> bool {
        call_native!(
            bool,
            0x648E7A5434AF7969u64,
            content_id,
            data,
            data_count,
            content_name,
            description,
            tags_csv,
            content_type_name,
            p_7
        )
    } // 0x648E7A5434AF7969 0x459F2683 b323
    pub unsafe fn ugc_update_mission(
        content_id: *const i8,
        content_name: *const i8,
        description: *const i8,
        tags_csv: *const i8,
        content_type_name: *const i8,
        p_5: Any,
    ) -> bool {
        call_native!(
            bool,
            0x4645DE9980999E93u64,
            content_id,
            content_name,
            description,
            tags_csv,
            content_type_name,
            p_5
        )
    } // 0x4645DE9980999E93 0xDBB83E2B b323
    pub unsafe fn ugc_set_player_data(
        content_id: *const i8,
        rating: f32,
        content_type_name: *const i8,
        p_3: Any,
    ) -> bool {
        call_native!(
            bool,
            0x692D808C34A82143u64,
            content_id,
            rating,
            content_type_name,
            p_3
        )
    } // 0x692D808C34A82143 0xBB6321BD b323
    pub unsafe fn datafile_select_ugc_data(p_0: i32, p_1: Any) -> bool {
        call_native!(bool, 0xA69AC4ADE82B57A4u64, p_0, p_1)
    } // 0xA69AC4ADE82B57A4 0xE8D56DA2 b323
    pub unsafe fn datafile_select_ugc_stats(p_0: i32, p_1: bool, p_2: Any) -> bool {
        call_native!(bool, 0x9CB0BFA7A9342C3Du64, p_0, p_1, p_2)
    } // 0x9CB0BFA7A9342C3D 0xCB6A351E b323
    pub unsafe fn datafile_select_ugc_player_data(p_0: i32, p_1: Any) -> bool {
        call_native!(bool, 0x52818819057F2B40u64, p_0, p_1)
    } // 0x52818819057F2B40 0xA4D1B30E b323
    pub unsafe fn datafile_select_creator_stats(p_0: i32, p_1: Any) -> bool {
        call_native!(bool, 0x01095C95CD46B624u64, p_0, p_1)
    } // 0x01095C95CD46B624 0xB8515B2F b323
    pub unsafe fn datafile_load_offline_ugc(filename: *const i8, p_1: Any) -> bool {
        call_native!(bool, 0xC5238C011AF405E4u64, filename, p_1)
    } // 0xC5238C011AF405E4 0x660C468E b323
    pub unsafe fn datafile_create(p_0: i32) {
        call_native!(Void, 0xD27058A1CA2B13EEu64, p_0);
    } // 0xD27058A1CA2B13EE 0x95F8A221 b323
    pub unsafe fn datafile_delete(p_0: i32) {
        call_native!(Void, 0x9AB9C1CFC8862DFBu64, p_0);
    } // 0x9AB9C1CFC8862DFB 0xDEF31B0A b323
    pub unsafe fn datafile_store_mission_header(p_0: i32) {
        call_native!(Void, 0x2ED61456317B8178u64, p_0);
    } // 0x2ED61456317B8178 0x4E03F632 b323
    pub unsafe fn datafile_flush_mission_header() {
        call_native!(Void, 0xC55854C7D7274882u64);
    } // 0xC55854C7D7274882 0xF11F956F b323
    pub unsafe fn datafile_get_file_dict(p_0: i32) -> *mut Any {
        call_native!(*mut Any, 0x906B778CA1DC72B6u64, p_0)
    } // 0x906B778CA1DC72B6 0x86DDF9C2 b323
    pub unsafe fn datafile_start_save_to_cloud(filename: *const i8, p_1: Any) -> bool {
        call_native!(bool, 0x83BCCE3224735F05u64, filename, p_1)
    } // 0x83BCCE3224735F05 0x768CBB35 b323
    pub unsafe fn datafile_update_save_to_cloud(p_0: *mut Bool) -> bool {
        call_native!(bool, 0x4DFDD9EB705F8140u64, p_0)
    } // 0x4DFDD9EB705F8140 0x0B4087F7 b323
    pub unsafe fn datafile_is_save_pending() -> bool {
        call_native!(bool, 0xBEDB96A7584AA8CFu64)
    } // 0xBEDB96A7584AA8CF 0x5DCD0796 b323
    pub unsafe fn datafile_load_offline_ugc_for_additional_data_file(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0xA6EEF01087181EDDu64, p_0, p_1)
    } // 0xA6EEF01087181EDD  b2189
    pub unsafe fn datafile_delete_for_additional_data_file(p_0: Any) {
        call_native!(Void, 0x6AD0BD5E087866CBu64, p_0);
    } // 0x6AD0BD5E087866CB  b2189
    pub unsafe fn datafile_get_file_dict_for_additional_data_file(p_0: Any) -> *mut Any {
        call_native!(*mut Any, 0xDBF860CF1DB8E599u64, p_0)
    } // 0xDBF860CF1DB8E599  b2189
    pub unsafe fn datadict_set_bool(object_data: *mut Any, key: *const i8, value: bool) {
        call_native!(Void, 0x35124302A556A325u64, object_data, key, value);
    } // 0x35124302A556A325 0x9B29D99B b323
    pub unsafe fn datadict_set_int(object_data: *mut Any, key: *const i8, value: i32) {
        call_native!(Void, 0xE7E035450A7948D5u64, object_data, key, value);
    } // 0xE7E035450A7948D5 0xEFCF554A b323
    pub unsafe fn datadict_set_float(object_data: *mut Any, key: *const i8, value: f32) {
        call_native!(Void, 0xC27E1CC2D795105Eu64, object_data, key, value);
    } // 0xC27E1CC2D795105E 0xE972CACF b323
    pub unsafe fn datadict_set_string(object_data: *mut Any, key: *const i8, value: *const i8) {
        call_native!(Void, 0x8FF3847DADD8E30Cu64, object_data, key, value);
    } // 0x8FF3847DADD8E30C 0xD437615C b323
    pub unsafe fn datadict_set_vector(
        object_data: *mut Any,
        key: *const i8,
        value_x: f32,
        value_y: f32,
        value_z: f32,
    ) {
        call_native!(
            Void,
            0x4CD49B76338C7DEEu64,
            object_data,
            key,
            value_x,
            value_y,
            value_z
        );
    } // 0x4CD49B76338C7DEE 0x75FC6C3C b323
    pub unsafe fn datadict_create_dict(object_data: *mut Any, key: *const i8) -> *mut Any {
        call_native!(*mut Any, 0xA358F56F10732EE1u64, object_data, key)
    } // 0xA358F56F10732EE1 0x96A8E05F b323
    pub unsafe fn datadict_create_array(object_data: *mut Any, key: *const i8) -> *mut Any {
        call_native!(*mut Any, 0x5B11728527CA6E5Fu64, object_data, key)
    } // 0x5B11728527CA6E5F 0x03939B8D b323
    pub unsafe fn datadict_get_bool(object_data: *mut Any, key: *const i8) -> bool {
        call_native!(bool, 0x1186940ED72FFEECu64, object_data, key)
    } // 0x1186940ED72FFEEC 0x8876C872 b323
    pub unsafe fn datadict_get_int(object_data: *mut Any, key: *const i8) -> i32 {
        call_native!(i32, 0x78F06F6B1FB5A80Cu64, object_data, key)
    } // 0x78F06F6B1FB5A80C 0xA6C68693 b323
    pub unsafe fn datadict_get_float(object_data: *mut Any, key: *const i8) -> f32 {
        call_native!(f32, 0x06610343E73B9727u64, object_data, key)
    } // 0x06610343E73B9727 0xA92C1AF4 b323
    pub unsafe fn datadict_get_string(object_data: *mut Any, key: *const i8) -> *const i8 {
        call_native!(*const i8, 0x3D2FD9E763B24472u64, object_data, key)
    } // 0x3D2FD9E763B24472 0x942160EC b323
    pub unsafe fn datadict_get_vector(object_data: *mut Any, key: *const i8) -> Vector3 {
        call_native!(Vector3, 0x46CD3CB66E0825CCu64, object_data, key)
    } // 0x46CD3CB66E0825CC 0xE84A127A b323
    pub unsafe fn datadict_get_dict(object_data: *mut Any, key: *const i8) -> *mut Any {
        call_native!(*mut Any, 0xB6B9DDC412FCEEE2u64, object_data, key)
    } // 0xB6B9DDC412FCEEE2 0xC9C13D8D b323
    pub unsafe fn datadict_get_array(object_data: *mut Any, key: *const i8) -> *mut Any {
        call_native!(*mut Any, 0x7A983AA9DA2659EDu64, object_data, key)
    } // 0x7A983AA9DA2659ED 0x1F2F7D00 b323
    pub unsafe fn datadict_get_type(object_data: *mut Any, key: *const i8) -> i32 {
        call_native!(i32, 0x031C55ED33227371u64, object_data, key)
    } // 0x031C55ED33227371 0x2678342A b323
    pub unsafe fn dataarray_add_bool(array_data: *mut Any, value: bool) {
        call_native!(Void, 0xF8B0F5A43E928C76u64, array_data, value);
    } // 0xF8B0F5A43E928C76 0x08174B90 b323
    pub unsafe fn dataarray_add_int(array_data: *mut Any, value: i32) {
        call_native!(Void, 0xCABDB751D86FE93Bu64, array_data, value);
    } // 0xCABDB751D86FE93B 0xF29C0B36 b323
    pub unsafe fn dataarray_add_float(array_data: *mut Any, value: f32) {
        call_native!(Void, 0x57A995FD75D37F56u64, array_data, value);
    } // 0x57A995FD75D37F56 0xE4302123 b323
    pub unsafe fn dataarray_add_string(array_data: *mut Any, value: *const i8) {
        call_native!(Void, 0x2F0661C155AEEEAAu64, array_data, value);
    } // 0x2F0661C155AEEEAA 0xF3C01350 b323
    pub unsafe fn dataarray_add_vector(
        array_data: *mut Any,
        value_x: f32,
        value_y: f32,
        value_z: f32,
    ) {
        call_native!(
            Void,
            0x407F8D034F70F0C2u64,
            array_data,
            value_x,
            value_y,
            value_z
        );
    } // 0x407F8D034F70F0C2 0x16F464B6 b323
    pub unsafe fn dataarray_add_dict(array_data: *mut Any) -> *mut Any {
        call_native!(*mut Any, 0x6889498B3E19C797u64, array_data)
    } // 0x6889498B3E19C797 0xC174C71B b323
    pub unsafe fn dataarray_get_bool(array_data: *mut Any, array_index: i32) -> bool {
        call_native!(bool, 0x50C1B2874E50C114u64, array_data, array_index)
    } // 0x50C1B2874E50C114 0xA2E5F921 b323
    pub unsafe fn dataarray_get_int(array_data: *mut Any, array_index: i32) -> i32 {
        call_native!(i32, 0x3E5AE19425CD74BEu64, array_data, array_index)
    } // 0x3E5AE19425CD74BE 0xBB120CFC b323
    pub unsafe fn dataarray_get_float(array_data: *mut Any, array_index: i32) -> f32 {
        call_native!(f32, 0xC0C527B525D7CFB5u64, array_data, array_index)
    } // 0xC0C527B525D7CFB5 0x08AD2CC2 b323
    pub unsafe fn dataarray_get_string(array_data: *mut Any, array_index: i32) -> *const i8 {
        call_native!(*const i8, 0xD3F2FFEB8D836F52u64, array_data, array_index)
    } // 0xD3F2FFEB8D836F52 0x93F985A6 b323
    pub unsafe fn dataarray_get_vector(array_data: *mut Any, array_index: i32) -> Vector3 {
        call_native!(Vector3, 0x8D2064E5B64A628Au64, array_data, array_index)
    } // 0x8D2064E5B64A628A 0x80E3DA55 b323
    pub unsafe fn dataarray_get_dict(array_data: *mut Any, array_index: i32) -> *mut Any {
        call_native!(*mut Any, 0x8B5FADCC4E3A145Fu64, array_data, array_index)
    } // 0x8B5FADCC4E3A145F 0xECE81278 b323
    pub unsafe fn dataarray_get_count(array_data: *mut Any) -> i32 {
        call_native!(i32, 0x065DB281590CEA2Du64, array_data)
    } // 0x065DB281590CEA2D 0xA8A21766 b323
    pub unsafe fn dataarray_get_type(array_data: *mut Any, array_index: i32) -> i32 {
        call_native!(i32, 0x3A0014ADB172A3C5u64, array_data, array_index)
    } // 0x3A0014ADB172A3C5 0xFA2402C8 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod decorator {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn decor_set_time(entity: Entity, property_name: *const i8, timestamp: i32) -> bool {
        call_native!(
            bool,
            0x95AED7B8E39ECAA4u64,
            entity,
            property_name,
            timestamp
        )
    } // 0x95AED7B8E39ECAA4 0xBBAEEF94 b323
    pub unsafe fn decor_set_bool(entity: Entity, property_name: *const i8, value: bool) -> bool {
        call_native!(bool, 0x6B1E8E2ED1335B71u64, entity, property_name, value)
    } // 0x6B1E8E2ED1335B71 0x8E101F5C b323
    pub unsafe fn decor_set_float(entity: Entity, property_name: *const i8, value: f32) -> bool {
        call_native!(bool, 0x211AB1DD8D0F363Au64, entity, property_name, value)
    } // 0x211AB1DD8D0F363A 0xBC7BD5CB b323
    pub unsafe fn decor_set_int(entity: Entity, property_name: *const i8, value: i32) -> bool {
        call_native!(bool, 0x0CE3AA5E1CA19E10u64, entity, property_name, value)
    } // 0x0CE3AA5E1CA19E10 0xDB718B21 b323
    pub unsafe fn decor_get_bool(entity: Entity, property_name: *const i8) -> bool {
        call_native!(bool, 0xDACE671663F2F5DBu64, entity, property_name)
    } // 0xDACE671663F2F5DB 0xDBCE51E0 b323
    pub unsafe fn decor_get_float(entity: Entity, property_name: *const i8) -> f32 {
        call_native!(f32, 0x6524A2F114706F43u64, entity, property_name)
    } // 0x6524A2F114706F43 0x8DE5382F b323
    pub unsafe fn decor_get_int(entity: Entity, property_name: *const i8) -> i32 {
        call_native!(i32, 0xA06C969B02A97298u64, entity, property_name)
    } // 0xA06C969B02A97298 0xDDDE59B5 b323
    pub unsafe fn decor_exist_on(entity: Entity, property_name: *const i8) -> bool {
        call_native!(bool, 0x05661B80A8C9165Fu64, entity, property_name)
    } // 0x05661B80A8C9165F 0x74EF9C40 b323
    pub unsafe fn decor_remove(entity: Entity, property_name: *const i8) -> bool {
        call_native!(bool, 0x00EE9F297C738720u64, entity, property_name)
    } // 0x00EE9F297C738720 0xE0E2640B b323
    pub unsafe fn decor_register(property_name: *const i8, _type: i32) {
        call_native!(Void, 0x9FD90732F56403CEu64, property_name, _type);
    } // 0x9FD90732F56403CE 0x68BD42A9 b323
    pub unsafe fn decor_is_registered_as_type(property_name: *const i8, _type: i32) -> bool {
        call_native!(bool, 0x4F14F9F870D6FBC8u64, property_name, _type)
    } // 0x4F14F9F870D6FBC8 0x7CF0971D b323
    pub unsafe fn decor_register_lock() {
        call_native!(Void, 0xA9D14EEA259F9248u64);
    } // 0xA9D14EEA259F9248 0x7F3F1C02 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod dlc {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn are_any_ccs_pending() -> bool {
        call_native!(bool, 0x241FCA5B1AA14F75u64)
    } // 0x241FCA5B1AA14F75 0x0AF83036 b323
    pub unsafe fn is_dlc_present(dlc_hash: Hash) -> bool {
        call_native!(bool, 0x812595A0644CE1DEu64, dlc_hash)
    } // 0x812595A0644CE1DE 0x1F321943 b323
    pub unsafe fn dlc_check_cloud_data_correct() -> bool {
        call_native!(bool, 0xF2E07819EF1A5289u64)
    } // 0xF2E07819EF1A5289 0x881B1FDB b323
    pub unsafe fn get_extracontent_cloud_result() -> i32 {
        call_native!(i32, 0x9489659372A81585u64)
    } // 0x9489659372A81585 0xC2169164 b323
    pub unsafe fn dlc_check_compat_pack_configuration() -> bool {
        call_native!(bool, 0xA213B11DFF526300u64)
    } // 0xA213B11DFF526300 0xF79A97F5 b323
    pub unsafe fn get_ever_had_bad_pack_order() -> bool {
        call_native!(bool, 0x8D30F648014A92B5u64)
    } // 0x8D30F648014A92B5 0xF69B729C b323
    pub unsafe fn get_is_loading_screen_active() -> bool {
        call_native!(bool, 0x10D0A8F259E93EC9u64)
    } // 0x10D0A8F259E93EC9 0x517B601B b323
    pub unsafe fn get_is_initial_loading_screen_active() -> bool {
        call_native!(bool, 0xC4637A6D03C24CC3u64)
    } // 0xC4637A6D03C24CC3  b1734
    pub unsafe fn has_cloud_requests_finished(p_0: *mut Bool, unused: i32) -> bool {
        call_native!(bool, 0x46E2B844905BC5F0u64, p_0, unused)
    } // 0x46E2B844905BC5F0 0x6087C10C b323
    pub unsafe fn on_enter_sp() {
        call_native!(Void, 0xD7C10C4A637992C9u64);
    } // 0xD7C10C4A637992C9 0x8BF60FC3 b323
    pub unsafe fn on_enter_mp() {
        call_native!(Void, 0x0888C3502DBBEEF5u64);
    } // 0x0888C3502DBBEEF5 0xC65586A9 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod entity {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn does_entity_exist(entity: Entity) -> bool {
        call_native!(bool, 0x7239B21A38F536BAu64, entity)
    } // 0x7239B21A38F536BA 0x3AC90869 b323
    pub unsafe fn does_entity_belong_to_this_script(entity: Entity, p_1: bool) -> bool {
        call_native!(bool, 0xDDE6DF5AE89981D2u64, entity, p_1)
    } // 0xDDE6DF5AE89981D2 0xACFEB3F9 b323
    pub unsafe fn does_entity_have_drawable(entity: Entity) -> bool {
        call_native!(bool, 0x060D6E96F8B8E48Du64, entity)
    } // 0x060D6E96F8B8E48D 0xA5B33300 b323
    pub unsafe fn does_entity_have_physics(entity: Entity) -> bool {
        call_native!(bool, 0xDA95EA3317CC5064u64, entity)
    } // 0xDA95EA3317CC5064 0x9BCD2979 b323
    pub unsafe fn does_entity_have_skeleton(entity: Entity) -> bool {
        call_native!(bool, 0x764EB96874EFFDC1u64, entity)
    } // 0x764EB96874EFFDC1  b2699
    pub unsafe fn does_entity_have_anim_director(entity: Entity) -> bool {
        call_native!(bool, 0x2158E81A6AF65EA9u64, entity)
    } // 0x2158E81A6AF65EA9  b2699
    pub unsafe fn has_entity_anim_finished(
        entity: Entity,
        anim_dict: *const i8,
        anim_name: *const i8,
        p_3: i32,
    ) -> bool {
        call_native!(
            bool,
            0x20B711662962B472u64,
            entity,
            anim_dict,
            anim_name,
            p_3
        )
    } // 0x20B711662962B472 0x1D9CAB92 b323
    pub unsafe fn has_entity_been_damaged_by_any_object(entity: Entity) -> bool {
        call_native!(bool, 0x95EB9964FF5C5C65u64, entity)
    } // 0x95EB9964FF5C5C65 0x6B74582E b323
    pub unsafe fn has_entity_been_damaged_by_any_ped(entity: Entity) -> bool {
        call_native!(bool, 0x605F5A140F202491u64, entity)
    } // 0x605F5A140F202491 0x53FD4A25 b323
    pub unsafe fn has_entity_been_damaged_by_any_vehicle(entity: Entity) -> bool {
        call_native!(bool, 0xDFD5033FDBA0A9C8u64, entity)
    } // 0xDFD5033FDBA0A9C8 0x878C2CE0 b323
    pub unsafe fn has_entity_been_damaged_by_entity(
        entity_1: Entity,
        entity_2: Entity,
        p_2: bool,
    ) -> bool {
        call_native!(bool, 0xC86D67D52A707CF8u64, entity_1, entity_2, p_2)
    } // 0xC86D67D52A707CF8 0x07FC77E0 b323
    pub unsafe fn has_entity_clear_los_to_entity(
        entity_1: Entity,
        entity_2: Entity,
        trace_type: i32,
    ) -> bool {
        call_native!(bool, 0xFCDFF7B72D23A1ACu64, entity_1, entity_2, trace_type)
    } // 0xFCDFF7B72D23A1AC 0x53576FA7 b323
    pub unsafe fn has_entity_clear_los_to_entity_adjust_for_cover(
        entity_1: Entity,
        entity_2: Entity,
        trace_type: i32,
    ) -> bool {
        call_native!(bool, 0x394BDE2A7BBA031Eu64, entity_1, entity_2, trace_type)
    } // 0x394BDE2A7BBA031E  b1868
    pub unsafe fn has_entity_clear_los_to_entity_in_front(
        entity_1: Entity,
        entity_2: Entity,
    ) -> bool {
        call_native!(bool, 0x0267D00AF114F17Au64, entity_1, entity_2)
    } // 0x0267D00AF114F17A 0x210D87C8 b323
    pub unsafe fn has_entity_collided_with_anything(entity: Entity) -> bool {
        call_native!(bool, 0x8BAD02F0368D9E14u64, entity)
    } // 0x8BAD02F0368D9E14 0x662A2F41 b323
    pub unsafe fn _get_last_entity_hit_by_entity(entity: Entity) -> Entity {
        call_native!(Entity, 0xA75EE4F689B85391u64, entity)
    } // 0xA75EE4F689B85391  b2802
    pub unsafe fn get_last_material_hit_by_entity(entity: Entity) -> Hash {
        call_native!(Hash, 0x5C3D0A935F535C4Cu64, entity)
    } // 0x5C3D0A935F535C4C 0xC0E3AA47 b323
    pub unsafe fn get_collision_normal_of_last_hit_for_entity(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0xE465D4AB7CA6AE72u64, entity)
    } // 0xE465D4AB7CA6AE72 0xAB415C07 b323
    pub unsafe fn force_entity_ai_and_animation_update(entity: Entity) {
        call_native!(Void, 0x40FDEDB72F8293B2u64, entity);
    } // 0x40FDEDB72F8293B2 0x58D9775F b323
    pub unsafe fn get_entity_anim_current_time(
        entity: Entity,
        anim_dict: *const i8,
        anim_name: *const i8,
    ) -> f32 {
        call_native!(f32, 0x346D81500D088F42u64, entity, anim_dict, anim_name)
    } // 0x346D81500D088F42 0x83943F41 b323
    pub unsafe fn get_entity_anim_total_time(
        entity: Entity,
        anim_dict: *const i8,
        anim_name: *const i8,
    ) -> f32 {
        call_native!(f32, 0x50BD2730B191E360u64, entity, anim_dict, anim_name)
    } // 0x50BD2730B191E360 0x433A9D18 b323
    pub unsafe fn get_anim_duration(anim_dict: *const i8, anim_name: *const i8) -> f32 {
        call_native!(f32, 0xFEDDF04D62B8D790u64, anim_dict, anim_name)
    } // 0xFEDDF04D62B8D790 0x8B5E3E3D b323
    pub unsafe fn get_entity_attached_to(entity: Entity) -> Entity {
        call_native!(Entity, 0x48C2BED9180FE123u64, entity)
    } // 0x48C2BED9180FE123 0xFE1589F9 b323
    pub unsafe fn get_entity_coords(entity: Entity, alive: bool) -> Vector3 {
        call_native!(Vector3, 0x3FEF770D40960D5Au64, entity, alive)
    } // 0x3FEF770D40960D5A 0x1647F1CB b323
    pub unsafe fn get_entity_forward_vector(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x0A794A5A57F8DF91u64, entity)
    } // 0x0A794A5A57F8DF91 0x84DCECBF b323
    pub unsafe fn get_entity_forward_x(entity: Entity) -> f32 {
        call_native!(f32, 0x8BB4EF4214E0E6D5u64, entity)
    } // 0x8BB4EF4214E0E6D5 0x49FAE914 b323
    pub unsafe fn get_entity_forward_y(entity: Entity) -> f32 {
        call_native!(f32, 0x866A4A5FAE349510u64, entity)
    } // 0x866A4A5FAE349510 0x9E2F917C b323
    pub unsafe fn get_entity_heading(entity: Entity) -> f32 {
        call_native!(f32, 0xE83D4F9BA2A38914u64, entity)
    } // 0xE83D4F9BA2A38914 0x972CC383 b323
    pub unsafe fn get_entity_heading_from_eulers(entity: Entity) -> f32 {
        call_native!(f32, 0x846BF6291198A71Eu64, entity)
    } // 0x846BF6291198A71E 0x9320E642 b323
    pub unsafe fn get_entity_health(entity: Entity) -> i32 {
        call_native!(i32, 0xEEF059FAD016D209u64, entity)
    } // 0xEEF059FAD016D209 0x8E3222B7 b323
    pub unsafe fn get_entity_max_health(entity: Entity) -> i32 {
        call_native!(i32, 0x15D757606D170C3Cu64, entity)
    } // 0x15D757606D170C3C 0xC7AE6AA1 b323
    pub unsafe fn set_entity_max_health(entity: Entity, value: i32) {
        call_native!(Void, 0x166E7CF68597D8B5u64, entity, value);
    } // 0x166E7CF68597D8B5 0x96F84DF8 b323
    pub unsafe fn get_entity_height(
        entity: Entity,
        _x: f32,
        _y: f32,
        _z: f32,
        at_top: bool,
        in_world_coords: bool,
    ) -> f32 {
        call_native!(
            f32,
            0x5A504562485944DDu64,
            entity,
            _x,
            _y,
            _z,
            at_top,
            in_world_coords
        )
    } // 0x5A504562485944DD 0xEE443481 b323
    pub unsafe fn get_entity_height_above_ground(entity: Entity) -> f32 {
        call_native!(f32, 0x1DD55701034110E5u64, entity)
    } // 0x1DD55701034110E5 0x57F56A4D b323
    pub unsafe fn get_entity_matrix(
        entity: Entity,
        forward_vector: *mut Vector3,
        right_vector: *mut Vector3,
        up_vector: *mut Vector3,
        position: *mut Vector3,
    ) {
        call_native!(
            Void,
            0xECB2FC7235A7D137u64,
            entity,
            forward_vector,
            right_vector,
            up_vector,
            position
        );
    } // 0xECB2FC7235A7D137 0xEB9EB001 b323
    pub unsafe fn get_entity_model(entity: Entity) -> Hash {
        call_native!(Hash, 0x9F47B058362C84B5u64, entity)
    } // 0x9F47B058362C84B5 0xDAFCB3EC b323
    pub unsafe fn get_offset_from_entity_given_world_coords(
        entity: Entity,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
    ) -> Vector3 {
        call_native!(Vector3, 0x2274BC1C4885E333u64, entity, pos_x, pos_y, pos_z)
    } // 0x2274BC1C4885E333 0x6477EC9E b323
    pub unsafe fn get_offset_from_entity_in_world_coords(
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x1899F328B0E12848u64,
            entity,
            offset_x,
            offset_y,
            offset_z
        )
    } // 0x1899F328B0E12848 0xABCF043A b323
    pub unsafe fn get_entity_pitch(entity: Entity) -> f32 {
        call_native!(f32, 0xD45DC2893621E1FEu64, entity)
    } // 0xD45DC2893621E1FE 0xFCE6ECE5 b323
    pub unsafe fn get_entity_quaternion(
        entity: Entity,
        x: *mut f32,
        y: *mut f32,
        z: *mut f32,
        w: *mut f32,
    ) {
        call_native!(Void, 0x7B3703D2D32DFA18u64, entity, x, y, z, w);
    } // 0x7B3703D2D32DFA18 0x5154EC90 b323
    pub unsafe fn get_entity_roll(entity: Entity) -> f32 {
        call_native!(f32, 0x831E0242595560DFu64, entity)
    } // 0x831E0242595560DF 0x36610842 b323
    pub unsafe fn get_entity_rotation(entity: Entity, rotation_order: i32) -> Vector3 {
        call_native!(Vector3, 0xAFBD61CC738D9EB9u64, entity, rotation_order)
    } // 0xAFBD61CC738D9EB9 0x8FF45B04 b323
    pub unsafe fn get_entity_rotation_velocity(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x213B91045D09B983u64, entity)
    } // 0x213B91045D09B983 0x9BF8A73F b323
    pub unsafe fn get_entity_script(entity: Entity, script: *mut ScrHandle) -> *const i8 {
        call_native!(*const i8, 0xA6E9C38DB51D7748u64, entity, script)
    } // 0xA6E9C38DB51D7748 0xB7F70784 b323
    pub unsafe fn get_entity_speed(entity: Entity) -> f32 {
        call_native!(f32, 0xD5037BA82E12416Fu64, entity)
    } // 0xD5037BA82E12416F 0x9E1E4798 b323
    pub unsafe fn get_entity_speed_vector(entity: Entity, relative: bool) -> Vector3 {
        call_native!(Vector3, 0x9A8D700A51CB7B0Du64, entity, relative)
    } // 0x9A8D700A51CB7B0D 0x3ED2B997 b323
    pub unsafe fn get_entity_upright_value(entity: Entity) -> f32 {
        call_native!(f32, 0x95EED5A694951F9Fu64, entity)
    } // 0x95EED5A694951F9F 0xF4268190 b323
    pub unsafe fn get_entity_velocity(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x4805D2B1D8CF94A9u64, entity)
    } // 0x4805D2B1D8CF94A9 0xC14C9B6B b323
    pub unsafe fn get_object_index_from_entity_index(entity: Entity) -> Object {
        call_native!(Object, 0xD7E3B9735C0F89D6u64, entity)
    } // 0xD7E3B9735C0F89D6 0xBC5A9C58 b323
    pub unsafe fn get_ped_index_from_entity_index(entity: Entity) -> Ped {
        call_native!(Ped, 0x04A2A40C73395041u64, entity)
    } // 0x04A2A40C73395041 0xC46F74AC b323
    pub unsafe fn get_vehicle_index_from_entity_index(entity: Entity) -> Vehicle {
        call_native!(Vehicle, 0x4B53F92932ADFAC0u64, entity)
    } // 0x4B53F92932ADFAC0 0xC69CF43D b323
    pub unsafe fn get_world_position_of_entity_bone(entity: Entity, bone_index: i32) -> Vector3 {
        call_native!(Vector3, 0x44A8FCB8ED227738u64, entity, bone_index)
    } // 0x44A8FCB8ED227738 0x7C6339DF b323
    pub unsafe fn get_nearest_player_to_entity(entity: Entity) -> Player {
        call_native!(Player, 0x7196842CB375CDB3u64, entity)
    } // 0x7196842CB375CDB3 0xCE17FDEC b323
    pub unsafe fn get_nearest_player_to_entity_on_team(entity: Entity, team: i32) -> Player {
        call_native!(Player, 0x4DC9A62F844D9337u64, entity, team)
    } // 0x4DC9A62F844D9337 0xB1808F56 b323
    pub unsafe fn get_nearest_participant_to_entity(entity: Entity) -> i32 {
        call_native!(i32, 0xFFBD7052D65BE0FFu64, entity)
    } // 0xFFBD7052D65BE0FF  b2944
    pub unsafe fn get_entity_type(entity: Entity) -> i32 {
        call_native!(i32, 0x8ACD366038D14505u64, entity)
    } // 0x8ACD366038D14505 0x0B1BD08D b323
    pub unsafe fn get_entity_population_type(entity: Entity) -> i32 {
        call_native!(i32, 0xF6F5161F4534EDFFu64, entity)
    } // 0xF6F5161F4534EDFF 0xFC30DDFF b323
    pub unsafe fn is_an_entity(handle: ScrHandle) -> bool {
        call_native!(bool, 0x731EC8A916BD11A1u64, handle)
    } // 0x731EC8A916BD11A1 0xD4B9715A b323
    pub unsafe fn is_entity_a_ped(entity: Entity) -> bool {
        call_native!(bool, 0x524AC5ECEA15343Eu64, entity)
    } // 0x524AC5ECEA15343E 0x55D33EAB b323
    pub unsafe fn is_entity_a_mission_entity(entity: Entity) -> bool {
        call_native!(bool, 0x0A7B270912999B3Cu64, entity)
    } // 0x0A7B270912999B3C 0x2632E124 b323
    pub unsafe fn is_entity_a_vehicle(entity: Entity) -> bool {
        call_native!(bool, 0x6AC7003FA6E5575Eu64, entity)
    } // 0x6AC7003FA6E5575E 0xBE800B01 b323
    pub unsafe fn is_entity_an_object(entity: Entity) -> bool {
        call_native!(bool, 0x8D68C8FD0FACA94Eu64, entity)
    } // 0x8D68C8FD0FACA94E 0x3F52E561 b323
    pub unsafe fn is_entity_at_coord(
        entity: Entity,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_size: f32,
        y_size: f32,
        z_size: f32,
        p_7: bool,
        p_8: bool,
        p_9: i32,
    ) -> bool {
        call_native!(
            bool,
            0x20B60995556D004Fu64,
            entity,
            x_pos,
            y_pos,
            z_pos,
            x_size,
            y_size,
            z_size,
            p_7,
            p_8,
            p_9
        )
    } // 0x20B60995556D004F 0xD749B606 b323
    pub unsafe fn is_entity_at_entity(
        entity_1: Entity,
        entity_2: Entity,
        x_size: f32,
        y_size: f32,
        z_size: f32,
        p_5: bool,
        p_6: bool,
        p_7: i32,
    ) -> bool {
        call_native!(
            bool,
            0x751B70C3D034E187u64,
            entity_1,
            entity_2,
            x_size,
            y_size,
            z_size,
            p_5,
            p_6,
            p_7
        )
    } // 0x751B70C3D034E187 0xDABDCB52 b323
    pub unsafe fn is_entity_attached(entity: Entity) -> bool {
        call_native!(bool, 0xB346476EF1A64897u64, entity)
    } // 0xB346476EF1A64897 0xEC1479D5 b323
    pub unsafe fn is_entity_attached_to_any_object(entity: Entity) -> bool {
        call_native!(bool, 0xCF511840CEEDE0CCu64, entity)
    } // 0xCF511840CEEDE0CC 0x0B5DE340 b323
    pub unsafe fn is_entity_attached_to_any_ped(entity: Entity) -> bool {
        call_native!(bool, 0xB1632E9A5F988D11u64, entity)
    } // 0xB1632E9A5F988D11 0x9D7A609C b323
    pub unsafe fn is_entity_attached_to_any_vehicle(entity: Entity) -> bool {
        call_native!(bool, 0x26AA915AD89BFB4Bu64, entity)
    } // 0x26AA915AD89BFB4B 0xDE5C995E b323
    pub unsafe fn is_entity_attached_to_entity(from: Entity, to: Entity) -> bool {
        call_native!(bool, 0xEFBE71898A993728u64, from, to)
    } // 0xEFBE71898A993728 0xB0ABFEA8 b323
    pub unsafe fn is_entity_dead(entity: Entity, p_1: bool) -> bool {
        call_native!(bool, 0x5F9532F3B5CC2551u64, entity, p_1)
    } // 0x5F9532F3B5CC2551 0xB6F7CBAC b323
    pub unsafe fn is_entity_in_air(entity: Entity) -> bool {
        call_native!(bool, 0x886E37EC497200B6u64, entity)
    } // 0x886E37EC497200B6 0xA4157987 b323
    pub unsafe fn is_entity_in_angled_area(
        entity: Entity,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        debug: bool,
        include_z: bool,
        p_1_0: Any,
    ) -> bool {
        call_native!(
            bool,
            0x51210CED3DA1C78Au64,
            entity,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            debug,
            include_z,
            p_1_0
        )
    } // 0x51210CED3DA1C78A 0x883622FA b323
    pub unsafe fn is_entity_in_area(
        entity: Entity,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_7: bool,
        p_8: bool,
        p_9: Any,
    ) -> bool {
        call_native!(
            bool,
            0x54736AA40E271165u64,
            entity,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_7,
            p_8,
            p_9
        )
    } // 0x54736AA40E271165 0x8C2DFA9D b323
    pub unsafe fn is_entity_in_zone(entity: Entity, zone: *const i8) -> bool {
        call_native!(bool, 0xB6463CF6AF527071u64, entity, zone)
    } // 0xB6463CF6AF527071 0x45C82B21 b323
    pub unsafe fn is_entity_in_water(entity: Entity) -> bool {
        call_native!(bool, 0xCFB0A0D8EDD145A3u64, entity)
    } // 0xCFB0A0D8EDD145A3 0x4C3C2508 b323
    pub unsafe fn get_entity_submerged_level(entity: Entity) -> f32 {
        call_native!(f32, 0xE81AFC1BC4CC41CEu64, entity)
    } // 0xE81AFC1BC4CC41CE 0x0170F68C b323
    pub unsafe fn set_entity_requires_more_expensive_river_check(entity: Entity, toggle: bool) {
        call_native!(Void, 0x694E00132F2823EDu64, entity, toggle);
    } // 0x694E00132F2823ED 0x40C84A74 b323
    pub unsafe fn is_entity_on_screen(entity: Entity) -> bool {
        call_native!(bool, 0xE659E47AF827484Bu64, entity)
    } // 0xE659E47AF827484B 0xC1FEC5ED b323
    pub unsafe fn is_entity_playing_anim(
        entity: Entity,
        anim_dict: *const i8,
        anim_name: *const i8,
        task_flag: i32,
    ) -> bool {
        call_native!(
            bool,
            0x1F0B79228E461EC9u64,
            entity,
            anim_dict,
            anim_name,
            task_flag
        )
    } // 0x1F0B79228E461EC9 0x0D130D34 b323
    pub unsafe fn is_entity_static(entity: Entity) -> bool {
        call_native!(bool, 0x1218E6886D3D8327u64, entity)
    } // 0x1218E6886D3D8327 0x928E12E9 b323
    pub unsafe fn is_entity_touching_entity(entity: Entity, target_entity: Entity) -> bool {
        call_native!(bool, 0x17FFC1B2BA35A494u64, entity, target_entity)
    } // 0x17FFC1B2BA35A494 0x6B931477 b323
    pub unsafe fn is_entity_touching_model(entity: Entity, model_hash: Hash) -> bool {
        call_native!(bool, 0x0F42323798A58C8Cu64, entity, model_hash)
    } // 0x0F42323798A58C8C 0x307E7611 b323
    pub unsafe fn is_entity_upright(entity: Entity, angle: f32) -> bool {
        call_native!(bool, 0x5333F526F6AB19AAu64, entity, angle)
    } // 0x5333F526F6AB19AA 0x3BCDF4E1 b323
    pub unsafe fn is_entity_upsidedown(entity: Entity) -> bool {
        call_native!(bool, 0x1DBD58820FA61D71u64, entity)
    } // 0x1DBD58820FA61D71 0x5ACAA48F b323
    pub unsafe fn is_entity_visible(entity: Entity) -> bool {
        call_native!(bool, 0x47D6F43D77935C75u64, entity)
    } // 0x47D6F43D77935C75 0x120B4ED5 b323
    pub unsafe fn is_entity_visible_to_script(entity: Entity) -> bool {
        call_native!(bool, 0xD796CB5BA8F20E32u64, entity)
    } // 0xD796CB5BA8F20E32 0x5D240E9D b323
    pub unsafe fn is_entity_occluded(entity: Entity) -> bool {
        call_native!(bool, 0xE31C2C72B8692B64u64, entity)
    } // 0xE31C2C72B8692B64 0x46BC5B40 b323
    pub unsafe fn would_entity_be_occluded(
        entity_model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        p_4: bool,
    ) -> bool {
        call_native!(bool, 0xEE5D2A122E09EC42u64, entity_model_hash, x, y, z, p_4)
    } // 0xEE5D2A122E09EC42 0xEA127CBC b323
    pub unsafe fn is_entity_waiting_for_world_collision(entity: Entity) -> bool {
        call_native!(bool, 0xD05BFF0C0A12C68Fu64, entity)
    } // 0xD05BFF0C0A12C68F 0x00AB7A4A b323
    pub unsafe fn apply_force_to_entity_center_of_mass(
        entity: Entity,
        force_type: i32,
        x: f32,
        y: f32,
        z: f32,
        p_5: bool,
        is_direction_rel: bool,
        is_force_rel: bool,
        p_8: bool,
    ) {
        call_native!(
            Void,
            0x18FF00FC7EFF559Eu64,
            entity,
            force_type,
            x,
            y,
            z,
            p_5,
            is_direction_rel,
            is_force_rel,
            p_8
        );
    } // 0x18FF00FC7EFF559E 0x28924E98 b323
    pub unsafe fn apply_force_to_entity(
        entity: Entity,
        force_flags: i32,
        x: f32,
        y: f32,
        z: f32,
        off_x: f32,
        off_y: f32,
        off_z: f32,
        bone_index: i32,
        is_direction_rel: bool,
        ignore_up_vec: bool,
        is_force_rel: bool,
        p_1_2: bool,
        p_1_3: bool,
    ) {
        call_native!(
            Void,
            0xC5F68BE9613E2D18u64,
            entity,
            force_flags,
            x,
            y,
            z,
            off_x,
            off_y,
            off_z,
            bone_index,
            is_direction_rel,
            ignore_up_vec,
            is_force_rel,
            p_1_2,
            p_1_3
        );
    } // 0xC5F68BE9613E2D18 0xC1C0855A b323
    pub unsafe fn attach_entity_to_entity(
        entity_1: Entity,
        entity_2: Entity,
        bone_index: i32,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        p_9: bool,
        use_soft_pinning: bool,
        collision: bool,
        is_ped: bool,
        vertex_index: i32,
        fixed_rot: bool,
        p_1_5: Any,
    ) {
        call_native!(
            Void,
            0x6B9BBD38AB0796DFu64,
            entity_1,
            entity_2,
            bone_index,
            x_pos,
            y_pos,
            z_pos,
            x_rot,
            y_rot,
            z_rot,
            p_9,
            use_soft_pinning,
            collision,
            is_ped,
            vertex_index,
            fixed_rot,
            p_1_5
        );
    } // 0x6B9BBD38AB0796DF 0xEC024237 b323
    pub unsafe fn attach_entity_bone_to_entity_bone(
        entity_1: Entity,
        entity_2: Entity,
        bone_index_1: i32,
        bone_index_2: i32,
        p_4: bool,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x5C48B75732C8456Cu64,
            entity_1,
            entity_2,
            bone_index_1,
            bone_index_2,
            p_4,
            p_5
        );
    } // 0x5C48B75732C8456C  b791
    pub unsafe fn attach_entity_bone_to_entity_bone_y_forward(
        entity_1: Entity,
        entity_2: Entity,
        bone_index_1: i32,
        bone_index_2: i32,
        p_4: bool,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0xFD1695C5D3B05439u64,
            entity_1,
            entity_2,
            bone_index_1,
            bone_index_2,
            p_4,
            p_5
        );
    } // 0xFD1695C5D3B05439  b791
    pub unsafe fn attach_entity_to_entity_physically(
        entity_1: Entity,
        entity_2: Entity,
        bone_index_1: i32,
        bone_index_2: i32,
        x_pos_1: f32,
        y_pos_1: f32,
        z_pos_1: f32,
        x_pos_2: f32,
        y_pos_2: f32,
        z_pos_2: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        break_force: f32,
        fixed_rot: bool,
        p_1_5: bool,
        collision: bool,
        p_1_7: bool,
        p_1_8: i32,
    ) {
        call_native!(
            Void,
            0xC3675780C92F90F9u64,
            entity_1,
            entity_2,
            bone_index_1,
            bone_index_2,
            x_pos_1,
            y_pos_1,
            z_pos_1,
            x_pos_2,
            y_pos_2,
            z_pos_2,
            x_rot,
            y_rot,
            z_rot,
            break_force,
            fixed_rot,
            p_1_5,
            collision,
            p_1_7,
            p_1_8
        );
    } // 0xC3675780C92F90F9 0x0547417F b323
    pub unsafe fn attach_entity_to_entity_physically_override_inverse_mass(
        first_entity_index: Entity,
        second_entity_index: Entity,
        first_entity_bone_index: i32,
        second_entity_bone_index: i32,
        second_entity_offset_x: f32,
        second_entity_offset_y: f32,
        second_entity_offset_z: f32,
        first_entity_offset_x: f32,
        first_entity_offset_y: f32,
        first_entity_offset_z: f32,
        vec_rotation_x: f32,
        vec_rotation_y: f32,
        vec_rotation_z: f32,
        physical_strength: f32,
        constrain_rotation: bool,
        do_initial_warp: bool,
        collide_with_entity: bool,
        add_initial_seperation: bool,
        rot_order: i32,
        inv_mass_scale_a: f32,
        inv_mass_scale_b: f32,
    ) {
        call_native!(
            Void,
            0x168A09D1B25B0BA4u64,
            first_entity_index,
            second_entity_index,
            first_entity_bone_index,
            second_entity_bone_index,
            second_entity_offset_x,
            second_entity_offset_y,
            second_entity_offset_z,
            first_entity_offset_x,
            first_entity_offset_y,
            first_entity_offset_z,
            vec_rotation_x,
            vec_rotation_y,
            vec_rotation_z,
            physical_strength,
            constrain_rotation,
            do_initial_warp,
            collide_with_entity,
            add_initial_seperation,
            rot_order,
            inv_mass_scale_a,
            inv_mass_scale_b
        );
    } // 0x168A09D1B25B0BA4  b2944
    pub unsafe fn process_entity_attachments(entity: Entity) {
        call_native!(Void, 0xF4080490ADC51C6Fu64, entity);
    } // 0xF4080490ADC51C6F 0x6909BA59 b323
    pub unsafe fn get_entity_bone_index_by_name(entity: Entity, bone_name: *const i8) -> i32 {
        call_native!(i32, 0xFB71170B7E76ACBAu64, entity, bone_name)
    } // 0xFB71170B7E76ACBA 0xE4ECAC22 b323
    pub unsafe fn clear_entity_last_damage_entity(entity: Entity) {
        call_native!(Void, 0xA72CD9CA74A5ECBAu64, entity);
    } // 0xA72CD9CA74A5ECBA 0x2B83F43B b323
    pub unsafe fn delete_entity(entity: *mut Entity) {
        call_native!(Void, 0xAE3CBE5BF394C9C9u64, entity);
    } // 0xAE3CBE5BF394C9C9 0xFAA3D236 b323
    pub unsafe fn detach_entity(entity: Entity, dynamic: bool, collision: bool) {
        call_native!(Void, 0x961AC54BF0613F5Du64, entity, dynamic, collision);
    } // 0x961AC54BF0613F5D 0xC8EFCB41 b323
    pub unsafe fn freeze_entity_position(entity: Entity, toggle: bool) {
        call_native!(Void, 0x428CA6DBD1094446u64, entity, toggle);
    } // 0x428CA6DBD1094446 0x65C16D57 b323
    pub unsafe fn set_entity_should_freeze_waiting_on_collision(entity: Entity, toggle: bool) {
        call_native!(Void, 0x3910051CCECDB00Cu64, entity, toggle);
    } // 0x3910051CCECDB00C 0xD3850671 b323
    pub unsafe fn play_entity_anim(
        entity: Entity,
        anim_name: *const i8,
        anim_dict: *const i8,
        p_3: f32,
        _loop: bool,
        stay_in_anim: bool,
        p_6: bool,
        delta: f32,
        bitset: Any,
    ) -> bool {
        call_native!(
            bool,
            0x7FB218262B810701u64,
            entity,
            anim_name,
            anim_dict,
            p_3,
            _loop,
            stay_in_anim,
            p_6,
            delta,
            bitset
        )
    } // 0x7FB218262B810701 0x878753D5 b323
    pub unsafe fn play_synchronized_entity_anim(
        entity: Entity,
        synced_scene: i32,
        animation: *const i8,
        prop_name: *const i8,
        p_4: f32,
        p_5: f32,
        p_6: Any,
        p_7: f32,
    ) -> bool {
        call_native!(
            bool,
            0xC77720A12FE14A86u64,
            entity,
            synced_scene,
            animation,
            prop_name,
            p_4,
            p_5,
            p_6,
            p_7
        )
    } // 0xC77720A12FE14A86 0x012760AA b323
    pub unsafe fn play_synchronized_map_entity_anim(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: Any,
        z_2: f32,
        p_6: *const i8,
        p_7: *const i8,
        p_8: f32,
        p_9: f32,
        p_1_0: Any,
        p_1_1: f32,
    ) -> bool {
        call_native!(
            bool,
            0xB9C54555ED30FBC4u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1
        )
    } // 0xB9C54555ED30FBC4 0xEB4CBA74 b323
    pub unsafe fn stop_synchronized_map_entity_anim(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: Any,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0x11E79CAB7183B6F5u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x11E79CAB7183B6F5 0x7253D5B2 b323
    pub unsafe fn stop_entity_anim(
        entity: Entity,
        animation: *const i8,
        anim_group: *const i8,
        p_3: f32,
    ) -> bool {
        call_native!(
            bool,
            0x28004F88151E03E0u64,
            entity,
            animation,
            anim_group,
            p_3
        )
    } // 0x28004F88151E03E0 0xC4769830 b323
    pub unsafe fn stop_synchronized_entity_anim(entity: Entity, p_1: f32, p_2: bool) -> bool {
        call_native!(bool, 0x43D3807C077261E3u64, entity, p_1, p_2)
    } // 0x43D3807C077261E3 0xE27D2FC1 b323
    pub unsafe fn has_anim_event_fired(entity: Entity, action_hash: Hash) -> bool {
        call_native!(bool, 0xEAF4CD9EA3E7E922u64, entity, action_hash)
    } // 0xEAF4CD9EA3E7E922 0x66571CA0 b323
    pub unsafe fn find_anim_event_phase(
        anim_dictionary: *const i8,
        anim_name: *const i8,
        p_2: *const i8,
        p_3: *mut Any,
        p_4: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0x07F1BE2BCCAA27A7u64,
            anim_dictionary,
            anim_name,
            p_2,
            p_3,
            p_4
        )
    } // 0x07F1BE2BCCAA27A7 0xC41DDA62 b323
    pub unsafe fn set_entity_anim_current_time(
        entity: Entity,
        anim_dictionary: *const i8,
        anim_name: *const i8,
        time: f32,
    ) {
        call_native!(
            Void,
            0x4487C259F0F70977u64,
            entity,
            anim_dictionary,
            anim_name,
            time
        );
    } // 0x4487C259F0F70977 0x99D90735 b323
    pub unsafe fn set_entity_anim_speed(
        entity: Entity,
        anim_dictionary: *const i8,
        anim_name: *const i8,
        speed_multiplier: f32,
    ) {
        call_native!(
            Void,
            0x28D1A16553C51776u64,
            entity,
            anim_dictionary,
            anim_name,
            speed_multiplier
        );
    } // 0x28D1A16553C51776 0x3990C90A b323
    pub unsafe fn set_entity_as_mission_entity(entity: Entity, p_1: bool, p_2: bool) {
        call_native!(Void, 0xAD738C3085FE7E11u64, entity, p_1, p_2);
    } // 0xAD738C3085FE7E11 0x5D1F9E0F b323
    pub unsafe fn set_entity_as_no_longer_needed(entity: *mut Entity) {
        call_native!(Void, 0xB736A491E64A32CFu64, entity);
    } // 0xB736A491E64A32CF 0xADF2267C b323
    pub unsafe fn set_ped_as_no_longer_needed(ped: *mut Ped) {
        call_native!(Void, 0x2595DD4236549CE3u64, ped);
    } // 0x2595DD4236549CE3 0x9A388380 b323
    pub unsafe fn set_vehicle_as_no_longer_needed(vehicle: *mut Vehicle) {
        call_native!(Void, 0x629BFA74418D6239u64, vehicle);
    } // 0x629BFA74418D6239 0x9B0E10BE b323
    pub unsafe fn set_object_as_no_longer_needed(object: *mut Object) {
        call_native!(Void, 0x3AE22DEB5BA5A3E6u64, object);
    } // 0x3AE22DEB5BA5A3E6 0x3F6B949F b323
    pub unsafe fn set_entity_can_be_damaged(entity: Entity, toggle: bool) {
        call_native!(Void, 0x1760FFA8AB074D66u64, entity, toggle);
    } // 0x1760FFA8AB074D66 0x60B6E744 b323
    pub unsafe fn get_entity_can_be_damaged(entity: Entity) -> bool {
        call_native!(bool, 0xD95CC5D2AB15A09Fu64, entity)
    } // 0xD95CC5D2AB15A09F 0xE4938B5D b757
    pub unsafe fn set_entity_can_be_damaged_by_relationship_group(
        entity: Entity,
        b_can_be_damaged: bool,
        rel_group: i32,
    ) {
        call_native!(
            Void,
            0xE22D8FDE858B8119u64,
            entity,
            b_can_be_damaged,
            rel_group
        );
    } // 0xE22D8FDE858B8119 0x34165B5D b323
    pub unsafe fn set_entity_can_only_be_damaged_by_script_participants(
        entity: Entity,
        toggle: bool,
    ) {
        call_native!(Void, 0x352E2B5CF420BF3Bu64, entity, toggle);
    } // 0x352E2B5CF420BF3B  b573
    pub unsafe fn set_entity_can_be_targeted_without_los(entity: Entity, toggle: bool) {
        call_native!(Void, 0xD3997889736FD899u64, entity, toggle);
    } // 0xD3997889736FD899 0x3B13797C b323
    pub unsafe fn set_entity_collision(entity: Entity, toggle: bool, keep_physics: bool) {
        call_native!(Void, 0x1A9205C1B9EE827Fu64, entity, toggle, keep_physics);
    } // 0x1A9205C1B9EE827F 0x139FD37D b323
    pub unsafe fn get_entity_collision_disabled(entity: Entity) -> bool {
        call_native!(bool, 0xCCF1E97BEFDAE480u64, entity)
    } // 0xCCF1E97BEFDAE480 0xE8C0C629 b323
    pub unsafe fn set_entity_completely_disable_collision(
        entity: Entity,
        toggle: bool,
        keep_physics: bool,
    ) {
        call_native!(Void, 0x9EBC85ED0FFFE51Cu64, entity, toggle, keep_physics);
    } // 0x9EBC85ED0FFFE51C 0xBD0D4831 b323
    pub unsafe fn set_entity_coords(
        entity: Entity,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
        clear_area: bool,
    ) {
        call_native!(
            Void,
            0x06843DA7060A026Bu64,
            entity,
            x_pos,
            y_pos,
            z_pos,
            x_axis,
            y_axis,
            z_axis,
            clear_area
        );
    } // 0x06843DA7060A026B 0xDF70B41B b323
    pub unsafe fn set_entity_coords_without_plants_reset(
        entity: Entity,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        alive: bool,
        dead_flag: bool,
        ragdoll_flag: bool,
        clear_area: bool,
    ) {
        call_native!(
            Void,
            0x621873ECE1178967u64,
            entity,
            x_pos,
            y_pos,
            z_pos,
            alive,
            dead_flag,
            ragdoll_flag,
            clear_area
        );
    } // 0x621873ECE1178967 0x749B282E b323
    pub unsafe fn set_entity_coords_no_offset(
        entity: Entity,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
    ) {
        call_native!(
            Void,
            0x239A3351AC1DA385u64,
            entity,
            x_pos,
            y_pos,
            z_pos,
            x_axis,
            y_axis,
            z_axis
        );
    } // 0x239A3351AC1DA385 0x4C83DE8D b323
    pub unsafe fn set_entity_dynamic(entity: Entity, toggle: bool) {
        call_native!(Void, 0x1718DE8E3F2823CAu64, entity, toggle);
    } // 0x1718DE8E3F2823CA 0x236F525B b323
    pub unsafe fn set_entity_heading(entity: Entity, heading: f32) {
        call_native!(Void, 0x8E2530AA8ADA980Eu64, entity, heading);
    } // 0x8E2530AA8ADA980E 0xE0FF064D b323
    pub unsafe fn set_entity_health(
        entity: Entity,
        health: i32,
        instigator: Entity,
        weapon_type: Hash,
    ) {
        call_native!(
            Void,
            0x6B76DC1F3AE6E6A3u64,
            entity,
            health,
            instigator,
            weapon_type
        );
    } // 0x6B76DC1F3AE6E6A3 0xFBCD1831 b323
    pub unsafe fn set_entity_invincible(entity: Entity, toggle: bool) {
        call_native!(Void, 0x3882114BDE571AD4u64, entity, toggle);
    } // 0x3882114BDE571AD4 0xC1213A21 b323
    pub unsafe fn set_entity_is_target_priority(entity: Entity, p_1: bool, p_2: f32) {
        call_native!(Void, 0xEA02E132F5C68722u64, entity, p_1, p_2);
    } // 0xEA02E132F5C68722 0x9729EE32 b323
    pub unsafe fn set_entity_lights(entity: Entity, toggle: bool) {
        call_native!(Void, 0x7CFBA6A80BDF3874u64, entity, toggle);
    } // 0x7CFBA6A80BDF3874 0xE8FC85AF b323
    pub unsafe fn set_entity_load_collision_flag(entity: Entity, toggle: bool, p_2: Any) {
        call_native!(Void, 0x0DC7CABAB1E9B67Eu64, entity, toggle, p_2);
    } // 0x0DC7CABAB1E9B67E 0xC52F295B b323
    pub unsafe fn has_collision_loaded_around_entity(entity: Entity) -> bool {
        call_native!(bool, 0xE9676F61BC0B3321u64, entity)
    } // 0xE9676F61BC0B3321 0x851687F9 b323
    pub unsafe fn set_entity_max_speed(entity: Entity, speed: f32) {
        call_native!(Void, 0x0E46A3FCBDE2A1B1u64, entity, speed);
    } // 0x0E46A3FCBDE2A1B1 0x46AFFED3 b323
    pub unsafe fn set_entity_only_damaged_by_player(entity: Entity, toggle: bool) {
        call_native!(Void, 0x79F020FF9EDC0748u64, entity, toggle);
    } // 0x79F020FF9EDC0748 0x4B707F50 b323
    pub unsafe fn set_entity_only_damaged_by_relationship_group(
        entity: Entity,
        p_1: bool,
        p_2: Any,
    ) {
        call_native!(Void, 0x7022BD828FA0B082u64, entity, p_1, p_2);
    } // 0x7022BD828FA0B082 0x202237E2 b323
    pub unsafe fn set_entity_proofs(
        entity: Entity,
        bullet_proof: bool,
        fire_proof: bool,
        explosion_proof: bool,
        collision_proof: bool,
        melee_proof: bool,
        steam_proof: bool,
        p_7: bool,
        water_proof: bool,
    ) {
        call_native!(
            Void,
            0xFAEE099C6F890BB8u64,
            entity,
            bullet_proof,
            fire_proof,
            explosion_proof,
            collision_proof,
            melee_proof,
            steam_proof,
            p_7,
            water_proof
        );
    } // 0xFAEE099C6F890BB8 0x7E9EAB66 b323
    pub unsafe fn get_entity_proofs(
        entity: Entity,
        bullet_proof: *mut Bool,
        fire_proof: *mut Bool,
        explosion_proof: *mut Bool,
        collision_proof: *mut Bool,
        melee_proof: *mut Bool,
        steam_proof: *mut Bool,
        p_7: *mut Bool,
        drown_proof: *mut Bool,
    ) -> bool {
        call_native!(
            bool,
            0xBE8CD9BE829BBEBFu64,
            entity,
            bullet_proof,
            fire_proof,
            explosion_proof,
            collision_proof,
            melee_proof,
            steam_proof,
            p_7,
            drown_proof
        )
    } // 0xBE8CD9BE829BBEBF  b1604
    pub unsafe fn set_entity_quaternion(entity: Entity, x: f32, y: f32, z: f32, w: f32) {
        call_native!(Void, 0x77B21BE7AC540F07u64, entity, x, y, z, w);
    } // 0x77B21BE7AC540F07 0x83B6046F b323
    pub unsafe fn set_entity_records_collisions(entity: Entity, toggle: bool) {
        call_native!(Void, 0x0A50A1EEDAD01E65u64, entity, toggle);
    } // 0x0A50A1EEDAD01E65 0x6B189A1A b323
    pub unsafe fn set_entity_rotation(
        entity: Entity,
        pitch: f32,
        roll: f32,
        yaw: f32,
        rotation_order: i32,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x8524A8B0171D5E07u64,
            entity,
            pitch,
            roll,
            yaw,
            rotation_order,
            p_5
        );
    } // 0x8524A8B0171D5E07 0x0A345EFE b323
    pub unsafe fn set_entity_visible(entity: Entity, toggle: bool, p_2: bool) {
        call_native!(Void, 0xEA1C610A04DB6BBBu64, entity, toggle, p_2);
    } // 0xEA1C610A04DB6BBB 0xD043E8E1 b323
    pub unsafe fn set_entity_water_reflection_flag(entity: Entity, toggle: bool) {
        call_native!(Void, 0xC34BC448DA29F5E9u64, entity, toggle);
    } // 0xC34BC448DA29F5E9  b573
    pub unsafe fn set_entity_mirror_reflection_flag(entity: Entity, p_1: bool) {
        call_native!(Void, 0xE66377CDDADA4810u64, entity, p_1);
    } // 0xE66377CDDADA4810  b1734
    pub unsafe fn set_entity_velocity(entity: Entity, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x1C99BB7B6E96D16Fu64, entity, x, y, z);
    } // 0x1C99BB7B6E96D16F 0xFF5A1988 b323
    pub unsafe fn set_entity_angular_velocity(entity: Entity, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x8339643499D1222Eu64, entity, x, y, z);
    } // 0x8339643499D1222E  b2372
    pub unsafe fn set_entity_has_gravity(entity: Entity, toggle: bool) {
        call_native!(Void, 0x4A4722448F18EEF5u64, entity, toggle);
    } // 0x4A4722448F18EEF5 0xE2F262BF b323
    pub unsafe fn set_entity_lod_dist(entity: Entity, value: i32) {
        call_native!(Void, 0x5927F96A78577363u64, entity, value);
    } // 0x5927F96A78577363 0xD7ACC7AD b323
    pub unsafe fn get_entity_lod_dist(entity: Entity) -> i32 {
        call_native!(i32, 0x4159C2762B5791D6u64, entity)
    } // 0x4159C2762B5791D6 0x4DA3D51F b323
    pub unsafe fn set_entity_alpha(entity: Entity, alpha_level: i32, skin: bool) {
        call_native!(Void, 0x44A0870B7E92D7C0u64, entity, alpha_level, skin);
    } // 0x44A0870B7E92D7C0 0xAE667CB0 b323
    pub unsafe fn get_entity_alpha(entity: Entity) -> i32 {
        call_native!(i32, 0x5A47B3B5E63E94C6u64, entity)
    } // 0x5A47B3B5E63E94C6 0x1560B017 b323
    pub unsafe fn reset_entity_alpha(entity: Entity) {
        call_native!(Void, 0x9B1E824FFBB7027Au64, entity);
    } // 0x9B1E824FFBB7027A 0x8A30761C b323
    pub unsafe fn reset_pickup_entity_glow(entity: Entity) {
        call_native!(Void, 0x490861B88F4FD846u64, entity);
    } // 0x490861B88F4FD846  b944
    pub unsafe fn set_pickup_collides_with_projectiles(p_0: Any, p_1: Any) {
        call_native!(Void, 0xCEA7C8E1B48FF68Cu64, p_0, p_1);
    } // 0xCEA7C8E1B48FF68C  b678
    pub unsafe fn set_entity_sort_bias(entity: Entity, p_1: f32) {
        call_native!(Void, 0x5C3B791D580E0BC2u64, entity, p_1);
    } // 0x5C3B791D580E0BC2  b323
    pub unsafe fn set_entity_always_prerender(entity: Entity, toggle: bool) {
        call_native!(Void, 0xACAD101E1FB66689u64, entity, toggle);
    } // 0xACAD101E1FB66689 0xD8FF798A b323
    pub unsafe fn set_entity_render_scorched(entity: Entity, toggle: bool) {
        call_native!(Void, 0x730F5F8D3F0F2050u64, entity, toggle);
    } // 0x730F5F8D3F0F2050 0xAAC9317B b323
    pub unsafe fn set_entity_trafficlight_override(entity: Entity, state: i32) {
        call_native!(Void, 0x57C5DB656185EAC4u64, entity, state);
    } // 0x57C5DB656185EAC4 0xC47F5B91 b323
    pub unsafe fn set_entity_is_in_vehicle(entity: Entity) {
        call_native!(Void, 0x78E8E3A640178255u64, entity);
    } // 0x78E8E3A640178255  b323
    pub unsafe fn create_model_swap(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        original_model: Hash,
        new_model: Hash,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0x92C47782FDA8B2A3u64,
            x,
            y,
            z,
            radius,
            original_model,
            new_model,
            p_6
        );
    } // 0x92C47782FDA8B2A3 0x0BC12F9E b323
    pub unsafe fn remove_model_swap(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        original_model: Hash,
        new_model: Hash,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0x033C0F9A64E229AEu64,
            x,
            y,
            z,
            radius,
            original_model,
            new_model,
            p_6
        );
    } // 0x033C0F9A64E229AE 0xCE0AA8BC b323
    pub unsafe fn create_model_hide(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x8A97BCA30A0CE478u64,
            x,
            y,
            z,
            radius,
            model_hash,
            p_5
        );
    } // 0x8A97BCA30A0CE478 0x7BD5CF2F b323
    pub unsafe fn create_model_hide_excluding_script_objects(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x3A52AE588830BF7Fu64,
            x,
            y,
            z,
            radius,
            model_hash,
            p_5
        );
    } // 0x3A52AE588830BF7F 0x07AAF22C b323
    pub unsafe fn remove_model_hide(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0xD9E3006FB3CBD765u64,
            x,
            y,
            z,
            radius,
            model_hash,
            p_5
        );
    } // 0xD9E3006FB3CBD765 0x993DBC10 b323
    pub unsafe fn create_forced_object(
        x: f32,
        y: f32,
        z: f32,
        p_3: Any,
        model_hash: Hash,
        p_5: bool,
    ) {
        call_native!(Void, 0x150E808B375A385Au64, x, y, z, p_3, model_hash, p_5);
    } // 0x150E808B375A385A 0x335190A2 b323
    pub unsafe fn remove_forced_object(x: f32, y: f32, z: f32, p_3: f32, model_hash: Hash) {
        call_native!(Void, 0x61B6775E83C0DB6Fu64, x, y, z, p_3, model_hash);
    } // 0x61B6775E83C0DB6F 0xAED73ADD b323
    pub unsafe fn set_entity_no_collision_entity(
        entity_1: Entity,
        entity_2: Entity,
        this_frame_only: bool,
    ) {
        call_native!(
            Void,
            0xA53ED5520C07654Au64,
            entity_1,
            entity_2,
            this_frame_only
        );
    } // 0xA53ED5520C07654A 0x1E11BFE9 b323
    pub unsafe fn set_entity_motion_blur(entity: Entity, toggle: bool) {
        call_native!(Void, 0x295D82A8559F9150u64, entity, toggle);
    } // 0x295D82A8559F9150 0xE90005B8 b323
    pub unsafe fn set_can_auto_vault_on_entity(entity: Entity, toggle: bool) {
        call_native!(Void, 0xE12ABE5E3A389A6Cu64, entity, toggle);
    } // 0xE12ABE5E3A389A6C 0x44767B31 b323
    pub unsafe fn set_can_climb_on_entity(entity: Entity, toggle: bool) {
        call_native!(Void, 0xA80AE305E0A3044Fu64, entity, toggle);
    } // 0xA80AE305E0A3044F 0xE224A6A5 b323
    pub unsafe fn set_wait_for_collisions_before_probe(entity: Entity, toggle: bool) {
        call_native!(Void, 0xDC6F8601FAF2E893u64, entity, toggle);
    } // 0xDC6F8601FAF2E893 0xA0466A69 b323
    pub unsafe fn set_entity_noweapondecals(entity: Entity, p_1: bool) {
        call_native!(Void, 0x2C2E3DC128F44309u64, entity, p_1);
    } // 0x2C2E3DC128F44309  b323
    pub unsafe fn set_entity_use_max_distance_for_water_reflection(entity: Entity, p_1: bool) {
        call_native!(Void, 0x1A092BB0C3808B96u64, entity, p_1);
    } // 0x1A092BB0C3808B96  b323
    pub unsafe fn get_entity_bone_rotation(entity: Entity, bone_index: i32) -> Vector3 {
        call_native!(Vector3, 0xCE6294A232D03786u64, entity, bone_index)
    } // 0xCE6294A232D03786  b791
    pub unsafe fn get_entity_bone_postion(entity: Entity, bone_index: i32) -> Vector3 {
        call_native!(Vector3, 0x46F8696933A63C9Bu64, entity, bone_index)
    } // 0x46F8696933A63C9B  b877
    pub unsafe fn get_entity_bone_object_rotation(entity: Entity, bone_index: i32) -> Vector3 {
        call_native!(Vector3, 0xBD8D32550E5CEBFEu64, entity, bone_index)
    } // 0xBD8D32550E5CEBFE  b1734
    pub unsafe fn get_entity_bone_object_postion(entity: Entity, bone_index: i32) -> Vector3 {
        call_native!(Vector3, 0xCF1247CC86961FD6u64, entity, bone_index)
    } // 0xCF1247CC86961FD6  b2802
    pub unsafe fn get_entity_bone_count(entity: Entity) -> i32 {
        call_native!(i32, 0xB328DCC3A3AA401Bu64, entity)
    } // 0xB328DCC3A3AA401B  b791
    pub unsafe fn enable_entity_bullet_collision(entity: Entity) {
        call_native!(Void, 0x6CE177D014502E8Au64, entity);
    } // 0x6CE177D014502E8A  b877
    pub unsafe fn set_entity_can_only_be_damaged_by_entity(entity_1: Entity, entity_2: Entity) {
        call_native!(Void, 0xB17BC6453F6CF5ACu64, entity_1, entity_2);
    } // 0xB17BC6453F6CF5AC  b944
    pub unsafe fn set_entity_cant_cause_collision_damaged_entity(
        entity_1: Entity,
        entity_2: Entity,
    ) {
        call_native!(Void, 0x68B562E124CC0AEFu64, entity_1, entity_2);
    } // 0x68B562E124CC0AEF  b1180
    pub unsafe fn set_allow_migrate_to_spectator(entity: Entity, p_1: Any) {
        call_native!(Void, 0x36F32DE87082343Eu64, entity, p_1);
    } // 0x36F32DE87082343E  b1011
    pub unsafe fn get_entity_of_type_attached_to_entity(
        entity: Entity,
        model_hash: Hash,
    ) -> Entity {
        call_native!(Entity, 0x1F922734E259BD26u64, entity, model_hash)
    } // 0x1F922734E259BD26  b1180
    pub unsafe fn set_pick_up_by_cargobob_disabled(entity: Entity, toggle: bool) {
        call_native!(Void, 0xD7B80E7C3BEFC396u64, entity, toggle);
    } // 0xD7B80E7C3BEFC396  b1180
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod event {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn set_decision_maker(ped: Ped, name: Hash) {
        call_native!(Void, 0xB604A2942ADED0EEu64, ped, name);
    } // 0xB604A2942ADED0EE 0x19CEAC9E b323
    pub unsafe fn clear_decision_maker_event_response(name: Hash, event_type: i32) {
        call_native!(Void, 0x4FC9381A7AEE8968u64, name, event_type);
    } // 0x4FC9381A7AEE8968 0x07ABD94D b323
    pub unsafe fn block_decision_maker_event(name: Hash, event_type: i32) {
        call_native!(Void, 0xE42FCDFD0E4196F7u64, name, event_type);
    } // 0xE42FCDFD0E4196F7 0x57506EA6 b323
    pub unsafe fn unblock_decision_maker_event(name: Hash, event_type: i32) {
        call_native!(Void, 0xD7CD9CF34F2C99E8u64, name, event_type);
    } // 0xD7CD9CF34F2C99E8 0x62A3161D b323
    pub unsafe fn add_shocking_event_at_position(
        event_type: i32,
        x: f32,
        y: f32,
        z: f32,
        duration: f32,
    ) -> i32 {
        call_native!(i32, 0xD9F8455409B525E9u64, event_type, x, y, z, duration)
    } // 0xD9F8455409B525E9 0x0B30F779 b323
    pub unsafe fn add_shocking_event_for_entity(
        event_type: i32,
        entity: Entity,
        duration: f32,
    ) -> i32 {
        call_native!(i32, 0x7FD8F3BE76F89422u64, event_type, entity, duration)
    } // 0x7FD8F3BE76F89422 0xA81B5B71 b323
    pub unsafe fn is_shocking_event_in_sphere(
        event_type: i32,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> bool {
        call_native!(bool, 0x1374ABB7C15BAB92u64, event_type, x, y, z, radius)
    } // 0x1374ABB7C15BAB92 0x2F98823E b323
    pub unsafe fn remove_shocking_event(event: ScrHandle) -> bool {
        call_native!(bool, 0x2CDA538C44C6CCE5u64, event)
    } // 0x2CDA538C44C6CCE5 0xF82D5A87 b323
    pub unsafe fn remove_all_shocking_events(p_0: bool) {
        call_native!(Void, 0xEAABE8FDFA21274Cu64, p_0);
    } // 0xEAABE8FDFA21274C 0x64DF6282 b323
    pub unsafe fn remove_shocking_event_spawn_blocking_areas() {
        call_native!(Void, 0x340F1415B68AEADEu64);
    } // 0x340F1415B68AEADE 0xA0CE89C8 b323
    pub unsafe fn suppress_shocking_events_next_frame() {
        call_native!(Void, 0x2F9A292AD0A3BD89u64);
    } // 0x2F9A292AD0A3BD89 0x4CC674B5 b323
    pub unsafe fn suppress_shocking_event_type_next_frame(event_type: i32) {
        call_native!(Void, 0x3FD2EC8BF1F1CF30u64, event_type);
    } // 0x3FD2EC8BF1F1CF30 0xA0FDCB82 b323
    pub unsafe fn suppress_agitation_events_next_frame() {
        call_native!(Void, 0x5F3B7749C112D552u64);
    } // 0x5F3B7749C112D552 0x80340396 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod files {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_num_tattoo_shop_dlc_items(character: i32) -> i32 {
        call_native!(i32, 0x278F76C3B0A8F109u64, character)
    } // 0x278F76C3B0A8F109 0x71D0CF3E b323
    pub unsafe fn get_tattoo_shop_dlc_item_data(
        character_type: i32,
        decoration_index: i32,
        out_component: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0xFF56381874F82086u64,
            character_type,
            decoration_index,
            out_component
        )
    } // 0xFF56381874F82086 0x2E9D628C b323
    pub unsafe fn get_tattoo_shop_dlc_item_index(
        overlay_hash: Hash,
        p_1: Any,
        character: i32,
    ) -> i32 {
        call_native!(i32, 0x10144267DD22866Cu64, overlay_hash, p_1, character)
    } // 0x10144267DD22866C  b2189
    pub unsafe fn init_shop_ped_component(out_component: *mut Any) {
        call_native!(Void, 0x1E8C308FD312C036u64, out_component);
    } // 0x1E8C308FD312C036 0xB818C7FC b323
    pub unsafe fn init_shop_ped_prop(out_prop: *mut Any) {
        call_native!(Void, 0xEB0A2B758F7B850Fu64, out_prop);
    } // 0xEB0A2B758F7B850F 0xF5659E50 b323
    pub unsafe fn setup_shop_ped_apparel_query(p_0: i32, p_1: i32, p_2: i32, p_3: i32) -> i32 {
        call_native!(i32, 0x50F457823CE6EB5Fu64, p_0, p_1, p_2, p_3)
    } // 0x50F457823CE6EB5F 0xC937FF3D b323
    pub unsafe fn setup_shop_ped_apparel_query_tu(
        character: i32,
        p_1: i32,
        p_2: i32,
        p_3: bool,
        p_4: i32,
        component_id: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x9BDF59818B1E38C1u64,
            character,
            p_1,
            p_2,
            p_3,
            p_4,
            component_id
        )
    } // 0x9BDF59818B1E38C1 0x594E862C b323
    pub unsafe fn get_shop_ped_query_component(component_id: i32, out_component: *mut Any) {
        call_native!(Void, 0x249E310B2D920699u64, component_id, out_component);
    } // 0x249E310B2D920699 0xC0718904 b323
    pub unsafe fn get_shop_ped_query_component_index(component_hash: Hash) -> i32 {
        call_native!(i32, 0x96E2929292A4DB77u64, component_hash)
    } // 0x96E2929292A4DB77  b2189
    pub unsafe fn get_shop_ped_component(component_hash: Hash, out_component: *mut Any) {
        call_native!(Void, 0x74C0E2A57EC66760u64, component_hash, out_component);
    } // 0x74C0E2A57EC66760 0xB39677C5 b323
    pub unsafe fn get_shop_ped_query_prop(component_id: i32, out_prop: *mut Any) {
        call_native!(Void, 0xDE44A00999B2837Du64, component_id, out_prop);
    } // 0xDE44A00999B2837D 0x1D3C1466 b323
    pub unsafe fn get_shop_ped_query_prop_index(component_hash: Hash) -> i32 {
        call_native!(i32, 0x6CEBE002E58DEE97u64, component_hash)
    } // 0x6CEBE002E58DEE97  b2189
    pub unsafe fn get_shop_ped_prop(component_hash: Hash, out_prop: *mut Any) {
        call_native!(Void, 0x5D5CAFF661DDF6FCu64, component_hash, out_prop);
    } // 0x5D5CAFF661DDF6FC 0xDB0A7A58 b323
    pub unsafe fn get_hash_name_for_component(
        entity: Entity,
        component_id: i32,
        drawable_variant: i32,
        texture_variant: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0x0368B3A838070348u64,
            entity,
            component_id,
            drawable_variant,
            texture_variant
        )
    } // 0x0368B3A838070348 0xC8A4BF12 b323
    pub unsafe fn get_hash_name_for_prop(
        entity: Entity,
        component_id: i32,
        prop_index: i32,
        prop_texture_index: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0x5D6160275CAEC8DDu64,
            entity,
            component_id,
            prop_index,
            prop_texture_index
        )
    } // 0x5D6160275CAEC8DD 0x7D876DC0 b323
    pub unsafe fn get_shop_ped_apparel_variant_component_count(component_hash: Hash) -> i32 {
        call_native!(i32, 0xC17AD0E5752BECDAu64, component_hash)
    } // 0xC17AD0E5752BECDA 0x159751B4 b323
    pub unsafe fn get_shop_ped_apparel_variant_prop_count(prop_hash: Hash) -> i32 {
        call_native!(i32, 0xD40AAC51E8E4C663u64, prop_hash)
    } // 0xD40AAC51E8E4C663  b791
    pub unsafe fn get_variant_component(
        component_hash: Hash,
        variant_component_index: i32,
        name_hash: *mut Hash,
        enum_value: *mut i32,
        component_type: *mut i32,
    ) {
        call_native!(
            Void,
            0x6E11F282F11863B6u64,
            component_hash,
            variant_component_index,
            name_hash,
            enum_value,
            component_type
        );
    } // 0x6E11F282F11863B6 0xE4FF7103 b323
    pub unsafe fn get_variant_prop(
        component_hash: Hash,
        variant_prop_index: i32,
        name_hash: *mut Hash,
        enum_value: *mut i32,
        anchor_point: *mut i32,
    ) {
        call_native!(
            Void,
            0xD81B7F27BC773E66u64,
            component_hash,
            variant_prop_index,
            name_hash,
            enum_value,
            anchor_point
        );
    } // 0xD81B7F27BC773E66  b791
    pub unsafe fn get_shop_ped_apparel_forced_component_count(component_hash: Hash) -> i32 {
        call_native!(i32, 0xC6B9DB42C04DD8C3u64, component_hash)
    } // 0xC6B9DB42C04DD8C3 0xCE70F183 b323
    pub unsafe fn get_shop_ped_apparel_forced_prop_count(component_hash: Hash) -> i32 {
        call_native!(i32, 0x017568A8182D98A6u64, component_hash)
    } // 0x017568A8182D98A6 0xC560D7C0 b323
    pub unsafe fn get_forced_component(
        component_hash: Hash,
        forced_component_index: i32,
        name_hash: *mut Hash,
        enum_value: *mut i32,
        component_type: *mut i32,
    ) {
        call_native!(
            Void,
            0x6C93ED8C2F74859Bu64,
            component_hash,
            forced_component_index,
            name_hash,
            enum_value,
            component_type
        );
    } // 0x6C93ED8C2F74859B 0x382C70BE b323
    pub unsafe fn get_forced_prop(
        component_hash: Hash,
        forced_prop_index: i32,
        name_hash: *mut Hash,
        enum_value: *mut i32,
        anchor_point: *mut i32,
    ) {
        call_native!(
            Void,
            0xE1CA84EBF72E691Du64,
            component_hash,
            forced_prop_index,
            name_hash,
            enum_value,
            anchor_point
        );
    } // 0xE1CA84EBF72E691D 0x22DAE257 b323
    pub unsafe fn does_shop_ped_apparel_have_restriction_tag(
        component_hash: Hash,
        restriction_tag_hash: Hash,
        component_id: i32,
    ) -> bool {
        call_native!(
            bool,
            0x341DE7ED1D2A1BFDu64,
            component_hash,
            restriction_tag_hash,
            component_id
        )
    } // 0x341DE7ED1D2A1BFD 0x8E2C7FD5 b323
    pub unsafe fn does_current_ped_component_have_restriction_tag(
        ped: Ped,
        component_id: i32,
        restriction_tag_hash: Hash,
    ) -> bool {
        call_native!(
            bool,
            0x7796B21B76221BC5u64,
            ped,
            component_id,
            restriction_tag_hash
        )
    } // 0x7796B21B76221BC5  b2612
    pub unsafe fn does_current_ped_prop_have_restriction_tag(
        ped: Ped,
        component_id: i32,
        restriction_tag_hash: Hash,
    ) -> bool {
        call_native!(
            bool,
            0xD726BAB4554DA580u64,
            ped,
            component_id,
            restriction_tag_hash
        )
    } // 0xD726BAB4554DA580  b2612
    pub unsafe fn setup_shop_ped_outfit_query(character: i32, p_1: bool) -> i32 {
        call_native!(i32, 0xF3FBE2D50A6A8C28u64, character, p_1)
    } // 0xF3FBE2D50A6A8C28 0x1ECD23E7 b323
    pub unsafe fn get_shop_ped_query_outfit(outfit_index: i32, outfit: *mut Any) {
        call_native!(Void, 0x6D793F03A631FE56u64, outfit_index, outfit);
    } // 0x6D793F03A631FE56 0x2F8013A1 b323
    pub unsafe fn get_shop_ped_outfit(p_0: Any, p_1: *mut Any) {
        call_native!(Void, 0xB7952076E444979Du64, p_0, p_1);
    } // 0xB7952076E444979D 0xCAFE9209 b323
    pub unsafe fn get_shop_ped_outfit_locate(p_0: Any) -> i32 {
        call_native!(i32, 0x073CA26B079F956Eu64, p_0)
    } // 0x073CA26B079F956E 0x2798F56F b323
    pub unsafe fn get_shop_ped_outfit_prop_variant(
        outfit_hash: Hash,
        variant_index: i32,
        out_prop_variant: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0xA9F9C2E0FDE11CBBu64,
            outfit_hash,
            variant_index,
            out_prop_variant
        )
    } // 0xA9F9C2E0FDE11CBB 0x6641A864 b323
    pub unsafe fn get_shop_ped_outfit_component_variant(
        outfit_hash: Hash,
        variant_index: i32,
        out_component_variant: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0x19F2A026EDF0013Fu64,
            outfit_hash,
            variant_index,
            out_component_variant
        )
    } // 0x19F2A026EDF0013F 0x818534AC b323
    pub unsafe fn get_num_dlc_vehicles() -> i32 {
        call_native!(i32, 0xA7A866D21CD2329Bu64)
    } // 0xA7A866D21CD2329B 0x8EAF9CF6 b323
    pub unsafe fn get_dlc_vehicle_model(dlc_vehicle_index: i32) -> Hash {
        call_native!(Hash, 0xECC01B7C5763333Cu64, dlc_vehicle_index)
    } // 0xECC01B7C5763333C 0xA2201E09 b323
    pub unsafe fn get_dlc_vehicle_data(dlc_vehicle_index: i32, out_data: *mut Any) -> bool {
        call_native!(bool, 0x33468EDC08E371F6u64, dlc_vehicle_index, out_data)
    } // 0x33468EDC08E371F6 0xCF428FA4 b323
    pub unsafe fn get_dlc_vehicle_flags(dlc_vehicle_index: i32) -> i32 {
        call_native!(i32, 0x5549EE11FA22FCF2u64, dlc_vehicle_index)
    } // 0x5549EE11FA22FCF2 0xAB12738C b323
    pub unsafe fn get_num_dlc_weapons() -> i32 {
        call_native!(i32, 0xEE47635F352DA367u64)
    } // 0xEE47635F352DA367 0x2B757E6C b323
    pub unsafe fn get_num_dlc_weapons_sp() -> i32 {
        call_native!(i32, 0x4160B65AE085B5A9u64)
    } // 0x4160B65AE085B5A9  b2060
    pub unsafe fn get_dlc_weapon_data(dlc_weapon_index: i32, out_data: *mut Any) -> bool {
        call_native!(bool, 0x79923CD21BECE14Eu64, dlc_weapon_index, out_data)
    } // 0x79923CD21BECE14E 0xD88EC8EA b323
    pub unsafe fn get_dlc_weapon_data_sp(dlc_weapon_index: i32, out_data: *mut Any) -> bool {
        call_native!(bool, 0x310836EE7129BA33u64, dlc_weapon_index, out_data)
    } // 0x310836EE7129BA33  b2060
    pub unsafe fn get_num_dlc_weapon_components(dlc_weapon_index: i32) -> i32 {
        call_native!(i32, 0x405425358A7D61FEu64, dlc_weapon_index)
    } // 0x405425358A7D61FE 0x476B23A9 b323
    pub unsafe fn get_num_dlc_weapon_components_sp(dlc_weapon_index: i32) -> i32 {
        call_native!(i32, 0xAD2A7A6DFF55841Bu64, dlc_weapon_index)
    } // 0xAD2A7A6DFF55841B  b2060
    pub unsafe fn get_dlc_weapon_component_data(
        dlc_weapon_index: i32,
        dlc_weap_comp_index: i32,
        _component_data_ptr: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0x6CF598A2957C2BF8u64,
            dlc_weapon_index,
            dlc_weap_comp_index,
            _component_data_ptr
        )
    } // 0x6CF598A2957C2BF8 0x4B83FCAF b323
    pub unsafe fn get_dlc_weapon_component_data_sp(
        dlc_weapon_index: i32,
        dlc_weap_comp_index: i32,
        _component_data_ptr: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0x31D5E073B6F93CDCu64,
            dlc_weapon_index,
            dlc_weap_comp_index,
            _component_data_ptr
        )
    } // 0x31D5E073B6F93CDC  b2060
    pub unsafe fn is_content_item_locked(item_hash: Hash) -> bool {
        call_native!(bool, 0xD4D7B033C3AA243Cu64, item_hash)
    } // 0xD4D7B033C3AA243C 0x06396058 b323
    pub unsafe fn is_dlc_vehicle_mod(hash: Hash) -> bool {
        call_native!(bool, 0x0564B9FF9631B82Cu64, hash)
    } // 0x0564B9FF9631B82C 0x35BCA844 b323
    pub unsafe fn get_dlc_vehicle_mod_lock_hash(hash: Hash) -> Hash {
        call_native!(Hash, 0xC098810437312FFFu64, hash)
    } // 0xC098810437312FFF 0x59352658 b323
    pub unsafe fn execute_content_changeset_group_for_all(hash: Hash) {
        call_native!(Void, 0x6BEDF5769AC2DC07u64, hash);
    } // 0x6BEDF5769AC2DC07  b1604
    pub unsafe fn revert_content_changeset_group_for_all(hash: Hash) {
        call_native!(Void, 0x3C1978285B036B25u64, hash);
    } // 0x3C1978285B036B25  b1604
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod fire {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn start_script_fire(
        _x: f32,
        _y: f32,
        _z: f32,
        max_children: i32,
        is_gas_fire: bool,
    ) -> FireId {
        call_native!(
            FireId,
            0x6B83617E04503888u64,
            _x,
            _y,
            _z,
            max_children,
            is_gas_fire
        )
    } // 0x6B83617E04503888 0xE7529357 b323
    pub unsafe fn remove_script_fire(fire_handle: FireId) {
        call_native!(Void, 0x7FF548385680673Fu64, fire_handle);
    } // 0x7FF548385680673F 0x6B21FE26 b323
    pub unsafe fn start_entity_fire(entity: Entity) -> FireId {
        call_native!(FireId, 0xF6A9D9708F6F23DFu64, entity)
    } // 0xF6A9D9708F6F23DF 0x8928428E b323
    pub unsafe fn stop_entity_fire(entity: Entity) {
        call_native!(Void, 0x7F0DD2EBBB651AFFu64, entity);
    } // 0x7F0DD2EBBB651AFF 0xCE8C9066 b323
    pub unsafe fn is_entity_on_fire(entity: Entity) -> bool {
        call_native!(bool, 0x28D3FED7190D3A0Bu64, entity)
    } // 0x28D3FED7190D3A0B 0x8C73E64F b323
    pub unsafe fn get_number_of_fires_in_range(x: f32, y: f32, z: f32, radius: f32) -> i32 {
        call_native!(i32, 0x50CAD495A460B305u64, x, y, z, radius)
    } // 0x50CAD495A460B305 0x654D93B7 b323
    pub unsafe fn set_flammability_multiplier(p_0: f32) {
        call_native!(Void, 0x8F390AC4155099BAu64, p_0);
    } // 0x8F390AC4155099BA  b1734
    pub unsafe fn stop_fire_in_range(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0x056A8A219B8E829Fu64, x, y, z, radius);
    } // 0x056A8A219B8E829F 0x725C7205 b323
    pub unsafe fn get_closest_fire_pos(out_position: *mut Vector3, x: f32, y: f32, z: f32) -> bool {
        call_native!(bool, 0x352A9F6BCF90081Fu64, out_position, x, y, z)
    } // 0x352A9F6BCF90081F 0xC4977B47 b323
    pub unsafe fn add_explosion(
        x: f32,
        y: f32,
        z: f32,
        explosion_type: i32,
        damage_scale: f32,
        is_audible: bool,
        is_invisible: bool,
        camera_shake: f32,
        no_damage: bool,
    ) {
        call_native!(
            Void,
            0xE3AD2BDBAEE269ACu64,
            x,
            y,
            z,
            explosion_type,
            damage_scale,
            is_audible,
            is_invisible,
            camera_shake,
            no_damage
        );
    } // 0xE3AD2BDBAEE269AC 0x10AF5258 b323
    pub unsafe fn add_owned_explosion(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        explosion_type: i32,
        damage_scale: f32,
        is_audible: bool,
        is_invisible: bool,
        camera_shake: f32,
    ) {
        call_native!(
            Void,
            0x172AA1B624FA1013u64,
            ped,
            x,
            y,
            z,
            explosion_type,
            damage_scale,
            is_audible,
            is_invisible,
            camera_shake
        );
    } // 0x172AA1B624FA1013 0x27EE0D67 b323
    pub unsafe fn add_explosion_with_user_vfx(
        x: f32,
        y: f32,
        z: f32,
        explosion_type: i32,
        explosion_fx: Hash,
        damage_scale: f32,
        is_audible: bool,
        is_invisible: bool,
        camera_shake: f32,
    ) {
        call_native!(
            Void,
            0x36DD3FE58B5E5212u64,
            x,
            y,
            z,
            explosion_type,
            explosion_fx,
            damage_scale,
            is_audible,
            is_invisible,
            camera_shake
        );
    } // 0x36DD3FE58B5E5212 0xCF358946 b323
    pub unsafe fn is_explosion_in_area(
        explosion_type: i32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(
            bool,
            0x2E2EBA0EE7CED0E0u64,
            explosion_type,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2
        )
    } // 0x2E2EBA0EE7CED0E0 0xFB40075B b323
    pub unsafe fn is_explosion_active_in_area(
        explosion_type: i32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(
            bool,
            0x6070104B699B2EF4u64,
            explosion_type,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2
        )
    } // 0x6070104B699B2EF4 0x37C388DB b323
    pub unsafe fn is_explosion_in_sphere(
        explosion_type: i32,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> bool {
        call_native!(bool, 0xAB0F816885B0E483u64, explosion_type, x, y, z, radius)
    } // 0xAB0F816885B0E483 0xD455A7F3 b323
    pub unsafe fn get_owner_of_explosion_in_sphere(
        explosion_type: i32,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> Entity {
        call_native!(
            Entity,
            0xB3CD51E3DB86F176u64,
            explosion_type,
            x,
            y,
            z,
            radius
        )
    } // 0xB3CD51E3DB86F176  b1290
    pub unsafe fn is_explosion_in_angled_area(
        explosion_type: i32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
    ) -> bool {
        call_native!(
            bool,
            0xA079A6C51525DC4Bu64,
            explosion_type,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width
        )
    } // 0xA079A6C51525DC4B 0x0128FED9 b323
    pub unsafe fn get_owner_of_explosion_in_angled_area(
        explosion_type: i32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        radius: f32,
    ) -> Entity {
        call_native!(
            Entity,
            0x14BA4BA137AF6CECu64,
            explosion_type,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            radius
        )
    } // 0x14BA4BA137AF6CEC 0xAEC0D176 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod graphics {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn set_debug_lines_and_spheres_drawing_active(enabled: bool) {
        call_native!(Void, 0x175B6BFC15CDD0C5u64, enabled);
    } // 0x175B6BFC15CDD0C5 0x1418CA37 b323
    pub unsafe fn draw_debug_line(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        r: i32,
        g: i32,
        b: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x7FDFADE676AA3CB0u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            r,
            g,
            b,
            alpha
        );
    } // 0x7FDFADE676AA3CB0 0xABF783AB b323
    pub unsafe fn draw_debug_line_with_two_colours(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        r_1: i32,
        g_1: i32,
        b_1: i32,
        r_2: i32,
        g_2: i32,
        b_2: i32,
        alpha_1: i32,
        alpha_2: i32,
    ) {
        call_native!(
            Void,
            0xD8B9A8AC5608FF94u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            r_1,
            g_1,
            b_1,
            r_2,
            g_2,
            b_2,
            alpha_1,
            alpha_2
        );
    } // 0xD8B9A8AC5608FF94 0xE8BFF632 b323
    pub unsafe fn draw_debug_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xAAD68E1AB39DA632u64,
            x,
            y,
            z,
            radius,
            red,
            green,
            blue,
            alpha
        );
    } // 0xAAD68E1AB39DA632 0x304D0EEF b323
    pub unsafe fn draw_debug_box(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        r: i32,
        g: i32,
        b: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x083A2CA4F2E573BDu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            r,
            g,
            b,
            alpha
        );
    } // 0x083A2CA4F2E573BD 0x8524A848 b323
    pub unsafe fn draw_debug_cross(
        x: f32,
        y: f32,
        z: f32,
        size: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x73B1189623049839u64,
            x,
            y,
            z,
            size,
            red,
            green,
            blue,
            alpha
        );
    } // 0x73B1189623049839 0xB6DF3709 b323
    pub unsafe fn draw_debug_text(
        text: *const i8,
        x: f32,
        y: f32,
        z: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x3903E216620488E8u64,
            text,
            x,
            y,
            z,
            red,
            green,
            blue,
            alpha
        );
    } // 0x3903E216620488E8 0x269B006F b323
    pub unsafe fn draw_debug_text_2d(
        text: *const i8,
        x: f32,
        y: f32,
        z: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xA3BB2E9555C05A8Fu64,
            text,
            x,
            y,
            z,
            red,
            green,
            blue,
            alpha
        );
    } // 0xA3BB2E9555C05A8F 0x528B973B b323
    pub unsafe fn draw_line(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x6B7256074AE34680u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            red,
            green,
            blue,
            alpha
        );
    } // 0x6B7256074AE34680 0xB3426BCC b323
    pub unsafe fn draw_poly(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xAC26716048436851u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            red,
            green,
            blue,
            alpha
        );
    } // 0xAC26716048436851 0xABD19253 b323
    pub unsafe fn draw_textured_poly(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        texture_dict: *const i8,
        texture_name: *const i8,
        u_1: f32,
        v_1: f32,
        w_1: f32,
        u_2: f32,
        v_2: f32,
        w_2: f32,
        u_3: f32,
        v_3: f32,
        w_3: f32,
    ) {
        call_native!(
            Void,
            0x29280002282F1928u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            red,
            green,
            blue,
            alpha,
            texture_dict,
            texture_name,
            u_1,
            v_1,
            w_1,
            u_2,
            v_2,
            w_2,
            u_3,
            v_3,
            w_3
        );
    } // 0x29280002282F1928  b877
    pub unsafe fn draw_textured_poly_with_three_colours(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        red_1: f32,
        green_1: f32,
        blue_1: f32,
        alpha_1: i32,
        red_2: f32,
        green_2: f32,
        blue_2: f32,
        alpha_2: i32,
        red_3: f32,
        green_3: f32,
        blue_3: f32,
        alpha_3: i32,
        texture_dict: *const i8,
        texture_name: *const i8,
        u_1: f32,
        v_1: f32,
        w_1: f32,
        u_2: f32,
        v_2: f32,
        w_2: f32,
        u_3: f32,
        v_3: f32,
        w_3: f32,
    ) {
        call_native!(
            Void,
            0x736D7AA1B750856Bu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            red_1,
            green_1,
            blue_1,
            alpha_1,
            red_2,
            green_2,
            blue_2,
            alpha_2,
            red_3,
            green_3,
            blue_3,
            alpha_3,
            texture_dict,
            texture_name,
            u_1,
            v_1,
            w_1,
            u_2,
            v_2,
            w_2,
            u_3,
            v_3,
            w_3
        );
    } // 0x736D7AA1B750856B  b877
    pub unsafe fn draw_box(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xD3A9971CADAC7252u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            red,
            green,
            blue,
            alpha
        );
    } // 0xD3A9971CADAC7252 0xCD4D9DD5 b323
    pub unsafe fn set_backfaceculling(toggle: bool) {
        call_native!(Void, 0x23BA6B0C2AD7B0D3u64, toggle);
    } // 0x23BA6B0C2AD7B0D3 0xC44C2F44 b323
    pub unsafe fn set_depthwriting(toggle: bool) {
        call_native!(Void, 0xC5C8F970D4EDFF71u64, toggle);
    } // 0xC5C8F970D4EDFF71  b877
    pub unsafe fn begin_take_mission_creator_photo() -> bool {
        call_native!(bool, 0x1DD2139A9A20DCE8u64)
    } // 0x1DD2139A9A20DCE8 0xBA9AD458 b323
    pub unsafe fn get_status_of_take_mission_creator_photo() -> i32 {
        call_native!(i32, 0x90A78ECAA4E78453u64)
    } // 0x90A78ECAA4E78453 0xADBBA287 b323
    pub unsafe fn free_memory_for_mission_creator_photo() {
        call_native!(Void, 0x0A46AF8A78DC5E0Au64);
    } // 0x0A46AF8A78DC5E0A 0x9E553002 b323
    pub unsafe fn load_mission_creator_photo(p_0: *mut Any, p_1: Any, p_2: Any, p_3: Any) -> bool {
        call_native!(bool, 0x4862437A486F91B0u64, p_0, p_1, p_2, p_3)
    } // 0x4862437A486F91B0 0x56C1E488 b323
    pub unsafe fn get_status_of_load_mission_creator_photo(p_0: *mut Any) -> i32 {
        call_native!(i32, 0x1670F8D05056F257u64, p_0)
    } // 0x1670F8D05056F257 0x226B08EA b323
    pub unsafe fn begin_create_mission_creator_photo_preview() -> bool {
        call_native!(bool, 0x7FA5D82B8F58EC06u64)
    } // 0x7FA5D82B8F58EC06 0x1F3CADB0 b323
    pub unsafe fn get_status_of_create_mission_creator_photo_preview() -> i32 {
        call_native!(i32, 0x5B0316762AFD4A64u64)
    } // 0x5B0316762AFD4A64 0xA9DC8558 b323
    pub unsafe fn free_memory_for_mission_creator_photo_preview() {
        call_native!(Void, 0x346EF3ECAAAB149Eu64);
    } // 0x346EF3ECAAAB149E 0x88EAF398 b323
    pub unsafe fn begin_take_high_quality_photo() -> bool {
        call_native!(bool, 0xA67C35C56EB1BD9Du64)
    } // 0xA67C35C56EB1BD9D 0x47B0C137 b323
    pub unsafe fn get_status_of_take_high_quality_photo() -> i32 {
        call_native!(i32, 0x0D6CA79EEEBD8CA3u64)
    } // 0x0D6CA79EEEBD8CA3 0x65376C9B b323
    pub unsafe fn free_memory_for_high_quality_photo() {
        call_native!(Void, 0xD801CC02177FA3F1u64);
    } // 0xD801CC02177FA3F1 0x9CBA682A b323
    pub unsafe fn set_taken_photo_is_mugshot(toggle: bool) {
        call_native!(Void, 0x1BBC135A4D25EDDEu64, toggle);
    } // 0x1BBC135A4D25EDDE  b323
    pub unsafe fn set_arena_theme_and_variation_for_taken_photo(p_0: Any, p_1: i32) {
        call_native!(Void, 0xF3F776ADA161E47Du64, p_0, p_1);
    } // 0xF3F776ADA161E47D  b1604
    pub unsafe fn set_on_island_x_for_taken_photo(p_0: Any) {
        call_native!(Void, 0xADD6627C4D325458u64, p_0);
    } // 0xADD6627C4D325458  b2189
    pub unsafe fn save_high_quality_photo(unused: i32) -> bool {
        call_native!(bool, 0x3DEC726C25A11BACu64, unused)
    } // 0x3DEC726C25A11BAC 0x3B15D33C b323
    pub unsafe fn get_status_of_save_high_quality_photo() -> i32 {
        call_native!(i32, 0x0C0C4E81E1AC60A0u64)
    } // 0x0C0C4E81E1AC60A0 0xEC5D0317 b323
    pub unsafe fn begin_create_low_quality_copy_of_photo(p_0: Any) -> bool {
        call_native!(bool, 0x759650634F07B6B4u64, p_0)
    } // 0x759650634F07B6B4 0x25D569EB b323
    pub unsafe fn get_status_of_create_low_quality_copy_of_photo(p_0: i32) -> i32 {
        call_native!(i32, 0xCB82A0BF0E3E3265u64, p_0)
    } // 0xCB82A0BF0E3E3265 0xCFCDC518 b323
    pub unsafe fn free_memory_for_low_quality_photo() {
        call_native!(Void, 0x6A12D88881435DCAu64);
    } // 0x6A12D88881435DCA 0x108F36CC b323
    pub unsafe fn draw_low_quality_photo_to_phone(p_0: bool, p_1: bool) {
        call_native!(Void, 0x1072F115DAB0717Eu64, p_0, p_1);
    } // 0x1072F115DAB0717E 0xE9F2B68F b323
    pub unsafe fn get_maximum_number_of_photos() -> i32 {
        call_native!(i32, 0x34D23450F028B0BFu64)
    } // 0x34D23450F028B0BF 0x727AA63F b323
    pub unsafe fn get_maximum_number_of_cloud_photos() -> i32 {
        call_native!(i32, 0xDC54A7AF8B3A14EFu64)
    } // 0xDC54A7AF8B3A14EF 0x239272BD b323
    pub unsafe fn get_current_number_of_cloud_photos() -> i32 {
        call_native!(i32, 0x473151EBC762C6DAu64)
    } // 0x473151EBC762C6DA 0x21DBF0C9 b323
    pub unsafe fn queue_operation_to_create_sorted_list_of_photos(p_0: Any) -> bool {
        call_native!(bool, 0x2A893980E96B659Au64, p_0)
    } // 0x2A893980E96B659A 0x199FABF0 b323
    pub unsafe fn get_status_of_sorted_list_operation(p_0: Any) -> i32 {
        call_native!(i32, 0xF5BED327CEA362B1u64, p_0)
    } // 0xF5BED327CEA362B1 0x596B900D b323
    pub unsafe fn clear_status_of_sorted_list_operation() {
        call_native!(Void, 0x4AF92ACD3141D96Cu64);
    } // 0x4AF92ACD3141D96C 0xC9EF81ED b323
    pub unsafe fn does_this_photo_slot_contain_a_valid_photo(p_0: Any) -> bool {
        call_native!(bool, 0xE791DF1F73ED2C8Bu64, p_0)
    } // 0xE791DF1F73ED2C8B 0x9D84554C b323
    pub unsafe fn load_high_quality_photo(p_0: Any) -> bool {
        call_native!(bool, 0xEC72C258667BE5EAu64, p_0)
    } // 0xEC72C258667BE5EA 0x9C106AD9 b323
    pub unsafe fn get_load_high_quality_photo_status(p_0: i32) -> i32 {
        call_native!(i32, 0x40AFB081F8ADD4EEu64, p_0)
    } // 0x40AFB081F8ADD4EE 0x762E5C5F b323
    pub unsafe fn draw_light_with_rangeex(
        x: f32,
        y: f32,
        z: f32,
        r: i32,
        g: i32,
        b: i32,
        range: f32,
        intensity: f32,
        shadow: f32,
    ) {
        call_native!(
            Void,
            0xF49E9A9716A04595u64,
            x,
            y,
            z,
            r,
            g,
            b,
            range,
            intensity,
            shadow
        );
    } // 0xF49E9A9716A04595  b323
    pub unsafe fn draw_light_with_range(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        color_r: i32,
        color_g: i32,
        color_b: i32,
        range: f32,
        intensity: f32,
    ) {
        call_native!(
            Void,
            0xF2A1B2771A01DBD4u64,
            pos_x,
            pos_y,
            pos_z,
            color_r,
            color_g,
            color_b,
            range,
            intensity
        );
    } // 0xF2A1B2771A01DBD4 0x6A396E9A b323
    pub unsafe fn draw_spot_light(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        dir_x: f32,
        dir_y: f32,
        dir_z: f32,
        color_r: i32,
        color_g: i32,
        color_b: i32,
        distance: f32,
        brightness: f32,
        hardness: f32,
        radius: f32,
        falloff: f32,
    ) {
        call_native!(
            Void,
            0xD0F64B265C8C8B33u64,
            pos_x,
            pos_y,
            pos_z,
            dir_x,
            dir_y,
            dir_z,
            color_r,
            color_g,
            color_b,
            distance,
            brightness,
            hardness,
            radius,
            falloff
        );
    } // 0xD0F64B265C8C8B33 0xBDBC410C b323
    pub unsafe fn draw_shadowed_spot_light(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        dir_x: f32,
        dir_y: f32,
        dir_z: f32,
        color_r: i32,
        color_g: i32,
        color_b: i32,
        distance: f32,
        brightness: f32,
        roundness: f32,
        radius: f32,
        falloff: f32,
        shadow_id: i32,
    ) {
        call_native!(
            Void,
            0x5BCA583A583194DBu64,
            pos_x,
            pos_y,
            pos_z,
            dir_x,
            dir_y,
            dir_z,
            color_r,
            color_g,
            color_b,
            distance,
            brightness,
            roundness,
            radius,
            falloff,
            shadow_id
        );
    } // 0x5BCA583A583194DB 0x32BF9598 b323
    pub unsafe fn fade_up_ped_light(p_0: f32) {
        call_native!(Void, 0xC9B18B4619F48F7Bu64, p_0);
    } // 0xC9B18B4619F48F7B 0x93628786 b323
    pub unsafe fn update_lights_on_entity(entity: Entity) {
        call_native!(Void, 0xDEADC0DEDEADC0DEu64, entity);
    } // 0xDEADC0DEDEADC0DE 0xC12AC47A b323
    pub unsafe fn set_light_override_max_intensity_scale(p_0: Any) {
        call_native!(Void, 0x9641588DAB93B4B5u64, p_0);
    } // 0x9641588DAB93B4B5  b877
    pub unsafe fn get_light_override_max_intensity_scale() -> f32 {
        call_native!(f32, 0x393BD2275CEB7793u64)
    } // 0x393BD2275CEB7793  b1103
    pub unsafe fn draw_marker(
        _type: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        dir_x: f32,
        dir_y: f32,
        dir_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        scale_x: f32,
        scale_y: f32,
        scale_z: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        bob_up_and_down: bool,
        face_camera: bool,
        p_1_9: i32,
        rotate: bool,
        texture_dict: *const i8,
        texture_name: *const i8,
        draw_on_ents: bool,
    ) {
        call_native!(
            Void,
            0x28477EC23D892089u64,
            _type,
            pos_x,
            pos_y,
            pos_z,
            dir_x,
            dir_y,
            dir_z,
            rot_x,
            rot_y,
            rot_z,
            scale_x,
            scale_y,
            scale_z,
            red,
            green,
            blue,
            alpha,
            bob_up_and_down,
            face_camera,
            p_1_9,
            rotate,
            texture_dict,
            texture_name,
            draw_on_ents
        );
    } // 0x28477EC23D892089 0x48D84A02 b323
    pub unsafe fn draw_marker_ex(
        _type: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        dir_x: f32,
        dir_y: f32,
        dir_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        scale_x: f32,
        scale_y: f32,
        scale_z: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        bob_up_and_down: bool,
        face_camera: bool,
        p_1_9: Any,
        rotate: bool,
        texture_dict: *const i8,
        texture_name: *const i8,
        draw_on_ents: bool,
        p_2_4: bool,
        p_2_5: bool,
    ) {
        call_native!(
            Void,
            0xE82728F0DE75D13Au64,
            _type,
            pos_x,
            pos_y,
            pos_z,
            dir_x,
            dir_y,
            dir_z,
            rot_x,
            rot_y,
            rot_z,
            scale_x,
            scale_y,
            scale_z,
            red,
            green,
            blue,
            alpha,
            bob_up_and_down,
            face_camera,
            p_1_9,
            rotate,
            texture_dict,
            texture_name,
            draw_on_ents,
            p_2_4,
            p_2_5
        );
    } // 0xE82728F0DE75D13A  b573
    pub unsafe fn draw_marker_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: f32,
    ) {
        call_native!(
            Void,
            0x799017F9E3B10112u64,
            x,
            y,
            z,
            radius,
            red,
            green,
            blue,
            alpha
        );
    } // 0x799017F9E3B10112  b463
    pub unsafe fn create_checkpoint(
        _type: i32,
        pos_x_1: f32,
        pos_y_1: f32,
        pos_z_1: f32,
        pos_x_2: f32,
        pos_y_2: f32,
        pos_z_2: f32,
        diameter: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        reserved: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x0134F0835AB6BFCBu64,
            _type,
            pos_x_1,
            pos_y_1,
            pos_z_1,
            pos_x_2,
            pos_y_2,
            pos_z_2,
            diameter,
            red,
            green,
            blue,
            alpha,
            reserved
        )
    } // 0x0134F0835AB6BFCB 0xF541B690 b323
    pub unsafe fn set_checkpoint_inside_cylinder_height_scale(checkpoint: i32, scale: f32) {
        call_native!(Void, 0x4B5B4DA5D79F1943u64, checkpoint, scale);
    } // 0x4B5B4DA5D79F1943 0x80151CCF b323
    pub unsafe fn set_checkpoint_inside_cylinder_scale(checkpoint: i32, scale: f32) {
        call_native!(Void, 0x44621483FF966526u64, checkpoint, scale);
    } // 0x44621483FF966526  b877
    pub unsafe fn set_checkpoint_cylinder_height(
        checkpoint: i32,
        near_height: f32,
        far_height: f32,
        radius: f32,
    ) {
        call_native!(
            Void,
            0x2707AAE9D9297D89u64,
            checkpoint,
            near_height,
            far_height,
            radius
        );
    } // 0x2707AAE9D9297D89 0xFF0F9B22 b323
    pub unsafe fn set_checkpoint_rgba(
        checkpoint: i32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0x7167371E8AD747F7u64,
            checkpoint,
            red,
            green,
            blue,
            alpha
        );
    } // 0x7167371E8AD747F7 0xEF9C8CB3 b323
    pub unsafe fn set_checkpoint_rgba2(
        checkpoint: i32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xB9EA40907C680580u64,
            checkpoint,
            red,
            green,
            blue,
            alpha
        );
    } // 0xB9EA40907C680580 0xA5456DBB b323
    pub unsafe fn set_checkpoint_clipplane_with_pos_norm(
        checkpoint: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        unk_x: f32,
        unk_y: f32,
        unk_z: f32,
    ) {
        call_native!(
            Void,
            0xF51D36185993515Du64,
            checkpoint,
            pos_x,
            pos_y,
            pos_z,
            unk_x,
            unk_y,
            unk_z
        );
    } // 0xF51D36185993515D 0x20EABD0F b323
    pub unsafe fn set_checkpoint_force_old_arrow_pointing(checkpoint: i32) {
        call_native!(Void, 0xFCF6788FC4860CD4u64, checkpoint);
    } // 0xFCF6788FC4860CD4  b1734
    pub unsafe fn set_checkpoint_decal_rot_aligned_to_camera_rot(checkpoint: i32) {
        call_native!(Void, 0x615D3925E87A3B26u64, checkpoint);
    } // 0x615D3925E87A3B26 0x1E3A3126 b323
    pub unsafe fn set_checkpoint_force_direction(checkpoint: i32) {
        call_native!(Void, 0xDB1EA9411C8911ECu64, checkpoint);
    } // 0xDB1EA9411C8911EC  b1180
    pub unsafe fn set_checkpoint_direction(checkpoint: i32, pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0x3C788E7F6438754Du64, checkpoint, pos_x, pos_y, pos_z);
    } // 0x3C788E7F6438754D  b1180
    pub unsafe fn delete_checkpoint(checkpoint: i32) {
        call_native!(Void, 0xF5ED37F54CD4D52Eu64, checkpoint);
    } // 0xF5ED37F54CD4D52E 0xB66CF3CA b323
    pub unsafe fn dont_render_in_game_ui(p_0: bool) {
        call_native!(Void, 0x22A249A53034450Au64, p_0);
    } // 0x22A249A53034450A 0x932FDB81 b323
    pub unsafe fn force_render_in_game_ui(toggle: bool) {
        call_native!(Void, 0xDC459CFA0CCE245Bu64, toggle);
    } // 0xDC459CFA0CCE245B 0x7E946E87 b323
    pub unsafe fn request_streamed_texture_dict(texture_dict: *const i8, p_1: bool) {
        call_native!(Void, 0xDFA2EF8E04127DD5u64, texture_dict, p_1);
    } // 0xDFA2EF8E04127DD5 0x4C9B035F b323
    pub unsafe fn has_streamed_texture_dict_loaded(texture_dict: *const i8) -> bool {
        call_native!(bool, 0x0145F696AAAAD2E4u64, texture_dict)
    } // 0x0145F696AAAAD2E4 0x3F436EEF b323
    pub unsafe fn set_streamed_texture_dict_as_no_longer_needed(texture_dict: *const i8) {
        call_native!(Void, 0xBE2CACCF5A8AA805u64, texture_dict);
    } // 0xBE2CACCF5A8AA805 0xF07DDA38 b323
    pub unsafe fn draw_rect(
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        r: i32,
        g: i32,
        b: i32,
        a: i32,
        p_8: bool,
    ) {
        call_native!(
            Void,
            0x3A618A217E5154F0u64,
            x,
            y,
            width,
            height,
            r,
            g,
            b,
            a,
            p_8
        );
    } // 0x3A618A217E5154F0 0xDD2BFC77 b323
    pub unsafe fn set_script_gfx_draw_behind_pausemenu(toggle: bool) {
        call_native!(Void, 0xC6372ECD45D73BCDu64, toggle);
    } // 0xC6372ECD45D73BCD 0xF8FBCC25 b323
    pub unsafe fn set_script_gfx_draw_order(draw_order: i32) {
        call_native!(Void, 0x61BB1D9B3A95D802u64, draw_order);
    } // 0x61BB1D9B3A95D802 0xADF81D24 b323
    pub unsafe fn set_script_gfx_align(horizontal_align: i32, vertical_align: i32) {
        call_native!(
            Void,
            0xB8A850F20A067EB6u64,
            horizontal_align,
            vertical_align
        );
    } // 0xB8A850F20A067EB6 0x228A2598 b323
    pub unsafe fn reset_script_gfx_align() {
        call_native!(Void, 0xE3A3DB414A373DABu64);
    } // 0xE3A3DB414A373DAB 0x3FE33BD6 b323
    pub unsafe fn set_script_gfx_align_params(x: f32, y: f32, w: f32, h: f32) {
        call_native!(Void, 0xF5A2C681787E579Du64, x, y, w, h);
    } // 0xF5A2C681787E579D 0x76C641E4 b323
    pub unsafe fn get_script_gfx_align_position(
        x: f32,
        y: f32,
        calculated_x: *mut f32,
        calculated_y: *mut f32,
    ) {
        call_native!(
            Void,
            0x6DD8F5AA635EB4B2u64,
            x,
            y,
            calculated_x,
            calculated_y
        );
    } // 0x6DD8F5AA635EB4B2  b323
    pub unsafe fn get_safe_zone_size() -> f32 {
        call_native!(f32, 0xBAF107B6BB2C97F0u64)
    } // 0xBAF107B6BB2C97F0 0x3F0D1A6F b323
    pub unsafe fn draw_sprite(
        texture_dict: *const i8,
        texture_name: *const i8,
        screen_x: f32,
        screen_y: f32,
        width: f32,
        height: f32,
        heading: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_1_1: bool,
        p_1_2: Any,
    ) {
        call_native!(
            Void,
            0xE7FFAE5EBF23D890u64,
            texture_dict,
            texture_name,
            screen_x,
            screen_y,
            width,
            height,
            heading,
            red,
            green,
            blue,
            alpha,
            p_1_1,
            p_1_2
        );
    } // 0xE7FFAE5EBF23D890 0x1FEC16B0 b323
    pub unsafe fn draw_sprite_arx(
        texture_dict: *const i8,
        texture_name: *const i8,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        p_6: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_1_1: Any,
        p_1_2: Any,
    ) {
        call_native!(
            Void,
            0x2D3B147AFAD49DE0u64,
            texture_dict,
            texture_name,
            x,
            y,
            width,
            height,
            p_6,
            red,
            green,
            blue,
            alpha,
            p_1_1,
            p_1_2
        );
    } // 0x2D3B147AFAD49DE0  b1290
    pub unsafe fn draw_sprite_named_rendertarget(
        texture_dict: *const i8,
        texture_name: *const i8,
        screen_x: f32,
        screen_y: f32,
        width: f32,
        height: f32,
        heading: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_1_1: Any,
    ) {
        call_native!(
            Void,
            0x2BC54A8188768488u64,
            texture_dict,
            texture_name,
            screen_x,
            screen_y,
            width,
            height,
            heading,
            red,
            green,
            blue,
            alpha,
            p_1_1
        );
    } // 0x2BC54A8188768488  b877
    pub unsafe fn draw_sprite_arx_with_uv(
        texture_dict: *const i8,
        texture_name: *const i8,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        u_1: f32,
        v_1: f32,
        u_2: f32,
        v_2: f32,
        heading: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_1_5: Any,
    ) {
        call_native!(
            Void,
            0x95812F9B26074726u64,
            texture_dict,
            texture_name,
            x,
            y,
            width,
            height,
            u_1,
            v_1,
            u_2,
            v_2,
            heading,
            red,
            green,
            blue,
            alpha,
            p_1_5
        );
    } // 0x95812F9B26074726  b1868
    pub unsafe fn add_entity_icon(entity: Entity, icon: *const i8) -> i32 {
        call_native!(i32, 0x9CD43EEE12BF4DD0u64, entity, icon)
    } // 0x9CD43EEE12BF4DD0 0xF3027D21 b323
    pub unsafe fn set_entity_icon_visibility(entity: Entity, toggle: bool) {
        call_native!(Void, 0xE0E8BEECCA96BA31u64, entity, toggle);
    } // 0xE0E8BEECCA96BA31 0xD1D2FD52 b323
    pub unsafe fn set_entity_icon_color(
        entity: Entity,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(Void, 0x1D5F595CCAE2E238u64, entity, red, green, blue, alpha);
    } // 0x1D5F595CCAE2E238 0x6EE1E946 b323
    pub unsafe fn set_draw_origin(x: f32, y: f32, z: f32, p_3: bool) {
        call_native!(Void, 0xAA0008F3BBB8F416u64, x, y, z, p_3);
    } // 0xAA0008F3BBB8F416 0xE10198D5 b323
    pub unsafe fn clear_draw_origin() {
        call_native!(Void, 0xFF0B610F6BE0D7AFu64);
    } // 0xFF0B610F6BE0D7AF 0xDD76B263 b323
    pub unsafe fn set_bink_movie(name: *const i8) -> i32 {
        call_native!(i32, 0x338D9F609FD632DBu64, name)
    } // 0x338D9F609FD632DB  b1290
    pub unsafe fn play_bink_movie(bink_movie: i32) {
        call_native!(Void, 0x70D2CC8A542A973Cu64, bink_movie);
    } // 0x70D2CC8A542A973C  b1290
    pub unsafe fn stop_bink_movie(bink_movie: i32) {
        call_native!(Void, 0x63606A61DE68898Au64, bink_movie);
    } // 0x63606A61DE68898A  b1290
    pub unsafe fn release_bink_movie(bink_movie: i32) {
        call_native!(Void, 0x04D950EEFA4EED8Cu64, bink_movie);
    } // 0x04D950EEFA4EED8C  b1290
    pub unsafe fn draw_bink_movie(
        bink_movie: i32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        r: i32,
        g: i32,
        b: i32,
        a: i32,
    ) {
        call_native!(
            Void,
            0x7118E83EEB9F7238u64,
            bink_movie,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            r,
            g,
            b,
            a
        );
    } // 0x7118E83EEB9F7238  b1290
    pub unsafe fn set_bink_movie_time(bink_movie: i32, progress: f32) {
        call_native!(Void, 0x0CB6B3446855B57Au64, bink_movie, progress);
    } // 0x0CB6B3446855B57A  b1290
    pub unsafe fn get_bink_movie_time(bink_movie: i32) -> f32 {
        call_native!(f32, 0x8E17DDD6B9D5BF29u64, bink_movie)
    } // 0x8E17DDD6B9D5BF29  b1734
    pub unsafe fn set_bink_movie_volume(bink_movie: i32, value: f32) {
        call_native!(Void, 0xAFF33B1178172223u64, bink_movie, value);
    } // 0xAFF33B1178172223  b1290
    pub unsafe fn attach_tv_audio_to_entity(entity: Entity) {
        call_native!(Void, 0x845BAD77CC770633u64, entity);
    } // 0x845BAD77CC770633 0x784944DB b323
    pub unsafe fn set_bink_movie_audio_frontend(bink_movie: i32, p_1: bool) {
        call_native!(Void, 0xF816F2933752322Du64, bink_movie, p_1);
    } // 0xF816F2933752322D  b1868
    pub unsafe fn set_tv_audio_frontend(toggle: bool) {
        call_native!(Void, 0x113D2C5DC57E1774u64, toggle);
    } // 0x113D2C5DC57E1774 0x2E0DFA35 b323
    pub unsafe fn set_bink_should_skip(bink_movie: i32, b_should_skip: bool) {
        call_native!(Void, 0x6805D58CAA427B72u64, bink_movie, b_should_skip);
    } // 0x6805D58CAA427B72  b1290
    pub unsafe fn load_movie_mesh_set(movie_mesh_set_name: *const i8) -> i32 {
        call_native!(i32, 0xB66064452270E8F1u64, movie_mesh_set_name)
    } // 0xB66064452270E8F1 0x9627905C b323
    pub unsafe fn release_movie_mesh_set(movie_mesh_set: i32) {
        call_native!(Void, 0xEB119AA014E89183u64, movie_mesh_set);
    } // 0xEB119AA014E89183 0x4FA5501D b323
    pub unsafe fn query_movie_mesh_set_state(p_0: Any) -> i32 {
        call_native!(i32, 0x9B6E70C5CEEF4EEBu64, p_0)
    } // 0x9B6E70C5CEEF4EEB 0x9D5D9B38 b323
    pub unsafe fn get_screen_resolution(x: *mut i32, y: *mut i32) {
        call_native!(Void, 0x888D57E407E63624u64, x, y);
    } // 0x888D57E407E63624 0x29F3572F b323
    pub unsafe fn get_actual_screen_resolution(x: *mut i32, y: *mut i32) {
        call_native!(Void, 0x873C9F3104101DD3u64, x, y);
    } // 0x873C9F3104101DD3  b323
    pub unsafe fn get_aspect_ratio(b: bool) -> f32 {
        call_native!(f32, 0xF1307EF624A80D87u64, b)
    } // 0xF1307EF624A80D87  b323
    pub unsafe fn get_screen_aspect_ratio() -> f32 {
        call_native!(f32, 0xB2EBE8CBC58B90E9u64)
    } // 0xB2EBE8CBC58B90E9  b323
    pub unsafe fn get_is_widescreen() -> bool {
        call_native!(bool, 0x30CF4BDA4FCB1905u64)
    } // 0x30CF4BDA4FCB1905 0xEC717AEF b323
    pub unsafe fn get_is_hidef() -> bool {
        call_native!(bool, 0x84ED31191CC5D2C9u64)
    } // 0x84ED31191CC5D2C9 0x1C340359 b323
    pub unsafe fn adjust_next_pos_size_as_normalized_16_9() {
        call_native!(Void, 0xEFABC7722293DA7Cu64);
    } // 0xEFABC7722293DA7C  b323
    pub unsafe fn set_nightvision(toggle: bool) {
        call_native!(Void, 0x18F621F7A5B1F85Du64, toggle);
    } // 0x18F621F7A5B1F85D 0xD1E5565F b323
    pub unsafe fn get_requestingnightvision() -> bool {
        call_native!(bool, 0x35FB78DC42B7BD21u64)
    } // 0x35FB78DC42B7BD21 0xF3A6309E b323
    pub unsafe fn get_usingnightvision() -> bool {
        call_native!(bool, 0x2202A3F42C8E5F79u64)
    } // 0x2202A3F42C8E5F79 0x62619061 b323
    pub unsafe fn set_exposuretweak(toggle: bool) {
        call_native!(Void, 0xEF398BEEE4EF45F9u64, toggle);
    } // 0xEF398BEEE4EF45F9  b323
    pub unsafe fn force_exposure_readback(toggle: bool) {
        call_native!(Void, 0x814AF7DCAACC597Bu64, toggle);
    } // 0x814AF7DCAACC597B  b372
    pub unsafe fn override_nightvision_light_range(p_0: f32) {
        call_native!(Void, 0x43FA7CBE20DAB219u64, p_0);
    } // 0x43FA7CBE20DAB219  b1290
    pub unsafe fn set_noiseoveride(toggle: bool) {
        call_native!(Void, 0xE787BF1C5CF823C9u64, toggle);
    } // 0xE787BF1C5CF823C9 0xD576F5DD b323
    pub unsafe fn set_noisinessoveride(value: f32) {
        call_native!(Void, 0xCB6A7C3BB17A0C67u64, value);
    } // 0xCB6A7C3BB17A0C67 0x046B62D9 b323
    pub unsafe fn get_screen_coord_from_world_coord(
        world_x: f32,
        world_y: f32,
        world_z: f32,
        screen_x: *mut f32,
        screen_y: *mut f32,
    ) -> bool {
        call_native!(
            bool,
            0x34E82F05DF2974F5u64,
            world_x,
            world_y,
            world_z,
            screen_x,
            screen_y
        )
    } // 0x34E82F05DF2974F5 0x1F950E4B b323
    pub unsafe fn get_texture_resolution(
        texture_dict: *const i8,
        texture_name: *const i8,
    ) -> Vector3 {
        call_native!(Vector3, 0x35736EE65BD00C11u64, texture_dict, texture_name)
    } // 0x35736EE65BD00C11 0x096DAA4D b323
    pub unsafe fn override_ped_crew_logo_texture(ped: Ped, txd: *const i8, txn: *const i8) -> bool {
        call_native!(bool, 0x95EB5E34F821BABEu64, ped, txd, txn)
    } // 0x95EB5E34F821BABE  b877
    pub unsafe fn set_distance_blur_strength_override(p_0: f32) {
        call_native!(Void, 0xE2892E7E55D7073Au64, p_0);
    } // 0xE2892E7E55D7073A 0x455F1084 b323
    pub unsafe fn set_flash(p_0: f32, p_1: f32, fade_in: f32, duration: f32, fade_out: f32) {
        call_native!(
            Void,
            0x0AB84296FED9CFC6u64,
            p_0,
            p_1,
            fade_in,
            duration,
            fade_out
        );
    } // 0x0AB84296FED9CFC6 0x7E55A1EE b323
    pub unsafe fn disable_occlusion_this_frame() {
        call_native!(Void, 0x3669F1B198DCAA4Fu64);
    } // 0x3669F1B198DCAA4F 0x0DCC0B8B b323
    pub unsafe fn set_artificial_lights_state(state: bool) {
        call_native!(Void, 0x1268615ACE24D504u64, state);
    } // 0x1268615ACE24D504 0xAA2A0EAF b323
    pub unsafe fn set_artificial_vehicle_lights_state(toggle: bool) {
        call_native!(Void, 0xE2B187C0939B3D32u64, toggle);
    } // 0xE2B187C0939B3D32  b2060
    pub unsafe fn disable_hdtex_this_frame() {
        call_native!(Void, 0xC35A6D07C93802B2u64);
    } // 0xC35A6D07C93802B2  b323
    pub unsafe fn create_tracked_point() -> i32 {
        call_native!(i32, 0xE2C9439ED45DEA60u64)
    } // 0xE2C9439ED45DEA60 0x3129C31A b323
    pub unsafe fn set_tracked_point_info(point: i32, x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0x164ECBB3CF750CB0u64, point, x, y, z, radius);
    } // 0x164ECBB3CF750CB0 0x28689AA4 b323
    pub unsafe fn is_tracked_point_visible(point: i32) -> bool {
        call_native!(bool, 0xC45CCDAAC9221CA8u64, point)
    } // 0xC45CCDAAC9221CA8 0x0BFC4F64 b323
    pub unsafe fn destroy_tracked_point(point: i32) {
        call_native!(Void, 0xB25DC90BAD56CA42u64, point);
    } // 0xB25DC90BAD56CA42 0x14AC675F b323
    pub unsafe fn set_grass_cull_sphere(p_0: f32, p_1: f32, p_2: f32, p_3: f32) -> i32 {
        call_native!(i32, 0xBE197EAA669238F4u64, p_0, p_1, p_2, p_3)
    } // 0xBE197EAA669238F4  b323
    pub unsafe fn remove_grass_cull_sphere(handle: i32) {
        call_native!(Void, 0x61F95E5BB3E0A8C6u64, handle);
    } // 0x61F95E5BB3E0A8C6  b323
    pub unsafe fn procgrass_enable_cullsphere(handle: i32, x: f32, y: f32, z: f32, scale: f32) {
        call_native!(Void, 0xAE51BC858F32BA66u64, handle, x, y, z, scale);
    } // 0xAE51BC858F32BA66  b323
    pub unsafe fn procgrass_disable_cullsphere(handle: i32) {
        call_native!(Void, 0x649C97D52332341Au64, handle);
    } // 0x649C97D52332341A  b323
    pub unsafe fn procgrass_is_cullsphere_enabled(handle: i32) -> bool {
        call_native!(bool, 0x2C42340F916C5930u64, handle)
    } // 0x2C42340F916C5930  b323
    pub unsafe fn procgrass_enable_ambscalescan() {
        call_native!(Void, 0x14FC5833464340A8u64);
    } // 0x14FC5833464340A8  b323
    pub unsafe fn procgrass_disable_ambscalescan() {
        call_native!(Void, 0x0218BA067D249DEAu64);
    } // 0x0218BA067D249DEA  b323
    pub unsafe fn disable_procobj_creation() {
        call_native!(Void, 0x1612C45F9E3E0D44u64);
    } // 0x1612C45F9E3E0D44  b323
    pub unsafe fn enable_procobj_creation() {
        call_native!(Void, 0x5DEBD9C4DC995692u64);
    } // 0x5DEBD9C4DC995692  b323
    pub unsafe fn grassbatch_enable_flattening_ext_in_sphere(
        x: f32,
        y: f32,
        z: f32,
        p_3: Any,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        scale: f32,
    ) {
        call_native!(
            Void,
            0xAAE9BE70EC7C69ABu64,
            x,
            y,
            z,
            p_3,
            p_4,
            p_5,
            p_6,
            scale
        );
    } // 0xAAE9BE70EC7C69AB  b1290
    pub unsafe fn grassbatch_enable_flattening_in_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
    ) {
        call_native!(Void, 0x6D955F6A9E0295B1u64, x, y, z, radius, p_4, p_5, p_6);
    } // 0x6D955F6A9E0295B1  b323
    pub unsafe fn grassbatch_disable_flattening() {
        call_native!(Void, 0x302C91AB2D477F7Eu64);
    } // 0x302C91AB2D477F7E  b323
    pub unsafe fn cascade_shadows_init_session() {
        call_native!(Void, 0x03FC694AE06C5A20u64);
    } // 0x03FC694AE06C5A20 0x48F16186 b323
    pub unsafe fn cascade_shadows_set_cascade_bounds(
        p_0: Any,
        p_1: bool,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: bool,
        p_7: f32,
    ) {
        call_native!(
            Void,
            0xD2936CAB8B58FCBDu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0xD2936CAB8B58FCBD 0x84F05943 b323
    pub unsafe fn cascade_shadows_set_cascade_bounds_scale(p_0: f32) {
        call_native!(Void, 0x5F0F3F56635809EFu64, p_0);
    } // 0x5F0F3F56635809EF 0x13D4ABC0 b323
    pub unsafe fn cascade_shadows_set_entity_tracker_scale(p_0: f32) {
        call_native!(Void, 0x5E9DAF5A20F15908u64, p_0);
    } // 0x5E9DAF5A20F15908 0xD2157428 b323
    pub unsafe fn cascade_shadows_set_split_z_exp_weight(p_0: f32) {
        call_native!(Void, 0x36F6626459D91457u64, p_0);
    } // 0x36F6626459D91457 0xC07C64C9 b323
    pub unsafe fn cascade_shadows_set_bound_position(p_0: Any) {
        call_native!(Void, 0x259BA6D4E6F808F1u64, p_0);
    } // 0x259BA6D4E6F808F1  b1011
    pub unsafe fn cascade_shadows_enable_entity_tracker(toggle: bool) {
        call_native!(Void, 0x80ECBC0C856D3B0Bu64, toggle);
    } // 0x80ECBC0C856D3B0B 0xFE903D0F b323
    pub unsafe fn cascade_shadows_set_screen_size_check_enabled(p_0: bool) {
        call_native!(Void, 0x25FC3E33A31AD0C9u64, p_0);
    } // 0x25FC3E33A31AD0C9  b323
    pub unsafe fn cascade_shadows_set_shadow_sample_type(_type: *const i8) {
        call_native!(Void, 0xB11D94BC55F41932u64, _type);
    } // 0xB11D94BC55F41932 0xDE10BA1F b323
    pub unsafe fn cascade_shadows_clear_shadow_sample_type() {
        call_native!(Void, 0x27CB772218215325u64);
    } // 0x27CB772218215325  b323
    pub unsafe fn cascade_shadows_set_aircraft_mode(p_0: bool) {
        call_native!(Void, 0x6DDBF9DFFC4AC080u64, p_0);
    } // 0x6DDBF9DFFC4AC080 0x9F470BE3 b323
    pub unsafe fn cascade_shadows_set_dynamic_depth_mode(p_0: bool) {
        call_native!(Void, 0xD39D13C9FEBF0511u64, p_0);
    } // 0xD39D13C9FEBF0511 0x4A124267 b323
    pub unsafe fn cascade_shadows_set_dynamic_depth_value(p_0: f32) {
        call_native!(Void, 0x02AC28F3A01FA04Au64, p_0);
    } // 0x02AC28F3A01FA04A 0xB19B2764 b323
    pub unsafe fn cascade_shadows_enable_freezer(p_0: bool) {
        call_native!(Void, 0x0AE73D8DF3A762B2u64, p_0);
    } // 0x0AE73D8DF3A762B2 0x342FA2B4 b323
    pub unsafe fn water_reflection_set_script_object_visibility(p_0: Any) {
        call_native!(Void, 0xCA465D9CC0D231BAu64, p_0);
    } // 0xCA465D9CC0D231BA  b1011
    pub unsafe fn golf_trail_set_enabled(toggle: bool) {
        call_native!(Void, 0xA51C4B86B71652AEu64, toggle);
    } // 0xA51C4B86B71652AE 0x5D3BFFC9 b323
    pub unsafe fn golf_trail_set_path(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: bool,
    ) {
        call_native!(
            Void,
            0x312342E1A4874F3Fu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0x312342E1A4874F3F 0xD9653728 b323
    pub unsafe fn golf_trail_set_radius(p_0: f32, p_1: f32, p_2: f32) {
        call_native!(Void, 0x2485D34E50A22E84u64, p_0, p_1, p_2);
    } // 0x2485D34E50A22E84 0x72BA8A14 b323
    pub unsafe fn golf_trail_set_colour(
        p_0: i32,
        p_1: i32,
        p_2: i32,
        p_3: i32,
        p_4: i32,
        p_5: i32,
        p_6: i32,
        p_7: i32,
        p_8: i32,
        p_9: i32,
        p_1_0: i32,
        p_1_1: i32,
    ) {
        call_native!(
            Void,
            0x12995F2E53FFA601u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1
        );
    } // 0x12995F2E53FFA601 0x804F444C b323
    pub unsafe fn golf_trail_set_tessellation(p_0: i32, p_1: i32) {
        call_native!(Void, 0xDBAA5EC848BA2D46u64, p_0, p_1);
    } // 0xDBAA5EC848BA2D46 0xBB1A1294 b323
    pub unsafe fn golf_trail_set_fixed_control_point_enable(p_0: bool) {
        call_native!(Void, 0xC0416B061F2B7E5Eu64, p_0);
    } // 0xC0416B061F2B7E5E 0x1A1A72EF b323
    pub unsafe fn golf_trail_set_fixed_control_point(
        _type: i32,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        p_4: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xB1BB03742917A5D6u64,
            _type,
            x_pos,
            y_pos,
            z_pos,
            p_4,
            red,
            green,
            blue,
            alpha
        );
    } // 0xB1BB03742917A5D6 0x3BB12B75 b323
    pub unsafe fn golf_trail_set_shader_params(p_0: f32, p_1: f32, p_2: f32, p_3: f32, p_4: f32) {
        call_native!(Void, 0x9CFDD90B2B844BF7u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x9CFDD90B2B844BF7 0x4EA70FB4 b323
    pub unsafe fn golf_trail_set_facing(p_0: bool) {
        call_native!(Void, 0x06F761EA47C1D3EDu64, p_0);
    } // 0x06F761EA47C1D3ED 0x0D830DC7 b323
    pub unsafe fn golf_trail_get_max_height() -> f32 {
        call_native!(f32, 0xA4819F5E23E2FFADu64)
    } // 0xA4819F5E23E2FFAD 0xA08B46AD b323
    pub unsafe fn golf_trail_get_visual_control_point(p_0: i32) -> Vector3 {
        call_native!(Vector3, 0xA4664972A9B8F8BAu64, p_0)
    } // 0xA4664972A9B8F8BA 0xECD470F0 b323
    pub unsafe fn set_seethrough(toggle: bool) {
        call_native!(Void, 0x7E08924259E08CE0u64, toggle);
    } // 0x7E08924259E08CE0 0x74D4995C b323
    pub unsafe fn get_usingseethrough() -> bool {
        call_native!(bool, 0x44B80ABAB9D80BD3u64)
    } // 0x44B80ABAB9D80BD3 0x1FE547F2 b323
    pub unsafe fn seethrough_reset() {
        call_native!(Void, 0x70A64C0234EF522Cu64);
    } // 0x70A64C0234EF522C 0x310E9B67 b323
    pub unsafe fn seethrough_set_fade_startdistance(distance: f32) {
        call_native!(Void, 0xA78DE25577300BA1u64, distance);
    } // 0xA78DE25577300BA1  b573
    pub unsafe fn seethrough_set_fade_enddistance(distance: f32) {
        call_native!(Void, 0x9D75795B9DC6EBBFu64, distance);
    } // 0x9D75795B9DC6EBBF  b573
    pub unsafe fn seethrough_get_max_thickness() -> f32 {
        call_native!(f32, 0x43DBAE39626CE83Fu64)
    } // 0x43DBAE39626CE83F  b1290
    pub unsafe fn seethrough_set_max_thickness(thickness: f32) {
        call_native!(Void, 0x0C8FAC83902A62DFu64, thickness);
    } // 0x0C8FAC83902A62DF  b573
    pub unsafe fn seethrough_set_noise_min(amount: f32) {
        call_native!(Void, 0xFF5992E1C9E65D05u64, amount);
    } // 0xFF5992E1C9E65D05  b573
    pub unsafe fn seethrough_set_noise_max(amount: f32) {
        call_native!(Void, 0xFEBFBFDFB66039DEu64, amount);
    } // 0xFEBFBFDFB66039DE  b573
    pub unsafe fn seethrough_set_hilight_intensity(intensity: f32) {
        call_native!(Void, 0x19E50EB6E33E1D28u64, intensity);
    } // 0x19E50EB6E33E1D28  b573
    pub unsafe fn seethrough_set_highlight_noise(noise: f32) {
        call_native!(Void, 0x1636D7FC127B10D2u64, noise);
    } // 0x1636D7FC127B10D2  b573
    pub unsafe fn seethrough_set_heatscale(index: i32, heat_scale: f32) {
        call_native!(Void, 0xD7D0B00177485411u64, index, heat_scale);
    } // 0xD7D0B00177485411 0x654F0287 b323
    pub unsafe fn seethrough_set_color_near(red: i32, green: i32, blue: i32) {
        call_native!(Void, 0x1086127B3A63505Eu64, red, green, blue);
    } // 0x1086127B3A63505E 0x5B2A67A8 b573
    pub unsafe fn set_motionblur_max_vel_scaler(p_0: f32) {
        call_native!(Void, 0xB3C641F3630BF6DAu64, p_0);
    } // 0xB3C641F3630BF6DA 0xF6B837F0 b323
    pub unsafe fn get_motionblur_max_vel_scaler() -> f32 {
        call_native!(f32, 0xE59343E9E96529E7u64)
    } // 0xE59343E9E96529E7 0xD906A3A9 b323
    pub unsafe fn set_force_motionblur(toggle: bool) {
        call_native!(Void, 0x6A51F78772175A51u64, toggle);
    } // 0x6A51F78772175A51  b1011
    pub unsafe fn toggle_player_damage_overlay(toggle: bool) {
        call_native!(Void, 0xE63D7C6EECECB66Bu64, toggle);
    } // 0xE63D7C6EECECB66B 0xD34A6CBA b323
    pub unsafe fn reset_adaptation(p_0: i32) {
        call_native!(Void, 0xE3E2C1B4C59DBC77u64, p_0);
    } // 0xE3E2C1B4C59DBC77 0xD8CC7221 b323
    pub unsafe fn trigger_screenblur_fade_in(transition_time: f32) -> bool {
        call_native!(bool, 0xA328A24AAA6B7FDCu64, transition_time)
    } // 0xA328A24AAA6B7FDC 0x5604B890 b323
    pub unsafe fn trigger_screenblur_fade_out(transition_time: f32) -> bool {
        call_native!(bool, 0xEFACC8AEF94430D5u64, transition_time)
    } // 0xEFACC8AEF94430D5 0x46617502 b323
    pub unsafe fn disable_screenblur_fade() {
        call_native!(Void, 0xDE81239437E8C5A8u64);
    } // 0xDE81239437E8C5A8 0xDB7AECDA b323
    pub unsafe fn get_screenblur_fade_current_time() -> f32 {
        call_native!(f32, 0x5CCABFFCA31DDE33u64)
    } // 0x5CCABFFCA31DDE33 0xEA432A94 b323
    pub unsafe fn is_screenblur_fade_running() -> bool {
        call_native!(bool, 0x7B226C785A52A0A9u64)
    } // 0x7B226C785A52A0A9 0x926B8734 b323
    pub unsafe fn toggle_paused_renderphases(toggle: bool) {
        call_native!(Void, 0xDFC252D8A3E15AB7u64, toggle);
    } // 0xDFC252D8A3E15AB7 0x30ADE541 b323
    pub unsafe fn get_toggle_paused_renderphases_status() -> bool {
        call_native!(bool, 0xEB3DAC2C86001E5Eu64)
    } // 0xEB3DAC2C86001E5E 0xD4F5D07D b323
    pub unsafe fn reset_paused_renderphases() {
        call_native!(Void, 0xE1C8709406F2C41Cu64);
    } // 0xE1C8709406F2C41C 0x0113EAE4 b323
    pub unsafe fn grab_pausemenu_ownership() {
        call_native!(Void, 0x851CD923176EBA7Cu64);
    } // 0x851CD923176EBA7C 0xDCBA251B b323
    pub unsafe fn set_hidof_override(
        p_0: bool,
        p_1: bool,
        nearplane_out: f32,
        nearplane_in: f32,
        farplane_out: f32,
        farplane_in: f32,
    ) {
        call_native!(
            Void,
            0xBA3D65906822BED5u64,
            p_0,
            p_1,
            nearplane_out,
            nearplane_in,
            farplane_out,
            farplane_in
        );
    } // 0xBA3D65906822BED5 0x513D444B b323
    pub unsafe fn set_lock_adaptive_dof_distance(p_0: bool) {
        call_native!(Void, 0xB569F41F3E7E83A4u64, p_0);
    } // 0xB569F41F3E7E83A4  b1103
    pub unsafe fn phonephotoeditor_toggle(p_0: bool) -> bool {
        call_native!(bool, 0x7AC24EAB6D74118Du64, p_0)
    } // 0x7AC24EAB6D74118D 0xB2410EAB b323
    pub unsafe fn phonephotoeditor_is_active() -> bool {
        call_native!(bool, 0xBCEDB009461DA156u64)
    } // 0xBCEDB009461DA156 0x5AB94128 b323
    pub unsafe fn phonephotoeditor_set_frame_txd(texture_dict: *const i8, p_1: bool) -> bool {
        call_native!(bool, 0x27FEB5254759CDE3u64, texture_dict, p_1)
    } // 0x27FEB5254759CDE3 0xD63FCB3E b323
    pub unsafe fn start_particle_fx_non_looped_at_coord(
        effect_name: *const i8,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
    ) -> bool {
        call_native!(
            bool,
            0x25129531F77B9ED3u64,
            effect_name,
            x_pos,
            y_pos,
            z_pos,
            x_rot,
            y_rot,
            z_rot,
            scale,
            x_axis,
            y_axis,
            z_axis
        )
    } // 0x25129531F77B9ED3 0xDD79D679 b323
    pub unsafe fn start_networked_particle_fx_non_looped_at_coord(
        effect_name: *const i8,
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
        p_1_1: bool,
    ) -> bool {
        call_native!(
            bool,
            0xF56B8137DF10135Du64,
            effect_name,
            x_pos,
            y_pos,
            z_pos,
            x_rot,
            y_rot,
            z_rot,
            scale,
            x_axis,
            y_axis,
            z_axis,
            p_1_1
        )
    } // 0xF56B8137DF10135D 0x633F8C48 b323
    pub unsafe fn start_particle_fx_non_looped_on_ped_bone(
        effect_name: *const i8,
        ped: Ped,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        bone_index: i32,
        scale: f32,
        axis_x: bool,
        axis_y: bool,
        axis_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0x0E7E72961BA18619u64,
            effect_name,
            ped,
            offset_x,
            offset_y,
            offset_z,
            rot_x,
            rot_y,
            rot_z,
            bone_index,
            scale,
            axis_x,
            axis_y,
            axis_z
        )
    } // 0x0E7E72961BA18619 0x53DAEF4E b323
    pub unsafe fn start_networked_particle_fx_non_looped_on_ped_bone(
        effect_name: *const i8,
        ped: Ped,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        bone_index: i32,
        scale: f32,
        axis_x: bool,
        axis_y: bool,
        axis_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0xA41B6A43642AC2CFu64,
            effect_name,
            ped,
            offset_x,
            offset_y,
            offset_z,
            rot_x,
            rot_y,
            rot_z,
            bone_index,
            scale,
            axis_x,
            axis_y,
            axis_z
        )
    } // 0xA41B6A43642AC2CF 0x161780C1 b323
    pub unsafe fn start_particle_fx_non_looped_on_entity(
        effect_name: *const i8,
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        scale: f32,
        axis_x: bool,
        axis_y: bool,
        axis_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0x0D53A3B8DA0809D2u64,
            effect_name,
            entity,
            offset_x,
            offset_y,
            offset_z,
            rot_x,
            rot_y,
            rot_z,
            scale,
            axis_x,
            axis_y,
            axis_z
        )
    } // 0x0D53A3B8DA0809D2 0x9604DAD4 b323
    pub unsafe fn start_networked_particle_fx_non_looped_on_entity(
        effect_name: *const i8,
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        scale: f32,
        axis_x: bool,
        axis_y: bool,
        axis_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0xC95EB1DB6E92113Du64,
            effect_name,
            entity,
            offset_x,
            offset_y,
            offset_z,
            rot_x,
            rot_y,
            rot_z,
            scale,
            axis_x,
            axis_y,
            axis_z
        )
    } // 0xC95EB1DB6E92113D 0x469A2B4A b323
    pub unsafe fn start_particle_fx_non_looped_on_entity_bone(
        effect_name: *const i8,
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        bone_index: i32,
        scale: f32,
        axis_x: bool,
        axis_y: bool,
        axis_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0x02B1F2A72E0F5325u64,
            effect_name,
            entity,
            offset_x,
            offset_y,
            offset_z,
            rot_x,
            rot_y,
            rot_z,
            bone_index,
            scale,
            axis_x,
            axis_y,
            axis_z
        )
    } // 0x02B1F2A72E0F5325  b2189
    pub unsafe fn set_particle_fx_non_looped_colour(r: f32, g: f32, b: f32) {
        call_native!(Void, 0x26143A59EF48B262u64, r, g, b);
    } // 0x26143A59EF48B262 0x7B689E20 b323
    pub unsafe fn set_particle_fx_non_looped_alpha(alpha: f32) {
        call_native!(Void, 0x77168D722C58B2FCu64, alpha);
    } // 0x77168D722C58B2FC 0x497EAFF2 b323
    pub unsafe fn set_particle_fx_non_looped_scale(scale: f32) {
        call_native!(Void, 0xB7EF5850C39FABCAu64, scale);
    } // 0xB7EF5850C39FABCA  b2802
    pub unsafe fn set_particle_fx_non_looped_emitter_size(p_0: f32, p_1: f32, scale: f32) {
        call_native!(Void, 0x1E2E01C00837D26Eu64, p_0, p_1, scale);
    } // 0x1E2E01C00837D26E  b2699
    pub unsafe fn set_particle_fx_force_vehicle_interior(toggle: bool) {
        call_native!(Void, 0x8CDE909A0370BB3Au64, toggle);
    } // 0x8CDE909A0370BB3A  b323
    pub unsafe fn start_particle_fx_looped_at_coord(
        effect_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
        p_1_1: bool,
    ) -> i32 {
        call_native!(
            i32,
            0xE184F4F0DC5910E7u64,
            effect_name,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            scale,
            x_axis,
            y_axis,
            z_axis,
            p_1_1
        )
    } // 0xE184F4F0DC5910E7 0xD348E3E6 b323
    pub unsafe fn start_particle_fx_looped_on_ped_bone(
        effect_name: *const i8,
        ped: Ped,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        bone_index: i32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
    ) -> i32 {
        call_native!(
            i32,
            0xF28DA9F38CD1787Cu64,
            effect_name,
            ped,
            x_offset,
            y_offset,
            z_offset,
            x_rot,
            y_rot,
            z_rot,
            bone_index,
            scale,
            x_axis,
            y_axis,
            z_axis
        )
    } // 0xF28DA9F38CD1787C 0xF8FC196F b323
    pub unsafe fn start_particle_fx_looped_on_entity(
        effect_name: *const i8,
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
    ) -> i32 {
        call_native!(
            i32,
            0x1AE42C1660FD6517u64,
            effect_name,
            entity,
            x_offset,
            y_offset,
            z_offset,
            x_rot,
            y_rot,
            z_rot,
            scale,
            x_axis,
            y_axis,
            z_axis
        )
    } // 0x1AE42C1660FD6517 0x0D06FF62 b323
    pub unsafe fn start_particle_fx_looped_on_entity_bone(
        effect_name: *const i8,
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        bone_index: i32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
    ) -> i32 {
        call_native!(
            i32,
            0xC6EB449E33977F0Bu64,
            effect_name,
            entity,
            x_offset,
            y_offset,
            z_offset,
            x_rot,
            y_rot,
            z_rot,
            bone_index,
            scale,
            x_axis,
            y_axis,
            z_axis
        )
    } // 0xC6EB449E33977F0B 0x23BF0F9B b323
    pub unsafe fn start_networked_particle_fx_looped_on_entity(
        effect_name: *const i8,
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
        r: f32,
        g: f32,
        b: f32,
        a: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x6F60E89A7B64EE1Du64,
            effect_name,
            entity,
            x_offset,
            y_offset,
            z_offset,
            x_rot,
            y_rot,
            z_rot,
            scale,
            x_axis,
            y_axis,
            z_axis,
            r,
            g,
            b,
            a
        )
    } // 0x6F60E89A7B64EE1D 0x110752B2 b323
    pub unsafe fn start_networked_particle_fx_looped_on_entity_bone(
        effect_name: *const i8,
        entity: Entity,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        bone_index: i32,
        scale: f32,
        x_axis: bool,
        y_axis: bool,
        z_axis: bool,
        r: f32,
        g: f32,
        b: f32,
        a: f32,
    ) -> i32 {
        call_native!(
            i32,
            0xDDE23F30CC5A0F03u64,
            effect_name,
            entity,
            x_offset,
            y_offset,
            z_offset,
            x_rot,
            y_rot,
            z_rot,
            bone_index,
            scale,
            x_axis,
            y_axis,
            z_axis,
            r,
            g,
            b,
            a
        )
    } // 0xDDE23F30CC5A0F03 0xF478EFCF b323
    pub unsafe fn stop_particle_fx_looped(ptfx_handle: i32, p_1: bool) {
        call_native!(Void, 0x8F75998877616996u64, ptfx_handle, p_1);
    } // 0x8F75998877616996 0xD245455B b323
    pub unsafe fn remove_particle_fx(ptfx_handle: i32, p_1: bool) {
        call_native!(Void, 0xC401503DFE8D53CFu64, ptfx_handle, p_1);
    } // 0xC401503DFE8D53CF 0x6BA48C7E b323
    pub unsafe fn remove_particle_fx_from_entity(entity: Entity) {
        call_native!(Void, 0xB8FEAEEBCC127425u64, entity);
    } // 0xB8FEAEEBCC127425 0xCEDE52E9 b323
    pub unsafe fn remove_particle_fx_in_range(_x: f32, _y: f32, _z: f32, radius: f32) {
        call_native!(Void, 0xDD19FA1C6D657305u64, _x, _y, _z, radius);
    } // 0xDD19FA1C6D657305 0x7EB8F275 b323
    pub unsafe fn force_particle_fx_in_vehicle_interior(p_0: Any, p_1: Any) {
        call_native!(Void, 0xBA0127DA25FD54C9u64, p_0, p_1);
    } // 0xBA0127DA25FD54C9  b372
    pub unsafe fn does_particle_fx_looped_exist(ptfx_handle: i32) -> bool {
        call_native!(bool, 0x74AFEF0D2E1E409Bu64, ptfx_handle)
    } // 0x74AFEF0D2E1E409B 0xCBF91D2A b323
    pub unsafe fn set_particle_fx_looped_offsets(
        ptfx_handle: i32,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
    ) {
        call_native!(
            Void,
            0xF7DDEBEC43483C43u64,
            ptfx_handle,
            x,
            y,
            z,
            rot_x,
            rot_y,
            rot_z
        );
    } // 0xF7DDEBEC43483C43 0x641F7790 b323
    pub unsafe fn set_particle_fx_looped_evolution(
        ptfx_handle: i32,
        property_name: *const i8,
        amount: f32,
        no_network: bool,
    ) {
        call_native!(
            Void,
            0x5F0C4B5B1C393BE2u64,
            ptfx_handle,
            property_name,
            amount,
            no_network
        );
    } // 0x5F0C4B5B1C393BE2 0x1CBC1373 b323
    pub unsafe fn set_particle_fx_looped_colour(
        ptfx_handle: i32,
        r: f32,
        g: f32,
        b: f32,
        p_4: bool,
    ) {
        call_native!(Void, 0x7F8F65877F88783Bu64, ptfx_handle, r, g, b, p_4);
    } // 0x7F8F65877F88783B 0x5219D530 b323
    pub unsafe fn set_particle_fx_looped_alpha(ptfx_handle: i32, alpha: f32) {
        call_native!(Void, 0x726845132380142Eu64, ptfx_handle, alpha);
    } // 0x726845132380142E 0x5ED49BE1 b323
    pub unsafe fn set_particle_fx_looped_scale(ptfx_handle: i32, scale: f32) {
        call_native!(Void, 0xB44250AAA456492Du64, ptfx_handle, scale);
    } // 0xB44250AAA456492D 0x099B8B49 b323
    pub unsafe fn set_particle_fx_looped_far_clip_dist(ptfx_handle: i32, range: f32) {
        call_native!(Void, 0xDCB194B85EF7B541u64, ptfx_handle, range);
    } // 0xDCB194B85EF7B541 0x233DE879 b323
    pub unsafe fn _set_particle_fx_looped_camera_bias(ptfx_handle: i32, p_1: f32) {
        call_native!(Void, 0x4100BF0346A8D2C3u64, ptfx_handle, p_1);
    } // 0x4100BF0346A8D2C3  b3095
    pub unsafe fn set_particle_fx_cam_inside_vehicle(p_0: bool) {
        call_native!(Void, 0xEEC4047028426510u64, p_0);
    } // 0xEEC4047028426510 0x19EC0001 b323
    pub unsafe fn set_particle_fx_cam_inside_nonplayer_vehicle(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xACEE6F360FC1F6B6u64, vehicle, p_1);
    } // 0xACEE6F360FC1F6B6 0x6B125A02 b323
    pub unsafe fn set_particle_fx_shootout_boat(p_0: Any) {
        call_native!(Void, 0x96EF97DAEB89BEF5u64, p_0);
    } // 0x96EF97DAEB89BEF5 0xD938DEE0 b323
    pub unsafe fn clear_particle_fx_shootout_boat() {
        call_native!(Void, 0x2A251AA48B2B46DBu64);
    } // 0x2A251AA48B2B46DB  b323
    pub unsafe fn set_particle_fx_blood_scale(p_0: Any) {
        call_native!(Void, 0x908311265D42A820u64, p_0);
    } // 0x908311265D42A820  b323
    pub unsafe fn disable_in_water_ptfx(toggle: bool) {
        call_native!(Void, 0xCFD16F0DB5A3535Cu64, toggle);
    } // 0xCFD16F0DB5A3535C  b2060
    pub unsafe fn disable_downwash_ptfx(toggle: bool) {
        call_native!(Void, 0x5F6DF3D92271E8A1u64, toggle);
    } // 0x5F6DF3D92271E8A1  b323
    pub unsafe fn set_particle_fx_slipstream_lodrange_scale(scale: f32) {
        call_native!(Void, 0x2B40A97646381508u64, scale);
    } // 0x2B40A97646381508  b1011
    pub unsafe fn enable_clown_blood_vfx(toggle: bool) {
        call_native!(Void, 0xD821490579791273u64, toggle);
    } // 0xD821490579791273 0xC61C75E9 b323
    pub unsafe fn enable_alien_blood_vfx(toggle: bool) {
        call_native!(Void, 0x9DCE1F0F78260875u64, toggle);
    } // 0x9DCE1F0F78260875 0xCE8B8748 b323
    pub unsafe fn set_particle_fx_bullet_impact_scale(scale: f32) {
        call_native!(Void, 0x27E32866E9A5C416u64, scale);
    } // 0x27E32866E9A5C416 0xC1AD5DDF b323
    pub unsafe fn set_particle_fx_bullet_impact_lodrange_scale(p_0: f32) {
        call_native!(Void, 0xBB90E12CAC1DAB25u64, p_0);
    } // 0xBB90E12CAC1DAB25 0x3968E915 b323
    pub unsafe fn set_particle_fx_bullet_trace_no_angle_reject(p_0: bool) {
        call_native!(Void, 0xCA4AE345A153D573u64, p_0);
    } // 0xCA4AE345A153D573 0x64BA4648 b323
    pub unsafe fn set_particle_fx_bang_scrape_lodrange_scale(p_0: f32) {
        call_native!(Void, 0x54E22EA2C1956A8Du64, p_0);
    } // 0x54E22EA2C1956A8D 0x8BE3D47F b323
    pub unsafe fn set_particle_fx_foot_lodrange_scale(p_0: f32) {
        call_native!(Void, 0x949F397A288B28B3u64, p_0);
    } // 0x949F397A288B28B3 0xE3880F5A b323
    pub unsafe fn set_particle_fx_foot_override_name(p_0: *const i8) {
        call_native!(Void, 0xBA3D194057C79A7Bu64, p_0);
    } // 0xBA3D194057C79A7B  b877
    pub unsafe fn set_skidmark_range_scale(scale: f32) {
        call_native!(Void, 0x5DBF05DB5926D089u64, scale);
    } // 0x5DBF05DB5926D089  b1011
    pub unsafe fn set_ptfx_force_vehicle_interior_flag(p_0: Any) {
        call_native!(Void, 0xC6730E0D14E50703u64, p_0);
    } // 0xC6730E0D14E50703  b2545
    pub unsafe fn register_postfx_bullet_impact(
        weapon_world_pos_x: f32,
        weapon_world_pos_y: f32,
        weapon_world_pos_z: f32,
        intensity: f32,
    ) {
        call_native!(
            Void,
            0x170911F37F646F29u64,
            weapon_world_pos_x,
            weapon_world_pos_y,
            weapon_world_pos_z,
            intensity
        );
    } // 0x170911F37F646F29  b2802
    pub unsafe fn force_postfx_bullet_impacts_after_hud(p_0: bool) {
        call_native!(Void, 0x9B079E5221D984D3u64, p_0);
    } // 0x9B079E5221D984D3  b323
    pub unsafe fn use_particle_fx_asset(name: *const i8) {
        call_native!(Void, 0x6C38AF3693A69A91u64, name);
    } // 0x6C38AF3693A69A91 0x9C720B61 b323
    pub unsafe fn set_particle_fx_override(old_asset: *const i8, new_asset: *const i8) {
        call_native!(Void, 0xEA1E2D93F6F75ED9u64, old_asset, new_asset);
    } // 0xEA1E2D93F6F75ED9 0xC92719A7 b323
    pub unsafe fn reset_particle_fx_override(name: *const i8) {
        call_native!(Void, 0x89C8553DD3274AAEu64, name);
    } // 0x89C8553DD3274AAE 0x9E8D8B72 b323
    pub unsafe fn _start_vehicle_particle_fx_looped(
        vehicle: Vehicle,
        effect_name: *const i8,
        front_back: bool,
        left_right: bool,
        local_only: bool,
    ) -> i32 {
        call_native!(
            i32,
            0xDF269BE2909E181Au64,
            vehicle,
            effect_name,
            front_back,
            left_right,
            local_only
        )
    } // 0xDF269BE2909E181A  b3095
    pub unsafe fn set_weather_ptfx_use_override_settings(p_0: bool) {
        call_native!(Void, 0xA46B73FAA3460AE1u64, p_0);
    } // 0xA46B73FAA3460AE1  b323
    pub unsafe fn set_weather_ptfx_override_curr_level(p_0: f32) {
        call_native!(Void, 0xF78B803082D4386Fu64, p_0);
    } // 0xF78B803082D4386F  b323
    pub unsafe fn wash_decals_in_range(x: f32, y: f32, z: f32, range: f32, p_4: f32) {
        call_native!(Void, 0x9C30613D50A6ADEFu64, x, y, z, range, p_4);
    } // 0x9C30613D50A6ADEF 0xDEECBC57 b323
    pub unsafe fn wash_decals_from_vehicle(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0x5B712761429DBC14u64, vehicle, p_1);
    } // 0x5B712761429DBC14 0x2929F11A b323
    pub unsafe fn fade_decals_in_range(x: f32, y: f32, z: f32, p_3: f32, p_4: f32) {
        call_native!(Void, 0xD77EDADB0420E6E0u64, x, y, z, p_3, p_4);
    } // 0xD77EDADB0420E6E0 0xF81E884A b323
    pub unsafe fn remove_decals_in_range(x: f32, y: f32, z: f32, range: f32) {
        call_native!(Void, 0x5D6B2D4830A67C62u64, x, y, z, range);
    } // 0x5D6B2D4830A67C62 0x06A619A0 b323
    pub unsafe fn remove_decals_from_object(obj: Object) {
        call_native!(Void, 0xCCF71CBDDF5B6CB9u64, obj);
    } // 0xCCF71CBDDF5B6CB9 0x8B67DCA7 b323
    pub unsafe fn remove_decals_from_object_facing(obj: Object, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xA6F6F70FDC6D144Cu64, obj, x, y, z);
    } // 0xA6F6F70FDC6D144C 0xF4999A55 b323
    pub unsafe fn remove_decals_from_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0xE91F1B65F2B48D57u64, vehicle);
    } // 0xE91F1B65F2B48D57 0x831D06CA b323
    pub unsafe fn add_decal(
        decal_type: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        width: f32,
        height: f32,
        r_coef: f32,
        g_coef: f32,
        b_coef: f32,
        opacity: f32,
        timeout: f32,
        p_1_7: bool,
        p_1_8: bool,
        p_1_9: bool,
    ) -> i32 {
        call_native!(
            i32,
            0xB302244A1839BDADu64,
            decal_type,
            pos_x,
            pos_y,
            pos_z,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            width,
            height,
            r_coef,
            g_coef,
            b_coef,
            opacity,
            timeout,
            p_1_7,
            p_1_8,
            p_1_9
        )
    } // 0xB302244A1839BDAD 0xEAD0C412 b323
    pub unsafe fn add_petrol_decal(
        x: f32,
        y: f32,
        z: f32,
        ground_lvl: f32,
        width: f32,
        transparency: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x4F5212C7AD880DF8u64,
            x,
            y,
            z,
            ground_lvl,
            width,
            transparency
        )
    } // 0x4F5212C7AD880DF8 0x1259DF42 b323
    pub unsafe fn add_oil_decal(
        x: f32,
        y: f32,
        z: f32,
        ground_lvl: f32,
        width: f32,
        transparency: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x126D7F89FE859A5Eu64,
            x,
            y,
            z,
            ground_lvl,
            width,
            transparency
        )
    } // 0x126D7F89FE859A5E  b2699
    pub unsafe fn start_petrol_trail_decals(p_0: f32) {
        call_native!(Void, 0x99AC7F0D8B9C893Du64, p_0);
    } // 0x99AC7F0D8B9C893D 0xE3938B0B b323
    pub unsafe fn add_petrol_trail_decal_info(x: f32, y: f32, z: f32, p_3: f32) {
        call_native!(Void, 0x967278682CB6967Au64, x, y, z, p_3);
    } // 0x967278682CB6967A 0xBAEC6ADD b323
    pub unsafe fn end_petrol_trail_decals() {
        call_native!(Void, 0x0A123435A26C36CDu64);
    } // 0x0A123435A26C36CD 0xCCCA6855 b323
    pub unsafe fn remove_decal(decal: i32) {
        call_native!(Void, 0xED3F346429CCD659u64, decal);
    } // 0xED3F346429CCD659 0xA4363188 b323
    pub unsafe fn is_decal_alive(decal: i32) -> bool {
        call_native!(bool, 0xC694D74949CAFD0Cu64, decal)
    } // 0xC694D74949CAFD0C 0xCDD4A61A b323
    pub unsafe fn get_decal_wash_level(decal: i32) -> f32 {
        call_native!(f32, 0x323F647679A09103u64, decal)
    } // 0x323F647679A09103 0x054448EF b323
    pub unsafe fn set_disable_petrol_decals_igniting_this_frame() {
        call_native!(Void, 0xD9454B5752C857DCu64);
    } // 0xD9454B5752C857DC 0xEAB6417C b323
    pub unsafe fn set_disable_petrol_decals_recycling_this_frame() {
        call_native!(Void, 0x27CFB1B1E078CB2Du64);
    } // 0x27CFB1B1E078CB2D 0xC2703B88 b323
    pub unsafe fn set_disable_decal_rendering_this_frame() {
        call_native!(Void, 0x4B5CFC83122DF602u64);
    } // 0x4B5CFC83122DF602 0xA706E84D b323
    pub unsafe fn get_is_petrol_decal_in_range(
        x_coord: f32,
        y_coord: f32,
        z_coord: f32,
        radius: f32,
    ) -> bool {
        call_native!(
            bool,
            0x2F09F7976C512404u64,
            x_coord,
            y_coord,
            z_coord,
            radius
        )
    } // 0x2F09F7976C512404 0x242C6A04 b323
    pub unsafe fn patch_decal_diffuse_map(
        decal_type: i32,
        texture_dict: *const i8,
        texture_name: *const i8,
    ) {
        call_native!(
            Void,
            0x8A35C742130C6080u64,
            decal_type,
            texture_dict,
            texture_name
        );
    } // 0x8A35C742130C6080 0x335695CF b323
    pub unsafe fn unpatch_decal_diffuse_map(decal_type: i32) {
        call_native!(Void, 0xB7ED70C49521A61Du64, decal_type);
    } // 0xB7ED70C49521A61D 0x7B786555 b323
    pub unsafe fn move_vehicle_decals(p_0: Any, p_1: Any) {
        call_native!(Void, 0x84C8D7C2D30D3280u64, p_0, p_1);
    } // 0x84C8D7C2D30D3280 0xCE9E6CF2 b323
    pub unsafe fn add_vehicle_crew_emblem(
        vehicle: Vehicle,
        ped: Ped,
        bone_index: i32,
        x_1: f32,
        x_2: f32,
        x_3: f32,
        y_1: f32,
        y_2: f32,
        y_3: f32,
        z_1: f32,
        z_2: f32,
        z_3: f32,
        scale: f32,
        p_1_3: Any,
        alpha: i32,
    ) -> bool {
        call_native!(
            bool,
            0x428BDCB9DA58DA53u64,
            vehicle,
            ped,
            bone_index,
            x_1,
            x_2,
            x_3,
            y_1,
            y_2,
            y_3,
            z_1,
            z_2,
            z_3,
            scale,
            p_1_3,
            alpha
        )
    } // 0x428BDCB9DA58DA53 0x12077738 b323
    pub unsafe fn abort_vehicle_crew_emblem_request(p_0: *mut i32) -> bool {
        call_native!(bool, 0x82ACC484FFA3B05Fu64, p_0)
    } // 0x82ACC484FFA3B05F  b372
    pub unsafe fn remove_vehicle_crew_emblem(vehicle: Vehicle, p_1: i32) {
        call_native!(Void, 0xD2300034310557E4u64, vehicle, p_1);
    } // 0xD2300034310557E4 0x667046A8 b323
    pub unsafe fn get_vehicle_crew_emblem_request_state(vehicle: Vehicle, p_1: i32) -> i32 {
        call_native!(i32, 0xFE26117A5841B2FFu64, vehicle, p_1)
    } // 0xFE26117A5841B2FF 0x4F4D76E8 b323
    pub unsafe fn does_vehicle_have_crew_emblem(vehicle: Vehicle, p_1: i32) -> bool {
        call_native!(bool, 0x060D935D3981A275u64, vehicle, p_1)
    } // 0x060D935D3981A275 0x6D58F73B b323
    pub unsafe fn disable_composite_shotgun_decals(toggle: bool) {
        call_native!(Void, 0x0E4299C549F0D1F1u64, toggle);
    } // 0x0E4299C549F0D1F1 0x9BABCBA4 b323
    pub unsafe fn disable_scuff_decals(toggle: bool) {
        call_native!(Void, 0x02369D5C8A51FDCFu64, toggle);
    } // 0x02369D5C8A51FDCF 0xFDF6D8DA b323
    pub unsafe fn set_decal_bullet_impact_range_scale(p_0: f32) {
        call_native!(Void, 0x46D1A61A21F566FCu64, p_0);
    } // 0x46D1A61A21F566FC 0x2056A015 b323
    pub unsafe fn override_interior_smoke_name(name: *const i8) {
        call_native!(Void, 0x2A2A52824DB96700u64, name);
    } // 0x2A2A52824DB96700 0x0F486429 b323
    pub unsafe fn override_interior_smoke_level(level: f32) {
        call_native!(Void, 0x1600FD8CF72EBC12u64, level);
    } // 0x1600FD8CF72EBC12 0xD87CC710 b323
    pub unsafe fn override_interior_smoke_end() {
        call_native!(Void, 0xEFB55E7C25D3B3BEu64);
    } // 0xEFB55E7C25D3B3BE 0xE29EE145 b323
    pub unsafe fn register_noir_lens_effect() {
        call_native!(Void, 0xA44FF770DFBC5DAEu64);
    } // 0xA44FF770DFBC5DAE  b323
    pub unsafe fn disable_vehicle_distantlights(toggle: bool) {
        call_native!(Void, 0xC9F98AC1884E73A2u64, toggle);
    } // 0xC9F98AC1884E73A2 0x7CFAE36F b323
    pub unsafe fn render_shadowed_lights_with_no_shadows(p_0: bool) {
        call_native!(Void, 0x03300B57FCAC6DDBu64, p_0);
    } // 0x03300B57FCAC6DDB 0x60F72371 b323
    pub unsafe fn request_early_light_check() {
        call_native!(Void, 0x98EDF76A7271E4F2u64);
    } // 0x98EDF76A7271E4F2  b323
    pub unsafe fn use_snow_foot_vfx_when_unsheltered(toggle: bool) {
        call_native!(Void, 0xAEEDAD1420C65CC0u64, toggle);
    } // 0xAEEDAD1420C65CC0 0xC53576CA b323
    pub unsafe fn _force_allow_snow_foot_vfx_on_ice(toggle: bool) {
        call_native!(Void, 0xA342A3763B3AFB6Cu64, toggle);
    } // 0xA342A3763B3AFB6C  b3095
    pub unsafe fn use_snow_wheel_vfx_when_unsheltered(toggle: bool) {
        call_native!(Void, 0x4CC7F0FEA5283FE0u64, toggle);
    } // 0x4CC7F0FEA5283FE0 0x7158B1EA b323
    pub unsafe fn disable_region_vfx(p_0: Any) {
        call_native!(Void, 0xEFD97FF47B745B8Du64, p_0);
    } // 0xEFD97FF47B745B8D  b791
    pub unsafe fn _force_ground_snow_pass(toggle: bool) {
        call_native!(Void, 0x6E9EF3A33C8899F8u64, toggle);
    } // 0x6E9EF3A33C8899F8  b3095
    pub unsafe fn preset_interior_ambient_cache(timecycle_modifier_name: *const i8) {
        call_native!(Void, 0xD7021272EB0A451Eu64, timecycle_modifier_name);
    } // 0xD7021272EB0A451E 0x137E3E24 b323
    pub unsafe fn set_timecycle_modifier(modifier_name: *const i8) {
        call_native!(Void, 0x2C933ABF17A1DF41u64, modifier_name);
    } // 0x2C933ABF17A1DF41 0xA81F3638 b323
    pub unsafe fn set_timecycle_modifier_strength(strength: f32) {
        call_native!(Void, 0x82E7FFCD5B2326B3u64, strength);
    } // 0x82E7FFCD5B2326B3 0x458F4F45 b323
    pub unsafe fn set_transition_timecycle_modifier(modifier_name: *const i8, transition: f32) {
        call_native!(Void, 0x3BCF567485E1971Cu64, modifier_name, transition);
    } // 0x3BCF567485E1971C 0xBB2BA72A b323
    pub unsafe fn set_transition_out_of_timecycle_modifier(strength: f32) {
        call_native!(Void, 0x1CBA05AE7BD7EE05u64, strength);
    } // 0x1CBA05AE7BD7EE05 0x56345F6B b323
    pub unsafe fn clear_timecycle_modifier() {
        call_native!(Void, 0x0F07E7745A236711u64);
    } // 0x0F07E7745A236711 0x8D8DF8EE b323
    pub unsafe fn get_timecycle_modifier_index() -> i32 {
        call_native!(i32, 0xFDF3D97C674AFB66u64)
    } // 0xFDF3D97C674AFB66 0x594FEEC4 b323
    pub unsafe fn get_timecycle_transition_modifier_index() -> i32 {
        call_native!(i32, 0x459FD2C8D0AB78BCu64)
    } // 0x459FD2C8D0AB78BC 0x03C44E4B b323
    pub unsafe fn get_is_timecycle_transitioning_out() -> bool {
        call_native!(bool, 0x98D18905BF723B99u64)
    } // 0x98D18905BF723B99  b1493
    pub unsafe fn push_timecycle_modifier() {
        call_native!(Void, 0x58F735290861E6B4u64);
    } // 0x58F735290861E6B4 0x7E082045 b323
    pub unsafe fn pop_timecycle_modifier() {
        call_native!(Void, 0x3C8938D7D872211Eu64);
    } // 0x3C8938D7D872211E 0x79D7D235 b323
    pub unsafe fn set_current_player_tcmodifier(modifier_name: *const i8) {
        call_native!(Void, 0xBBF327DED94E4DEBu64, modifier_name);
    } // 0xBBF327DED94E4DEB 0x85BA15A4 b323
    pub unsafe fn set_player_tcmodifier_transition(value: f32) {
        call_native!(Void, 0xBDEB86F4D5809204u64, value);
    } // 0xBDEB86F4D5809204 0x9559BB38 b323
    pub unsafe fn set_next_player_tcmodifier(modifier_name: *const i8) {
        call_native!(Void, 0xBF59707B3E5ED531u64, modifier_name);
    } // 0xBF59707B3E5ED531 0x554BA16E b323
    pub unsafe fn add_tcmodifier_override(modifier_name_1: *const i8, modifier_name_2: *const i8) {
        call_native!(
            Void,
            0x1A8E2C8B9CF4549Cu64,
            modifier_name_1,
            modifier_name_2
        );
    } // 0x1A8E2C8B9CF4549C 0xE8F538B5 b323
    pub unsafe fn clear_all_tcmodifier_overrides(p_0: *const i8) {
        call_native!(Void, 0x15E33297C3E8DC60u64, p_0);
    } // 0x15E33297C3E8DC60  b323
    pub unsafe fn set_extra_tcmodifier(modifier_name: *const i8) {
        call_native!(Void, 0x5096FD9CCB49056Du64, modifier_name);
    } // 0x5096FD9CCB49056D  b323
    pub unsafe fn clear_extra_tcmodifier() {
        call_native!(Void, 0x92CCC17A7A2285DAu64);
    } // 0x92CCC17A7A2285DA  b323
    pub unsafe fn get_extra_tcmodifier() -> i32 {
        call_native!(i32, 0xBB0527EC6341496Du64)
    } // 0xBB0527EC6341496D  b323
    pub unsafe fn enable_moon_cycle_override(strength: f32) {
        call_native!(Void, 0x2C328AF17210F009u64, strength);
    } // 0x2C328AF17210F009  b323
    pub unsafe fn disable_moon_cycle_override() {
        call_native!(Void, 0x2BF72AD5B41AA739u64);
    } // 0x2BF72AD5B41AA739  b323
    pub unsafe fn request_scaleform_movie(scaleform_name: *const i8) -> i32 {
        call_native!(i32, 0x11FE353CF9733E6Fu64, scaleform_name)
    } // 0x11FE353CF9733E6F 0xC67E3DCB b323
    pub unsafe fn request_scaleform_movie_with_ignore_super_widescreen(
        scaleform_name: *const i8,
    ) -> i32 {
        call_native!(i32, 0x65E7E78842E74CDBu64, scaleform_name)
    } // 0x65E7E78842E74CDB  b372
    pub unsafe fn request_scaleform_movie_instance(scaleform_name: *const i8) -> i32 {
        call_native!(i32, 0xC514489CFB8AF806u64, scaleform_name)
    } // 0xC514489CFB8AF806 0x7CC8057D b323
    pub unsafe fn request_scaleform_movie_skip_render_while_paused(
        scaleform_name: *const i8,
    ) -> i32 {
        call_native!(i32, 0xBD06C611BB9048C2u64, scaleform_name)
    } // 0xBD06C611BB9048C2  b323
    pub unsafe fn has_scaleform_movie_loaded(scaleform_handle: i32) -> bool {
        call_native!(bool, 0x85F01B8D5B90570Eu64, scaleform_handle)
    } // 0x85F01B8D5B90570E 0xDDFB6448 b323
    pub unsafe fn is_active_scaleform_movie_deleting(val: i32) -> bool {
        call_native!(bool, 0x2FCB133CA50A49EBu64, val)
    } // 0x2FCB133CA50A49EB  b1290
    pub unsafe fn is_scaleform_movie_deleting(val: i32) -> bool {
        call_native!(bool, 0x86255B1FC929E33Eu64, val)
    } // 0x86255B1FC929E33E  b1290
    pub unsafe fn has_scaleform_movie_filename_loaded(scaleform_name: *const i8) -> bool {
        call_native!(bool, 0x0C1C5D756FB5F337u64, scaleform_name)
    } // 0x0C1C5D756FB5F337 0x494A9E50 b323
    pub unsafe fn has_scaleform_container_movie_loaded_into_parent(scaleform_handle: i32) -> bool {
        call_native!(bool, 0x8217150E1217EBFDu64, scaleform_handle)
    } // 0x8217150E1217EBFD 0x1DFE8D8A b323
    pub unsafe fn set_scaleform_movie_as_no_longer_needed(scaleform_handle: *mut i32) {
        call_native!(Void, 0x1D132D614DD86811u64, scaleform_handle);
    } // 0x1D132D614DD86811 0x5FED3BA1 b323
    pub unsafe fn set_scaleform_movie_to_use_system_time(scaleform: i32, toggle: bool) {
        call_native!(Void, 0x6D8EB211944DCE08u64, scaleform, toggle);
    } // 0x6D8EB211944DCE08 0x18C9DE8D b323
    pub unsafe fn set_scaleform_movie_to_use_large_rt(scaleform_handle: i32, toggle: bool) {
        call_native!(Void, 0x32F34FF7F617643Bu64, scaleform_handle, toggle);
    } // 0x32F34FF7F617643B  b573
    pub unsafe fn set_scaleform_movie_to_use_super_large_rt(scaleform_handle: i32, toggle: bool) {
        call_native!(Void, 0xE6A9F00D4240B519u64, scaleform_handle, toggle);
    } // 0xE6A9F00D4240B519  b877
    pub unsafe fn draw_scaleform_movie(
        scaleform_handle: i32,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_9: i32,
    ) {
        call_native!(
            Void,
            0x54972ADAF0294A93u64,
            scaleform_handle,
            x,
            y,
            width,
            height,
            red,
            green,
            blue,
            alpha,
            p_9
        );
    } // 0x54972ADAF0294A93 0x48DA6A58 b323
    pub unsafe fn draw_scaleform_movie_fullscreen(
        scaleform: i32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
        p_5: i32,
    ) {
        call_native!(
            Void,
            0x0DF606929C105BE1u64,
            scaleform,
            red,
            green,
            blue,
            alpha,
            p_5
        );
    } // 0x0DF606929C105BE1 0x7B48E696 b323
    pub unsafe fn draw_scaleform_movie_fullscreen_masked(
        scaleform_1: i32,
        scaleform_2: i32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xCF537FDE4FBD4CE5u64,
            scaleform_1,
            scaleform_2,
            red,
            green,
            blue,
            alpha
        );
    } // 0xCF537FDE4FBD4CE5 0x9C59FC06 b323
    pub unsafe fn draw_scaleform_movie_3d(
        scaleform: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        scale_x: f32,
        scale_y: f32,
        scale_z: f32,
        rotation_order: i32,
    ) {
        call_native!(
            Void,
            0x87D51D72255D4E78u64,
            scaleform,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            p_7,
            p_8,
            p_9,
            scale_x,
            scale_y,
            scale_z,
            rotation_order
        );
    } // 0x87D51D72255D4E78 0xC4F63A89 b323
    pub unsafe fn draw_scaleform_movie_3d_solid(
        scaleform: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        scale_x: f32,
        scale_y: f32,
        scale_z: f32,
        rotation_order: i32,
    ) {
        call_native!(
            Void,
            0x1CE592FDC749D6F5u64,
            scaleform,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            p_7,
            p_8,
            p_9,
            scale_x,
            scale_y,
            scale_z,
            rotation_order
        );
    } // 0x1CE592FDC749D6F5 0x899933C8 b323
    pub unsafe fn call_scaleform_movie_method(scaleform: i32, method: *const i8) {
        call_native!(Void, 0xFBD96D87AC96D533u64, scaleform, method);
    } // 0xFBD96D87AC96D533 0x7AB77B57 b323
    pub unsafe fn call_scaleform_movie_method_with_number(
        scaleform: i32,
        method_name: *const i8,
        param_1: f32,
        param_2: f32,
        param_3: f32,
        param_4: f32,
        param_5: f32,
    ) {
        call_native!(
            Void,
            0xD0837058AE2E4BEEu64,
            scaleform,
            method_name,
            param_1,
            param_2,
            param_3,
            param_4,
            param_5
        );
    } // 0xD0837058AE2E4BEE 0x557EDA1D b323
    pub unsafe fn call_scaleform_movie_method_with_string(
        scaleform: i32,
        method_name: *const i8,
        param_1: *const i8,
        param_2: *const i8,
        param_3: *const i8,
        param_4: *const i8,
        param_5: *const i8,
    ) {
        call_native!(
            Void,
            0x51BC1ED3CC44E8F7u64,
            scaleform,
            method_name,
            param_1,
            param_2,
            param_3,
            param_4,
            param_5
        );
    } // 0x51BC1ED3CC44E8F7 0x91A7FCEB b323
    pub unsafe fn call_scaleform_movie_method_with_number_and_string(
        scaleform: i32,
        method_name: *const i8,
        float_param_1: f32,
        float_param_2: f32,
        float_param_3: f32,
        float_param_4: f32,
        float_param_5: f32,
        string_param_1: *const i8,
        string_param_2: *const i8,
        string_param_3: *const i8,
        string_param_4: *const i8,
        string_param_5: *const i8,
    ) {
        call_native!(
            Void,
            0xEF662D8D57E290B1u64,
            scaleform,
            method_name,
            float_param_1,
            float_param_2,
            float_param_3,
            float_param_4,
            float_param_5,
            string_param_1,
            string_param_2,
            string_param_3,
            string_param_4,
            string_param_5
        );
    } // 0xEF662D8D57E290B1 0x6EAF56DE b323
    pub unsafe fn begin_scaleform_script_hud_movie_method(
        hud_component: i32,
        method_name: *const i8,
    ) -> bool {
        call_native!(bool, 0x98C494FD5BDFBFD5u64, hud_component, method_name)
    } // 0x98C494FD5BDFBFD5 0x5D66CE1E b323
    pub unsafe fn begin_scaleform_movie_method(scaleform: i32, method_name: *const i8) -> bool {
        call_native!(bool, 0xF6E48914C7A8694Eu64, scaleform, method_name)
    } // 0xF6E48914C7A8694E 0x215ABBE8 b323
    pub unsafe fn begin_scaleform_movie_method_on_frontend(method_name: *const i8) -> bool {
        call_native!(bool, 0xAB58C27C2E6123C6u64, method_name)
    } // 0xAB58C27C2E6123C6 0xF6015178 b323
    pub unsafe fn begin_scaleform_movie_method_on_frontend_header(method_name: *const i8) -> bool {
        call_native!(bool, 0xB9449845F73F5E9Cu64, method_name)
    } // 0xB9449845F73F5E9C 0x5E219B67 b323
    pub unsafe fn end_scaleform_movie_method() {
        call_native!(Void, 0xC6796A8FFA375E53u64);
    } // 0xC6796A8FFA375E53 0x02DBF2D7 b323
    pub unsafe fn end_scaleform_movie_method_return_value() -> i32 {
        call_native!(i32, 0xC50AA39A577AF886u64)
    } // 0xC50AA39A577AF886 0x2F38B526 b323
    pub unsafe fn is_scaleform_movie_method_return_value_ready(method_return: i32) -> bool {
        call_native!(bool, 0x768FF8961BA904D6u64, method_return)
    } // 0x768FF8961BA904D6 0x5CD7C3C0 b323
    pub unsafe fn get_scaleform_movie_method_return_value_int(method_return: i32) -> i32 {
        call_native!(i32, 0x2DE7EFA66B906036u64, method_return)
    } // 0x2DE7EFA66B906036 0x2CFB0E6D b323
    pub unsafe fn get_scaleform_movie_method_return_value_bool(method_return: i32) -> bool {
        call_native!(bool, 0xD80A80346A45D761u64, method_return)
    } // 0xD80A80346A45D761  b757
    pub unsafe fn get_scaleform_movie_method_return_value_string(method_return: i32) -> *const i8 {
        call_native!(*const i8, 0xE1E258829A885245u64, method_return)
    } // 0xE1E258829A885245 0x516862EB b323
    pub unsafe fn scaleform_movie_method_add_param_int(value: i32) {
        call_native!(Void, 0xC3D0841A0CC546A6u64, value);
    } // 0xC3D0841A0CC546A6 0x716777CB b323
    pub unsafe fn scaleform_movie_method_add_param_float(value: f32) {
        call_native!(Void, 0xD69736AAE04DB51Au64, value);
    } // 0xD69736AAE04DB51A 0x9A01FFDA b323
    pub unsafe fn scaleform_movie_method_add_param_bool(value: bool) {
        call_native!(Void, 0xC58424BA936EB458u64, value);
    } // 0xC58424BA936EB458 0x0D4AE8CB b323
    pub unsafe fn begin_text_command_scaleform_string(component_type: *const i8) {
        call_native!(Void, 0x80338406F3475E55u64, component_type);
    } // 0x80338406F3475E55 0x3AC9CB55 b323
    pub unsafe fn end_text_command_scaleform_string() {
        call_native!(Void, 0x362E2D3FE93A9959u64);
    } // 0x362E2D3FE93A9959 0x386CE0B8 b323
    pub unsafe fn end_text_command_unparsed_scaleform_string() {
        call_native!(Void, 0xAE4E8157D9ECF087u64);
    } // 0xAE4E8157D9ECF087 0x2E80DB52 b323
    pub unsafe fn scaleform_movie_method_add_param_literal_string(string: *const i8) {
        call_native!(Void, 0x77FE3402004CD1B0u64, string);
    } // 0x77FE3402004CD1B0  b573
    pub unsafe fn scaleform_movie_method_add_param_texture_name_string(string: *const i8) {
        call_native!(Void, 0xBA7148484BD90365u64, string);
    } // 0xBA7148484BD90365 0x4DAAD55B b323
    pub unsafe fn scaleform_movie_method_add_param_player_name_string(string: *const i8) {
        call_native!(Void, 0xE83A3E3557A56640u64, string);
    } // 0xE83A3E3557A56640 0xCCBF0334 b323
    pub unsafe fn does_latest_brief_string_exist(p_0: i32) -> bool {
        call_native!(bool, 0x5E657EF1099EDD65u64, p_0)
    } // 0x5E657EF1099EDD65 0x91A081A1 b323
    pub unsafe fn scaleform_movie_method_add_param_latest_brief_string(value: i32) {
        call_native!(Void, 0xEC52C631A1831C03u64, value);
    } // 0xEC52C631A1831C03 0x83A9811D b323
    pub unsafe fn request_scaleform_script_hud_movie(hud_component: i32) {
        call_native!(Void, 0x9304881D6F6537EAu64, hud_component);
    } // 0x9304881D6F6537EA 0x7AF85862 b323
    pub unsafe fn has_scaleform_script_hud_movie_loaded(hud_component: i32) -> bool {
        call_native!(bool, 0xDF6E5987D2B4D140u64, hud_component)
    } // 0xDF6E5987D2B4D140 0x79B43255 b323
    pub unsafe fn remove_scaleform_script_hud_movie(hud_component: i32) {
        call_native!(Void, 0xF44A5456AC3F4F97u64, hud_component);
    } // 0xF44A5456AC3F4F97 0x03D87600 b323
    pub unsafe fn pass_keyboard_input_to_scaleform(scaleform_handle: i32) -> bool {
        call_native!(bool, 0xD1C7CB175E012964u64, scaleform_handle)
    } // 0xD1C7CB175E012964 0xE9183D3A b323
    pub unsafe fn set_tv_channel(channel: i32) {
        call_native!(Void, 0xBAABBB23EB6E484Eu64, channel);
    } // 0xBAABBB23EB6E484E 0x41A8A627 b323
    pub unsafe fn get_tv_channel() -> i32 {
        call_native!(i32, 0xFC1E275A90D39995u64)
    } // 0xFC1E275A90D39995 0x6B96145A b323
    pub unsafe fn set_tv_volume(volume: f32) {
        call_native!(Void, 0x2982BF73F66E9DDCu64, volume);
    } // 0x2982BF73F66E9DDC 0xF3504F4D b323
    pub unsafe fn get_tv_volume() -> f32 {
        call_native!(f32, 0x2170813D3DD8661Bu64)
    } // 0x2170813D3DD8661B 0x39555CF0 b323
    pub unsafe fn draw_tv_channel(
        x_pos: f32,
        y_pos: f32,
        x_scale: f32,
        y_scale: f32,
        rotation: f32,
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(
            Void,
            0xFDDC2B4ED3C69DF0u64,
            x_pos,
            y_pos,
            x_scale,
            y_scale,
            rotation,
            red,
            green,
            blue,
            alpha
        );
    } // 0xFDDC2B4ED3C69DF0 0x8129EF89 b323
    pub unsafe fn set_tv_channel_playlist(
        tv_channel: i32,
        playlist_name: *const i8,
        restart: bool,
    ) {
        call_native!(
            Void,
            0xF7B38B8305F1FE8Bu64,
            tv_channel,
            playlist_name,
            restart
        );
    } // 0xF7B38B8305F1FE8B 0xB262DE67 b323
    pub unsafe fn set_tv_channel_playlist_at_hour(
        tv_channel: i32,
        playlist_name: *const i8,
        hour: i32,
    ) {
        call_native!(Void, 0x2201C576FACAEBE8u64, tv_channel, playlist_name, hour);
    } // 0x2201C576FACAEBE8 0x78C4DCBE b323
    pub unsafe fn _set_tv_channel_playlist_dirty(tv_channel: i32, p_1: bool) {
        call_native!(Void, 0xEE831F15A8D0D94Au64, tv_channel, p_1);
    } // 0xEE831F15A8D0D94A  b3095
    pub unsafe fn clear_tv_channel_playlist(tv_channel: i32) {
        call_native!(Void, 0xBEB3D46BB7F043C0u64, tv_channel);
    } // 0xBEB3D46BB7F043C0 0xCBE7068F b323
    pub unsafe fn is_playlist_on_channel(tv_channel: i32, p_1: Any) -> bool {
        call_native!(bool, 0x1F710BFF7DAE6261u64, tv_channel, p_1)
    } // 0x1F710BFF7DAE6261  b1604
    pub unsafe fn is_tvshow_currently_playing(video_cliphash: Hash) -> bool {
        call_native!(bool, 0x0AD973CA1E077B60u64, video_cliphash)
    } // 0x0AD973CA1E077B60 0x4D1EB0FB b323
    pub unsafe fn enable_movie_keyframe_wait(toggle: bool) {
        call_native!(Void, 0x74C180030FDE4B69u64, toggle);
    } // 0x74C180030FDE4B69 0x796DE696 b323
    pub unsafe fn set_tv_player_watching_this_frame(p_0: Any) {
        call_native!(Void, 0xD1C55B110E4DF534u64, p_0);
    } // 0xD1C55B110E4DF534 0xD99EC000 b323
    pub unsafe fn get_current_tv_clip_namehash() -> Hash {
        call_native!(Hash, 0x30432A0118736E00u64)
    } // 0x30432A0118736E00  b1493
    pub unsafe fn enable_movie_subtitles(toggle: bool) {
        call_native!(Void, 0x873FA65C778AD970u64, toggle);
    } // 0x873FA65C778AD970 0xC2DEBA3D b323
    pub unsafe fn ui3dscene_is_available() -> bool {
        call_native!(bool, 0xD3A10FC7FD8D98CDu64)
    } // 0xD3A10FC7FD8D98CD 0xE40A0F1A b323
    pub unsafe fn ui3dscene_push_preset(preset_name: *const i8) -> bool {
        call_native!(bool, 0xF1CEA8A4198D8E9Au64, preset_name)
    } // 0xF1CEA8A4198D8E9A 0x2E7D9B98 b323
    pub unsafe fn ui3dscene_assign_ped_to_slot(
        preset_name: *const i8,
        ped: Ped,
        slot: i32,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
    ) -> bool {
        call_native!(
            bool,
            0x98C4FE6EC34154CAu64,
            preset_name,
            ped,
            slot,
            pos_x,
            pos_y,
            pos_z
        )
    } // 0x98C4FE6EC34154CA 0x9A0E3BFE b323
    pub unsafe fn ui3dscene_clear_patched_data() {
        call_native!(Void, 0x7A42B2E236E71415u64);
    } // 0x7A42B2E236E71415 0x431AA036 b323
    pub unsafe fn ui3dscene_make_pushed_preset_persistent(toggle: bool) {
        call_native!(Void, 0x108BE26959A9D9BBu64, toggle);
    } // 0x108BE26959A9D9BB 0x24A7A7F6 b323
    pub unsafe fn terraingrid_activate(toggle: bool) {
        call_native!(Void, 0xA356990E161C9E65u64, toggle);
    } // 0xA356990E161C9E65 0xA1CB6C94 b323
    pub unsafe fn terraingrid_set_params(
        x: f32,
        y: f32,
        z: f32,
        forward_x: f32,
        forward_y: f32,
        forward_z: f32,
        size_x: f32,
        size_y: f32,
        size_z: f32,
        grid_scale: f32,
        glow_intensity: f32,
        normal_height: f32,
        height_diff: f32,
    ) {
        call_native!(
            Void,
            0x1C4FC5752BCD8E48u64,
            x,
            y,
            z,
            forward_x,
            forward_y,
            forward_z,
            size_x,
            size_y,
            size_z,
            grid_scale,
            glow_intensity,
            normal_height,
            height_diff
        );
    } // 0x1C4FC5752BCD8E48 0x3B637AA7 b323
    pub unsafe fn terraingrid_set_colours(
        low_r: i32,
        low_g: i32,
        low_b: i32,
        low_alpha: i32,
        r: i32,
        g: i32,
        b: i32,
        alpha: i32,
        high_r: i32,
        high_g: i32,
        high_b: i32,
        high_alpha: i32,
    ) {
        call_native!(
            Void,
            0x5CE62918F8D703C7u64,
            low_r,
            low_g,
            low_b,
            low_alpha,
            r,
            g,
            b,
            alpha,
            high_r,
            high_g,
            high_b,
            high_alpha
        );
    } // 0x5CE62918F8D703C7 0xDF552973 b323
    pub unsafe fn animpostfx_play(effect_name: *const i8, duration: i32, looped: bool) {
        call_native!(Void, 0x2206BF9A37B7F724u64, effect_name, duration, looped);
    } // 0x2206BF9A37B7F724 0x1D980479 b323
    pub unsafe fn animpostfx_stop(effect_name: *const i8) {
        call_native!(Void, 0x068E835A1D0DC0E3u64, effect_name);
    } // 0x068E835A1D0DC0E3 0x06BB5CDA b323
    pub unsafe fn animpostfx_get_current_time(effect_name: *const i8) -> f32 {
        call_native!(f32, 0xE35B38A27E8E7179u64, effect_name)
    } // 0xE35B38A27E8E7179  b877
    pub unsafe fn animpostfx_is_running(effect_name: *const i8) -> bool {
        call_native!(bool, 0x36AD3E690DA5ACEBu64, effect_name)
    } // 0x36AD3E690DA5ACEB 0x089D5921 b323
    pub unsafe fn animpostfx_stop_all() {
        call_native!(Void, 0xB4EDDC19532BFB85u64);
    } // 0xB4EDDC19532BFB85 0x4E6D875B b323
    pub unsafe fn animpostfx_stop_and_flush_requests(effect_name: *const i8) {
        call_native!(Void, 0xD2209BE128B5418Cu64, effect_name);
    } // 0xD2209BE128B5418C  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod hud {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn begin_text_command_busyspinner_on(string: *const i8) {
        call_native!(Void, 0xABA17D7CE615ADBFu64, string);
    } // 0xABA17D7CE615ADBF 0xCB7C8994 b323
    pub unsafe fn end_text_command_busyspinner_on(busy_spinner_type: i32) {
        call_native!(Void, 0xBD12F8228410D9B4u64, busy_spinner_type);
    } // 0xBD12F8228410D9B4 0x903F5EE4 b323
    pub unsafe fn busyspinner_off() {
        call_native!(Void, 0x10D373323E5B9C0Du64);
    } // 0x10D373323E5B9C0D 0x94119534 b323
    pub unsafe fn preload_busyspinner() {
        call_native!(Void, 0xC65AB383CD91DF98u64);
    } // 0xC65AB383CD91DF98 0x71077FBD b323
    pub unsafe fn busyspinner_is_on() -> bool {
        call_native!(bool, 0xD422FCC5F239A915u64)
    } // 0xD422FCC5F239A915 0xB8B3A5D0 b323
    pub unsafe fn busyspinner_is_displaying() -> bool {
        call_native!(bool, 0xB2A592B04648A9CBu64)
    } // 0xB2A592B04648A9CB 0x3AF34DEF b323
    pub unsafe fn disable_pausemenu_spinner(p_0: bool) {
        call_native!(Void, 0x9245E81072704B8Au64, p_0);
    } // 0x9245E81072704B8A  b323
    pub unsafe fn set_mouse_cursor_this_frame() {
        call_native!(Void, 0xAAE7CE1D63167423u64);
    } // 0xAAE7CE1D63167423  b323
    pub unsafe fn set_mouse_cursor_style(sprite_id: i32) {
        call_native!(Void, 0x8DB8CFFD58B62552u64, sprite_id);
    } // 0x8DB8CFFD58B62552  b323
    pub unsafe fn set_mouse_cursor_visible(toggle: bool) {
        call_native!(Void, 0x98215325A695E78Au64, toggle);
    } // 0x98215325A695E78A  b323
    pub unsafe fn is_mouse_rolled_over_instructional_buttons() -> bool {
        call_native!(bool, 0x3D9ACB1EB139E702u64)
    } // 0x3D9ACB1EB139E702  b323
    pub unsafe fn get_mouse_event(
        scaleform_handle: i32,
        p_1: *mut Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0x632B2940C67F4EA9u64, scaleform_handle, p_1, p_2, p_3)
    } // 0x632B2940C67F4EA9  b323
    pub unsafe fn thefeed_only_show_tooltips(toggle: bool) {
        call_native!(Void, 0x6F1554B0CC2089FAu64, toggle);
    } // 0x6F1554B0CC2089FA 0xA7C8594B b323
    pub unsafe fn thefeed_set_scripted_menu_height(pos: f32) {
        call_native!(Void, 0x55598D21339CB998u64, pos);
    } // 0x55598D21339CB998 0x1DA7E41A b323
    pub unsafe fn thefeed_hide() {
        call_native!(Void, 0x32888337579A5970u64);
    } // 0x32888337579A5970  b463
    pub unsafe fn thefeed_hide_this_frame() {
        call_native!(Void, 0x25F87B30C382FCA7u64);
    } // 0x25F87B30C382FCA7 0x1E63088A b323
    pub unsafe fn thefeed_show() {
        call_native!(Void, 0x15CFA549788D35EFu64);
    } // 0x15CFA549788D35EF  b463
    pub unsafe fn thefeed_flush_queue() {
        call_native!(Void, 0xA8FDB297A8D25FBAu64);
    } // 0xA8FDB297A8D25FBA 0x5205C6F5 b323
    pub unsafe fn thefeed_remove_item(notification_id: i32) {
        call_native!(Void, 0xBE4390CB40B3E627u64, notification_id);
    } // 0xBE4390CB40B3E627 0xECA8ACB9 b323
    pub unsafe fn thefeed_force_render_on() {
        call_native!(Void, 0xA13C11E1B5C06BFCu64);
    } // 0xA13C11E1B5C06BFC 0x520FCB6D b323
    pub unsafe fn thefeed_force_render_off() {
        call_native!(Void, 0x583049884A2EEE3Cu64);
    } // 0x583049884A2EEE3C 0xC8BAB2F2 b323
    pub unsafe fn thefeed_pause() {
        call_native!(Void, 0xFDB423997FA30340u64);
    } // 0xFDB423997FA30340 0x4D0449C6 b323
    pub unsafe fn thefeed_resume() {
        call_native!(Void, 0xE1CD1E48E025E661u64);
    } // 0xE1CD1E48E025E661 0xD3F40140 b323
    pub unsafe fn thefeed_is_paused() -> bool {
        call_native!(bool, 0xA9CBFD40B3FA3010u64)
    } // 0xA9CBFD40B3FA3010 0xC5223796 b323
    pub unsafe fn thefeed_report_logo_on() {
        call_native!(Void, 0xD4438C0564490E63u64);
    } // 0xD4438C0564490E63 0x709B4BCB b323
    pub unsafe fn thefeed_report_logo_off() {
        call_native!(Void, 0xB695E2CD0A2DA9EEu64);
    } // 0xB695E2CD0A2DA9EE 0x4A4A40A4 b323
    pub unsafe fn thefeed_get_last_shown_phone_activatable_feed_id() -> i32 {
        call_native!(i32, 0x82352748437638CAu64)
    } // 0x82352748437638CA 0x294405D4 b323
    pub unsafe fn thefeed_auto_post_gametips_on() {
        call_native!(Void, 0x56C8B608CFD49854u64);
    } // 0x56C8B608CFD49854 0xF881AB87 b323
    pub unsafe fn thefeed_auto_post_gametips_off() {
        call_native!(Void, 0xADED7F5748ACAFE6u64);
    } // 0xADED7F5748ACAFE6 0x1D6859CA b323
    pub unsafe fn thefeed_set_background_color_for_next_post(hud_color_index: i32) {
        call_native!(Void, 0x92F0DA1E27DB96DCu64, hud_color_index);
    } // 0x92F0DA1E27DB96DC 0x07CE2EA4 b323
    pub unsafe fn thefeed_set_rgba_parameter_for_next_message(
        red: i32,
        green: i32,
        blue: i32,
        alpha: i32,
    ) {
        call_native!(Void, 0x17430B918701C342u64, red, green, blue, alpha);
    } // 0x17430B918701C342 0xCF14D7F2 b323
    pub unsafe fn thefeed_set_flash_duration_parameter_for_next_message(count: i32) {
        call_native!(Void, 0x17AD8C9706BDD88Au64, count);
    } // 0x17AD8C9706BDD88A 0x24A97AF8 b323
    pub unsafe fn thefeed_set_vibrate_parameter_for_next_message(toggle: bool) {
        call_native!(Void, 0x4A0C7C9BB10ABB36u64, toggle);
    } // 0x4A0C7C9BB10ABB36 0x44018EDB b323
    pub unsafe fn thefeed_reset_all_parameters() {
        call_native!(Void, 0xFDD85225B2DEA55Eu64);
    } // 0xFDD85225B2DEA55E 0xA4524B23 b323
    pub unsafe fn thefeed_freeze_next_post() {
        call_native!(Void, 0xFDEC055AB549E328u64);
    } // 0xFDEC055AB549E328 0xAFA1148B b323
    pub unsafe fn thefeed_clear_frozen_post() {
        call_native!(Void, 0x80FE4F3AB4E1B62Au64);
    } // 0x80FE4F3AB4E1B62A 0x3CD4307C b323
    pub unsafe fn thefeed_set_snap_feed_item_positions(p_0: bool) {
        call_native!(Void, 0xBAE4F9B97CD43B30u64, p_0);
    } // 0xBAE4F9B97CD43B30  b323
    pub unsafe fn thefeed_update_item_texture(
        txd_string_1: *const i8,
        txn_string_1: *const i8,
        txd_string_2: *const i8,
        txn_string_2: *const i8,
    ) {
        call_native!(
            Void,
            0x317EBA71D7543F52u64,
            txd_string_1,
            txn_string_1,
            txd_string_2,
            txn_string_2
        );
    } // 0x317EBA71D7543F52 0x6A3F747D b323
    pub unsafe fn begin_text_command_thefeed_post(text: *const i8) {
        call_native!(Void, 0x202709F4C58A0424u64, text);
    } // 0x202709F4C58A0424 0x574EE85C b323
    pub unsafe fn end_text_command_thefeed_post_stats(
        stat_title: *const i8,
        icon_enum: i32,
        step_val: bool,
        bar_value: i32,
        is_important: bool,
        picture_texture_dict: *const i8,
        picture_texture_name: *const i8,
    ) -> i32 {
        call_native!(
            i32,
            0x2B7E9A4EAAA93C89u64,
            stat_title,
            icon_enum,
            step_val,
            bar_value,
            is_important,
            picture_texture_dict,
            picture_texture_name
        )
    } // 0x2B7E9A4EAAA93C89 0xED130FA1 b323
    pub unsafe fn end_text_command_thefeed_post_messagetext(
        txd_name: *const i8,
        texture_name: *const i8,
        flash: bool,
        icon_type: i32,
        sender: *const i8,
        subject: *const i8,
    ) -> i32 {
        call_native!(
            i32,
            0x1CCD9A37359072CFu64,
            txd_name,
            texture_name,
            flash,
            icon_type,
            sender,
            subject
        )
    } // 0x1CCD9A37359072CF 0xE7E3C98B b323
    pub unsafe fn end_text_command_thefeed_post_messagetext_subtitle_label(
        txd_name: *const i8,
        texture_name: *const i8,
        flash: bool,
        icon_type: i32,
        sender: *const i8,
        subject: *const i8,
    ) -> i32 {
        call_native!(
            i32,
            0xC6F580E4C94926ACu64,
            txd_name,
            texture_name,
            flash,
            icon_type,
            sender,
            subject
        )
    } // 0xC6F580E4C94926AC  b323
    pub unsafe fn end_text_command_thefeed_post_messagetext_tu(
        txd_name: *const i8,
        texture_name: *const i8,
        flash: bool,
        icon_type: i32,
        sender: *const i8,
        subject: *const i8,
        duration: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x1E6611149DB3DB6Bu64,
            txd_name,
            texture_name,
            flash,
            icon_type,
            sender,
            subject,
            duration
        )
    } // 0x1E6611149DB3DB6B 0x0EB382B7 b323
    pub unsafe fn end_text_command_thefeed_post_messagetext_with_crew_tag(
        txd_name: *const i8,
        texture_name: *const i8,
        flash: bool,
        icon_type: i32,
        sender: *const i8,
        subject: *const i8,
        duration: f32,
        clan_tag: *const i8,
    ) -> i32 {
        call_native!(
            i32,
            0x5CBF7BADE20DB93Eu64,
            txd_name,
            texture_name,
            flash,
            icon_type,
            sender,
            subject,
            duration,
            clan_tag
        )
    } // 0x5CBF7BADE20DB93E 0x3E807FE3 b323
    pub unsafe fn end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(
        txd_name: *const i8,
        texture_name: *const i8,
        flash: bool,
        icon_type_1: i32,
        sender: *const i8,
        subject: *const i8,
        duration: f32,
        clan_tag: *const i8,
        icon_type_2: i32,
        p_9: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x531B84E7DA981FB6u64,
            txd_name,
            texture_name,
            flash,
            icon_type_1,
            sender,
            subject,
            duration,
            clan_tag,
            icon_type_2,
            p_9
        )
    } // 0x531B84E7DA981FB6 0xDEB491C8 b323
    pub unsafe fn end_text_command_thefeed_post_ticker(blink: bool, p_1: bool) -> i32 {
        call_native!(i32, 0x2ED7843F8F801023u64, blink, p_1)
    } // 0x2ED7843F8F801023 0x08F7AF78 b323
    pub unsafe fn end_text_command_thefeed_post_ticker_forced(blink: bool, p_1: bool) -> i32 {
        call_native!(i32, 0x44FA03975424A0EEu64, blink, p_1)
    } // 0x44FA03975424A0EE 0x57B8D0D4 b323
    pub unsafe fn end_text_command_thefeed_post_ticker_with_tokens(blink: bool, p_1: bool) -> i32 {
        call_native!(i32, 0x378E809BF61EC840u64, blink, p_1)
    } // 0x378E809BF61EC840 0x02BCAF9B b323
    pub unsafe fn end_text_command_thefeed_post_award(
        texture_dict: *const i8,
        texture_name: *const i8,
        rp_bonus: i32,
        color_overlay: i32,
        title_label: *const i8,
    ) -> i32 {
        call_native!(
            i32,
            0xAA295B6F28BD587Du64,
            texture_dict,
            texture_name,
            rp_bonus,
            color_overlay,
            title_label
        )
    } // 0xAA295B6F28BD587D 0x02DED2B8 b323
    pub unsafe fn end_text_command_thefeed_post_crewtag(
        p_0: bool,
        p_1: bool,
        p_2: *mut i32,
        p_3: i32,
        is_leader: bool,
        unk_0: bool,
        clan_desc: i32,
        _r: i32,
        _g: i32,
        _b: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x97C9E4E7024A8F2Cu64,
            p_0,
            p_1,
            p_2,
            p_3,
            is_leader,
            unk_0,
            clan_desc,
            _r,
            _g,
            _b
        )
    } // 0x97C9E4E7024A8F2C 0xA9CCEF66 b323
    pub unsafe fn end_text_command_thefeed_post_crewtag_with_game_name(
        p_0: bool,
        p_1: bool,
        p_2: *mut i32,
        p_3: i32,
        is_leader: bool,
        unk_0: bool,
        clan_desc: i32,
        player_name: *const i8,
        _r: i32,
        _g: i32,
        _b: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x137BC35589E34E1Eu64,
            p_0,
            p_1,
            p_2,
            p_3,
            is_leader,
            unk_0,
            clan_desc,
            player_name,
            _r,
            _g,
            _b
        )
    } // 0x137BC35589E34E1E 0x88B9B909 b323
    pub unsafe fn end_text_command_thefeed_post_unlock(
        gxt_label_1: *const i8,
        p_1: i32,
        gxt_label_2: *const i8,
    ) -> i32 {
        call_native!(i32, 0x33EE12743CCD6343u64, gxt_label_1, p_1, gxt_label_2)
    } // 0x33EE12743CCD6343 0xE05E7052 b323
    pub unsafe fn end_text_command_thefeed_post_unlock_tu(
        gxt_label_1: *const i8,
        p_1: i32,
        gxt_label_2: *const i8,
        p_3: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xC8F3AAF93D0600BFu64,
            gxt_label_1,
            p_1,
            gxt_label_2,
            p_3
        )
    } // 0xC8F3AAF93D0600BF 0x4FA43BA4 b323
    pub unsafe fn end_text_command_thefeed_post_unlock_tu_with_color(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) -> i32 {
        call_native!(i32, 0x7AE0589093A2E088u64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x7AE0589093A2E088 0x8C90D22F b323
    pub unsafe fn end_text_command_thefeed_post_mpticker(blink: bool, p_1: bool) -> i32 {
        call_native!(i32, 0xF020C96915705B3Au64, blink, p_1)
    } // 0xF020C96915705B3A 0x8E319AB8 b323
    pub unsafe fn end_text_command_thefeed_post_crew_rankup_with_literal_flag(
        p_0: *const i8,
        p_1: *const i8,
        p_2: *const i8,
        p_3: bool,
        p_4: bool,
    ) -> i32 {
        call_native!(i32, 0x8EFCCF6EC66D85E4u64, p_0, p_1, p_2, p_3, p_4)
    } // 0x8EFCCF6EC66D85E4  b323
    pub unsafe fn end_text_command_thefeed_post_versus_tu(
        txd_name_1: *const i8,
        texture_name_1: *const i8,
        count_1: i32,
        txd_name_2: *const i8,
        texture_name_2: *const i8,
        count_2: i32,
        hud_color_1: i32,
        hud_color_2: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xB6871B0555B02996u64,
            txd_name_1,
            texture_name_1,
            count_1,
            txd_name_2,
            texture_name_2,
            count_2,
            hud_color_1,
            hud_color_2
        )
    } // 0xB6871B0555B02996 0x5E93FBFA b323
    pub unsafe fn end_text_command_thefeed_post_replay(
        _type: i32,
        image: i32,
        text: *const i8,
    ) -> i32 {
        call_native!(i32, 0xD202B92CBF1D816Fu64, _type, image, text)
    } // 0xD202B92CBF1D816F  b323
    pub unsafe fn end_text_command_thefeed_post_replay_input(
        _type: i32,
        button: *const i8,
        text: *const i8,
    ) -> i32 {
        call_native!(i32, 0xDD6CB2CCE7C2735Cu64, _type, button, text)
    } // 0xDD6CB2CCE7C2735C  b323
    pub unsafe fn begin_text_command_print(_gxt_entry: *const i8) {
        call_native!(Void, 0xB87A37EEB7FAA67Du64, _gxt_entry);
    } // 0xB87A37EEB7FAA67D 0xF42C43C7 b323
    pub unsafe fn end_text_command_print(duration: i32, draw_immediately: bool) {
        call_native!(Void, 0x9D77056A530643F6u64, duration, draw_immediately);
    } // 0x9D77056A530643F6 0x38F82261 b323
    pub unsafe fn begin_text_command_is_message_displayed(text: *const i8) {
        call_native!(Void, 0x853648FD1063A213u64, text);
    } // 0x853648FD1063A213 0xDD524A11 b323
    pub unsafe fn end_text_command_is_message_displayed() -> bool {
        call_native!(bool, 0x8A9BA1AB3E237613u64)
    } // 0x8A9BA1AB3E237613 0x672EFB45 b323
    pub unsafe fn begin_text_command_display_text(text: *const i8) {
        call_native!(Void, 0x25FBB336DF1804CBu64, text);
    } // 0x25FBB336DF1804CB 0x3E35563E b323
    pub unsafe fn end_text_command_display_text(x: f32, y: f32, p_2: i32) {
        call_native!(Void, 0xCD015E5BB0D96A57u64, x, y, p_2);
    } // 0xCD015E5BB0D96A57 0x6F8350CE b323
    pub unsafe fn begin_text_command_get_screen_width_of_display_text(text: *const i8) {
        call_native!(Void, 0x54CE8AC98E120CABu64, text);
    } // 0x54CE8AC98E120CAB 0x51E7A037 b323
    pub unsafe fn end_text_command_get_screen_width_of_display_text(p_0: bool) -> f32 {
        call_native!(f32, 0x85F061DA64ED2F67u64, p_0)
    } // 0x85F061DA64ED2F67 0xD12A643A b323
    pub unsafe fn begin_text_command_get_number_of_lines_for_string(entry: *const i8) {
        call_native!(Void, 0x521FB041D93DD0E4u64, entry);
    } // 0x521FB041D93DD0E4 0x94B82066 b323
    pub unsafe fn end_text_command_get_number_of_lines_for_string(x: f32, y: f32) -> i32 {
        call_native!(i32, 0x9040DFB09BE75706u64, x, y)
    } // 0x9040DFB09BE75706 0xAA318785 b323
    pub unsafe fn begin_text_command_display_help(input_type: *const i8) {
        call_native!(Void, 0x8509B634FBE7DA11u64, input_type);
    } // 0x8509B634FBE7DA11 0xB245FC10 b323
    pub unsafe fn end_text_command_display_help(p_0: i32, _loop: bool, beep: bool, shape: i32) {
        call_native!(Void, 0x238FFE5C7B0498A6u64, p_0, _loop, beep, shape);
    } // 0x238FFE5C7B0498A6 0xB59B530D b323
    pub unsafe fn begin_text_command_is_this_help_message_being_displayed(label_name: *const i8) {
        call_native!(Void, 0x0A24DA3A41B718F5u64, label_name);
    } // 0x0A24DA3A41B718F5 0x00E20F2D b323
    pub unsafe fn end_text_command_is_this_help_message_being_displayed(p_0: i32) -> bool {
        call_native!(bool, 0x10BDDBFC529428DDu64, p_0)
    } // 0x10BDDBFC529428DD 0xF63A13EC b323
    pub unsafe fn begin_text_command_set_blip_name(text_label: *const i8) {
        call_native!(Void, 0xF9113A30DE5C6670u64, text_label);
    } // 0xF9113A30DE5C6670 0xF4C211F6 b323
    pub unsafe fn end_text_command_set_blip_name(blip: Blip) {
        call_native!(Void, 0xBC38B49BCB83BC9Bu64, blip);
    } // 0xBC38B49BCB83BC9B 0xE8E59820 b323
    pub unsafe fn begin_text_command_add_directly_to_previous_briefs(p_0: *const i8) {
        call_native!(Void, 0x23D69E0465570028u64, p_0);
    } // 0x23D69E0465570028 0x0E103475 b323
    pub unsafe fn end_text_command_add_directly_to_previous_briefs(p_0: bool) {
        call_native!(Void, 0xCFDBDF5AE59BA0F4u64, p_0);
    } // 0xCFDBDF5AE59BA0F4 0x2944A6C5 b323
    pub unsafe fn begin_text_command_clear_print(text: *const i8) {
        call_native!(Void, 0xE124FA80A759019Cu64, text);
    } // 0xE124FA80A759019C 0x550665AE b323
    pub unsafe fn end_text_command_clear_print() {
        call_native!(Void, 0xFCC75460ABA29378u64);
    } // 0xFCC75460ABA29378 0x67785AF2 b323
    pub unsafe fn begin_text_command_override_button_text(gxt_entry: *const i8) {
        call_native!(Void, 0x8F9EE5687F8EECCDu64, gxt_entry);
    } // 0x8F9EE5687F8EECCD 0xBF855650 b323
    pub unsafe fn end_text_command_override_button_text(p_0: i32) {
        call_native!(Void, 0xA86911979638106Fu64, p_0);
    } // 0xA86911979638106F 0x6E7FDA1C b323
    pub unsafe fn add_text_component_integer(value: i32) {
        call_native!(Void, 0x03B504CF259931BCu64, value);
    } // 0x03B504CF259931BC 0xFE272A57 b323
    pub unsafe fn add_text_component_float(value: f32, decimal_places: i32) {
        call_native!(Void, 0xE7DCB5B874BCD96Eu64, value, decimal_places);
    } // 0xE7DCB5B874BCD96E 0x24D78013 b323
    pub unsafe fn add_text_component_substring_text_label(label_name: *const i8) {
        call_native!(Void, 0xC63CD5D2920ACBE7u64, label_name);
    } // 0xC63CD5D2920ACBE7 0xDCE05406 b323
    pub unsafe fn add_text_component_substring_text_label_hash_key(gxt_entry_hash: Hash) {
        call_native!(Void, 0x17299B63C7683A2Bu64, gxt_entry_hash);
    } // 0x17299B63C7683A2B 0x150E03B6 b323
    pub unsafe fn add_text_component_substring_blip_name(blip: Blip) {
        call_native!(Void, 0x80EAD8E2E1D5D52Eu64, blip);
    } // 0x80EAD8E2E1D5D52E 0x5DE98F0A b323
    pub unsafe fn add_text_component_substring_player_name(text: *const i8) {
        call_native!(Void, 0x6C188BE134E074AAu64, text);
    } // 0x6C188BE134E074AA 0x27A244D8 b323
    pub unsafe fn add_text_component_substring_time(timestamp: i32, flags: i32) {
        call_native!(Void, 0x1115F16B8AB9E8BFu64, timestamp, flags);
    } // 0x1115F16B8AB9E8BF 0x135B3CD0 b323
    pub unsafe fn add_text_component_formatted_integer(value: i32, comma_separated: bool) {
        call_native!(Void, 0x0E4C749FF9DE9CC4u64, value, comma_separated);
    } // 0x0E4C749FF9DE9CC4 0x12929BDF b323
    pub unsafe fn add_text_component_substring_phone_number(p_0: *const i8, p_1: i32) {
        call_native!(Void, 0x761B77454205A61Du64, p_0, p_1);
    } // 0x761B77454205A61D 0x65E1D404 b323
    pub unsafe fn add_text_component_substring_website(website: *const i8) {
        call_native!(Void, 0x94CF4AC034C9C986u64, website);
    } // 0x94CF4AC034C9C986 0xC736999E b323
    pub unsafe fn add_text_component_substring_keyboard_display(string: *const i8) {
        call_native!(Void, 0x5F68520888E69014u64, string);
    } // 0x5F68520888E69014 0x0829A799 b323
    pub unsafe fn set_colour_of_next_text_component(hud_color: i32) {
        call_native!(Void, 0x39BBF623FC803EACu64, hud_color);
    } // 0x39BBF623FC803EAC 0x6F1A1901 b323
    pub unsafe fn get_character_from_audio_conversation_filename(
        text: *const i8,
        position: i32,
        length: i32,
    ) -> *const i8 {
        call_native!(*const i8, 0x169BD9382084C8C0u64, text, position, length)
    } // 0x169BD9382084C8C0 0x34A396EE b323
    pub unsafe fn get_character_from_audio_conversation_filename_with_byte_limit(
        text: *const i8,
        position: i32,
        length: i32,
        max_length: i32,
    ) -> *const i8 {
        call_native!(
            *const i8,
            0xB2798643312205C5u64,
            text,
            position,
            length,
            max_length
        )
    } // 0xB2798643312205C5 0x0183A66C b323
    pub unsafe fn get_character_from_audio_conversation_filename_bytes(
        text: *const i8,
        start_position: i32,
        end_position: i32,
    ) -> *const i8 {
        call_native!(
            *const i8,
            0xCE94AEBA5D82908Au64,
            text,
            start_position,
            end_position
        )
    } // 0xCE94AEBA5D82908A 0xFA6373BB b323
    pub unsafe fn get_filename_for_audio_conversation(label_name: *const i8) -> *const i8 {
        call_native!(*const i8, 0x7B5280EBA9840C72u64, label_name)
    } // 0x7B5280EBA9840C72 0x95C4B5AD b323
    pub unsafe fn clear_prints() {
        call_native!(Void, 0xCC33FA791322B9D9u64);
    } // 0xCC33FA791322B9D9 0x216CB1C5 b323
    pub unsafe fn clear_brief() {
        call_native!(Void, 0x9D292F73ADBD9313u64);
    } // 0x9D292F73ADBD9313 0x9F75A929 b323
    pub unsafe fn clear_all_help_messages() {
        call_native!(Void, 0x6178F68A87A4D3A0u64);
    } // 0x6178F68A87A4D3A0 0x9E5D9198 b323
    pub unsafe fn clear_this_print(p_0: *const i8) {
        call_native!(Void, 0xCF708001E1E536DDu64, p_0);
    } // 0xCF708001E1E536DD 0x06878327 b323
    pub unsafe fn clear_small_prints() {
        call_native!(Void, 0x2CEA2839313C09ACu64);
    } // 0x2CEA2839313C09AC 0xA869A238 b323
    pub unsafe fn does_text_block_exist(gxt: *const i8) -> bool {
        call_native!(bool, 0x1C7302E725259789u64, gxt)
    } // 0x1C7302E725259789 0x96F74838 b323
    pub unsafe fn request_additional_text(gxt: *const i8, slot: i32) {
        call_native!(Void, 0x71A78003C8E71424u64, gxt, slot);
    } // 0x71A78003C8E71424 0x9FA9175B b323
    pub unsafe fn request_additional_text_for_dlc(gxt: *const i8, slot: i32) {
        call_native!(Void, 0x6009F9F1AE90D8A6u64, gxt, slot);
    } // 0x6009F9F1AE90D8A6 0xF4D27EBE b323
    pub unsafe fn has_additional_text_loaded(slot: i32) -> bool {
        call_native!(bool, 0x02245FE4BED318B8u64, slot)
    } // 0x02245FE4BED318B8 0xB0E56045 b323
    pub unsafe fn clear_additional_text(p_0: i32, p_1: bool) {
        call_native!(Void, 0x2A179DF17CCF04CDu64, p_0, p_1);
    } // 0x2A179DF17CCF04CD 0x518141E0 b323
    pub unsafe fn is_streaming_additional_text(p_0: i32) -> bool {
        call_native!(bool, 0x8B6817B71B85EBF0u64, p_0)
    } // 0x8B6817B71B85EBF0 0xF079E4EB b323
    pub unsafe fn has_this_additional_text_loaded(gxt: *const i8, slot: i32) -> bool {
        call_native!(bool, 0xADBF060E2B30C5BCu64, gxt, slot)
    } // 0xADBF060E2B30C5BC 0x80A52040 b323
    pub unsafe fn is_message_being_displayed() -> bool {
        call_native!(bool, 0x7984C03AA5CC2F41u64)
    } // 0x7984C03AA5CC2F41 0x6A77FE8D b323
    pub unsafe fn does_text_label_exist(gxt: *const i8) -> bool {
        call_native!(bool, 0xAC09CA973C564252u64, gxt)
    } // 0xAC09CA973C564252 0x6ECAE560 b323
    pub unsafe fn get_first_n_characters_of_literal_string(
        string: *const i8,
        length: i32,
    ) -> *const i8 {
        call_native!(*const i8, 0x98C3CF913D895111u64, string, length)
    } // 0x98C3CF913D895111  b505
    pub unsafe fn get_length_of_string_with_this_text_label(gxt: *const i8) -> i32 {
        call_native!(i32, 0x801BD273D3A23F74u64, gxt)
    } // 0x801BD273D3A23F74 0xA4CA7BE5 b323
    pub unsafe fn get_length_of_literal_string(string: *const i8) -> i32 {
        call_native!(i32, 0xF030907CCBB8A9FDu64, string)
    } // 0xF030907CCBB8A9FD 0x99379D55 b323
    pub unsafe fn get_length_of_literal_string_in_bytes(string: *const i8) -> i32 {
        call_native!(i32, 0x43E4111189E54F0Eu64, string)
    } // 0x43E4111189E54F0E 0x7DBC0764 b323
    pub unsafe fn get_street_name_from_hash_key(hash: Hash) -> *const i8 {
        call_native!(*const i8, 0xD0EF8A959B8A4CB9u64, hash)
    } // 0xD0EF8A959B8A4CB9 0x1E8E310C b323
    pub unsafe fn is_hud_preference_switched_on() -> bool {
        call_native!(bool, 0x1930DFA731813EC4u64)
    } // 0x1930DFA731813EC4 0xC3BC1B4F b323
    pub unsafe fn is_radar_preference_switched_on() -> bool {
        call_native!(bool, 0x9EB6522EA68F22FEu64)
    } // 0x9EB6522EA68F22FE 0x14AEAA28 b323
    pub unsafe fn is_subtitle_preference_switched_on() -> bool {
        call_native!(bool, 0xAD6DACA4BA53E0A4u64)
    } // 0xAD6DACA4BA53E0A4 0x63BA19F5 b323
    pub unsafe fn display_hud(toggle: bool) {
        call_native!(Void, 0xA6294919E56FF02Au64, toggle);
    } // 0xA6294919E56FF02A 0xD10E4E31 b323
    pub unsafe fn display_hud_when_not_in_state_of_play_this_frame() {
        call_native!(Void, 0x7669F9E39DC17063u64);
    } // 0x7669F9E39DC17063 0xC380AC85 b323
    pub unsafe fn display_hud_when_paused_this_frame() {
        call_native!(Void, 0x402F9ED62087E898u64);
    } // 0x402F9ED62087E898 0xC47AB1B0 b323
    pub unsafe fn display_radar(toggle: bool) {
        call_native!(Void, 0xA0EBB943C300E693u64, toggle);
    } // 0xA0EBB943C300E693 0x52816BD4 b323
    pub unsafe fn set_fake_spectator_mode(toggle: bool) {
        call_native!(Void, 0xCD74233600C4EA6Bu64, toggle);
    } // 0xCD74233600C4EA6B  b505
    pub unsafe fn get_fake_spectator_mode() -> bool {
        call_native!(bool, 0xC2D2AD9EAAE265B8u64)
    } // 0xC2D2AD9EAAE265B8  b505
    pub unsafe fn is_hud_hidden() -> bool {
        call_native!(bool, 0xA86478C6958735C5u64)
    } // 0xA86478C6958735C5 0x40BADA1D b323
    pub unsafe fn is_radar_hidden() -> bool {
        call_native!(bool, 0x157F93B036700462u64)
    } // 0x157F93B036700462 0x1AB3B954 b323
    pub unsafe fn is_minimap_rendering() -> bool {
        call_native!(bool, 0xAF754F20EB5CD51Au64)
    } // 0xAF754F20EB5CD51A 0x9CD18314 b323
    pub unsafe fn use_vehicle_targeting_reticule(p_0: Any) {
        call_native!(Void, 0x0C698D8F099174C7u64, p_0);
    } // 0x0C698D8F099174C7  b1180
    pub unsafe fn _use_vehicle_targeting_reticule_on_vehicles(enable: bool) {
        call_native!(Void, 0x1BC0EA2912708625u64, enable);
    } // 0x1BC0EA2912708625  b3095
    pub unsafe fn add_valid_vehicle_hit_hash(p_0: Any) {
        call_native!(Void, 0xE4C3B169876D33D7u64, p_0);
    } // 0xE4C3B169876D33D7  b1290
    pub unsafe fn clear_valid_vehicle_hit_hashes() {
        call_native!(Void, 0xEB81A3DADD503187u64);
    } // 0xEB81A3DADD503187  b1290
    pub unsafe fn set_blip_route(blip: Blip, enabled: bool) {
        call_native!(Void, 0x4F7D8A9BFB0B43E9u64, blip, enabled);
    } // 0x4F7D8A9BFB0B43E9 0x3E160C90 b323
    pub unsafe fn clear_all_blip_routes() {
        call_native!(Void, 0xD12882D3FF82BF11u64);
    } // 0xD12882D3FF82BF11  b877
    pub unsafe fn set_blip_route_colour(blip: Blip, colour: i32) {
        call_native!(Void, 0x837155CD2F63DA09u64, blip, colour);
    } // 0x837155CD2F63DA09 0xDDE7C65C b323
    pub unsafe fn set_force_show_gps(toggle: bool) {
        call_native!(Void, 0x2790F4B17D098E26u64, toggle);
    } // 0x2790F4B17D098E26  b573
    pub unsafe fn set_use_set_destination_in_pause_map(toggle: bool) {
        call_native!(Void, 0x6CDD58146A436083u64, toggle);
    } // 0x6CDD58146A436083  b573
    pub unsafe fn set_block_wanted_flash(disabled: bool) {
        call_native!(Void, 0xD1942374085C8469u64, disabled);
    } // 0xD1942374085C8469  b505
    pub unsafe fn add_next_message_to_previous_briefs(p_0: bool) {
        call_native!(Void, 0x60296AF4BA14ABC5u64, p_0);
    } // 0x60296AF4BA14ABC5 0xB58B25BD b323
    pub unsafe fn force_next_message_to_previous_briefs_list(p_0: i32) {
        call_native!(Void, 0x57D760D55F54E071u64, p_0);
    } // 0x57D760D55F54E071 0x9854485F b323
    pub unsafe fn set_radar_zoom_precise(zoom: f32) {
        call_native!(Void, 0xBD12C5EEE184C337u64, zoom);
    } // 0xBD12C5EEE184C337 0xDCA3F423 b323
    pub unsafe fn set_radar_zoom(zoom_level: i32) {
        call_native!(Void, 0x096EF57A0C999BBAu64, zoom_level);
    } // 0x096EF57A0C999BBA 0x2A50D1A6 b323
    pub unsafe fn set_radar_zoom_to_blip(blip: Blip, zoom: f32) {
        call_native!(Void, 0xF98E4B3E56AFC7B1u64, blip, zoom);
    } // 0xF98E4B3E56AFC7B1 0x25EC28C0 b323
    pub unsafe fn set_radar_zoom_to_distance(zoom: f32) {
        call_native!(Void, 0xCB7CC0D58405AD41u64, zoom);
    } // 0xCB7CC0D58405AD41 0x09CF1CE5 b323
    pub unsafe fn update_radar_zoom_to_blip() {
        call_native!(Void, 0xD2049635DEB9C375u64);
    } // 0xD2049635DEB9C375 0xE8D3A910 b323
    pub unsafe fn get_hud_colour(
        hud_color_index: i32,
        r: *mut i32,
        g: *mut i32,
        b: *mut i32,
        a: *mut i32,
    ) {
        call_native!(Void, 0x7C9C91AB74A0360Fu64, hud_color_index, r, g, b, a);
    } // 0x7C9C91AB74A0360F 0x63F66A0B b323
    pub unsafe fn set_script_variable_hud_colour(r: i32, g: i32, b: i32, a: i32) {
        call_native!(Void, 0xD68A5FF8A3A89874u64, r, g, b, a);
    } // 0xD68A5FF8A3A89874 0x0E41E45C b323
    pub unsafe fn set_second_script_variable_hud_colour(r: i32, g: i32, b: i32, a: i32) {
        call_native!(Void, 0x16A304E6CB2BFAB9u64, r, g, b, a);
    } // 0x16A304E6CB2BFAB9 0x6BE3ACA8 b323
    pub unsafe fn replace_hud_colour(hud_color_index: i32, hud_color_index_2: i32) {
        call_native!(
            Void,
            0x1CCC708F0F850613u64,
            hud_color_index,
            hud_color_index_2
        );
    } // 0x1CCC708F0F850613 0x3B216749 b323
    pub unsafe fn replace_hud_colour_with_rgba(
        hud_color_index: i32,
        r: i32,
        g: i32,
        b: i32,
        a: i32,
    ) {
        call_native!(Void, 0xF314CF4F0211894Eu64, hud_color_index, r, g, b, a);
    } // 0xF314CF4F0211894E 0xF6E7E92B b323
    pub unsafe fn set_ability_bar_visibility(visible: bool) {
        call_native!(Void, 0x1DFEDD15019315A9u64, visible);
    } // 0x1DFEDD15019315A9  b1493
    pub unsafe fn set_allow_ability_bar(toggle: bool) {
        call_native!(Void, 0x889329C80FE5963Cu64, toggle);
    } // 0x889329C80FE5963C  b1868
    pub unsafe fn flash_ability_bar(milliseconds_to_flash: i32) {
        call_native!(Void, 0x02CFBA0C9E9275CEu64, milliseconds_to_flash);
    } // 0x02CFBA0C9E9275CE 0x3648960D b323
    pub unsafe fn set_ability_bar_value(p_0: f32, p_1: f32) {
        call_native!(Void, 0x9969599CCFF5D85Eu64, p_0, p_1);
    } // 0x9969599CCFF5D85E 0x24E53FD8 b323
    pub unsafe fn flash_wanted_display(p_0: bool) {
        call_native!(Void, 0xA18AFB39081B6A1Fu64, p_0);
    } // 0xA18AFB39081B6A1F 0x629F866B b323
    pub unsafe fn force_off_wanted_star_flash(toggle: bool) {
        call_native!(Void, 0xBA8D65C1C65702E5u64, toggle);
    } // 0xBA8D65C1C65702E5 0x58612465 b323
    pub unsafe fn set_custom_mp_hud_color(hud_color_id: i32) {
        call_native!(Void, 0x2ACCB195F3CCD9DEu64, hud_color_id);
    } // 0x2ACCB195F3CCD9DE  b2545
    pub unsafe fn get_rendered_character_height(size: f32, font: i32) -> f32 {
        call_native!(f32, 0xDB88A37483346780u64, size, font)
    } // 0xDB88A37483346780 0x3330175B b323
    pub unsafe fn set_text_scale(scale: f32, size: f32) {
        call_native!(Void, 0x07C837F9A01C34C9u64, scale, size);
    } // 0x07C837F9A01C34C9 0xB6E15B23 b323
    pub unsafe fn set_text_colour(red: i32, green: i32, blue: i32, alpha: i32) {
        call_native!(Void, 0xBE6B23FFA53FB442u64, red, green, blue, alpha);
    } // 0xBE6B23FFA53FB442 0xE54DD2C8 b323
    pub unsafe fn set_text_centre(align: bool) {
        call_native!(Void, 0xC02F4DBFB51D988Bu64, align);
    } // 0xC02F4DBFB51D988B 0xE26D39A1 b323
    pub unsafe fn set_text_right_justify(toggle: bool) {
        call_native!(Void, 0x6B3C4650BC8BEE47u64, toggle);
    } // 0x6B3C4650BC8BEE47 0x45B60520 b323
    pub unsafe fn set_text_justification(justify_type: i32) {
        call_native!(Void, 0x4E096588B13FFECAu64, justify_type);
    } // 0x4E096588B13FFECA 0x68CDFA60 b323
    pub unsafe fn set_text_line_height_mult(line_height_mult: f32) {
        call_native!(Void, 0x9F4624F76E6953D1u64, line_height_mult);
    } // 0x9F4624F76E6953D1  b3095
    pub unsafe fn set_text_wrap(start: f32, end: f32) {
        call_native!(Void, 0x63145D9C883A1A70u64, start, end);
    } // 0x63145D9C883A1A70 0x6F60AB54 b323
    pub unsafe fn set_text_leading(p_0: i32) {
        call_native!(Void, 0xA50ABC31E3CDFAFFu64, p_0);
    } // 0xA50ABC31E3CDFAFF 0x98CE21D4 b323
    pub unsafe fn set_text_proportional(p_0: bool) {
        call_native!(Void, 0x038C1F517D7FDCF8u64, p_0);
    } // 0x038C1F517D7FDCF8 0xF49D8A08 b323
    pub unsafe fn set_text_font(font_type: i32) {
        call_native!(Void, 0x66E0276CC5F6B9DAu64, font_type);
    } // 0x66E0276CC5F6B9DA 0x80BC530D b323
    pub unsafe fn set_text_drop_shadow() {
        call_native!(Void, 0x1CA3E9EAC9D93E5Eu64);
    } // 0x1CA3E9EAC9D93E5E 0xE2A11511 b323
    pub unsafe fn set_text_dropshadow(distance: i32, r: i32, g: i32, b: i32, a: i32) {
        call_native!(Void, 0x465C84BC39F1C351u64, distance, r, g, b, a);
    } // 0x465C84BC39F1C351 0xE6587517 b323
    pub unsafe fn set_text_outline() {
        call_native!(Void, 0x2513DFB0FB8400FEu64);
    } // 0x2513DFB0FB8400FE 0xC753412F b323
    pub unsafe fn set_text_edge(p_0: i32, r: i32, g: i32, b: i32, a: i32) {
        call_native!(Void, 0x441603240D202FA6u64, p_0, r, g, b, a);
    } // 0x441603240D202FA6 0x3F1A5DAB b323
    pub unsafe fn set_text_render_id(render_id: i32) {
        call_native!(Void, 0x5F15302936E07111u64, render_id);
    } // 0x5F15302936E07111 0xC5C3B7F3 b323
    pub unsafe fn get_default_script_rendertarget_render_id() -> i32 {
        call_native!(i32, 0x52F0982D7FD156B6u64)
    } // 0x52F0982D7FD156B6 0x8188935F b323
    pub unsafe fn register_named_rendertarget(name: *const i8, p_1: bool) -> bool {
        call_native!(bool, 0x57D9C12635E25CE3u64, name, p_1)
    } // 0x57D9C12635E25CE3 0xFAE5D6F0 b323
    pub unsafe fn is_named_rendertarget_registered(name: *const i8) -> bool {
        call_native!(bool, 0x78DCDC15C9F116B4u64, name)
    } // 0x78DCDC15C9F116B4 0x284057F5 b323
    pub unsafe fn release_named_rendertarget(name: *const i8) -> bool {
        call_native!(bool, 0xE9F6FFE837354DD4u64, name)
    } // 0xE9F6FFE837354DD4 0xD3F6C892 b323
    pub unsafe fn link_named_rendertarget(model_hash: Hash) {
        call_native!(Void, 0xF6C09E276AEB3F2Du64, model_hash);
    } // 0xF6C09E276AEB3F2D 0x6844C4B9 b323
    pub unsafe fn get_named_rendertarget_render_id(name: *const i8) -> i32 {
        call_native!(i32, 0x1A6478B61C6BDC3Bu64, name)
    } // 0x1A6478B61C6BDC3B 0xF9D7A401 b323
    pub unsafe fn is_named_rendertarget_linked(model_hash: Hash) -> bool {
        call_native!(bool, 0x113750538FA31298u64, model_hash)
    } // 0x113750538FA31298 0x8B52601F b323
    pub unsafe fn clear_help(toggle: bool) {
        call_native!(Void, 0x8DFCED7A656F8802u64, toggle);
    } // 0x8DFCED7A656F8802 0xE6D85741 b323
    pub unsafe fn is_help_message_on_screen() -> bool {
        call_native!(bool, 0xDAD37F45428801AEu64)
    } // 0xDAD37F45428801AE 0x4B3C9CA9 b323
    pub unsafe fn has_script_hidden_help_this_frame() -> bool {
        call_native!(bool, 0x214CD562A939246Au64)
    } // 0x214CD562A939246A 0x812CBE0E b323
    pub unsafe fn is_help_message_being_displayed() -> bool {
        call_native!(bool, 0x4D79439A6B55AC67u64)
    } // 0x4D79439A6B55AC67 0xA65F262A b323
    pub unsafe fn is_help_message_fading_out() -> bool {
        call_native!(bool, 0x327EDEEEAC55C369u64)
    } // 0x327EDEEEAC55C369 0x3E50AE92 b323
    pub unsafe fn set_help_message_style(
        style: i32,
        hud_color: i32,
        alpha: i32,
        p_3: i32,
        p_4: i32,
    ) {
        call_native!(
            Void,
            0xB9C362BABECDDC7Au64,
            style,
            hud_color,
            alpha,
            p_3,
            p_4
        );
    } // 0xB9C362BABECDDC7A  b463
    pub unsafe fn get_standard_blip_enum_id() -> i32 {
        call_native!(i32, 0x4A9923385BDB9DADu64)
    } // 0x4A9923385BDB9DAD 0x87871CE0 b323
    pub unsafe fn get_waypoint_blip_enum_id() -> i32 {
        call_native!(i32, 0x186E5D252FA50E7Du64)
    } // 0x186E5D252FA50E7D 0xB9827942 b323
    pub unsafe fn get_number_of_active_blips() -> i32 {
        call_native!(i32, 0x9A3FF3DE163034E8u64)
    } // 0x9A3FF3DE163034E8 0x144020FA b323
    pub unsafe fn get_next_blip_info_id(blip_sprite: i32) -> Blip {
        call_native!(Blip, 0x14F96AA50D6FBEA7u64, blip_sprite)
    } // 0x14F96AA50D6FBEA7 0x9356E92F b323
    pub unsafe fn get_first_blip_info_id(blip_sprite: i32) -> Blip {
        call_native!(Blip, 0x1BEDE233E6CD2A1Fu64, blip_sprite)
    } // 0x1BEDE233E6CD2A1F 0x64C0273D b323
    pub unsafe fn get_closest_blip_info_id(blip_sprite: i32) -> Blip {
        call_native!(Blip, 0xD484BF71050CA1EEu64, blip_sprite)
    } // 0xD484BF71050CA1EE  b1180
    pub unsafe fn get_blip_info_id_coord(blip: Blip) -> Vector3 {
        call_native!(Vector3, 0xFA7C7F0AADF25D09u64, blip)
    } // 0xFA7C7F0AADF25D09 0xB7374A66 b323
    pub unsafe fn get_blip_info_id_display(blip: Blip) -> i32 {
        call_native!(i32, 0x1E314167F701DC3Bu64, blip)
    } // 0x1E314167F701DC3B 0xD0FC19F4 b323
    pub unsafe fn get_blip_info_id_type(blip: Blip) -> i32 {
        call_native!(i32, 0xBE9B0959FFD0779Bu64, blip)
    } // 0xBE9B0959FFD0779B 0x501D7B4E b323
    pub unsafe fn get_blip_info_id_entity_index(blip: Blip) -> Entity {
        call_native!(Entity, 0x4BA4E2553AFEDC2Cu64, blip)
    } // 0x4BA4E2553AFEDC2C 0xA068C40B b323
    pub unsafe fn get_blip_info_id_pickup_index(blip: Blip) -> Pickup {
        call_native!(Pickup, 0x9B6786E4C03DD382u64, blip)
    } // 0x9B6786E4C03DD382 0x86913D37 b323
    pub unsafe fn get_blip_from_entity(entity: Entity) -> Blip {
        call_native!(Blip, 0xBC8DBDCA2436F7E8u64, entity)
    } // 0xBC8DBDCA2436F7E8 0x005A2A47 b323
    pub unsafe fn add_blip_for_radius(pos_x: f32, pos_y: f32, pos_z: f32, radius: f32) -> Blip {
        call_native!(Blip, 0x46818D79B1F7499Au64, pos_x, pos_y, pos_z, radius)
    } // 0x46818D79B1F7499A 0x4626756C b323
    pub unsafe fn add_blip_for_area(x: f32, y: f32, z: f32, width: f32, height: f32) -> Blip {
        call_native!(Blip, 0xCE5D0E5E315DB238u64, x, y, z, width, height)
    } // 0xCE5D0E5E315DB238  b463
    pub unsafe fn add_blip_for_entity(entity: Entity) -> Blip {
        call_native!(Blip, 0x5CDE92C702A8FCE7u64, entity)
    } // 0x5CDE92C702A8FCE7 0x30822554 b323
    pub unsafe fn add_blip_for_pickup(pickup: Pickup) -> Blip {
        call_native!(Blip, 0xBE339365C863BD36u64, pickup)
    } // 0xBE339365C863BD36 0x16693C3A b323
    pub unsafe fn add_blip_for_coord(x: f32, y: f32, z: f32) -> Blip {
        call_native!(Blip, 0x5A039BB0BCA604B6u64, x, y, z)
    } // 0x5A039BB0BCA604B6 0xC6F43D0E b323
    pub unsafe fn trigger_sonar_blip(pos_x: f32, pos_y: f32, pos_z: f32, radius: f32, p_4: i32) {
        call_native!(
            Void,
            0x72DD432F3CDFC0EEu64,
            pos_x,
            pos_y,
            pos_z,
            radius,
            p_4
        );
    } // 0x72DD432F3CDFC0EE 0xBF25E7B2 b323
    pub unsafe fn allow_sonar_blips(toggle: bool) {
        call_native!(Void, 0x60734CC207C9833Cu64, toggle);
    } // 0x60734CC207C9833C 0xE7E1E32B b323
    pub unsafe fn set_blip_coords(blip: Blip, pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0xAE2AF67E9D9AF65Du64, blip, pos_x, pos_y, pos_z);
    } // 0xAE2AF67E9D9AF65D 0x680A34D4 b323
    pub unsafe fn get_blip_coords(blip: Blip) -> Vector3 {
        call_native!(Vector3, 0x586AFE3FF72D996Eu64, blip)
    } // 0x586AFE3FF72D996E 0xEF6FF47B b323
    pub unsafe fn set_blip_sprite(blip: Blip, sprite_id: i32) {
        call_native!(Void, 0xDF735600A4696DAFu64, blip, sprite_id);
    } // 0xDF735600A4696DAF 0x8DBBB0B9 b323
    pub unsafe fn get_blip_sprite(blip: Blip) -> i32 {
        call_native!(i32, 0x1FC877464A04FC4Fu64, blip)
    } // 0x1FC877464A04FC4F 0x72FF2E73 b323
    pub unsafe fn set_cop_blip_sprite(p_0: i32, p_1: f32) {
        call_native!(Void, 0x9FCB3CBFB3EAD69Au64, p_0, p_1);
    } // 0x9FCB3CBFB3EAD69A  b1734
    pub unsafe fn set_cop_blip_sprite_as_standard() {
        call_native!(Void, 0xB7B873520C84C118u64);
    } // 0xB7B873520C84C118  b1734
    pub unsafe fn set_blip_name_from_text_file(blip: Blip, gxt_entry: *const i8) {
        call_native!(Void, 0xEAA0FFE120D92784u64, blip, gxt_entry);
    } // 0xEAA0FFE120D92784 0xAC8A5461 b323
    pub unsafe fn set_blip_name_to_player_name(blip: Blip, player: Player) {
        call_native!(Void, 0x127DE7B20C60A6A3u64, blip, player);
    } // 0x127DE7B20C60A6A3 0x03A0B8F9 b323
    pub unsafe fn set_blip_alpha(blip: Blip, alpha: i32) {
        call_native!(Void, 0x45FF974EEE1C8734u64, blip, alpha);
    } // 0x45FF974EEE1C8734 0xA791FCCD b323
    pub unsafe fn get_blip_alpha(blip: Blip) -> i32 {
        call_native!(i32, 0x970F608F0EE6C885u64, blip)
    } // 0x970F608F0EE6C885 0x297AF6C8 b323
    pub unsafe fn set_blip_fade(blip: Blip, opacity: i32, duration: i32) {
        call_native!(Void, 0x2AEE8F8390D2298Cu64, blip, opacity, duration);
    } // 0x2AEE8F8390D2298C 0xA5999031 b323
    pub unsafe fn get_blip_fade_direction(blip: Blip) -> i32 {
        call_native!(i32, 0x2C173AE2BDB9385Eu64, blip)
    } // 0x2C173AE2BDB9385E  b463
    pub unsafe fn set_blip_rotation(blip: Blip, rotation: i32) {
        call_native!(Void, 0xF87683CDF73C3F6Eu64, blip, rotation);
    } // 0xF87683CDF73C3F6E 0x6B8F44FE b323
    pub unsafe fn set_blip_rotation_with_float(blip: Blip, heading: f32) {
        call_native!(Void, 0xA8B6AFDAC320AC87u64, blip, heading);
    } // 0xA8B6AFDAC320AC87  b877
    pub unsafe fn get_blip_rotation(blip: Blip) -> i32 {
        call_native!(i32, 0x003E92BA477F9D7Fu64, blip)
    } // 0x003E92BA477F9D7F  b2060
    pub unsafe fn set_blip_flash_timer(blip: Blip, duration: i32) {
        call_native!(Void, 0xD3CD6FD297AE87CCu64, blip, duration);
    } // 0xD3CD6FD297AE87CC 0x8D5DF611 b323
    pub unsafe fn set_blip_flash_interval(blip: Blip, p_1: Any) {
        call_native!(Void, 0xAA51DB313C010A7Eu64, blip, p_1);
    } // 0xAA51DB313C010A7E 0xEAF67377 b323
    pub unsafe fn set_blip_colour(blip: Blip, color: i32) {
        call_native!(Void, 0x03D7FB09E75D6B7Eu64, blip, color);
    } // 0x03D7FB09E75D6B7E 0xBB3C5A41 b323
    pub unsafe fn set_blip_secondary_colour(blip: Blip, r: i32, g: i32, b: i32) {
        call_native!(Void, 0x14892474891E09EBu64, blip, r, g, b);
    } // 0x14892474891E09EB 0xC6384D32 b323
    pub unsafe fn get_blip_colour(blip: Blip) -> i32 {
        call_native!(i32, 0xDF729E8D20CF7327u64, blip)
    } // 0xDF729E8D20CF7327 0xDD6A1E54 b323
    pub unsafe fn get_blip_hud_colour(blip: Blip) -> i32 {
        call_native!(i32, 0x729B5F1EFBC0AAEEu64, blip)
    } // 0x729B5F1EFBC0AAEE 0xE88B4BC2 b323
    pub unsafe fn is_blip_short_range(blip: Blip) -> bool {
        call_native!(bool, 0xDA5F8727EB75B926u64, blip)
    } // 0xDA5F8727EB75B926 0x1226765A b323
    pub unsafe fn is_blip_on_minimap(blip: Blip) -> bool {
        call_native!(bool, 0xE41CA53051197A27u64, blip)
    } // 0xE41CA53051197A27 0x258CBA3A b323
    pub unsafe fn does_blip_have_gps_route(blip: Blip) -> bool {
        call_native!(bool, 0xDD2238F57B977751u64, blip)
    } // 0xDD2238F57B977751 0x3E47F357 b323
    pub unsafe fn set_blip_hidden_on_legend(blip: Blip, toggle: bool) {
        call_native!(Void, 0x54318C915D27E4CEu64, blip, toggle);
    } // 0x54318C915D27E4CE 0x43996428 b323
    pub unsafe fn set_blip_high_detail(blip: Blip, toggle: bool) {
        call_native!(Void, 0xE2590BC29220CEBBu64, blip, toggle);
    } // 0xE2590BC29220CEBB 0xD5842BFF b323
    pub unsafe fn set_blip_as_mission_creator_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x24AC0137444F9FD5u64, blip, toggle);
    } // 0x24AC0137444F9FD5 0x802FB686 b323
    pub unsafe fn is_mission_creator_blip(blip: Blip) -> bool {
        call_native!(bool, 0x26F49BF3381D933Du64, blip)
    } // 0x26F49BF3381D933D 0x24ACC4E9 b323
    pub unsafe fn get_new_selected_mission_creator_blip() -> Blip {
        call_native!(Blip, 0x5C90988E7C8E1AF4u64)
    } // 0x5C90988E7C8E1AF4 0xFFD7476C b323
    pub unsafe fn is_hovering_over_mission_creator_blip() -> bool {
        call_native!(bool, 0x4167EFE0527D706Eu64)
    } // 0x4167EFE0527D706E 0xC5EB849A b323
    pub unsafe fn show_start_mission_instructional_button(toggle: bool) {
        call_native!(Void, 0xF1A6C18B35BCADE6u64, toggle);
    } // 0xF1A6C18B35BCADE6 0xA2CAAB4F b323
    pub unsafe fn show_contact_instructional_button(toggle: bool) {
        call_native!(Void, 0xC772A904CDE1186Fu64, toggle);
    } // 0xC772A904CDE1186F  b2545
    pub unsafe fn reload_map_menu() {
        call_native!(Void, 0x2916A928514C9827u64);
    } // 0x2916A928514C9827  b573
    pub unsafe fn set_blip_marker_long_distance(p_0: Any, p_1: Any) {
        call_native!(Void, 0xB552929B85FC27ECu64, p_0, p_1);
    } // 0xB552929B85FC27EC  b573
    pub unsafe fn set_blip_flashes(blip: Blip, toggle: bool) {
        call_native!(Void, 0xB14552383D39CE3Eu64, blip, toggle);
    } // 0xB14552383D39CE3E 0xC0047F15 b323
    pub unsafe fn set_blip_flashes_alternate(blip: Blip, toggle: bool) {
        call_native!(Void, 0x2E8D9498C56DD0D1u64, blip, toggle);
    } // 0x2E8D9498C56DD0D1 0x1A81202B b323
    pub unsafe fn is_blip_flashing(blip: Blip) -> bool {
        call_native!(bool, 0xA5E41FD83AD6CEF0u64, blip)
    } // 0xA5E41FD83AD6CEF0 0x52E111D7 b323
    pub unsafe fn set_blip_as_short_range(blip: Blip, toggle: bool) {
        call_native!(Void, 0xBE8BE4FE60E27B72u64, blip, toggle);
    } // 0xBE8BE4FE60E27B72 0x5C67725E b323
    pub unsafe fn set_blip_scale(blip: Blip, scale: f32) {
        call_native!(Void, 0xD38744167B2FA257u64, blip, scale);
    } // 0xD38744167B2FA257 0x1E6EC434 b323
    pub unsafe fn set_blip_scale_2d(blip: Blip, x_scale: f32, y_scale: f32) {
        call_native!(Void, 0xCD6524439909C979u64, blip, x_scale, y_scale);
    } // 0xCD6524439909C979  b1734
    pub unsafe fn set_blip_priority(blip: Blip, priority: i32) {
        call_native!(Void, 0xAE9FC9EF6A9FAC79u64, blip, priority);
    } // 0xAE9FC9EF6A9FAC79 0xCE87DA6F b323
    pub unsafe fn set_blip_display(blip: Blip, display_id: i32) {
        call_native!(Void, 0x9029B2F3DA924928u64, blip, display_id);
    } // 0x9029B2F3DA924928 0x2B521F91 b323
    pub unsafe fn set_blip_category(blip: Blip, index: i32) {
        call_native!(Void, 0x234CDD44D996FD9Au64, blip, index);
    } // 0x234CDD44D996FD9A 0xEF72F533 b323
    pub unsafe fn remove_blip(blip: *mut Blip) {
        call_native!(Void, 0x86A652570E5F25DDu64, blip);
    } // 0x86A652570E5F25DD 0xD8C3C1CD b323
    pub unsafe fn set_blip_as_friendly(blip: Blip, toggle: bool) {
        call_native!(Void, 0x6F6F290102C02AB4u64, blip, toggle);
    } // 0x6F6F290102C02AB4 0xF290CFD8 b323
    pub unsafe fn pulse_blip(blip: Blip) {
        call_native!(Void, 0x742D6FD43115AF73u64, blip);
    } // 0x742D6FD43115AF73 0x44253855 b323
    pub unsafe fn show_number_on_blip(blip: Blip, number: i32) {
        call_native!(Void, 0xA3C0B359DCB848B6u64, blip, number);
    } // 0xA3C0B359DCB848B6 0x7BFC66C6 b323
    pub unsafe fn hide_number_on_blip(blip: Blip) {
        call_native!(Void, 0x532CFF637EF80148u64, blip);
    } // 0x532CFF637EF80148 0x0B6D610D b323
    pub unsafe fn show_height_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x75A16C3DA34F1245u64, blip, toggle);
    } // 0x75A16C3DA34F1245 0x1D99F676 b323
    pub unsafe fn show_tick_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x74513EA3E505181Eu64, blip, toggle);
    } // 0x74513EA3E505181E 0x3DCF0092 b323
    pub unsafe fn show_gold_tick_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0xCAC2031EBF79B1A8u64, blip, toggle);
    } // 0xCAC2031EBF79B1A8  b2699
    pub unsafe fn show_for_sale_icon_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x19BD6E3C0E16A8FAu64, blip, toggle);
    } // 0x19BD6E3C0E16A8FA  b2802
    pub unsafe fn show_heading_indicator_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x5FBCA48327B914DFu64, blip, toggle);
    } // 0x5FBCA48327B914DF 0xD1C3D71B b323
    pub unsafe fn show_outline_indicator_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0xB81656BC81FE24D1u64, blip, toggle);
    } // 0xB81656BC81FE24D1 0x8DE82C15 b323
    pub unsafe fn show_friend_indicator_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0x23C3EB807312F01Au64, blip, toggle);
    } // 0x23C3EB807312F01A 0x4C8F02B4 b323
    pub unsafe fn show_crew_indicator_on_blip(blip: Blip, toggle: bool) {
        call_native!(Void, 0xDCFB5D4DB8BF367Eu64, blip, toggle);
    } // 0xDCFB5D4DB8BF367E 0xABBE1E45 b323
    pub unsafe fn set_blip_extended_height_threshold(blip: Blip, toggle: bool) {
        call_native!(Void, 0xC4278F70131BAA6Du64, blip, toggle);
    } // 0xC4278F70131BAA6D 0x6AA6A1CC b323
    pub unsafe fn set_blip_short_height_threshold(p_0: Any, p_1: Any) {
        call_native!(Void, 0x4B5B620C9B59ED34u64, p_0, p_1);
    } // 0x4B5B620C9B59ED34  b678
    pub unsafe fn set_blip_use_height_indicator_on_edge(blip: Blip, p_1: Any) {
        call_native!(Void, 0x2C9F302398E13141u64, blip, p_1);
    } // 0x2C9F302398E13141 0xCA95C487 b1103
    pub unsafe fn set_blip_as_minimal_on_edge(blip: Blip, toggle: bool) {
        call_native!(Void, 0x2B6D467DAB714E8Du64, blip, toggle);
    } // 0x2B6D467DAB714E8D 0xC575F0BC b323
    pub unsafe fn set_radius_blip_edge(blip: Blip, toggle: bool) {
        call_native!(Void, 0x25615540D894B814u64, blip, toggle);
    } // 0x25615540D894B814 0x40E25DB8 b323
    pub unsafe fn does_blip_exist(blip: Blip) -> bool {
        call_native!(bool, 0xA6DB27D19ECBB7DAu64, blip)
    } // 0xA6DB27D19ECBB7DA 0xAE92DD96 b323
    pub unsafe fn set_waypoint_off() {
        call_native!(Void, 0xA7E4E2D361C2627Fu64);
    } // 0xA7E4E2D361C2627F 0xB3496E1B b323
    pub unsafe fn delete_waypoints_from_this_player() {
        call_native!(Void, 0xD8E694757BCEA8E9u64);
    } // 0xD8E694757BCEA8E9 0x62BABF2C b323
    pub unsafe fn refresh_waypoint() {
        call_native!(Void, 0x81FA173F170560D1u64);
    } // 0x81FA173F170560D1 0xB395D753 b323
    pub unsafe fn is_waypoint_active() -> bool {
        call_native!(bool, 0x1DD1F58F493F1DA5u64)
    } // 0x1DD1F58F493F1DA5 0x5E4DF47B b323
    pub unsafe fn set_new_waypoint(x: f32, y: f32) {
        call_native!(Void, 0xFE43368D2AA4F2FCu64, x, y);
    } // 0xFE43368D2AA4F2FC 0x8444E1F0 b323
    pub unsafe fn set_blip_bright(blip: Blip, toggle: bool) {
        call_native!(Void, 0xB203913733F27884u64, blip, toggle);
    } // 0xB203913733F27884 0x72BEE6DF b323
    pub unsafe fn set_blip_show_cone(blip: Blip, toggle: bool, hud_color_index: i32) {
        call_native!(Void, 0x13127EC3665E8EE1u64, blip, toggle, hud_color_index);
    } // 0x13127EC3665E8EE1 0xFF545AD8 b323
    pub unsafe fn remove_cop_blip_from_ped(ped: Ped) {
        call_native!(Void, 0xC594B315EDF2D4AFu64, ped);
    } // 0xC594B315EDF2D4AF 0x41B0D022 b323
    pub unsafe fn setup_fake_cone_data(
        blip: Blip,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: Any,
        p_8: i32,
    ) {
        call_native!(
            Void,
            0xF83D0FEBE75E62C9u64,
            blip,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0xF83D0FEBE75E62C9  b1290
    pub unsafe fn remove_fake_cone_data(blip: Blip) {
        call_native!(Void, 0x35A3CD97B2C0A6D2u64, blip);
    } // 0x35A3CD97B2C0A6D2  b1290
    pub unsafe fn clear_fake_cone_array() {
        call_native!(Void, 0x8410C5E0CD847B9Du64);
    } // 0x8410C5E0CD847B9D  b1290
    pub unsafe fn _set_blip_gps_route_display_distance(
        blip: Blip,
        blip_change_param_4_6: i32,
        blip_change_param_4_7: bool,
    ) {
        call_native!(
            Void,
            0x25D984CFB64ED6DEu64,
            blip,
            blip_change_param_4_6,
            blip_change_param_4_7
        );
    } // 0x25D984CFB64ED6DE  b3095
    pub unsafe fn set_minimap_component(
        component_id: i32,
        toggle: bool,
        override_color: i32,
    ) -> bool {
        call_native!(
            bool,
            0x75A9A10948D1DEA6u64,
            component_id,
            toggle,
            override_color
        )
    } // 0x75A9A10948D1DEA6 0x419DCDC4 b323
    pub unsafe fn set_minimap_sonar_sweep(toggle: bool) {
        call_native!(Void, 0x6B50FC8749632EC1u64, toggle);
    } // 0x6B50FC8749632EC1  b2189
    pub unsafe fn show_account_picker() {
        call_native!(Void, 0x60E892BA4F5BDCA4u64);
    } // 0x60E892BA4F5BDCA4  b323
    pub unsafe fn get_main_player_blip_id() -> Blip {
        call_native!(Blip, 0xDCD4EC3F419D02FAu64)
    } // 0xDCD4EC3F419D02FA 0xAB93F020 b323
    pub unsafe fn set_pm_warningscreen_active(p_0: bool) {
        call_native!(Void, 0x41350B4FC28E3941u64, p_0);
    } // 0x41350B4FC28E3941  b323
    pub unsafe fn hide_loading_on_fade_this_frame() {
        call_native!(Void, 0x4B0311D3CDC4648Fu64);
    } // 0x4B0311D3CDC4648F 0x35087963 b323
    pub unsafe fn set_radar_as_interior_this_frame(
        interior: Hash,
        x: f32,
        y: f32,
        z: i32,
        zoom: i32,
    ) {
        call_native!(Void, 0x59E727A1C9D3E31Au64, interior, x, y, z, zoom);
    } // 0x59E727A1C9D3E31A 0x6F2626E1 b323
    pub unsafe fn set_inside_very_small_interior(toggle: bool) {
        call_native!(Void, 0x504DFE62A1692296u64, toggle);
    } // 0x504DFE62A1692296  b1493
    pub unsafe fn set_inside_very_large_interior(toggle: bool) {
        call_native!(Void, 0x7EC8ABA5E74B3D7Au64, toggle);
    } // 0x7EC8ABA5E74B3D7A  b2372
    pub unsafe fn set_radar_as_exterior_this_frame() {
        call_native!(Void, 0xE81B7D2A3DAB2D81u64);
    } // 0xE81B7D2A3DAB2D81 0x39ABB10E b323
    pub unsafe fn set_fake_pausemap_player_position_this_frame(x: f32, y: f32) {
        call_native!(Void, 0x77E2DD177910E1CFu64, x, y);
    } // 0x77E2DD177910E1CF 0x54E75C7D b323
    pub unsafe fn set_fake_gps_player_position_this_frame(x: f32, y: f32, p_2: Any) {
        call_native!(Void, 0xA17784FCA9548D15u64, x, y, p_2);
    } // 0xA17784FCA9548D15  b877
    pub unsafe fn is_pausemap_in_interior_mode() -> bool {
        call_native!(bool, 0x9049FE339D5F6F6Fu64)
    } // 0x9049FE339D5F6F6F 0x199DED14 b323
    pub unsafe fn hide_minimap_exterior_map_this_frame() {
        call_native!(Void, 0x5FBAE526203990C9u64);
    } // 0x5FBAE526203990C9 0x1A4318F7 b323
    pub unsafe fn hide_minimap_interior_map_this_frame() {
        call_native!(Void, 0x20FE7FDFEEAD38C0u64);
    } // 0x20FE7FDFEEAD38C0 0xCE36E3FE b323
    pub unsafe fn set_use_island_map(toggle: bool) {
        call_native!(Void, 0x5E1460624D194A38u64, toggle);
    } // 0x5E1460624D194A38  b2189
    pub unsafe fn _set_pause_exterior_rendering_while_in_interior() {
        call_native!(Void, 0x35CCE12EAECB4A51u64);
    } // 0x35CCE12EAECB4A51  b2944
    pub unsafe fn dont_tilt_minimap_this_frame() {
        call_native!(Void, 0x6D14BFDC33B34F55u64);
    } // 0x6D14BFDC33B34F55 0x334EFD46 b323
    pub unsafe fn dont_zoom_minimap_when_running_this_frame() {
        call_native!(Void, 0x89DA85D949CE57A0u64);
    } // 0x89DA85D949CE57A0  b2802
    pub unsafe fn dont_zoom_minimap_when_sniping_this_frame() {
        call_native!(Void, 0x55F5A5F07134DE60u64);
    } // 0x55F5A5F07134DE60 0x7A569F78 b1180
    pub unsafe fn set_widescreen_format(p_0: Any) {
        call_native!(Void, 0xC3B07BA00A83B0F1u64, p_0);
    } // 0xC3B07BA00A83B0F1 0xF016E08F b323
    pub unsafe fn display_area_name(toggle: bool) {
        call_native!(Void, 0x276B6CE369C33678u64, toggle);
    } // 0x276B6CE369C33678 0x489FDD41 b323
    pub unsafe fn display_cash(toggle: bool) {
        call_native!(Void, 0x96DEC8D5430208B7u64, toggle);
    } // 0x96DEC8D5430208B7 0x0049DF83 b323
    pub unsafe fn use_fake_mp_cash(toggle: bool) {
        call_native!(Void, 0x170F541E1CADD1DEu64, toggle);
    } // 0x170F541E1CADD1DE 0x6253B9D7 b323
    pub unsafe fn change_fake_mp_cash(cash: i32, bank: i32) {
        call_native!(Void, 0x0772DF77852C2E30u64, cash, bank);
    } // 0x0772DF77852C2E30 0xE319F90B b323
    pub unsafe fn display_ammo_this_frame(display: bool) {
        call_native!(Void, 0xA5E78BA2B1331C55u64, display);
    } // 0xA5E78BA2B1331C55 0x60693CEE b323
    pub unsafe fn display_sniper_scope_this_frame() {
        call_native!(Void, 0x73115226F4814E62u64);
    } // 0x73115226F4814E62 0xBC6C73CB b323
    pub unsafe fn hide_hud_and_radar_this_frame() {
        call_native!(Void, 0x719FF505F097FD20u64);
    } // 0x719FF505F097FD20 0xB75D4AD2 b323
    pub unsafe fn allow_display_of_multiplayer_cash_text(allow: bool) {
        call_native!(Void, 0xE67C6DFD386EA5E7u64, allow);
    } // 0xE67C6DFD386EA5E7 0x5476B9FD b323
    pub unsafe fn set_multiplayer_wallet_cash() {
        call_native!(Void, 0xC2D15BEF167E27BCu64);
    } // 0xC2D15BEF167E27BC 0xF4F3C796 b323
    pub unsafe fn remove_multiplayer_wallet_cash() {
        call_native!(Void, 0x95CF81BD06EE1887u64);
    } // 0x95CF81BD06EE1887 0x7BFFE82F b323
    pub unsafe fn set_multiplayer_bank_cash() {
        call_native!(Void, 0xDD21B55DF695CD0Au64);
    } // 0xDD21B55DF695CD0A 0x2C842D03 b323
    pub unsafe fn remove_multiplayer_bank_cash() {
        call_native!(Void, 0xC7C6789AA1CFEDD0u64);
    } // 0xC7C6789AA1CFEDD0 0x728B4EF4 b323
    pub unsafe fn set_multiplayer_hud_cash(p_0: i32, p_1: bool) {
        call_native!(Void, 0xFD1D220394BCB824u64, p_0, p_1);
    } // 0xFD1D220394BCB824 0xA8DB435E b323
    pub unsafe fn remove_multiplayer_hud_cash() {
        call_native!(Void, 0x968F270E39141ECAu64);
    } // 0x968F270E39141ECA 0x07BF4A7D b323
    pub unsafe fn hide_help_text_this_frame() {
        call_native!(Void, 0xD46923FC481CA285u64);
    } // 0xD46923FC481CA285 0xF3807BED b323
    pub unsafe fn is_ime_in_progress() -> bool {
        call_native!(bool, 0x801879A9B4F4B2FBu64)
    } // 0x801879A9B4F4B2FB  b372
    pub unsafe fn display_help_text_this_frame(message: *const i8, p_1: bool) {
        call_native!(Void, 0x960C9FF8F616E41Cu64, message, p_1);
    } // 0x960C9FF8F616E41C 0x18E3360A b323
    pub unsafe fn hud_force_weapon_wheel(show: bool) {
        call_native!(Void, 0xEB354E5376BC81A7u64, show);
    } // 0xEB354E5376BC81A7 0x1EFFB02A b323
    pub unsafe fn hud_force_special_vehicle_weapon_wheel() {
        call_native!(Void, 0x488043841BBE156Fu64);
    } // 0x488043841BBE156F  b1011
    pub unsafe fn hud_suppress_weapon_wheel_results_this_frame() {
        call_native!(Void, 0x0AFC4AF510774B47u64);
    } // 0x0AFC4AF510774B47 0xB26FED2B b323
    pub unsafe fn hud_get_weapon_wheel_currently_highlighted() -> Hash {
        call_native!(Hash, 0xA48931185F0536FEu64)
    } // 0xA48931185F0536FE 0x22E9F555 b323
    pub unsafe fn hud_set_weapon_wheel_top_slot(weapon_hash: Hash) {
        call_native!(Void, 0x72C1056D678BB7D8u64, weapon_hash);
    } // 0x72C1056D678BB7D8 0x83B608A0 b323
    pub unsafe fn hud_get_weapon_wheel_top_slot(weapon_type_index: i32) -> Hash {
        call_native!(Hash, 0xA13E93403F26C812u64, weapon_type_index)
    } // 0xA13E93403F26C812  b323
    pub unsafe fn hud_showing_character_switch_selection(toggle: bool) {
        call_native!(Void, 0x14C9FDCC41F81F63u64, toggle);
    } // 0x14C9FDCC41F81F63 0xE70D1F43 b323
    pub unsafe fn set_gps_flags(p_0: i32, p_1: f32) {
        call_native!(Void, 0x5B440763A4C8D15Bu64, p_0, p_1);
    } // 0x5B440763A4C8D15B 0x60539BAB b323
    pub unsafe fn clear_gps_flags() {
        call_native!(Void, 0x21986729D6A3A830u64);
    } // 0x21986729D6A3A830 0x056AFCE6 b323
    pub unsafe fn set_race_track_render(toggle: bool) {
        call_native!(Void, 0x1EAC5F91BCBC5073u64, toggle);
    } // 0x1EAC5F91BCBC5073 0xFB9BABF5 b323
    pub unsafe fn clear_gps_race_track() {
        call_native!(Void, 0x7AA5B4CE533C858Bu64);
    } // 0x7AA5B4CE533C858B 0x40C59829 b323
    pub unsafe fn start_gps_custom_route(
        hud_color: i32,
        display_on_foot: bool,
        follow_player: bool,
    ) {
        call_native!(
            Void,
            0xDB34E8D56FC13B08u64,
            hud_color,
            display_on_foot,
            follow_player
        );
    } // 0xDB34E8D56FC13B08 0x7F93799B b323
    pub unsafe fn add_point_to_gps_custom_route(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x311438A071DD9B1Au64, x, y, z);
    } // 0x311438A071DD9B1A 0xEEBDFE55 b323
    pub unsafe fn set_gps_custom_route_render(
        toggle: bool,
        radar_thickness: i32,
        map_thickness: i32,
    ) {
        call_native!(
            Void,
            0x900086F371220B6Fu64,
            toggle,
            radar_thickness,
            map_thickness
        );
    } // 0x900086F371220B6F 0xDA0AF00E b323
    pub unsafe fn clear_gps_custom_route() {
        call_native!(Void, 0xE6DE0561D9232A64u64);
    } // 0xE6DE0561D9232A64 0xCF2E3E24 b323
    pub unsafe fn start_gps_multi_route(
        hud_color: i32,
        route_from_player: bool,
        display_on_foot: bool,
    ) {
        call_native!(
            Void,
            0x3D3D15AF7BCAAF83u64,
            hud_color,
            route_from_player,
            display_on_foot
        );
    } // 0x3D3D15AF7BCAAF83 0xC3DCBEDB b323
    pub unsafe fn add_point_to_gps_multi_route(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xA905192A6781C41Bu64, x, y, z);
    } // 0xA905192A6781C41B 0xFE485135 b323
    pub unsafe fn set_gps_multi_route_render(toggle: bool) {
        call_native!(Void, 0x3DDA37128DD1ACA8u64, toggle);
    } // 0x3DDA37128DD1ACA8 0xE87CBE4C b323
    pub unsafe fn clear_gps_multi_route() {
        call_native!(Void, 0x67EEDEA1B9BAFD94u64);
    } // 0x67EEDEA1B9BAFD94 0x0D9969E4 b323
    pub unsafe fn clear_gps_player_waypoint() {
        call_native!(Void, 0xFF4FB7C8CDFA3DA7u64);
    } // 0xFF4FB7C8CDFA3DA7 0x0B9C7FC2 b323
    pub unsafe fn set_gps_flashes(toggle: bool) {
        call_native!(Void, 0x320D0E0D936A0E9Bu64, toggle);
    } // 0x320D0E0D936A0E9B 0xE991F733 b323
    pub unsafe fn set_player_icon_colour(color: i32) {
        call_native!(Void, 0x7B21E0BB01E8224Au64, color);
    } // 0x7B21E0BB01E8224A  b323
    pub unsafe fn flash_minimap_display() {
        call_native!(Void, 0xF2DD778C22B15BDAu64);
    } // 0xF2DD778C22B15BDA 0xB8359952 b323
    pub unsafe fn flash_minimap_display_with_color(hud_color_index: i32) {
        call_native!(Void, 0x6B1DE27EE78E6A19u64, hud_color_index);
    } // 0x6B1DE27EE78E6A19 0x79A6CAF6 b323
    pub unsafe fn toggle_stealth_radar(toggle: bool) {
        call_native!(Void, 0x6AFDFB93754950C7u64, toggle);
    } // 0x6AFDFB93754950C7 0xC68D47C4 b323
    pub unsafe fn set_minimap_in_spectator_mode(toggle: bool, ped: Ped) {
        call_native!(Void, 0x1A5CD7752DD28CD3u64, toggle, ped);
    } // 0x1A5CD7752DD28CD3 0xD5BFCADB b323
    pub unsafe fn set_mission_name(p_0: bool, name: *const i8) {
        call_native!(Void, 0x5F28ECF5FC84772Fu64, p_0, name);
    } // 0x5F28ECF5FC84772F 0x68DCAE10 b323
    pub unsafe fn set_mission_name_for_ugc_mission(p_0: bool, name: *const i8) {
        call_native!(Void, 0xE45087D85F468BC2u64, p_0, name);
    } // 0xE45087D85F468BC2 0x8D9A1734 b323
    pub unsafe fn set_description_for_ugc_mission_eight_strings(
        p_0: bool,
        p_1: *const i8,
        p_2: *const i8,
        p_3: *const i8,
        p_4: *const i8,
        p_5: *const i8,
        p_6: *const i8,
        p_7: *const i8,
        p_8: *const i8,
    ) {
        call_native!(
            Void,
            0x817B86108EB94E51u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0x817B86108EB94E51 0xD2161E77 b323
    pub unsafe fn set_minimap_block_waypoint(toggle: bool) {
        call_native!(Void, 0x58FADDED207897DCu64, toggle);
    } // 0x58FADDED207897DC 0xA41C3B62 b323
    pub unsafe fn set_minimap_in_prologue(toggle: bool) {
        call_native!(Void, 0x9133955F1A2DA957u64, toggle);
    } // 0x9133955F1A2DA957 0x02F5F1D1 b323
    pub unsafe fn set_minimap_hide_fow(toggle: bool) {
        call_native!(Void, 0xF8DEE0A5600CBB93u64, toggle);
    } // 0xF8DEE0A5600CBB93 0xD8D77733 b323
    pub unsafe fn get_minimap_fow_discovery_ratio() -> f32 {
        call_native!(f32, 0xE0130B41D3CF4574u64)
    } // 0xE0130B41D3CF4574 0xA4098ACC b323
    pub unsafe fn get_minimap_fow_coordinate_is_revealed(x: f32, y: f32, z: f32) -> bool {
        call_native!(bool, 0x6E31B91145873922u64, x, y, z)
    } // 0x6E31B91145873922 0x65B705F6 b323
    pub unsafe fn set_minimap_fow_do_not_update(p_0: bool) {
        call_native!(Void, 0x62E849B7EB28E770u64, p_0);
    } // 0x62E849B7EB28E770  b323
    pub unsafe fn set_minimap_fow_reveal_coordinate(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x0923DBF87DFF735Eu64, x, y, z);
    } // 0x0923DBF87DFF735E 0xE010F081 b323
    pub unsafe fn set_minimap_golf_course(hole: i32) {
        call_native!(Void, 0x71BDB63DBAF8DA59u64, hole);
    } // 0x71BDB63DBAF8DA59 0x5133A750 b323
    pub unsafe fn set_minimap_golf_course_off() {
        call_native!(Void, 0x35EDD5B2E3FF01C0u64);
    } // 0x35EDD5B2E3FF01C0 0x20FD3E87 b323
    pub unsafe fn lock_minimap_angle(angle: i32) {
        call_native!(Void, 0x299FAEBB108AE05Bu64, angle);
    } // 0x299FAEBB108AE05B 0xDEC733E4 b323
    pub unsafe fn unlock_minimap_angle() {
        call_native!(Void, 0x8183455E16C42E3Au64);
    } // 0x8183455E16C42E3A 0x742043F9 b323
    pub unsafe fn lock_minimap_position(x: f32, y: f32) {
        call_native!(Void, 0x1279E861A329E73Fu64, x, y);
    } // 0x1279E861A329E73F 0xB9632A91 b323
    pub unsafe fn unlock_minimap_position() {
        call_native!(Void, 0x3E93E06DB8EF1F30u64);
    } // 0x3E93E06DB8EF1F30 0x5E8E6F54 b323
    pub unsafe fn set_fake_minimap_max_altimeter_height(altitude: f32, p_1: bool, p_2: Any) {
        call_native!(Void, 0xD201F3FF917A506Du64, altitude, p_1, p_2);
    } // 0xD201F3FF917A506D 0x0308EDF6 b323
    pub unsafe fn set_health_hud_display_values(health: i32, capacity: i32, was_added: bool) {
        call_native!(Void, 0x3F5CC444DCAAA8F2u64, health, capacity, was_added);
    } // 0x3F5CC444DCAAA8F2 0x7FB6FB2A b323
    pub unsafe fn set_max_health_hud_display(maximum_value: i32) {
        call_native!(Void, 0x975D66A0BC17064Cu64, maximum_value);
    } // 0x975D66A0BC17064C 0xF07D8CEF b323
    pub unsafe fn set_max_armour_hud_display(maximum_value: i32) {
        call_native!(Void, 0x06A320535F5F0248u64, maximum_value);
    } // 0x06A320535F5F0248 0x827F14DE b323
    pub unsafe fn set_bigmap_active(toggle_big_map: bool, show_full_map: bool) {
        call_native!(Void, 0x231C8F89D0539D8Fu64, toggle_big_map, show_full_map);
    } // 0x231C8F89D0539D8F 0x08EB83D2 b323
    pub unsafe fn is_hud_component_active(id: i32) -> bool {
        call_native!(bool, 0xBC4C9EA5391ECC0Du64, id)
    } // 0xBC4C9EA5391ECC0D 0x6214631F b323
    pub unsafe fn is_scripted_hud_component_active(id: i32) -> bool {
        call_native!(bool, 0xDD100EB17A94FF65u64, id)
    } // 0xDD100EB17A94FF65 0x2B86F382 b323
    pub unsafe fn hide_scripted_hud_component_this_frame(id: i32) {
        call_native!(Void, 0xE374C498D8BADC14u64, id);
    } // 0xE374C498D8BADC14 0x31ABA127 b323
    pub unsafe fn show_scripted_hud_component_this_frame(id: i32) {
        call_native!(Void, 0x4F38DCA127DAAEA2u64, id);
    } // 0x4F38DCA127DAAEA2  b1734
    pub unsafe fn is_scripted_hud_component_hidden_this_frame(id: i32) -> bool {
        call_native!(bool, 0x09C0403ED9A751C2u64, id)
    } // 0x09C0403ED9A751C2 0xE8C8E535 b323
    pub unsafe fn hide_hud_component_this_frame(id: i32) {
        call_native!(Void, 0x6806C51AD12B83B8u64, id);
    } // 0x6806C51AD12B83B8 0xDB2D0762 b323
    pub unsafe fn show_hud_component_this_frame(id: i32) {
        call_native!(Void, 0x0B4DF1FA60C0E664u64, id);
    } // 0x0B4DF1FA60C0E664 0x95E1546E b323
    pub unsafe fn hide_street_and_car_names_this_frame() {
        call_native!(Void, 0xA4DEDE28B1814289u64);
    } // 0xA4DEDE28B1814289 0x52746FE1 b323
    pub unsafe fn reset_reticule_values() {
        call_native!(Void, 0x12782CE0A636E9F0u64);
    } // 0x12782CE0A636E9F0 0xBE27AA3F b323
    pub unsafe fn reset_hud_component_values(id: i32) {
        call_native!(Void, 0x450930E616475D0Du64, id);
    } // 0x450930E616475D0D 0xD15B46DA b323
    pub unsafe fn set_hud_component_position(id: i32, x: f32, y: f32) {
        call_native!(Void, 0xAABB1F56E2A17CEDu64, id, x, y);
    } // 0xAABB1F56E2A17CED 0x2F3A0D15 b323
    pub unsafe fn get_hud_component_position(id: i32) -> Vector3 {
        call_native!(Vector3, 0x223CA69A8C4417FDu64, id)
    } // 0x223CA69A8C4417FD 0x080DCED6 b323
    pub unsafe fn clear_reminder_message() {
        call_native!(Void, 0xB57D8DD645CFA2CFu64);
    } // 0xB57D8DD645CFA2CF 0x5BBCC934 b323
    pub unsafe fn get_hud_screen_position_from_world_position(
        world_x: f32,
        world_y: f32,
        world_z: f32,
        screen_x: *mut f32,
        screen_y: *mut f32,
    ) -> i32 {
        call_native!(
            i32,
            0xF9904D11F1ACBEC3u64,
            world_x,
            world_y,
            world_z,
            screen_x,
            screen_y
        )
    } // 0xF9904D11F1ACBEC3 0xFE9A39F8 b323
    pub unsafe fn open_reportugc_menu() {
        call_native!(Void, 0x523A590C1A3CC0D3u64);
    } // 0x523A590C1A3CC0D3 0x10DE5150 b323
    pub unsafe fn force_close_reportugc_menu() {
        call_native!(Void, 0xEE4C0E6DBC6F2C6Fu64);
    } // 0xEE4C0E6DBC6F2C6F 0x67649EE0 b323
    pub unsafe fn is_reportugc_menu_open() -> bool {
        call_native!(bool, 0x9135584D09A3437Eu64)
    } // 0x9135584D09A3437E 0x9D2C94FA b323
    pub unsafe fn is_floating_help_text_on_screen(hud_index: i32) -> bool {
        call_native!(bool, 0x2432784ACA090DA4u64, hud_index)
    } // 0x2432784ACA090DA4 0x45472FD5 b323
    pub unsafe fn set_floating_help_text_screen_position(hud_index: i32, x: f32, y: f32) {
        call_native!(Void, 0x7679CC1BCEBE3D4Cu64, hud_index, x, y);
    } // 0x7679CC1BCEBE3D4C 0x198F32D7 b323
    pub unsafe fn set_floating_help_text_world_position(hud_index: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x784BA7E0ECEB4178u64, hud_index, x, y, z);
    } // 0x784BA7E0ECEB4178 0x93045157 b323
    pub unsafe fn set_floating_help_text_to_entity(
        hud_index: i32,
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
    ) {
        call_native!(
            Void,
            0xB094BC1DB4018240u64,
            hud_index,
            entity,
            offset_x,
            offset_y
        );
    } // 0xB094BC1DB4018240 0x18B012B7 b323
    pub unsafe fn set_floating_help_text_style(
        hud_index: i32,
        p_1: i32,
        p_2: i32,
        p_3: i32,
        p_4: i32,
        p_5: i32,
    ) {
        call_native!(
            Void,
            0x788E7FD431BD67F1u64,
            hud_index,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5
        );
    } // 0x788E7FD431BD67F1 0x97852A82 b323
    pub unsafe fn clear_floating_help(hud_index: i32, p_1: bool) {
        call_native!(Void, 0x50085246ABD3FEFAu64, hud_index, p_1);
    } // 0x50085246ABD3FEFA 0xB181F88F b323
    pub unsafe fn create_mp_gamer_tag_with_crew_color(
        player: Player,
        username: *const i8,
        pointed_clan_tag: bool,
        is_rockstar_clan: bool,
        clan_tag: *const i8,
        clan_flag: i32,
        r: i32,
        g: i32,
        b: i32,
    ) {
        call_native!(
            Void,
            0x6DD05E9D83EFA4C9u64,
            player,
            username,
            pointed_clan_tag,
            is_rockstar_clan,
            clan_tag,
            clan_flag,
            r,
            g,
            b
        );
    } // 0x6DD05E9D83EFA4C9 0xC969F2D0 b323
    pub unsafe fn is_mp_gamer_tag_movie_active() -> bool {
        call_native!(bool, 0x6E0EB3EB47C8D7AAu64)
    } // 0x6E0EB3EB47C8D7AA 0xEFD2564A b323
    pub unsafe fn create_fake_mp_gamer_tag(
        ped: Ped,
        username: *const i8,
        pointed_clan_tag: bool,
        is_rockstar_clan: bool,
        clan_tag: *const i8,
        clan_flag: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xBFEFE3321A3F5015u64,
            ped,
            username,
            pointed_clan_tag,
            is_rockstar_clan,
            clan_tag,
            clan_flag
        )
    } // 0xBFEFE3321A3F5015 0xF5CD2AA4 b323
    pub unsafe fn remove_mp_gamer_tag(gamer_tag_id: i32) {
        call_native!(Void, 0x31698AA80E0223F8u64, gamer_tag_id);
    } // 0x31698AA80E0223F8 0x3D081FE4 b323
    pub unsafe fn is_mp_gamer_tag_active(gamer_tag_id: i32) -> bool {
        call_native!(bool, 0x4E929E7A5796FD26u64, gamer_tag_id)
    } // 0x4E929E7A5796FD26 0x60118951 b323
    pub unsafe fn is_mp_gamer_tag_free(gamer_tag_id: i32) -> bool {
        call_native!(bool, 0x595B5178E412E199u64, gamer_tag_id)
    } // 0x595B5178E412E199 0x63959059 b323
    pub unsafe fn set_mp_gamer_tag_visibility(
        gamer_tag_id: i32,
        component: i32,
        toggle: bool,
        p_3: Any,
    ) {
        call_native!(
            Void,
            0x63BB75ABEDC1F6A0u64,
            gamer_tag_id,
            component,
            toggle,
            p_3
        );
    } // 0x63BB75ABEDC1F6A0 0xD41DF479 b323
    pub unsafe fn set_all_mp_gamer_tags_visibility(gamer_tag_id: i32, toggle: bool) {
        call_native!(Void, 0xEE76FF7E6A0166B0u64, gamer_tag_id, toggle);
    } // 0xEE76FF7E6A0166B0 0x767DED29 b323
    pub unsafe fn set_mp_gamer_tags_should_use_vehicle_health(gamer_tag_id: i32, toggle: bool) {
        call_native!(Void, 0xA67F9C46D612B6F1u64, gamer_tag_id, toggle);
    } // 0xA67F9C46D612B6F1 0xB01A5434 b323
    pub unsafe fn set_mp_gamer_tags_should_use_points_health(gamer_tag_id: i32, toggle: bool) {
        call_native!(Void, 0xD29EC58C2F6B5014u64, gamer_tag_id, toggle);
    } // 0xD29EC58C2F6B5014  b1365
    pub unsafe fn set_mp_gamer_tags_point_health(
        gamer_tag_id: i32,
        value: i32,
        maximum_value: i32,
    ) {
        call_native!(
            Void,
            0x1563FE35E9928E67u64,
            gamer_tag_id,
            value,
            maximum_value
        );
    } // 0x1563FE35E9928E67  b1365
    pub unsafe fn set_mp_gamer_tag_colour(gamer_tag_id: i32, component: i32, hud_color_index: i32) {
        call_native!(
            Void,
            0x613ED644950626AEu64,
            gamer_tag_id,
            component,
            hud_color_index
        );
    } // 0x613ED644950626AE 0x7E3AA40A b323
    pub unsafe fn set_mp_gamer_tag_health_bar_colour(gamer_tag_id: i32, hud_color_index: i32) {
        call_native!(Void, 0x3158C77A7E888AB4u64, gamer_tag_id, hud_color_index);
    } // 0x3158C77A7E888AB4 0x5777EC77 b323
    pub unsafe fn set_mp_gamer_tag_alpha(gamer_tag_id: i32, component: i32, alpha: i32) {
        call_native!(Void, 0xD48FE545CD46F857u64, gamer_tag_id, component, alpha);
    } // 0xD48FE545CD46F857 0xF4418611 b323
    pub unsafe fn set_mp_gamer_tag_wanted_level(gamer_tag_id: i32, wantedlvl: i32) {
        call_native!(Void, 0xCF228E2AA03099C3u64, gamer_tag_id, wantedlvl);
    } // 0xCF228E2AA03099C3 0x0EBB003F b323
    pub unsafe fn set_mp_gamer_tag_num_packages(gamer_tag_id: i32, p_1: i32) {
        call_native!(Void, 0x9C16459B2324B2CFu64, gamer_tag_id, p_1);
    } // 0x9C16459B2324B2CF  b877
    pub unsafe fn set_mp_gamer_tag_name(gamer_tag_id: i32, string: *const i8) {
        call_native!(Void, 0xDEA2B8283BAA3944u64, gamer_tag_id, string);
    } // 0xDEA2B8283BAA3944 0x627A559B b323
    pub unsafe fn is_updating_mp_gamer_tag_name_and_crew_details(gamer_tag_id: i32) -> bool {
        call_native!(bool, 0xEB709A36958ABE0Du64, gamer_tag_id)
    } // 0xEB709A36958ABE0D 0xF11414C4 b323
    pub unsafe fn set_mp_gamer_tag_big_text(gamer_tag_id: i32, string: *const i8) {
        call_native!(Void, 0x7B7723747CCB55B6u64, gamer_tag_id, string);
    } // 0x7B7723747CCB55B6 0x939218AB b323
    pub unsafe fn get_current_webpage_id() -> i32 {
        call_native!(i32, 0x01A358D9128B7A86u64)
    } // 0x01A358D9128B7A86 0xAB5B7C18 b323
    pub unsafe fn get_current_website_id() -> i32 {
        call_native!(i32, 0x97D47996FC48CBADu64)
    } // 0x97D47996FC48CBAD 0x42A55B14 b323
    pub unsafe fn get_global_actionscript_flag(flag_index: i32) -> i32 {
        call_native!(i32, 0xE3B05614DCE1D014u64, flag_index)
    } // 0xE3B05614DCE1D014 0xD217EE7E b323
    pub unsafe fn reset_global_actionscript_flag(flag_index: i32) {
        call_native!(Void, 0xB99C4E4D9499DF29u64, flag_index);
    } // 0xB99C4E4D9499DF29 0x4C4C10CF b323
    pub unsafe fn is_warning_message_ready_for_control() -> bool {
        call_native!(bool, 0xAF42195A42C63BBAu64)
    } // 0xAF42195A42C63BBA  b323
    pub unsafe fn set_warning_message(
        title_msg: *const i8,
        flags: i32,
        prompt_msg: *const i8,
        p_3: bool,
        p_4: i32,
        p_5: *const i8,
        p_6: *const i8,
        show_background: bool,
        error_code: i32,
    ) {
        call_native!(
            Void,
            0x7B1776B3B53F8D74u64,
            title_msg,
            flags,
            prompt_msg,
            p_3,
            p_4,
            p_5,
            p_6,
            show_background,
            error_code
        );
    } // 0x7B1776B3B53F8D74 0xBE699BDE b323
    pub unsafe fn set_warning_message_with_header(
        entry_header: *const i8,
        entry_line_1: *const i8,
        instructional_key: i32,
        entry_line_2: *const i8,
        p_4: bool,
        p_5: Any,
        show_background: *mut Any,
        p_7: *mut Any,
        p_8: bool,
        p_9: Any,
    ) {
        call_native!(
            Void,
            0xDC38CC1E35B6A5D7u64,
            entry_header,
            entry_line_1,
            instructional_key,
            entry_line_2,
            p_4,
            p_5,
            show_background,
            p_7,
            p_8,
            p_9
        );
    } // 0xDC38CC1E35B6A5D7 0x2DB9EAB5 b323
    pub unsafe fn set_warning_message_with_header_and_substring_flags(
        entry_header: *const i8,
        entry_line_1: *const i8,
        instructional_key: i32,
        entry_line_2: *const i8,
        p_4: bool,
        p_5: Any,
        additional_int_info: Any,
        additional_text_info_line_1: *const i8,
        additional_text_info_line_2: *const i8,
        show_background: bool,
        error_code: i32,
    ) {
        call_native!(
            Void,
            0x701919482C74B5ABu64,
            entry_header,
            entry_line_1,
            instructional_key,
            entry_line_2,
            p_4,
            p_5,
            additional_int_info,
            additional_text_info_line_1,
            additional_text_info_line_2,
            show_background,
            error_code
        );
    } // 0x701919482C74B5AB 0x749929D3 b323
    pub unsafe fn set_warning_message_with_header_extended(
        entry_header: *const i8,
        entry_line_1: *const i8,
        flags: i32,
        entry_line_2: *const i8,
        p_4: bool,
        p_5: Any,
        p_6: *mut Any,
        p_7: *mut Any,
        show_bg: bool,
        p_9: Any,
        p_1_0: Any,
    ) {
        call_native!(
            Void,
            0x38B55259C2E078EDu64,
            entry_header,
            entry_line_1,
            flags,
            entry_line_2,
            p_4,
            p_5,
            p_6,
            p_7,
            show_bg,
            p_9,
            p_1_0
        );
    } // 0x38B55259C2E078ED  b1493
    pub unsafe fn set_warning_message_with_header_and_substring_flags_extended(
        label_title: *const i8,
        label_message: *const i8,
        p_2: i32,
        p_3: i32,
        label_message_2: *const i8,
        p_5: bool,
        p_6: i32,
        p_7: i32,
        p_8: *const i8,
        p_9: *const i8,
        background: bool,
        error_code: i32,
    ) {
        call_native!(
            Void,
            0x15803FEC3B9A872Bu64,
            label_title,
            label_message,
            p_2,
            p_3,
            label_message_2,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            background,
            error_code
        );
    } // 0x15803FEC3B9A872B  b573
    pub unsafe fn get_warning_screen_message_hash() -> Hash {
        call_native!(Hash, 0x81DF9ABA6C83DFF9u64)
    } // 0x81DF9ABA6C83DFF9  b1290
    pub unsafe fn set_warning_message_option_items(
        index: i32,
        name: *const i8,
        cash: i32,
        rp: i32,
        lvl: i32,
        colour: i32,
    ) -> bool {
        call_native!(
            bool,
            0x0C5A80A9E096D529u64,
            index,
            name,
            cash,
            rp,
            lvl,
            colour
        )
    } // 0x0C5A80A9E096D529  b323
    pub unsafe fn set_warning_message_option_highlight(p_0: Any) -> bool {
        call_native!(bool, 0xDAF87174BE7454FFu64, p_0)
    } // 0xDAF87174BE7454FF  b323
    pub unsafe fn remove_warning_message_option_items() {
        call_native!(Void, 0x6EF54AB721DC6242u64);
    } // 0x6EF54AB721DC6242  b323
    pub unsafe fn is_warning_message_active() -> bool {
        call_native!(bool, 0xE18B138FABC53103u64)
    } // 0xE18B138FABC53103 0x94C834AD b323
    pub unsafe fn clear_dynamic_pause_menu_error_message() {
        call_native!(Void, 0x7792424AA0EAC32Eu64);
    } // 0x7792424AA0EAC32E 0x2F9A309C b323
    pub unsafe fn custom_minimap_set_active(toggle: bool) {
        call_native!(Void, 0x5354C5BA2EA868A4u64, toggle);
    } // 0x5354C5BA2EA868A4 0xE4FD20D8 b323
    pub unsafe fn custom_minimap_set_blip_object(sprite_id: i32) {
        call_native!(Void, 0x1EAE6DD17B7A5EFAu64, sprite_id);
    } // 0x1EAE6DD17B7A5EFA 0x13E7A5A9 b323
    pub unsafe fn custom_minimap_create_blip(x: f32, y: f32, z: f32) -> i32 {
        call_native!(i32, 0x551DF99658DB6EE8u64, x, y, z)
    } // 0x551DF99658DB6EE8 0x786CA0A2 b323
    pub unsafe fn custom_minimap_clear_blips() {
        call_native!(Void, 0x2708FC083123F9FFu64);
    } // 0x2708FC083123F9FF 0xCBEC9369 b323
    pub unsafe fn force_sonar_blips_this_frame() -> bool {
        call_native!(bool, 0x1121BFA1A1A522A8u64)
    } // 0x1121BFA1A1A522A8 0x3F4AFB13 b323
    pub unsafe fn get_north_blid_index() -> Blip {
        call_native!(Blip, 0x3F0CF9CB7E589B88u64)
    } // 0x3F0CF9CB7E589B88  b463
    pub unsafe fn display_player_name_tags_on_blips(toggle: bool) {
        call_native!(Void, 0x82CEDC33687E1F50u64, toggle);
    } // 0x82CEDC33687E1F50 0x2F28F0A6 b323
    pub unsafe fn draw_frontend_background_this_frame() {
        call_native!(Void, 0x211C4EF450086857u64);
    } // 0x211C4EF450086857 0x801D0D86 b323
    pub unsafe fn draw_hud_over_fade_this_frame() {
        call_native!(Void, 0xBF4F34A85CA2970Cu64);
    } // 0xBF4F34A85CA2970C 0x317775DF b323
    pub unsafe fn activate_frontend_menu(menuhash: Hash, toggle_pause: bool, component: i32) {
        call_native!(
            Void,
            0xEF01D36B9C9D0C7Bu64,
            menuhash,
            toggle_pause,
            component
        );
    } // 0xEF01D36B9C9D0C7B 0x01D83872 b323
    pub unsafe fn restart_frontend_menu(menu_hash: Hash, p_1: i32) {
        call_native!(Void, 0x10706DC6AD2D49C0u64, menu_hash, p_1);
    } // 0x10706DC6AD2D49C0 0xB07DAF98 b323
    pub unsafe fn get_current_frontend_menu_version() -> Hash {
        call_native!(Hash, 0x2309595AD6145265u64)
    } // 0x2309595AD6145265 0x33D6868F b323
    pub unsafe fn set_pause_menu_active(toggle: bool) {
        call_native!(Void, 0xDF47FC56C71569CFu64, toggle);
    } // 0xDF47FC56C71569CF 0x1DCD878E b323
    pub unsafe fn disable_frontend_this_frame() {
        call_native!(Void, 0x6D3465A73092F0E6u64);
    } // 0x6D3465A73092F0E6 0xD86A029E b323
    pub unsafe fn suppress_frontend_rendering_this_frame() {
        call_native!(Void, 0xBA751764F0821256u64);
    } // 0xBA751764F0821256 0x7F349900 b323
    pub unsafe fn allow_pause_when_not_in_state_of_play_this_frame() {
        call_native!(Void, 0xCC3FDDED67BCFC63u64);
    } // 0xCC3FDDED67BCFC63 0x630CD8EE b323
    pub unsafe fn set_frontend_active(active: bool) {
        call_native!(Void, 0x745711A75AB09277u64, active);
    } // 0x745711A75AB09277 0x81E1AD32 b323
    pub unsafe fn is_pause_menu_active() -> bool {
        call_native!(bool, 0xB0034A223497FFCBu64)
    } // 0xB0034A223497FFCB 0xD3600591 b323
    pub unsafe fn is_store_pending_network_shutdown_to_open() -> bool {
        call_native!(bool, 0x2F057596F2BD0061u64)
    } // 0x2F057596F2BD0061 0xC85C4487 b323
    pub unsafe fn get_pause_menu_state() -> i32 {
        call_native!(i32, 0x272ACD84970869C5u64)
    } // 0x272ACD84970869C5 0x92F50134 b323
    pub unsafe fn get_pause_menu_position() -> Vector3 {
        call_native!(Vector3, 0x5BFF36D6ED83E0AEu64)
    } // 0x5BFF36D6ED83E0AE  b323
    pub unsafe fn is_pause_menu_restarting() -> bool {
        call_native!(bool, 0x1C491717107431C7u64)
    } // 0x1C491717107431C7 0x3C4CF4D9 b323
    pub unsafe fn force_scripted_gfx_when_frontend_active(p_0: *const i8) {
        call_native!(Void, 0x2162C446DFDF38FDu64, p_0);
    } // 0x2162C446DFDF38FD 0x2DFD35C7 b323
    pub unsafe fn pause_menuception_go_deeper(page: i32) {
        call_native!(Void, 0x77F16B447824DA6Cu64, page);
    } // 0x77F16B447824DA6C 0x0A89336C b323
    pub unsafe fn pause_menuception_the_kick() {
        call_native!(Void, 0xCDCA26E80FAECB8Fu64);
    } // 0xCDCA26E80FAECB8F 0xC84BE309 b323
    pub unsafe fn pause_toggle_fullscreen_map(p_0: Any) {
        call_native!(Void, 0x2DE6C5E2E996F178u64, p_0);
    } // 0x2DE6C5E2E996F178  b372
    pub unsafe fn pause_menu_activate_context(context_hash: Hash) {
        call_native!(Void, 0xDD564BDD0472C936u64, context_hash);
    } // 0xDD564BDD0472C936 0x9FE8FD5E b323
    pub unsafe fn pause_menu_deactivate_context(context_hash: Hash) {
        call_native!(Void, 0x444D8CF241EC25C5u64, context_hash);
    } // 0x444D8CF241EC25C5 0x0029046E b323
    pub unsafe fn pause_menu_is_context_active(context_hash: Hash) -> bool {
        call_native!(bool, 0x84698AB38D0C6636u64, context_hash)
    } // 0x84698AB38D0C6636 0xC51BC42F b323
    pub unsafe fn pause_menu_is_context_menu_active() -> bool {
        call_native!(bool, 0x2A25ADC48F87841Fu64)
    } // 0x2A25ADC48F87841F 0x016D7AF9 b323
    pub unsafe fn pause_menu_get_hair_colour_index() -> i32 {
        call_native!(i32, 0xDE03620F8703A9DFu64)
    } // 0xDE03620F8703A9DF  b323
    pub unsafe fn pause_menu_get_mouse_hover_index() -> i32 {
        call_native!(i32, 0x359AF31A4B52F5EDu64)
    } // 0x359AF31A4B52F5ED  b323
    pub unsafe fn pause_menu_get_mouse_hover_unique_id() -> i32 {
        call_native!(i32, 0x13C4B962653A5280u64)
    } // 0x13C4B962653A5280  b323
    pub unsafe fn pause_menu_get_mouse_click_event(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: *mut Any,
    ) -> bool {
        call_native!(bool, 0xC8E1071177A23BE5u64, p_0, p_1, p_2)
    } // 0xC8E1071177A23BE5  b323
    pub unsafe fn pause_menu_redraw_instructional_buttons(p_0: i32) {
        call_native!(Void, 0x4895BDEA16E7C080u64, p_0);
    } // 0x4895BDEA16E7C080 0x15B24768 b323
    pub unsafe fn pause_menu_set_busy_spinner(p_0: bool, position: i32, spinner_index: i32) {
        call_native!(Void, 0xC78E239AC5B2DDB9u64, p_0, position, spinner_index);
    } // 0xC78E239AC5B2DDB9 0x6C67131A b323
    pub unsafe fn pause_menu_set_warn_on_tab_change(p_0: bool) {
        call_native!(Void, 0xF06EBB91A81E09E3u64, p_0);
    } // 0xF06EBB91A81E09E3 0x11D09737 b323
    pub unsafe fn is_frontend_ready_for_control() -> bool {
        call_native!(bool, 0x3BAB9A4E4F2FF5C7u64)
    } // 0x3BAB9A4E4F2FF5C7 0xD3BF3ABD b323
    pub unsafe fn take_control_of_frontend() {
        call_native!(Void, 0xEC9264727EEC0F28u64);
    } // 0xEC9264727EEC0F28 0xC06B763D b323
    pub unsafe fn release_control_of_frontend() {
        call_native!(Void, 0x14621BB1DF14E2B2u64);
    } // 0x14621BB1DF14E2B2 0xB9392CE7 b323
    pub unsafe fn code_wants_script_to_take_control() -> bool {
        call_native!(bool, 0x66E7CB63C97B7D20u64)
    } // 0x66E7CB63C97B7D20 0x92DAFA78 b323
    pub unsafe fn get_screen_code_wants_script_to_control() -> i32 {
        call_native!(i32, 0x593FEAE1F73392D4u64)
    } // 0x593FEAE1F73392D4 0x22CA9F2A b323
    pub unsafe fn is_navigating_menu_content() -> bool {
        call_native!(bool, 0x4E3CD0EF8A489541u64)
    } // 0x4E3CD0EF8A489541 0xDA7951A2 b323
    pub unsafe fn has_menu_trigger_event_occurred() -> bool {
        call_native!(bool, 0xF284AC67940C6812u64)
    } // 0xF284AC67940C6812 0x7D95AFFF b323
    pub unsafe fn has_menu_layout_changed_event_occurred() -> bool {
        call_native!(bool, 0x2E22FEFA0100275Eu64)
    } // 0x2E22FEFA0100275E 0x96863460 b323
    pub unsafe fn set_savegame_list_unique_id(p_0: Any) {
        call_native!(Void, 0x0CF54F20DE43879Cu64, p_0);
    } // 0x0CF54F20DE43879C  b323
    pub unsafe fn get_menu_trigger_event_details(
        last_item_menu_id: *mut i32,
        selected_item_unique_id: *mut i32,
    ) {
        call_native!(
            Void,
            0x36C1451A88A09630u64,
            last_item_menu_id,
            selected_item_unique_id
        );
    } // 0x36C1451A88A09630 0x8543AAC8 b323
    pub unsafe fn get_menu_layout_changed_event_details(
        last_item_menu_id: *mut i32,
        selected_item_menu_id: *mut i32,
        selected_item_unique_id: *mut i32,
    ) {
        call_native!(
            Void,
            0x7E17BE53E1AAABAFu64,
            last_item_menu_id,
            selected_item_menu_id,
            selected_item_unique_id
        );
    } // 0x7E17BE53E1AAABAF 0x6025AA2F b323
    pub unsafe fn get_pm_player_crew_color(r: *mut i32, g: *mut i32, b: *mut i32) -> bool {
        call_native!(bool, 0xA238192F33110615u64, r, g, b)
    } // 0xA238192F33110615 0x46794EB2 b323
    pub unsafe fn get_menu_ped_int_stat(p_0: Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xEF4CED81CEBEDC6Du64, p_0, p_1)
    } // 0xEF4CED81CEBEDC6D 0x4370999E b323
    pub unsafe fn get_character_menu_ped_int_stat(p_0: Any, p_1: *mut Any, p_2: Any) -> bool {
        call_native!(bool, 0xCA6B2F7CE32AB653u64, p_0, p_1, p_2)
    } // 0xCA6B2F7CE32AB653  b323
    pub unsafe fn get_menu_ped_masked_int_stat(
        stat_hash: Hash,
        out_value: *mut i32,
        mask: i32,
        p_3: bool,
    ) -> bool {
        call_native!(bool, 0x90A6526CF0381030u64, stat_hash, out_value, mask, p_3)
    } // 0x90A6526CF0381030 0xD6CC4766 b323
    pub unsafe fn get_character_menu_ped_masked_int_stat(
        stat_hash: Hash,
        out_value: *mut Any,
        p_2: i32,
        mask: i32,
        p_4: bool,
    ) -> bool {
        call_native!(
            bool,
            0x24A49BEAF468DC90u64,
            stat_hash,
            out_value,
            p_2,
            mask,
            p_4
        )
    } // 0x24A49BEAF468DC90  b323
    pub unsafe fn get_menu_ped_float_stat(stat_hash: Hash, out_value: *mut f32) -> bool {
        call_native!(bool, 0x5FBD7095FE7AE57Fu64, stat_hash, out_value)
    } // 0x5FBD7095FE7AE57F 0x51972B04 b323
    pub unsafe fn get_character_menu_ped_float_stat(
        stat_hash: f32,
        out_value: *mut f32,
        p_2: bool,
    ) -> bool {
        call_native!(bool, 0x8F08017F9D7C47BDu64, stat_hash, out_value, p_2)
    } // 0x8F08017F9D7C47BD  b323
    pub unsafe fn get_menu_ped_bool_stat(stat_hash: Hash, out_value: *mut Bool) -> bool {
        call_native!(bool, 0x052991E59076E4E4u64, stat_hash, out_value)
    } // 0x052991E59076E4E4 0xD43BB56D b323
    pub unsafe fn clear_ped_in_pause_menu() {
        call_native!(Void, 0x5E62BE5DC58E9E06u64);
    } // 0x5E62BE5DC58E9E06 0x28058ACF b323
    pub unsafe fn give_ped_to_pause_menu(ped: Ped, p_1: i32) {
        call_native!(Void, 0xAC0BFBDC3BE00E14u64, ped, p_1);
    } // 0xAC0BFBDC3BE00E14 0x2AD2C9CE b323
    pub unsafe fn set_pause_menu_ped_lighting(state: bool) {
        call_native!(Void, 0x3CA6050692BC61B0u64, state);
    } // 0x3CA6050692BC61B0 0x127310EB b323
    pub unsafe fn set_pause_menu_ped_sleep_state(state: bool) {
        call_native!(Void, 0xECF128344E9FF9F1u64, state);
    } // 0xECF128344E9FF9F1 0x8F45D327 b323
    pub unsafe fn open_online_policies_menu() {
        call_native!(Void, 0x805D7CBB36FD6C4Cu64);
    } // 0x805D7CBB36FD6C4C 0x19FCBBB2 b323
    pub unsafe fn are_online_policies_up_to_date() -> bool {
        call_native!(bool, 0xF13FE2A80C05C561u64)
    } // 0xF13FE2A80C05C561 0x850690FF b323
    pub unsafe fn is_online_policies_menu_active() -> bool {
        call_native!(bool, 0x6F72CD94F7B5B68Cu64)
    } // 0x6F72CD94F7B5B68C 0x9D4934F4 b323
    pub unsafe fn open_social_club_menu(menu: Hash) {
        call_native!(Void, 0x75D3691713C3B05Au64, menu);
    } // 0x75D3691713C3B05A 0x57218529 b323
    pub unsafe fn close_social_club_menu() {
        call_native!(Void, 0xD2B32BE3FC1626C6u64);
    } // 0xD2B32BE3FC1626C6 0x5F86AA39 b323
    pub unsafe fn set_social_club_tour(name: *const i8) {
        call_native!(Void, 0x9E778248D6685FE0u64, name);
    } // 0x9E778248D6685FE0 0x7AD67C95 b323
    pub unsafe fn is_social_club_active() -> bool {
        call_native!(bool, 0xC406BE343FC4B9AFu64)
    } // 0xC406BE343FC4B9AF 0xD4DA14EF b323
    pub unsafe fn set_text_input_box_enabled(p_0: bool) {
        call_native!(Void, 0x1185A8087587322Cu64, p_0);
    } // 0x1185A8087587322C  b323
    pub unsafe fn force_close_text_input_box() {
        call_native!(Void, 0x8817605C2BA76200u64);
    } // 0x8817605C2BA76200  b323
    pub unsafe fn set_allow_comma_on_text_input(p_0: Any) {
        call_native!(Void, 0x577599CCED639CA2u64, p_0);
    } // 0x577599CCED639CA2  b505
    pub unsafe fn override_mp_text_chat_team_string(gxt_entry_hash: Hash) {
        call_native!(Void, 0x6A1738B4323FE2D9u64, gxt_entry_hash);
    } // 0x6A1738B4323FE2D9  b573
    pub unsafe fn is_mp_text_chat_typing() -> bool {
        call_native!(bool, 0xB118AF58B5F332A1u64)
    } // 0xB118AF58B5F332A1  b323
    pub unsafe fn close_mp_text_chat() {
        call_native!(Void, 0x1AC8F4AD40E22127u64);
    } // 0x1AC8F4AD40E22127  b323
    pub unsafe fn mp_text_chat_is_team_job(p_0: Any) {
        call_native!(Void, 0x7C226D5346D4D10Au64, p_0);
    } // 0x7C226D5346D4D10A  b372
    pub unsafe fn override_mp_text_chat_color(p_0: i32, hud_color: i32) {
        call_native!(Void, 0xF47E567B3630DD12u64, p_0, hud_color);
    } // 0xF47E567B3630DD12  b678
    pub unsafe fn mp_text_chat_disable(toggle: bool) {
        call_native!(Void, 0x1DB21A44B09E8BA3u64, toggle);
    } // 0x1DB21A44B09E8BA3  b323
    pub unsafe fn flag_player_context_in_tournament(toggle: bool) {
        call_native!(Void, 0xCEF214315D276FD1u64, toggle);
    } // 0xCEF214315D276FD1 0xFF06772A b323
    pub unsafe fn set_ped_has_ai_blip(ped: Ped, has_cone: bool) {
        call_native!(Void, 0xD30C50DF888D58B5u64, ped, has_cone);
    } // 0xD30C50DF888D58B5 0x96C4C4DD b323
    pub unsafe fn set_ped_has_ai_blip_with_colour(ped: Ped, has_cone: bool, color: i32) {
        call_native!(Void, 0xB13DCB4C6FAAD238u64, ped, has_cone, color);
    } // 0xB13DCB4C6FAAD238  b505
    pub unsafe fn does_ped_have_ai_blip(ped: Ped) -> bool {
        call_native!(bool, 0x15B8ECF844EE67EDu64, ped)
    } // 0x15B8ECF844EE67ED 0x3BE1257F b323
    pub unsafe fn set_ped_ai_blip_gang_id(ped: Ped, gang_id: i32) {
        call_native!(Void, 0xE52B8E7F85D39A08u64, ped, gang_id);
    } // 0xE52B8E7F85D39A08 0xD8E31B1A b323
    pub unsafe fn set_ped_ai_blip_has_cone(ped: Ped, toggle: bool) {
        call_native!(Void, 0x3EED80DFF7325CAAu64, ped, toggle);
    } // 0x3EED80DFF7325CAA 0x872C2CFB b323
    pub unsafe fn set_ped_ai_blip_forced_on(ped: Ped, toggle: bool) {
        call_native!(Void, 0x0C4BBF625CA98C4Eu64, ped, toggle);
    } // 0x0C4BBF625CA98C4E 0xFFDF46F0 b323
    pub unsafe fn set_ped_ai_blip_notice_range(ped: Ped, range: f32) {
        call_native!(Void, 0x97C65887D4B37FA9u64, ped, range);
    } // 0x97C65887D4B37FA9 0xF9DC2AF7 b323
    pub unsafe fn set_ped_ai_blip_sprite(ped: Ped, sprite_id: i32) {
        call_native!(Void, 0xFCFACD0DB9D7A57Du64, ped, sprite_id);
    } // 0xFCFACD0DB9D7A57D  b877
    pub unsafe fn get_ai_ped_ped_blip_index(ped: Ped) -> Blip {
        call_native!(Blip, 0x7CD934010E115C2Cu64, ped)
    } // 0x7CD934010E115C2C 0x06349065 b323
    pub unsafe fn get_ai_ped_vehicle_blip_index(ped: Ped) -> Blip {
        call_native!(Blip, 0x56176892826A4FE8u64, ped)
    } // 0x56176892826A4FE8 0xCA52CF43 b323
    pub unsafe fn has_director_mode_been_launched_by_code() -> bool {
        call_native!(bool, 0xA277800A9EAE340Eu64)
    } // 0xA277800A9EAE340E  b323
    pub unsafe fn set_director_mode_launched_by_script() {
        call_native!(Void, 0x2632482FD6B9AB87u64);
    } // 0x2632482FD6B9AB87  b323
    pub unsafe fn set_player_is_in_director_mode(toggle: bool) {
        call_native!(Void, 0x808519373FD336A3u64, toggle);
    } // 0x808519373FD336A3  b323
    pub unsafe fn set_director_mode_available(toggle: bool) {
        call_native!(Void, 0x04655F9D075D0AE5u64, toggle);
    } // 0x04655F9D075D0AE5  b323
    pub unsafe fn hide_hudmarkers_this_frame() {
        call_native!(Void, 0x243296A510B562B6u64);
    } // 0x243296A510B562B6  b2060
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod interior {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_interior_heading(interior: Interior) -> f32 {
        call_native!(f32, 0xF49B58631D9E22D9u64, interior)
    } // 0xF49B58631D9E22D9  b1493
    pub unsafe fn get_interior_location_and_namehash(
        interior: Interior,
        position: *mut Vector3,
        name_hash: *mut Hash,
    ) {
        call_native!(Void, 0x252BDC06B73FA6EAu64, interior, position, name_hash);
    } // 0x252BDC06B73FA6EA 0x75885CB3 b1290
    pub unsafe fn get_interior_group_id(interior: Interior) -> i32 {
        call_native!(i32, 0xE4A84ABF135EF91Au64, interior)
    } // 0xE4A84ABF135EF91A 0x09D6376F b323
    pub unsafe fn get_offset_from_interior_in_world_coords(
        interior: Interior,
        x: f32,
        y: f32,
        z: f32,
    ) -> Vector3 {
        call_native!(Vector3, 0x9E3B3E6D66F6E22Fu64, interior, x, y, z)
    } // 0x9E3B3E6D66F6E22F 0x7D8F26A1 b323
    pub unsafe fn is_interior_scene() -> bool {
        call_native!(bool, 0xBC72B5D7A1CBD54Du64)
    } // 0xBC72B5D7A1CBD54D 0x55226C13 b323
    pub unsafe fn is_valid_interior(interior: Interior) -> bool {
        call_native!(bool, 0x26B0E73D7EAAF4D3u64, interior)
    } // 0x26B0E73D7EAAF4D3 0x39C0B635 b323
    pub unsafe fn clear_room_for_entity(entity: Entity) {
        call_native!(Void, 0xB365FC0C4E27FFA7u64, entity);
    } // 0xB365FC0C4E27FFA7 0x7DDADB92 b323
    pub unsafe fn force_room_for_entity(entity: Entity, interior: Interior, room_hash_key: Hash) {
        call_native!(Void, 0x52923C4710DD9907u64, entity, interior, room_hash_key);
    } // 0x52923C4710DD9907 0x10BD4435 b323
    pub unsafe fn get_room_key_from_entity(entity: Entity) -> Hash {
        call_native!(Hash, 0x47C2A06D4F5F424Bu64, entity)
    } // 0x47C2A06D4F5F424B 0xE4ACF8C3 b323
    pub unsafe fn get_key_for_entity_in_room(entity: Entity) -> Hash {
        call_native!(Hash, 0x399685DB942336BCu64, entity)
    } // 0x399685DB942336BC 0x91EA80EF b323
    pub unsafe fn get_interior_from_entity(entity: Entity) -> Interior {
        call_native!(Interior, 0x2107BA504071A6BBu64, entity)
    } // 0x2107BA504071A6BB 0x5C644614 b323
    pub unsafe fn retain_entity_in_interior(entity: Entity, interior: Interior) {
        call_native!(Void, 0x82EBB79E258FA2B7u64, entity, interior);
    } // 0x82EBB79E258FA2B7 0xE645E162 b323
    pub unsafe fn clear_interior_state_of_entity(entity: Entity) {
        call_native!(Void, 0x85D5422B2039A70Du64, entity);
    } // 0x85D5422B2039A70D  b2189
    pub unsafe fn force_activating_tracking_on_entity(p_0: Any, p_1: Any) {
        call_native!(Void, 0x38C1CB1CB119A016u64, p_0, p_1);
    } // 0x38C1CB1CB119A016  b1493
    pub unsafe fn force_room_for_game_viewport(interior_i_d: i32, room_hash_key: Hash) {
        call_native!(Void, 0x920D853F3E17F1DAu64, interior_i_d, room_hash_key);
    } // 0x920D853F3E17F1DA 0xD79803B5 b323
    pub unsafe fn set_room_for_game_viewport_by_name(room_name: *const i8) {
        call_native!(Void, 0xAF348AFCB575A441u64, room_name);
    } // 0xAF348AFCB575A441 0x1F6B4B13 b323
    pub unsafe fn set_room_for_game_viewport_by_key(room_hash_key: Hash) {
        call_native!(Void, 0x405DC2AEF6AF95B9u64, room_hash_key);
    } // 0x405DC2AEF6AF95B9 0x0E9529CC b323
    pub unsafe fn get_room_key_for_game_viewport() -> Hash {
        call_native!(Hash, 0xA6575914D2A0B450u64)
    } // 0xA6575914D2A0B450 0x4FF3D3F5 b323
    pub unsafe fn clear_room_for_game_viewport() {
        call_native!(Void, 0x23B59D8912F94246u64);
    } // 0x23B59D8912F94246 0x617DC75D b323
    pub unsafe fn get_interior_from_primary_view() -> Interior {
        call_native!(Interior, 0xE7D267EC6CA966C3u64)
    } // 0xE7D267EC6CA966C3 0xA83C3D15 b1604
    pub unsafe fn get_interior_at_coords(x: f32, y: f32, z: f32) -> Interior {
        call_native!(Interior, 0xB0F7F8663821D9C3u64, x, y, z)
    } // 0xB0F7F8663821D9C3 0xA17FBF37 b323
    pub unsafe fn add_pickup_to_interior_room_by_name(pickup: Pickup, room_name: *const i8) {
        call_native!(Void, 0x3F6167F351168730u64, pickup, room_name);
    } // 0x3F6167F351168730 0xA2A73564 b323
    pub unsafe fn pin_interior_in_memory(interior: Interior) {
        call_native!(Void, 0x2CA429C029CCF247u64, interior);
    } // 0x2CA429C029CCF247 0x3ADA414E b323
    pub unsafe fn unpin_interior(interior: Interior) {
        call_native!(Void, 0x261CCE7EED010641u64, interior);
    } // 0x261CCE7EED010641 0xFCFF792A b323
    pub unsafe fn is_interior_ready(interior: Interior) -> bool {
        call_native!(bool, 0x6726BDCCC1932F0Eu64, interior)
    } // 0x6726BDCCC1932F0E 0xE1EF6450 b323
    pub unsafe fn set_interior_in_use(interior: Interior) -> bool {
        call_native!(bool, 0x4C2330E61D3DEB56u64, interior)
    } // 0x4C2330E61D3DEB56  b323
    pub unsafe fn get_interior_at_coords_with_type(
        x: f32,
        y: f32,
        z: f32,
        interior_type: *const i8,
    ) -> Interior {
        call_native!(Interior, 0x05B7A89BD78797FCu64, x, y, z, interior_type)
    } // 0x05B7A89BD78797FC 0x96525B06 b323
    pub unsafe fn get_interior_at_coords_with_typehash(
        x: f32,
        y: f32,
        z: f32,
        type_hash: Hash,
    ) -> Interior {
        call_native!(Interior, 0xF0F77ADB9F67E79Du64, x, y, z, type_hash)
    } // 0xF0F77ADB9F67E79D 0x11718507 b323
    pub unsafe fn activate_interior_groups_using_camera() {
        call_native!(Void, 0x483ACA1176CA93F1u64);
    } // 0x483ACA1176CA93F1  b1103
    pub unsafe fn is_collision_marked_outside(x: f32, y: f32, z: f32) -> bool {
        call_native!(bool, 0xEEA5AC2EDA7C33E8u64, x, y, z)
    } // 0xEEA5AC2EDA7C33E8 0x7762249C b323
    pub unsafe fn get_interior_from_collision(x: f32, y: f32, z: f32) -> Interior {
        call_native!(Interior, 0xEC4CF9FCB29A4424u64, x, y, z)
    } // 0xEC4CF9FCB29A4424 0x7ED33DC1 b323
    pub unsafe fn enable_stadium_probes_this_frame(toggle: bool) {
        call_native!(Void, 0x7ECDF98587E92DECu64, toggle);
    } // 0x7ECDF98587E92DEC  b1604
    pub unsafe fn activate_interior_entity_set(interior: Interior, entity_set_name: *const i8) {
        call_native!(Void, 0x55E86AF2712B36A1u64, interior, entity_set_name);
    } // 0x55E86AF2712B36A1 0xC80A5DDF b323
    pub unsafe fn deactivate_interior_entity_set(interior: Interior, entity_set_name: *const i8) {
        call_native!(Void, 0x420BD37289EEE162u64, interior, entity_set_name);
    } // 0x420BD37289EEE162 0xDBA768A1 b323
    pub unsafe fn is_interior_entity_set_active(
        interior: Interior,
        entity_set_name: *const i8,
    ) -> bool {
        call_native!(bool, 0x35F7DD45E8C0A16Du64, interior, entity_set_name)
    } // 0x35F7DD45E8C0A16D 0x39A3CC6F b323
    pub unsafe fn set_interior_entity_set_tint_index(
        interior: Interior,
        entity_set_name: *const i8,
        color: i32,
    ) {
        call_native!(
            Void,
            0xC1F1920BAF281317u64,
            interior,
            entity_set_name,
            color
        );
    } // 0xC1F1920BAF281317  b877
    pub unsafe fn refresh_interior(interior: Interior) {
        call_native!(Void, 0x41F37C3427C75AE0u64, interior);
    } // 0x41F37C3427C75AE0 0x9A29ACE6 b323
    pub unsafe fn enable_exterior_cull_model_this_frame(map_object_hash: Hash) {
        call_native!(Void, 0xA97F257D0151A6ABu64, map_object_hash);
    } // 0xA97F257D0151A6AB 0x1F375B4C b323
    pub unsafe fn enable_shadow_cull_model_this_frame(map_object_hash: Hash) {
        call_native!(Void, 0x50C375537449F369u64, map_object_hash);
    } // 0x50C375537449F369  b757
    pub unsafe fn disable_interior(interior: Interior, toggle: bool) {
        call_native!(Void, 0x6170941419D7D8ECu64, interior, toggle);
    } // 0x6170941419D7D8EC 0x093ADEA5 b323
    pub unsafe fn is_interior_disabled(interior: Interior) -> bool {
        call_native!(bool, 0xBC5115A5A939DD15u64, interior)
    } // 0xBC5115A5A939DD15 0x81F34C71 b323
    pub unsafe fn cap_interior(interior: Interior, toggle: bool) {
        call_native!(Void, 0xD9175F941610DB54u64, interior, toggle);
    } // 0xD9175F941610DB54 0x34E735A6 b323
    pub unsafe fn is_interior_capped(interior: Interior) -> bool {
        call_native!(bool, 0x92BAC8ACF88CEC26u64, interior)
    } // 0x92BAC8ACF88CEC26 0x18B17C80 b323
    pub unsafe fn disable_metro_system(toggle: bool) {
        call_native!(Void, 0x9E6542F0CE8E70A3u64, toggle);
    } // 0x9E6542F0CE8E70A3 0x5EF9C5C2 b323
    pub unsafe fn set_is_exterior_only(entity: Entity, toggle: bool) {
        call_native!(Void, 0x7241CCB7D020DB69u64, entity, toggle);
    } // 0x7241CCB7D020DB69  b791
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod itemset {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn create_itemset(p_0: bool) -> ScrHandle {
        call_native!(ScrHandle, 0x35AD299F50D91B24u64, p_0)
    } // 0x35AD299F50D91B24 0x0A113B2C b323
    pub unsafe fn destroy_itemset(itemset: ScrHandle) {
        call_native!(Void, 0xDE18220B1C183EDAu64, itemset);
    } // 0xDE18220B1C183EDA 0x83CE1A4C b323
    pub unsafe fn is_itemset_valid(itemset: ScrHandle) -> bool {
        call_native!(bool, 0xB1B1EA596344DFABu64, itemset)
    } // 0xB1B1EA596344DFAB 0xD201FC29 b323
    pub unsafe fn add_to_itemset(item: ScrHandle, itemset: ScrHandle) -> bool {
        call_native!(bool, 0xE3945201F14637DDu64, item, itemset)
    } // 0xE3945201F14637DD 0x6B0FE61B b323
    pub unsafe fn remove_from_itemset(item: ScrHandle, itemset: ScrHandle) {
        call_native!(Void, 0x25E68244B0177686u64, item, itemset);
    } // 0x25E68244B0177686 0xA9565228 b323
    pub unsafe fn get_itemset_size(itemset: ScrHandle) -> i32 {
        call_native!(i32, 0xD9127E83ABF7C631u64, itemset)
    } // 0xD9127E83ABF7C631 0x2B31F41A b323
    pub unsafe fn get_indexed_item_in_itemset(index: i32, itemset: ScrHandle) -> ScrHandle {
        call_native!(ScrHandle, 0x7A197E2521EE2BABu64, index, itemset)
    } // 0x7A197E2521EE2BAB 0x3F712874 b323
    pub unsafe fn is_in_itemset(item: ScrHandle, itemset: ScrHandle) -> bool {
        call_native!(bool, 0x2D0FC594D1E9C107u64, item, itemset)
    } // 0x2D0FC594D1E9C107 0x0D4B9730 b323
    pub unsafe fn clean_itemset(itemset: ScrHandle) {
        call_native!(Void, 0x41BC0D722FC04221u64, itemset);
    } // 0x41BC0D722FC04221 0x919A4858 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod loadingscreen {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn lobby_auto_multiplayer_menu() -> bool {
        call_native!(bool, 0xF2CA003F167E21D2u64)
    } // 0xF2CA003F167E21D2 0x106C8317 b323
    pub unsafe fn lobby_auto_multiplayer_freemode() -> bool {
        call_native!(bool, 0xEF7D17BC6C85264Cu64)
    } // 0xEF7D17BC6C85264C 0xD87F3A9E b323
    pub unsafe fn lobby_set_auto_multiplayer(toggle: bool) {
        call_native!(Void, 0xB0C56BD3D808D863u64, toggle);
    } // 0xB0C56BD3D808D863 0xC0B971EA b323
    pub unsafe fn lobby_auto_multiplayer_event() -> bool {
        call_native!(bool, 0x8AA464D4E0F6ACCDu64)
    } // 0x8AA464D4E0F6ACCD 0x94BCAC7C b323
    pub unsafe fn lobby_set_auto_multiplayer_event(toggle: bool) {
        call_native!(Void, 0xFC309E94546FCDB5u64, toggle);
    } // 0xFC309E94546FCDB5 0x7D90EEE5 b323
    pub unsafe fn lobby_auto_multiplayer_random_job() -> bool {
        call_native!(bool, 0xC6DC823253FBB366u64)
    } // 0xC6DC823253FBB366 0x734CFEDA b323
    pub unsafe fn lobby_set_auto_mp_random_job(toggle: bool) {
        call_native!(Void, 0xC7E7181C09F33B69u64, toggle);
    } // 0xC7E7181C09F33B69 0x8C227332 b323
    pub unsafe fn shutdown_session_clears_auto_multiplayer(toggle: bool) {
        call_native!(Void, 0xFA1E0E893D915215u64, toggle);
    } // 0xFA1E0E893D915215 0x5C350D78 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod localization {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn localization_get_system_language() -> i32 {
        call_native!(i32, 0x497420E022796B3Fu64)
    } // 0x497420E022796B3F  b877
    pub unsafe fn get_current_language() -> i32 {
        call_native!(i32, 0x2BDD44CC428A7EAEu64)
    } // 0x2BDD44CC428A7EAE 0x761BE00B b323
    pub unsafe fn localization_get_system_date_type() -> i32 {
        call_native!(i32, 0xA8AE43AEC1A61314u64)
    } // 0xA8AE43AEC1A61314  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod misc {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_allocated_stack_size() -> i32 {
        call_native!(i32, 0x8B3CA62B1EF19B62u64)
    } // 0x8B3CA62B1EF19B62 0x4E9CA30A b323
    pub unsafe fn get_number_of_free_stacks_of_this_size(stack_size: i32) -> i32 {
        call_native!(i32, 0xFEAD16FC8F9DFC0Fu64, stack_size)
    } // 0xFEAD16FC8F9DFC0F 0x11A178B8 b323
    pub unsafe fn set_random_seed(seed: i32) {
        call_native!(Void, 0x444D98F98C11F3ECu64, seed);
    } // 0x444D98F98C11F3EC 0xDB3FEB5C b323
    pub unsafe fn set_time_scale(time_scale: f32) {
        call_native!(Void, 0x1D408577D440E81Eu64, time_scale);
    } // 0x1D408577D440E81E 0xA7F84694 b323
    pub unsafe fn set_mission_flag(toggle: bool) {
        call_native!(Void, 0xC4301E5121A0ED73u64, toggle);
    } // 0xC4301E5121A0ED73 0x57592D52 b323
    pub unsafe fn get_mission_flag() -> bool {
        call_native!(bool, 0xA33CDCCDA663159Eu64)
    } // 0xA33CDCCDA663159E 0x95115F97 b323
    pub unsafe fn set_random_event_flag(toggle: bool) {
        call_native!(Void, 0x971927086CFD2158u64, toggle);
    } // 0x971927086CFD2158 0xA77F31E8 b323
    pub unsafe fn get_random_event_flag() -> bool {
        call_native!(bool, 0xD2D57F1D764117B1u64)
    } // 0xD2D57F1D764117B1 0x794CC92C b323
    pub unsafe fn get_content_to_load() -> *const i8 {
        call_native!(*const i8, 0x24DA7D7667FD7B09u64)
    } // 0x24DA7D7667FD7B09  b323
    pub unsafe fn activity_feed_create(p_0: *const i8, p_1: *const i8) {
        call_native!(Void, 0x4DCDF92BF64236CDu64, p_0, p_1);
    } // 0x4DCDF92BF64236CD  b323
    pub unsafe fn activity_feed_add_substring_to_caption(p_0: *const i8) {
        call_native!(Void, 0x31125FD509D9043Fu64, p_0);
    } // 0x31125FD509D9043F  b323
    pub unsafe fn activity_feed_add_literal_substring_to_caption(p_0: *const i8) {
        call_native!(Void, 0xEBD3205A207939EDu64, p_0);
    } // 0xEBD3205A207939ED  b323
    pub unsafe fn activity_feed_add_int_to_caption(p_0: Any) {
        call_native!(Void, 0x97E7E2C04245115Bu64, p_0);
    } // 0x97E7E2C04245115B  b323
    pub unsafe fn activity_feed_large_image_url(p_0: *const i8) {
        call_native!(Void, 0x916CA67D26FD1E37u64, p_0);
    } // 0x916CA67D26FD1E37  b2060
    pub unsafe fn activity_feed_action_start_with_command_line(p_0: *const i8, p_1: *const i8) {
        call_native!(Void, 0xEB078CA2B5E82ADDu64, p_0, p_1);
    } // 0xEB078CA2B5E82ADD  b323
    pub unsafe fn activity_feed_action_start_with_command_line_add(p_0: *const i8) {
        call_native!(Void, 0x703CC7F60CBB2B57u64, p_0);
    } // 0x703CC7F60CBB2B57  b323
    pub unsafe fn activity_feed_post() {
        call_native!(Void, 0x8951EB9C6906D3C8u64);
    } // 0x8951EB9C6906D3C8  b323
    pub unsafe fn activity_feed_online_played_with_post(p_0: *const i8) {
        call_native!(Void, 0xBA4B8D83BDC75551u64, p_0);
    } // 0xBA4B8D83BDC75551  b323
    pub unsafe fn has_resumed_from_suspend() -> bool {
        call_native!(bool, 0xE8B9C0EC9E183F35u64)
    } // 0xE8B9C0EC9E183F35  b323
    pub unsafe fn set_script_high_prio(toggle: bool) {
        call_native!(Void, 0x65D2EBB47E1CEC21u64, toggle);
    } // 0x65D2EBB47E1CEC21  b323
    pub unsafe fn set_this_is_a_trigger_script(toggle: bool) {
        call_native!(Void, 0x6F2135B6129620C1u64, toggle);
    } // 0x6F2135B6129620C1 0x8B2DE971 b323
    pub unsafe fn inform_code_of_content_id_of_current_ugc_mission(p_0: *const i8) {
        call_native!(Void, 0x8D74E26F54B4E5C3u64, p_0);
    } // 0x8D74E26F54B4E5C3 0xE77199F7 b323
    pub unsafe fn get_base_element_location_from_metadata_block(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: Any,
        p_3: bool,
    ) -> bool {
        call_native!(bool, 0xB335F761606DB47Cu64, p_0, p_1, p_2, p_3)
    } // 0xB335F761606DB47C  b323
    pub unsafe fn get_prev_weather_type_hash_name() -> Hash {
        call_native!(Hash, 0x564B884A05EC45A3u64)
    } // 0x564B884A05EC45A3 0xA8171E9E b323
    pub unsafe fn get_next_weather_type_hash_name() -> Hash {
        call_native!(Hash, 0x711327CD09C8F162u64)
    } // 0x711327CD09C8F162 0x353E8056 b323
    pub unsafe fn is_prev_weather_type(weather_type: *const i8) -> bool {
        call_native!(bool, 0x44F28F86433B10A9u64, weather_type)
    } // 0x44F28F86433B10A9 0x250ADA61 b323
    pub unsafe fn is_next_weather_type(weather_type: *const i8) -> bool {
        call_native!(bool, 0x2FAA3A30BEC0F25Du64, weather_type)
    } // 0x2FAA3A30BEC0F25D 0x99CB167F b323
    pub unsafe fn set_weather_type_persist(weather_type: *const i8) {
        call_native!(Void, 0x704983DF373B198Fu64, weather_type);
    } // 0x704983DF373B198F 0xC6C04C75 b323
    pub unsafe fn set_weather_type_now_persist(weather_type: *const i8) {
        call_native!(Void, 0xED712CA327900C8Au64, weather_type);
    } // 0xED712CA327900C8A 0xC869FE97 b323
    pub unsafe fn set_weather_type_now(weather_type: *const i8) {
        call_native!(Void, 0x29B487C359E19889u64, weather_type);
    } // 0x29B487C359E19889 0x361E9EAC b323
    pub unsafe fn set_weather_type_overtime_persist(weather_type: *const i8, time: f32) {
        call_native!(Void, 0xFB5045B7C42B75BFu64, weather_type, time);
    } // 0xFB5045B7C42B75BF 0x386F0D25 b323
    pub unsafe fn set_random_weather_type() {
        call_native!(Void, 0x8B05F884CF7E8020u64);
    } // 0x8B05F884CF7E8020 0xE7AA1BC9 b323
    pub unsafe fn clear_weather_type_persist() {
        call_native!(Void, 0xCCC39339BEF76CF5u64);
    } // 0xCCC39339BEF76CF5 0x6AB757D8 b323
    pub unsafe fn clear_weather_type_now_persist_network(milliseconds: i32) {
        call_native!(Void, 0x0CF97F497FE7D048u64, milliseconds);
    } // 0x0CF97F497FE7D048  b1103
    pub unsafe fn get_curr_weather_state(
        weather_type_1: *mut Hash,
        weather_type_2: *mut Hash,
        percent_weather_2: *mut f32,
    ) {
        call_native!(
            Void,
            0xF3BBE884A14BB413u64,
            weather_type_1,
            weather_type_2,
            percent_weather_2
        );
    } // 0xF3BBE884A14BB413 0x9A5C1D56 b323
    pub unsafe fn set_curr_weather_state(
        weather_type_1: Hash,
        weather_type_2: Hash,
        percent_weather_2: f32,
    ) {
        call_native!(
            Void,
            0x578C752848ECFA0Cu64,
            weather_type_1,
            weather_type_2,
            percent_weather_2
        );
    } // 0x578C752848ECFA0C 0x5CA74040 b323
    pub unsafe fn set_override_weather(weather_type: *const i8) {
        call_native!(Void, 0xA43D5C6FE51ADBEFu64, weather_type);
    } // 0xA43D5C6FE51ADBEF 0xD9082BB5 b323
    pub unsafe fn set_override_weatherex(weather_type: *const i8, p_1: bool) {
        call_native!(Void, 0x1178E104409FE58Cu64, weather_type, p_1);
    } // 0x1178E104409FE58C  b2189
    pub unsafe fn clear_override_weather() {
        call_native!(Void, 0x338D2E3477711050u64);
    } // 0x338D2E3477711050 0x7740EA4E b323
    pub unsafe fn water_override_set_shorewaveamplitude(amplitude: f32) {
        call_native!(Void, 0xB8F87EAD7533B176u64, amplitude);
    } // 0xB8F87EAD7533B176 0x625181DC b323
    pub unsafe fn water_override_set_shorewaveminamplitude(min_amplitude: f32) {
        call_native!(Void, 0xC3EAD29AB273ECE8u64, min_amplitude);
    } // 0xC3EAD29AB273ECE8 0xBEBBFDC8 b323
    pub unsafe fn water_override_set_shorewavemaxamplitude(max_amplitude: f32) {
        call_native!(Void, 0xA7A1127490312C36u64, max_amplitude);
    } // 0xA7A1127490312C36 0x6926AB03 b323
    pub unsafe fn water_override_set_oceannoiseminamplitude(min_amplitude: f32) {
        call_native!(Void, 0x31727907B2C43C55u64, min_amplitude);
    } // 0x31727907B2C43C55 0xD447439D b323
    pub unsafe fn water_override_set_oceanwaveamplitude(amplitude: f32) {
        call_native!(Void, 0x405591EC8FD9096Du64, amplitude);
    } // 0x405591EC8FD9096D 0x584E9C59 b323
    pub unsafe fn water_override_set_oceanwaveminamplitude(min_amplitude: f32) {
        call_native!(Void, 0xF751B16FB32ABC1Du64, min_amplitude);
    } // 0xF751B16FB32ABC1D 0x5656D578 b323
    pub unsafe fn water_override_set_oceanwavemaxamplitude(max_amplitude: f32) {
        call_native!(Void, 0xB3E6360DDE733E82u64, max_amplitude);
    } // 0xB3E6360DDE733E82 0x0DE40C28 b323
    pub unsafe fn water_override_set_ripplebumpiness(bumpiness: f32) {
        call_native!(Void, 0x7C9C0B1EEB1F9072u64, bumpiness);
    } // 0x7C9C0B1EEB1F9072 0x98C9138B b323
    pub unsafe fn water_override_set_rippleminbumpiness(min_bumpiness: f32) {
        call_native!(Void, 0x6216B116083A7CB4u64, min_bumpiness);
    } // 0x6216B116083A7CB4 0xFB1A9CDE b323
    pub unsafe fn water_override_set_ripplemaxbumpiness(max_bumpiness: f32) {
        call_native!(Void, 0x9F5E6BB6B34540DAu64, max_bumpiness);
    } // 0x9F5E6BB6B34540DA 0x1C0CAE89 b323
    pub unsafe fn water_override_set_rippledisturb(disturb: f32) {
        call_native!(Void, 0xB9854DFDE0D833D6u64, disturb);
    } // 0xB9854DFDE0D833D6 0x4671AC2E b323
    pub unsafe fn water_override_set_strength(strength: f32) {
        call_native!(Void, 0xC54A08C85AE4D410u64, strength);
    } // 0xC54A08C85AE4D410 0xDA02F415 b323
    pub unsafe fn water_override_fade_in(p_0: f32) {
        call_native!(Void, 0xA8434F1DFF41D6E7u64, p_0);
    } // 0xA8434F1DFF41D6E7 0x5F3DDEC0 b323
    pub unsafe fn water_override_fade_out(p_0: f32) {
        call_native!(Void, 0xC3C221ADDDE31A11u64, p_0);
    } // 0xC3C221ADDDE31A11 0x63A89684 b323
    pub unsafe fn set_wind(speed: f32) {
        call_native!(Void, 0xAC3A74E8384A9919u64, speed);
    } // 0xAC3A74E8384A9919 0xC6294698 b323
    pub unsafe fn set_wind_speed(speed: f32) {
        call_native!(Void, 0xEE09ECEDBABE47FCu64, speed);
    } // 0xEE09ECEDBABE47FC 0x45705F94 b323
    pub unsafe fn get_wind_speed() -> f32 {
        call_native!(f32, 0xA8CF1CC0AFCD3F12u64)
    } // 0xA8CF1CC0AFCD3F12 0x098F0F3C b323
    pub unsafe fn set_wind_direction(direction: f32) {
        call_native!(Void, 0xEB0F4468467B4528u64, direction);
    } // 0xEB0F4468467B4528 0x381AEEE9 b323
    pub unsafe fn get_wind_direction() -> Vector3 {
        call_native!(Vector3, 0x1F400FEF721170DAu64)
    } // 0x1F400FEF721170DA 0x89499A0D b323
    pub unsafe fn set_rain(intensity: f32) {
        call_native!(Void, 0x643E26EA6E024D92u64, intensity);
    } // 0x643E26EA6E024D92  b323
    pub unsafe fn get_rain_level() -> f32 {
        call_native!(f32, 0x96695E368AD855F3u64)
    } // 0x96695E368AD855F3 0xC9F67F28 b323
    pub unsafe fn set_snow(level: f32) {
        call_native!(Void, 0x7F06937B0CDCBC1Au64, level);
    } // 0x7F06937B0CDCBC1A  b1868
    pub unsafe fn get_snow_level() -> f32 {
        call_native!(f32, 0xC5868A966E5BE3AEu64)
    } // 0xC5868A966E5BE3AE 0x1B09184F b323
    pub unsafe fn force_lightning_flash() {
        call_native!(Void, 0xF6062E089251C898u64);
    } // 0xF6062E089251C898 0xDF38165E b323
    pub unsafe fn set_cloud_settings_override(p_0: *const i8) {
        call_native!(Void, 0x02DEAAC8F8EA7FE7u64, p_0);
    } // 0x02DEAAC8F8EA7FE7  b323
    pub unsafe fn preload_cloud_hat(name: *const i8) {
        call_native!(Void, 0x11B56FBBF7224868u64, name);
    } // 0x11B56FBBF7224868 0x8727A4C5 b323
    pub unsafe fn load_cloud_hat(name: *const i8, transition_time: f32) {
        call_native!(Void, 0xFC4842A34657BFCBu64, name, transition_time);
    } // 0xFC4842A34657BFCB 0xED88FC61 b323
    pub unsafe fn unload_cloud_hat(name: *const i8, p_1: f32) {
        call_native!(Void, 0xA74802FB8D0B7814u64, name, p_1);
    } // 0xA74802FB8D0B7814 0xC9FA6E07 b323
    pub unsafe fn unload_all_cloud_hats() {
        call_native!(Void, 0x957E790EA1727B64u64);
    } // 0x957E790EA1727B64 0x2D7787BC b323
    pub unsafe fn set_clouds_alpha(opacity: f32) {
        call_native!(Void, 0xF36199225D6D8C86u64, opacity);
    } // 0xF36199225D6D8C86  b323
    pub unsafe fn get_clouds_alpha() -> f32 {
        call_native!(f32, 0x20AC25E781AE4A84u64)
    } // 0x20AC25E781AE4A84  b323
    pub unsafe fn get_game_timer() -> i32 {
        call_native!(i32, 0x9CD27B0045628463u64)
    } // 0x9CD27B0045628463 0xA4EA0691 b323
    pub unsafe fn get_frame_time() -> f32 {
        call_native!(f32, 0x15C40837039FFAF7u64)
    } // 0x15C40837039FFAF7 0x96374262 b323
    pub unsafe fn get_system_time_step() -> f32 {
        call_native!(f32, 0xE599A503B3837E1Bu64)
    } // 0xE599A503B3837E1B  b323
    pub unsafe fn get_frame_count() -> i32 {
        call_native!(i32, 0xFC8202EFC642E6F2u64)
    } // 0xFC8202EFC642E6F2 0xB477A015 b323
    pub unsafe fn get_random_float_in_range(start_range: f32, end_range: f32) -> f32 {
        call_native!(f32, 0x313CE5879CEB6FCDu64, start_range, end_range)
    } // 0x313CE5879CEB6FCD 0x0562C4D0 b323
    pub unsafe fn get_random_int_in_range(start_range: i32, end_range: i32) -> i32 {
        call_native!(i32, 0xD53343AA4FB7DD28u64, start_range, end_range)
    } // 0xD53343AA4FB7DD28 0x4051115B b323
    pub unsafe fn get_random_mwc_int_in_range(start_range: i32, end_range: i32) -> i32 {
        call_native!(i32, 0xF2D49816A804D134u64, start_range, end_range)
    } // 0xF2D49816A804D134  b1734
    pub unsafe fn get_ground_z_for_3d_coord(
        x: f32,
        y: f32,
        z: f32,
        ground_z: *mut f32,
        ignore_water: bool,
        p_5: bool,
    ) -> bool {
        call_native!(
            bool,
            0xC906A7DAB05C8D2Bu64,
            x,
            y,
            z,
            ground_z,
            ignore_water,
            p_5
        )
    } // 0xC906A7DAB05C8D2B 0xA1BFD5E0 b323
    pub unsafe fn get_ground_z_and_normal_for_3d_coord(
        x: f32,
        y: f32,
        z: f32,
        ground_z: *mut f32,
        normal: *mut Vector3,
    ) -> bool {
        call_native!(bool, 0x8BDC7BFC57A81E76u64, x, y, z, ground_z, normal)
    } // 0x8BDC7BFC57A81E76 0x64D91CED b323
    pub unsafe fn get_ground_z_excluding_objects_for_3d_coord(
        x: f32,
        y: f32,
        z: f32,
        ground_z: *mut f32,
        p_4: bool,
        p_5: bool,
    ) -> bool {
        call_native!(bool, 0x9E82F0F362881B29u64, x, y, z, ground_z, p_4, p_5)
    } // 0x9E82F0F362881B29  b505
    pub unsafe fn asin(p_0: f32) -> f32 {
        call_native!(f32, 0xC843060B5765DCE7u64, p_0)
    } // 0xC843060B5765DCE7 0x998E5CAD b323
    pub unsafe fn acos(p_0: f32) -> f32 {
        call_native!(f32, 0x1D08B970013C34B6u64, p_0)
    } // 0x1D08B970013C34B6 0xF4038776 b323
    pub unsafe fn tan(p_0: f32) -> f32 {
        call_native!(f32, 0x632106CC96E82E91u64, p_0)
    } // 0x632106CC96E82E91 0xD320CE5E b323
    pub unsafe fn atan(p_0: f32) -> f32 {
        call_native!(f32, 0xA9D1795CD5043663u64, p_0)
    } // 0xA9D1795CD5043663 0x7A03CC8E b323
    pub unsafe fn atan2(p_0: f32, p_1: f32) -> f32 {
        call_native!(f32, 0x8927CBF9D22261A4u64, p_0, p_1)
    } // 0x8927CBF9D22261A4 0x2508AC81 b323
    pub unsafe fn get_distance_between_coords(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        use_z: bool,
    ) -> f32 {
        call_native!(
            f32,
            0xF1B760881820C952u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            use_z
        )
    } // 0xF1B760881820C952 0xF698765E b323
    pub unsafe fn get_angle_between_2d_vectors(x_1: f32, y_1: f32, x_2: f32, y_2: f32) -> f32 {
        call_native!(f32, 0x186FC4BE848E1C92u64, x_1, y_1, x_2, y_2)
    } // 0x186FC4BE848E1C92 0xDBF75E58 b323
    pub unsafe fn get_heading_from_vector_2d(dx: f32, dy: f32) -> f32 {
        call_native!(f32, 0x2FFB6B224F4B2926u64, dx, dy)
    } // 0x2FFB6B224F4B2926 0xD209D52B b323
    pub unsafe fn get_ratio_of_closest_point_on_line(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        clamp: bool,
    ) -> f32 {
        call_native!(
            f32,
            0x7F8F6405F4777AF6u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            clamp
        )
    } // 0x7F8F6405F4777AF6 0x89459F0A b323
    pub unsafe fn get_closest_point_on_line(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        clamp: bool,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x21C235BC64831E5Au64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            clamp
        )
    } // 0x21C235BC64831E5A 0xCAECF37E b323
    pub unsafe fn get_line_plane_intersection(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        p_1_0: f32,
        p_1_1: f32,
        p_1_2: *mut f32,
    ) -> bool {
        call_native!(
            bool,
            0xF56DFB7B61BE7276u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2
        )
    } // 0xF56DFB7B61BE7276 0xC6CC812C b323
    pub unsafe fn get_point_area_overlap(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
        p_1_0: Any,
        p_1_1: Any,
        p_1_2: Any,
        p_1_3: Any,
    ) -> bool {
        call_native!(
            bool,
            0xA0AD167E4B39D9A2u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3
        )
    } // 0xA0AD167E4B39D9A2  b2189
    pub unsafe fn set_bit(address: *mut i32, offset: i32) {
        call_native!(Void, 0x933D6A9EEC1BACD0u64, address, offset);
    } // 0x933D6A9EEC1BACD0 0x4EFE7E6B b323
    pub unsafe fn clear_bit(address: *mut i32, offset: i32) {
        call_native!(Void, 0xE80492A9AC099A93u64, address, offset);
    } // 0xE80492A9AC099A93 0x8BC9E618 b323
    pub unsafe fn get_hash_key(string: *const i8) -> Hash {
        call_native!(Hash, 0xD24D37CC275948CCu64, string)
    } // 0xD24D37CC275948CC 0x98EFF6F1 b323
    pub unsafe fn slerp_near_quaternion(
        t: f32,
        x: f32,
        y: f32,
        z: f32,
        w: f32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        w_1: f32,
        out_x: *mut f32,
        out_y: *mut f32,
        out_z: *mut f32,
        out_w: *mut f32,
    ) {
        call_native!(
            Void,
            0xF2F6A2FA49278625u64,
            t,
            x,
            y,
            z,
            w,
            x_1,
            y_1,
            z_1,
            w_1,
            out_x,
            out_y,
            out_z,
            out_w
        );
    } // 0xF2F6A2FA49278625 0x87B92190 b323
    pub unsafe fn is_area_occupied(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: bool,
        p_7: bool,
        p_8: bool,
        p_9: bool,
        p_1_0: bool,
        p_1_1: Any,
        p_1_2: bool,
    ) -> bool {
        call_native!(
            bool,
            0xA61B4DF533DCB56Eu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2
        )
    } // 0xA61B4DF533DCB56E 0xC013972F b323
    pub unsafe fn is_area_occupied_slow(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
        p_1_0: Any,
        p_1_1: Any,
        p_1_2: Any,
    ) -> bool {
        call_native!(
            bool,
            0x39455BF4F4F55186u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2
        )
    } // 0x39455BF4F4F55186  b1868
    pub unsafe fn is_position_occupied(
        x: f32,
        y: f32,
        z: f32,
        range: f32,
        p_4: bool,
        check_vehicles: bool,
        check_peds: bool,
        p_7: bool,
        p_8: bool,
        ignore_entity: Entity,
        p_1_0: bool,
    ) -> bool {
        call_native!(
            bool,
            0xADCDE75E1C60F32Du64,
            x,
            y,
            z,
            range,
            p_4,
            check_vehicles,
            check_peds,
            p_7,
            p_8,
            ignore_entity,
            p_1_0
        )
    } // 0xADCDE75E1C60F32D 0x452E8D9E b323
    pub unsafe fn is_point_obscured_by_a_mission_entity(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: Any,
    ) -> bool {
        call_native!(
            bool,
            0xE54E209C35FFA18Du64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0xE54E209C35FFA18D 0xC161558D b323
    pub unsafe fn clear_area(
        _x: f32,
        _y: f32,
        _z: f32,
        radius: f32,
        p_4: bool,
        ignore_cop_cars: bool,
        ignore_objects: bool,
        p_7: bool,
    ) {
        call_native!(
            Void,
            0xA56F01F3765B93A0u64,
            _x,
            _y,
            _z,
            radius,
            p_4,
            ignore_cop_cars,
            ignore_objects,
            p_7
        );
    } // 0xA56F01F3765B93A0 0x854E9AB8 b323
    pub unsafe fn clear_area_leave_vehicle_health(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: bool,
        p_5: bool,
        p_6: bool,
        p_7: bool,
    ) {
        call_native!(
            Void,
            0x957838AAF91BD12Du64,
            x,
            y,
            z,
            radius,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0x957838AAF91BD12D 0x20E4FFD9 b323
    pub unsafe fn clear_area_of_vehicles(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: bool,
        p_5: bool,
        p_6: bool,
        p_7: bool,
        p_8: bool,
        p_9: bool,
        p_1_0: Any,
    ) {
        call_native!(
            Void,
            0x01C7B9B38428AEB6u64,
            x,
            y,
            z,
            radius,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0x01C7B9B38428AEB6 0x63320F3C b323
    pub unsafe fn clear_angled_area_of_vehicles(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        p_7: bool,
        p_8: bool,
        p_9: bool,
        p_1_0: bool,
        p_1_1: bool,
        p_1_2: Any,
        p_1_3: Any,
    ) {
        call_native!(
            Void,
            0x11DB3500F042A8AAu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3
        );
    } // 0x11DB3500F042A8AA 0xF11A3018 b323
    pub unsafe fn clear_area_of_objects(x: f32, y: f32, z: f32, radius: f32, flags: i32) {
        call_native!(Void, 0xDD9B9B385AAC7F5Bu64, x, y, z, radius, flags);
    } // 0xDD9B9B385AAC7F5B 0xBB720FE7 b323
    pub unsafe fn clear_area_of_peds(x: f32, y: f32, z: f32, radius: f32, flags: i32) {
        call_native!(Void, 0xBE31FD6CE464AC59u64, x, y, z, radius, flags);
    } // 0xBE31FD6CE464AC59 0x25BE7FA8 b323
    pub unsafe fn clear_area_of_cops(x: f32, y: f32, z: f32, radius: f32, flags: i32) {
        call_native!(Void, 0x04F8FC8FCF58F88Du64, x, y, z, radius, flags);
    } // 0x04F8FC8FCF58F88D 0x95C53824 b323
    pub unsafe fn clear_area_of_projectiles(x: f32, y: f32, z: f32, radius: f32, flags: i32) {
        call_native!(Void, 0x0A1CB9094635D1A6u64, x, y, z, radius, flags);
    } // 0x0A1CB9094635D1A6 0x18DB5434 b323
    pub unsafe fn clear_scenario_spawn_history() {
        call_native!(Void, 0x7EC6F9A478A6A512u64);
    } // 0x7EC6F9A478A6A512  b323
    pub unsafe fn set_save_menu_active(ignore_vehicle: bool) {
        call_native!(Void, 0xC9BF75D28165FF77u64, ignore_vehicle);
    } // 0xC9BF75D28165FF77 0xF5CCF164 b323
    pub unsafe fn get_status_of_manual_save() -> i32 {
        call_native!(i32, 0x397BAA01068BAA96u64)
    } // 0x397BAA01068BAA96 0x39771F21 b323
    pub unsafe fn set_credits_active(toggle: bool) {
        call_native!(Void, 0xB938B7E6D3C0620Cu64, toggle);
    } // 0xB938B7E6D3C0620C 0xEC2A0ECF b323
    pub unsafe fn set_credits_fade_out_with_screen(toggle: bool) {
        call_native!(Void, 0xB51B9AB9EF81868Cu64, toggle);
    } // 0xB51B9AB9EF81868C 0x75B06B5A b323
    pub unsafe fn have_credits_reached_end() -> bool {
        call_native!(bool, 0x075F1D57402C93BAu64)
    } // 0x075F1D57402C93BA 0x2569C9A7 b323
    pub unsafe fn are_credits_running() -> bool {
        call_native!(bool, 0xD19C0826DC20CF1Cu64)
    } // 0xD19C0826DC20CF1C  b2802
    pub unsafe fn terminate_all_scripts_with_this_name(script_name: *const i8) {
        call_native!(Void, 0x9DC711BC69C548DFu64, script_name);
    } // 0x9DC711BC69C548DF 0x9F861FD4 b323
    pub unsafe fn network_set_script_is_safe_for_network_game() {
        call_native!(Void, 0x9243BAC96D64C050u64);
    } // 0x9243BAC96D64C050 0x878486CE b323
    pub unsafe fn add_hospital_restart(x: f32, y: f32, z: f32, p_3: f32, p_4: Any) -> i32 {
        call_native!(i32, 0x1F464EF988465A81u64, x, y, z, p_3, p_4)
    } // 0x1F464EF988465A81 0x4F3E3104 b323
    pub unsafe fn disable_hospital_restart(hospital_index: i32, toggle: bool) {
        call_native!(Void, 0xC8535819C450EBA8u64, hospital_index, toggle);
    } // 0xC8535819C450EBA8 0x09F49C72 b323
    pub unsafe fn add_police_restart(p_0: f32, p_1: f32, p_2: f32, p_3: f32, p_4: Any) -> i32 {
        call_native!(i32, 0x452736765B31FC4Bu64, p_0, p_1, p_2, p_3, p_4)
    } // 0x452736765B31FC4B 0xE96C29FE b323
    pub unsafe fn disable_police_restart(police_index: i32, toggle: bool) {
        call_native!(Void, 0x23285DED6EBD7EA3u64, police_index, toggle);
    } // 0x23285DED6EBD7EA3 0x0A280324 b323
    pub unsafe fn set_restart_coord_override(x: f32, y: f32, z: f32, heading: f32) {
        call_native!(Void, 0x706B5EDCAA7FA663u64, x, y, z, heading);
    } // 0x706B5EDCAA7FA663  b323
    pub unsafe fn clear_restart_coord_override() {
        call_native!(Void, 0xA2716D40842EAF79u64);
    } // 0xA2716D40842EAF79  b323
    pub unsafe fn pause_death_arrest_restart(toggle: bool) {
        call_native!(Void, 0x2C2B3493FBF51C71u64, toggle);
    } // 0x2C2B3493FBF51C71 0x296574AE b323
    pub unsafe fn ignore_next_restart(toggle: bool) {
        call_native!(Void, 0x21FFB63D8C615361u64, toggle);
    } // 0x21FFB63D8C615361 0xDA13A4B6 b323
    pub unsafe fn set_fade_out_after_death(toggle: bool) {
        call_native!(Void, 0x4A18E01DF2C87B86u64, toggle);
    } // 0x4A18E01DF2C87B86 0xC9F6F0BC b323
    pub unsafe fn set_fade_out_after_arrest(toggle: bool) {
        call_native!(Void, 0x1E0B4DC0D990A4E7u64, toggle);
    } // 0x1E0B4DC0D990A4E7 0xCB074B9D b323
    pub unsafe fn set_fade_in_after_death_arrest(toggle: bool) {
        call_native!(Void, 0xDA66D2796BA33F12u64, toggle);
    } // 0xDA66D2796BA33F12 0xACDE6985 b323
    pub unsafe fn set_fade_in_after_load(toggle: bool) {
        call_native!(Void, 0xF3D78F59DFE18D79u64, toggle);
    } // 0xF3D78F59DFE18D79 0x6E00EB0B b323
    pub unsafe fn register_save_house(
        x: f32,
        y: f32,
        z: f32,
        p_3: f32,
        p_4: *const i8,
        p_5: Any,
        p_6: Any,
    ) -> i32 {
        call_native!(i32, 0xC0714D0A7EEECA54u64, x, y, z, p_3, p_4, p_5, p_6)
    } // 0xC0714D0A7EEECA54 0x39C1849A b323
    pub unsafe fn set_save_house(savehouse_handle: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x4F548CABEAE553BCu64, savehouse_handle, p_1, p_2);
    } // 0x4F548CABEAE553BC 0xC3240BB4 b323
    pub unsafe fn override_save_house(
        p_0: bool,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: bool,
        p_6: f32,
        p_7: f32,
    ) -> bool {
        call_native!(
            bool,
            0x1162EA8AE9D24EEAu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        )
    } // 0x1162EA8AE9D24EEA 0x47436C12 b323
    pub unsafe fn get_save_house_details_after_successful_load(
        p_0: *mut Vector3,
        p_1: *mut f32,
        fade_in_after_load: *mut Bool,
        p_3: *mut Bool,
    ) -> bool {
        call_native!(
            bool,
            0xA4A0065E39C9F25Cu64,
            p_0,
            p_1,
            fade_in_after_load,
            p_3
        )
    } // 0xA4A0065E39C9F25C 0xC4D71AB4 b323
    pub unsafe fn do_auto_save() {
        call_native!(Void, 0x50EEAAD86232EE55u64);
    } // 0x50EEAAD86232EE55 0x54C44B1A b323
    pub unsafe fn get_is_auto_save_off() -> bool {
        call_native!(bool, 0x6E04F06094C87047u64)
    } // 0x6E04F06094C87047 0xA8546914 b323
    pub unsafe fn is_auto_save_in_progress() -> bool {
        call_native!(bool, 0x69240733738C19A0u64)
    } // 0x69240733738C19A0 0x36F75399 b323
    pub unsafe fn has_code_requested_autosave() -> bool {
        call_native!(bool, 0x2107A3773771186Du64)
    } // 0x2107A3773771186D 0x78350773 b323
    pub unsafe fn clear_code_requested_autosave() {
        call_native!(Void, 0x06462A961E94B67Cu64);
    } // 0x06462A961E94B67C 0x5A45B11A b323
    pub unsafe fn begin_replay_stats(p_0: Any, p_1: Any) {
        call_native!(Void, 0xE0E500246FF73D66u64, p_0, p_1);
    } // 0xE0E500246FF73D66 0x17F4F44D b323
    pub unsafe fn add_replay_stat_value(value: Any) {
        call_native!(Void, 0x69FE6DC87BD2A5E9u64, value);
    } // 0x69FE6DC87BD2A5E9 0x81216EE0 b323
    pub unsafe fn end_replay_stats() {
        call_native!(Void, 0xA23E821FBDF8A5F2u64);
    } // 0xA23E821FBDF8A5F2 0xCB570185 b323
    pub unsafe fn have_replay_stats_been_stored() -> bool {
        call_native!(bool, 0xD642319C54AADEB6u64)
    } // 0xD642319C54AADEB6 0xC58250F1 b323
    pub unsafe fn get_replay_stat_mission_id() -> i32 {
        call_native!(i32, 0x5B1F2E327B6B6FE1u64)
    } // 0x5B1F2E327B6B6FE1 0x50C39926 b323
    pub unsafe fn get_replay_stat_mission_type() -> i32 {
        call_native!(i32, 0x2B626A0150E4D449u64)
    } // 0x2B626A0150E4D449 0x710E5D1E b323
    pub unsafe fn get_replay_stat_count() -> i32 {
        call_native!(i32, 0xDC9274A7EF6B2867u64)
    } // 0xDC9274A7EF6B2867 0xC7BD1AF0 b323
    pub unsafe fn get_replay_stat_at_index(index: i32) -> i32 {
        call_native!(i32, 0x8098C8D6597AAE18u64, index)
    } // 0x8098C8D6597AAE18 0x22BE2423 b323
    pub unsafe fn clear_replay_stats() {
        call_native!(Void, 0x1B1AB132A16FDA55u64);
    } // 0x1B1AB132A16FDA55 0xC47DFF02 b323
    pub unsafe fn queue_mission_repeat_load() -> bool {
        call_native!(bool, 0x72DE52178C291CB5u64)
    } // 0x72DE52178C291CB5 0xF62B3C48 b323
    pub unsafe fn queue_mission_repeat_save() -> bool {
        call_native!(bool, 0x44A0BDC559B35F6Eu64)
    } // 0x44A0BDC559B35F6E 0x3589452B b323
    pub unsafe fn queue_mission_repeat_save_for_benchmark_test() -> bool {
        call_native!(bool, 0xEB2104E905C6F2E9u64)
    } // 0xEB2104E905C6F2E9  b323
    pub unsafe fn get_status_of_mission_repeat_save() -> i32 {
        call_native!(i32, 0x2B5E102E4A42F2BFu64)
    } // 0x2B5E102E4A42F2BF 0x144AAF22 b323
    pub unsafe fn is_memory_card_in_use() -> bool {
        call_native!(bool, 0x8A75CE2956274ADDu64)
    } // 0x8A75CE2956274ADD 0x40CE4DFD b323
    pub unsafe fn shoot_single_bullet_between_coords(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        damage: i32,
        p_7: bool,
        weapon_hash: Hash,
        owner_ped: Ped,
        is_audible: bool,
        is_invisible: bool,
        speed: f32,
    ) {
        call_native!(
            Void,
            0x867654CBC7606F2Cu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            damage,
            p_7,
            weapon_hash,
            owner_ped,
            is_audible,
            is_invisible,
            speed
        );
    } // 0x867654CBC7606F2C 0xCB7415AC b323
    pub unsafe fn shoot_single_bullet_between_coords_ignore_entity(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        damage: i32,
        p_7: bool,
        weapon_hash: Hash,
        owner_ped: Ped,
        is_audible: bool,
        is_invisible: bool,
        speed: f32,
        entity: Entity,
        p_1_4: Any,
    ) {
        call_native!(
            Void,
            0xE3A7742E0B7A2F8Bu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            damage,
            p_7,
            weapon_hash,
            owner_ped,
            is_audible,
            is_invisible,
            speed,
            entity,
            p_1_4
        );
    } // 0xE3A7742E0B7A2F8B 0x52ACCB7B b323
    pub unsafe fn shoot_single_bullet_between_coords_ignore_entity_new(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        damage: i32,
        p_7: bool,
        weapon_hash: Hash,
        owner_ped: Ped,
        is_audible: bool,
        is_invisible: bool,
        speed: f32,
        entity: Entity,
        p_1_4: bool,
        p_1_5: bool,
        target_entity: Entity,
        p_1_7: bool,
        p_1_8: Any,
        p_1_9: Any,
        p_2_0: Any,
    ) {
        call_native!(
            Void,
            0xBFE5756E7407064Au64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            damage,
            p_7,
            weapon_hash,
            owner_ped,
            is_audible,
            is_invisible,
            speed,
            entity,
            p_1_4,
            p_1_5,
            target_entity,
            p_1_7,
            p_1_8,
            p_1_9,
            p_2_0
        );
    } // 0xBFE5756E7407064A 0xCCDC33CC b323
    pub unsafe fn get_model_dimensions(
        model_hash: Hash,
        minimum: *mut Vector3,
        maximum: *mut Vector3,
    ) {
        call_native!(Void, 0x03E8D3D5F549087Au64, model_hash, minimum, maximum);
    } // 0x03E8D3D5F549087A 0x91ABB8E0 b323
    pub unsafe fn set_fake_wanted_level(fake_wanted_level: i32) {
        call_native!(Void, 0x1454F2448DE30163u64, fake_wanted_level);
    } // 0x1454F2448DE30163 0x85B1C9FA b323
    pub unsafe fn get_fake_wanted_level() -> i32 {
        call_native!(i32, 0x4C9296CBCD1B971Eu64)
    } // 0x4C9296CBCD1B971E 0x0022A430 b323
    pub unsafe fn using_mission_creator(toggle: bool) {
        call_native!(Void, 0xF14878FC50BEC6EEu64, toggle);
    } // 0xF14878FC50BEC6EE 0x20AB0B6B b323
    pub unsafe fn allow_mission_creator_warp(toggle: bool) {
        call_native!(Void, 0xDEA36202FC3382DFu64, toggle);
    } // 0xDEA36202FC3382DF 0x082BA6F2 b323
    pub unsafe fn set_minigame_in_progress(toggle: bool) {
        call_native!(Void, 0x19E00D7322C6F85Bu64, toggle);
    } // 0x19E00D7322C6F85B 0x348B9046 b323
    pub unsafe fn is_minigame_in_progress() -> bool {
        call_native!(bool, 0x2B4A15E44DE0F478u64)
    } // 0x2B4A15E44DE0F478 0x53A95E13 b323
    pub unsafe fn is_this_a_minigame_script() -> bool {
        call_native!(bool, 0x7B30F65D7B710098u64)
    } // 0x7B30F65D7B710098 0x7605EF6F b323
    pub unsafe fn is_sniper_inverted() -> bool {
        call_native!(bool, 0x61A23B7EDA9BDA24u64)
    } // 0x61A23B7EDA9BDA24 0x5C3BF51B b323
    pub unsafe fn should_use_metric_measurements() -> bool {
        call_native!(bool, 0xD3D15555431AB793u64)
    } // 0xD3D15555431AB793 0xBAF17315 b323
    pub unsafe fn get_profile_setting(profile_setting: i32) -> i32 {
        call_native!(i32, 0xC488FF2356EA7791u64, profile_setting)
    } // 0xC488FF2356EA7791 0xD374BEBC b323
    pub unsafe fn are_strings_equal(string_1: *const i8, string_2: *const i8) -> bool {
        call_native!(bool, 0x0C515FAB3FF9EA92u64, string_1, string_2)
    } // 0x0C515FAB3FF9EA92 0x877C0BC5 b323
    pub unsafe fn compare_strings(
        str_1: *const i8,
        str_2: *const i8,
        match_case: bool,
        max_length: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x1E34710ECD4AB0EBu64,
            str_1,
            str_2,
            match_case,
            max_length
        )
    } // 0x1E34710ECD4AB0EB 0xFE25A58F b323
    pub unsafe fn absi(value: i32) -> i32 {
        call_native!(i32, 0xF0D31AD191A74F87u64, value)
    } // 0xF0D31AD191A74F87 0xB44677C5 b323
    pub unsafe fn absf(value: f32) -> f32 {
        call_native!(f32, 0x73D57CFFDD12C355u64, value)
    } // 0x73D57CFFDD12C355 0xAF6F6E0B b323
    pub unsafe fn is_sniper_bullet_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0xFEFCF11B01287125u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0xFEFCF11B01287125 0x0483715C b323
    pub unsafe fn is_projectile_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x5270A8FBC098C3F8u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            owned_by_player
        )
    } // 0x5270A8FBC098C3F8 0x78E1A557 b323
    pub unsafe fn is_projectile_type_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        _type: i32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x2E0DC353342C4A6Du64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            _type,
            owned_by_player
        )
    } // 0x2E0DC353342C4A6D 0x2B73BCF6 b323
    pub unsafe fn is_projectile_type_in_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        p_7: Any,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0xF0BC12401061DEA0u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            p_7,
            owned_by_player
        )
    } // 0xF0BC12401061DEA0 0xD1AE2681 b323
    pub unsafe fn is_projectile_type_within_distance(
        x: f32,
        y: f32,
        z: f32,
        projectile_hash: Hash,
        radius: f32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x34318593248C8FB2u64,
            x,
            y,
            z,
            projectile_hash,
            radius,
            owned_by_player
        )
    } // 0x34318593248C8FB2 0xBE81F1E2 b323
    pub unsafe fn get_coords_of_projectile_type_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        projectile_hash: Hash,
        projectile_pos: *mut Vector3,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x8D7A43EC6A5FEA45u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            projectile_hash,
            projectile_pos,
            owned_by_player
        )
    } // 0x8D7A43EC6A5FEA45 0x1A40454B b323
    pub unsafe fn get_coords_of_projectile_type_in_angled_area(
        vec_angled_area_point_1_x: f32,
        vec_angled_area_point_1_y: f32,
        vec_angled_area_point_1_z: f32,
        vec_angled_area_point_2_x: f32,
        vec_angled_area_point_2_y: f32,
        vec_angled_area_point_2_z: f32,
        distance_of_opposite_face: f32,
        weapon_type: Hash,
        position_out: *mut Vector3,
        b_is_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x3DA8C28346B62CEDu64,
            vec_angled_area_point_1_x,
            vec_angled_area_point_1_y,
            vec_angled_area_point_1_z,
            vec_angled_area_point_2_x,
            vec_angled_area_point_2_y,
            vec_angled_area_point_2_z,
            distance_of_opposite_face,
            weapon_type,
            position_out,
            b_is_player
        )
    } // 0x3DA8C28346B62CED  b2802
    pub unsafe fn get_coords_of_projectile_type_within_distance(
        ped: Ped,
        weapon_hash: Hash,
        distance: f32,
        out_coords: *mut Vector3,
        p_4: bool,
    ) -> bool {
        call_native!(
            bool,
            0xDFB4138EEFED7B81u64,
            ped,
            weapon_hash,
            distance,
            out_coords,
            p_4
        )
    } // 0xDFB4138EEFED7B81 0x6BDE5CE4 b323
    pub unsafe fn get_projectile_of_projectile_type_within_distance(
        ped: Ped,
        weapon_hash: Hash,
        distance: f32,
        out_coords: *mut Vector3,
        out_projectile: *mut Object,
        p_5: bool,
    ) -> bool {
        call_native!(
            bool,
            0x82FDE6A57EE4EE44u64,
            ped,
            weapon_hash,
            distance,
            out_coords,
            out_projectile,
            p_5
        )
    } // 0x82FDE6A57EE4EE44 0x507BC6F7 b323
    pub unsafe fn is_bullet_in_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x1A8B5F3C01E2B477u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            owned_by_player
        )
    } // 0x1A8B5F3C01E2B477 0xE2DB58F7 b323
    pub unsafe fn is_bullet_in_area(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0x3F2023999AD51C1Fu64,
            x,
            y,
            z,
            radius,
            owned_by_player
        )
    } // 0x3F2023999AD51C1F 0xB54F46CA b323
    pub unsafe fn is_bullet_in_box(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        owned_by_player: bool,
    ) -> bool {
        call_native!(
            bool,
            0xDE0F6D7450D37351u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            owned_by_player
        )
    } // 0xDE0F6D7450D37351 0xAB73ED26 b323
    pub unsafe fn has_bullet_impacted_in_area(
        x: f32,
        y: f32,
        z: f32,
        p_3: f32,
        p_4: bool,
        p_5: bool,
    ) -> bool {
        call_native!(bool, 0x9870ACFB89A90995u64, x, y, z, p_3, p_4, p_5)
    } // 0x9870ACFB89A90995 0x902BC7D9 b323
    pub unsafe fn has_bullet_impacted_in_box(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: bool,
        p_7: bool,
    ) -> bool {
        call_native!(
            bool,
            0xDC8C5D7CFEAB8394u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        )
    } // 0xDC8C5D7CFEAB8394 0x2C2618CC b323
    pub unsafe fn is_orbis_version() -> bool {
        call_native!(bool, 0xA72BC0B675B1519Eu64)
    } // 0xA72BC0B675B1519E 0x40282018 b323
    pub unsafe fn is_durango_version() -> bool {
        call_native!(bool, 0x4D982ADB1978442Du64)
    } // 0x4D982ADB1978442D 0x46FB06A5 b323
    pub unsafe fn is_xbox360_version() -> bool {
        call_native!(bool, 0xF6201B4DAF662A9Du64)
    } // 0xF6201B4DAF662A9D 0x24005CC8 b323
    pub unsafe fn is_ps3_version() -> bool {
        call_native!(bool, 0xCCA1072C29D096C2u64)
    } // 0xCCA1072C29D096C2 0x4C0D5303 b323
    pub unsafe fn is_pc_version() -> bool {
        call_native!(bool, 0x48AF36444B965238u64)
    } // 0x48AF36444B965238 0x4D5D9EE3 b323
    pub unsafe fn is_steam_version() -> bool {
        call_native!(bool, 0x0A27B2B6282F7169u64)
    } // 0x0A27B2B6282F7169  b2545
    pub unsafe fn is_aussie_version() -> bool {
        call_native!(bool, 0x9F1935CA1F724008u64)
    } // 0x9F1935CA1F724008 0x944BA1DC b323
    pub unsafe fn is_japanese_version() -> bool {
        call_native!(bool, 0xB8C0BB75D8A77DB3u64)
    } // 0xB8C0BB75D8A77DB3  b2545
    pub unsafe fn is_xbox_platform() -> bool {
        call_native!(bool, 0x138679CA01E21F53u64)
    } // 0x138679CA01E21F53  b2612
    pub unsafe fn is_scarlett_version() -> bool {
        call_native!(bool, 0xC545AB1CF97ABB34u64)
    } // 0xC545AB1CF97ABB34  b2612
    pub unsafe fn is_sce_platform() -> bool {
        call_native!(bool, 0xF911E695C1EB8518u64)
    } // 0xF911E695C1EB8518  b2612
    pub unsafe fn is_prospero_version() -> bool {
        call_native!(bool, 0x807ABE1AB65C24D2u64)
    } // 0x807ABE1AB65C24D2  b2612
    pub unsafe fn is_string_null(string: *const i8) -> bool {
        call_native!(bool, 0xF22B6C47C6EAB066u64, string)
    } // 0xF22B6C47C6EAB066 0x8E71E00F b323
    pub unsafe fn is_string_null_or_empty(string: *const i8) -> bool {
        call_native!(bool, 0xCA042B6957743895u64, string)
    } // 0xCA042B6957743895 0x42E9F2CA b323
    pub unsafe fn string_to_int(string: *const i8, out_integer: *mut i32) -> bool {
        call_native!(bool, 0x5A5F40FE637EB584u64, string, out_integer)
    } // 0x5A5F40FE637EB584 0x590A8160 b323
    pub unsafe fn set_bits_in_range(var: *mut i32, range_start: i32, range_end: i32, p_3: i32) {
        call_native!(
            Void,
            0x8EF07E15701D61EDu64,
            var,
            range_start,
            range_end,
            p_3
        );
    } // 0x8EF07E15701D61ED 0x32094719 b323
    pub unsafe fn get_bits_in_range(var: i32, range_start: i32, range_end: i32) -> i32 {
        call_native!(i32, 0x53158863FCC0893Au64, var, range_start, range_end)
    } // 0x53158863FCC0893A 0xCA03A1E5 b323
    pub unsafe fn add_stunt_jump(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        x_4: f32,
        y_4: f32,
        z_4: f32,
        cam_x: f32,
        cam_y: f32,
        cam_z: f32,
        p_1_5: i32,
        p_1_6: i32,
        p_1_7: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x1A992DA297A4630Cu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            x_3,
            y_3,
            z_3,
            x_4,
            y_4,
            z_4,
            cam_x,
            cam_y,
            cam_z,
            p_1_5,
            p_1_6,
            p_1_7
        )
    } // 0x1A992DA297A4630C 0xB630E5FF b323
    pub unsafe fn add_stunt_jump_angled(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        radius_1: f32,
        x_3: f32,
        y_3: f32,
        z_3: f32,
        x_4: f32,
        y_4: f32,
        z_4: f32,
        radius_2: f32,
        cam_x: f32,
        cam_y: f32,
        cam_z: f32,
        p_1_7: i32,
        p_1_8: i32,
        p_1_9: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xBBE5D803A5360CBFu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            radius_1,
            x_3,
            y_3,
            z_3,
            x_4,
            y_4,
            z_4,
            radius_2,
            cam_x,
            cam_y,
            cam_z,
            p_1_7,
            p_1_8,
            p_1_9
        )
    } // 0xBBE5D803A5360CBF 0xB9B7E777 b323
    pub unsafe fn toggle_show_optional_stunt_jump_camera(toggle: bool) {
        call_native!(Void, 0xFB80AB299D2EE1BDu64, toggle);
    } // 0xFB80AB299D2EE1BD  b757
    pub unsafe fn delete_stunt_jump(p_0: i32) {
        call_native!(Void, 0xDC518000E39DAE1Fu64, p_0);
    } // 0xDC518000E39DAE1F 0x840CB5DA b323
    pub unsafe fn enable_stunt_jump_set(p_0: i32) {
        call_native!(Void, 0xE369A5783B866016u64, p_0);
    } // 0xE369A5783B866016 0x9D1E7785 b323
    pub unsafe fn disable_stunt_jump_set(p_0: i32) {
        call_native!(Void, 0xA5272EBEDD4747F6u64, p_0);
    } // 0xA5272EBEDD4747F6 0x644C9FA4 b323
    pub unsafe fn set_stunt_jumps_can_trigger(toggle: bool) {
        call_native!(Void, 0xD79185689F8FD5DFu64, toggle);
    } // 0xD79185689F8FD5DF 0x3C806A2D b323
    pub unsafe fn is_stunt_jump_in_progress() -> bool {
        call_native!(bool, 0x7A3F19700A4D0525u64)
    } // 0x7A3F19700A4D0525 0xF477D0B1 b323
    pub unsafe fn is_stunt_jump_message_showing() -> bool {
        call_native!(bool, 0x2272B0A1343129F4u64)
    } // 0x2272B0A1343129F4 0x021636EE b323
    pub unsafe fn get_num_successful_stunt_jumps() -> i32 {
        call_native!(i32, 0x996DD1E1E02F1008u64)
    } // 0x996DD1E1E02F1008 0x006F9BA2 b323
    pub unsafe fn get_total_successful_stunt_jumps() -> i32 {
        call_native!(i32, 0x6856EC3D35C81EA4u64)
    } // 0x6856EC3D35C81EA4 0x495BE324 b323
    pub unsafe fn cancel_stunt_jump() {
        call_native!(Void, 0xE6B7B0ACD4E4B75Eu64);
    } // 0xE6B7B0ACD4E4B75E 0xF43D9821 b323
    pub unsafe fn set_game_paused(toggle: bool) {
        call_native!(Void, 0x577D1284D6873711u64, toggle);
    } // 0x577D1284D6873711 0x8230FF6C b323
    pub unsafe fn set_this_script_can_be_paused(toggle: bool) {
        call_native!(Void, 0xAA391C728106F7AFu64, toggle);
    } // 0xAA391C728106F7AF 0xA0C3CE29 b323
    pub unsafe fn set_this_script_can_remove_blips_created_by_any_script(toggle: bool) {
        call_native!(Void, 0xB98236CAAECEF897u64, toggle);
    } // 0xB98236CAAECEF897 0xD06F1720 b323
    pub unsafe fn has_cheat_with_hash_been_activated(hash: Hash, amount: i32) -> bool {
        call_native!(bool, 0x071E2A839DE82D90u64, hash, amount)
    } // 0x071E2A839DE82D90 0xFF6191E1 b323
    pub unsafe fn has_pc_cheat_with_hash_been_activated(hash: Hash) -> bool {
        call_native!(bool, 0x557E43C447E700A8u64, hash)
    } // 0x557E43C447E700A8  b323
    pub unsafe fn override_freeze_flags(p_0: bool) {
        call_native!(Void, 0xFA3FFB0EEBC288A3u64, p_0);
    } // 0xFA3FFB0EEBC288A3  b2060
    pub unsafe fn set_instance_priority_mode(p_0: i32) {
        call_native!(Void, 0x9BAE5AD2508DF078u64, p_0);
    } // 0x9BAE5AD2508DF078 0x721B2492 b323
    pub unsafe fn set_instance_priority_hint(flag: i32) {
        call_native!(Void, 0xC5F0A8EBD3F361CEu64, flag);
    } // 0xC5F0A8EBD3F361CE 0xE202879D b323
    pub unsafe fn is_frontend_fading() -> bool {
        call_native!(bool, 0x7EA2B6AF97ECA6EDu64)
    } // 0x7EA2B6AF97ECA6ED 0x8FF6232C b323
    pub unsafe fn populate_now() {
        call_native!(Void, 0x7472BB270D7B4F3Eu64);
    } // 0x7472BB270D7B4F3E 0x72C20700 b323
    pub unsafe fn get_index_of_current_level() -> i32 {
        call_native!(i32, 0xCBAD6729F7B1F4FCu64)
    } // 0xCBAD6729F7B1F4FC 0x6F203C6E b323
    pub unsafe fn set_gravity_level(level: i32) {
        call_native!(Void, 0x740E14FAD5842351u64, level);
    } // 0x740E14FAD5842351 0x2D833F4A b323
    pub unsafe fn start_save_data(p_0: *mut Any, p_1: Any, p_2: bool) {
        call_native!(Void, 0xA9575F812C6A7997u64, p_0, p_1, p_2);
    } // 0xA9575F812C6A7997 0x881A694D b323
    pub unsafe fn stop_save_data() {
        call_native!(Void, 0x74E20C9145FB66FDu64);
    } // 0x74E20C9145FB66FD 0x3B1C07C8 b323
    pub unsafe fn get_size_of_save_data(p_0: bool) -> i32 {
        call_native!(i32, 0xA09F896CE912481Fu64, p_0)
    } // 0xA09F896CE912481F 0x9EF0BC64 b323
    pub unsafe fn register_int_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x34C9EE5986258415u64, p_0, name);
    } // 0x34C9EE5986258415 0xB930956F b323
    pub unsafe fn register_int64_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0xA735353C77334EA0u64, p_0, name);
    } // 0xA735353C77334EA0  b323
    pub unsafe fn register_enum_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x10C2FA78D0E128A1u64, p_0, name);
    } // 0x10C2FA78D0E128A1 0x9B38374A b323
    pub unsafe fn register_float_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x7CAEC29ECB5DFEBBu64, p_0, name);
    } // 0x7CAEC29ECB5DFEBB 0xDB06F7AD b323
    pub unsafe fn register_bool_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0xC8F4131414C835A1u64, p_0, name);
    } // 0xC8F4131414C835A1 0x5417E0E0 b323
    pub unsafe fn register_text_label_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0xEDB1232C5BEAE62Fu64, p_0, name);
    } // 0xEDB1232C5BEAE62F 0x284352C4 b323
    pub unsafe fn register_text_label_15_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x6F7794F28C6B2535u64, p_0, name);
    } // 0x6F7794F28C6B2535 0xE2089749 b323
    pub unsafe fn register_text_label_23_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x48F069265A0E4BECu64, p_0, name);
    } // 0x48F069265A0E4BEC 0xF91B8C33 b323
    pub unsafe fn register_text_label_31_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0x8269816F6CFD40F8u64, p_0, name);
    } // 0x8269816F6CFD40F8 0x74E8FAD9 b323
    pub unsafe fn register_text_label_63_to_save(p_0: *mut Any, name: *const i8) {
        call_native!(Void, 0xFAA457EF263E8763u64, p_0, name);
    } // 0xFAA457EF263E8763 0x6B4335DD b323
    pub unsafe fn start_save_struct_with_size(p_0: *mut Any, size: i32, struct_name: *const i8) {
        call_native!(Void, 0xBF737600CDDBEADDu64, p_0, size, struct_name);
    } // 0xBF737600CDDBEADD 0xFB45728E b323
    pub unsafe fn stop_save_struct() {
        call_native!(Void, 0xEB1774DF12BB9F12u64);
    } // 0xEB1774DF12BB9F12 0xC2624A28 b323
    pub unsafe fn start_save_array_with_size(p_0: *mut Any, size: i32, array_name: *const i8) {
        call_native!(Void, 0x60FE567DF1B1AF9Du64, p_0, size, array_name);
    } // 0x60FE567DF1B1AF9D 0x893A342C b323
    pub unsafe fn stop_save_array() {
        call_native!(Void, 0x04456F95153C6BE4u64);
    } // 0x04456F95153C6BE4 0x0CAD8217 b323
    pub unsafe fn copy_script_struct(dst: *mut Any, src: *mut Any, size: i32) {
        call_native!(Void, 0x213AEB2B90CBA7ACu64, dst, src, size);
    } // 0x213AEB2B90CBA7AC  b877
    pub unsafe fn enable_dispatch_service(dispatch_service: i32, toggle: bool) {
        call_native!(Void, 0xDC0F817884CDD856u64, dispatch_service, toggle);
    } // 0xDC0F817884CDD856 0x0B710A51 b323
    pub unsafe fn block_dispatch_service_resource_creation(dispatch_service: i32, toggle: bool) {
        call_native!(Void, 0x9B2BD3773123EA2Fu64, dispatch_service, toggle);
    } // 0x9B2BD3773123EA2F 0xE0F0684F b323
    pub unsafe fn get_number_resources_allocated_to_wanted_level(dispatch_service: i32) -> i32 {
        call_native!(i32, 0xEB4A0C2D56441717u64, dispatch_service)
    } // 0xEB4A0C2D56441717 0x3CE5BF6B b323
    pub unsafe fn create_incident(
        dispatch_service: i32,
        x: f32,
        y: f32,
        z: f32,
        num_units: i32,
        radius: f32,
        out_incident_i_d: *mut i32,
        p_7: Any,
        p_8: Any,
    ) -> bool {
        call_native!(
            bool,
            0x3F892CAF67444AE7u64,
            dispatch_service,
            x,
            y,
            z,
            num_units,
            radius,
            out_incident_i_d,
            p_7,
            p_8
        )
    } // 0x3F892CAF67444AE7 0xFC5FF7B3 b323
    pub unsafe fn create_incident_with_entity(
        dispatch_service: i32,
        ped: Ped,
        num_units: i32,
        radius: f32,
        out_incident_i_d: *mut i32,
        p_5: Any,
        p_6: Any,
    ) -> bool {
        call_native!(
            bool,
            0x05983472F0494E60u64,
            dispatch_service,
            ped,
            num_units,
            radius,
            out_incident_i_d,
            p_5,
            p_6
        )
    } // 0x05983472F0494E60 0xBBC35B03 b323
    pub unsafe fn delete_incident(incident_id: i32) {
        call_native!(Void, 0x556C1AA270D5A207u64, incident_id);
    } // 0x556C1AA270D5A207 0x212BD0DC b323
    pub unsafe fn is_incident_valid(incident_id: i32) -> bool {
        call_native!(bool, 0xC8BC6461E629BEAAu64, incident_id)
    } // 0xC8BC6461E629BEAA 0x31FD0BA4 b323
    pub unsafe fn set_incident_requested_units(
        incident_id: i32,
        dispatch_service: i32,
        num_units: i32,
    ) {
        call_native!(
            Void,
            0xB08B85D860E7BA3Cu64,
            incident_id,
            dispatch_service,
            num_units
        );
    } // 0xB08B85D860E7BA3C 0x0242D88E b323
    pub unsafe fn set_ideal_spawn_distance_for_incident(incident_id: i32, p_1: f32) {
        call_native!(Void, 0xD261BA3E7E998072u64, incident_id, p_1);
    } // 0xD261BA3E7E998072 0x1F38102E b323
    pub unsafe fn find_spawn_point_in_direction(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        fwd_vec_x: f32,
        fwd_vec_y: f32,
        fwd_vec_z: f32,
        distance: f32,
        spawn_point: *mut Vector3,
    ) -> bool {
        call_native!(
            bool,
            0x6874E2190B0C1972u64,
            pos_x,
            pos_y,
            pos_z,
            fwd_vec_x,
            fwd_vec_y,
            fwd_vec_z,
            distance,
            spawn_point
        )
    } // 0x6874E2190B0C1972 0x71AEFD77 b323
    pub unsafe fn add_pop_multiplier_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: f32,
        p_7: f32,
        p_8: bool,
        p_9: bool,
    ) -> i32 {
        call_native!(
            i32,
            0x67F6413D3220E18Du64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6,
            p_7,
            p_8,
            p_9
        )
    } // 0x67F6413D3220E18D 0x42BF09B3 b323
    pub unsafe fn does_pop_multiplier_area_exist(id: i32) -> bool {
        call_native!(bool, 0x1327E2FE9746BAEEu64, id)
    } // 0x1327E2FE9746BAEE 0xE933B34A b323
    pub unsafe fn remove_pop_multiplier_area(id: i32, p_1: bool) {
        call_native!(Void, 0xB129E447A2EDA4BFu64, id, p_1);
    } // 0xB129E447A2EDA4BF 0xFBDBE374 b323
    pub unsafe fn is_pop_multiplier_area_networked(id: i32) -> bool {
        call_native!(bool, 0x1312F4B242609CE3u64, id)
    } // 0x1312F4B242609CE3  b1290
    pub unsafe fn add_pop_multiplier_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        ped_multiplier: f32,
        vehicle_multiplier: f32,
        p_6: bool,
        p_7: bool,
    ) -> i32 {
        call_native!(
            i32,
            0x32C7A7E8C43A1F80u64,
            x,
            y,
            z,
            radius,
            ped_multiplier,
            vehicle_multiplier,
            p_6,
            p_7
        )
    } // 0x32C7A7E8C43A1F80 0xCE4A3D20 b323
    pub unsafe fn does_pop_multiplier_sphere_exist(id: i32) -> bool {
        call_native!(bool, 0x171BAFB3C60389F4u64, id)
    } // 0x171BAFB3C60389F4 0xD2B7A5A0 b791
    pub unsafe fn remove_pop_multiplier_sphere(id: i32, p_1: bool) {
        call_native!(Void, 0xE6869BECDD8F2403u64, id, p_1);
    } // 0xE6869BECDD8F2403 0x92E7E4EB b323
    pub unsafe fn enable_tennis_mode(ped: Ped, toggle: bool, p_2: bool) {
        call_native!(Void, 0x28A04B411933F8A6u64, ped, toggle, p_2);
    } // 0x28A04B411933F8A6 0x0BD3F9EC b323
    pub unsafe fn is_tennis_mode(ped: Ped) -> bool {
        call_native!(bool, 0x5D5479D115290C3Fu64, ped)
    } // 0x5D5479D115290C3F 0x04A947BA b323
    pub unsafe fn play_tennis_swing_anim(
        ped: Ped,
        anim_dict: *const i8,
        anim_name: *const i8,
        p_3: f32,
        p_4: f32,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0xE266ED23311F24D4u64,
            ped,
            anim_dict,
            anim_name,
            p_3,
            p_4,
            p_5
        );
    } // 0xE266ED23311F24D4 0xC20A7D2B b323
    pub unsafe fn get_tennis_swing_anim_complete(ped: Ped) -> bool {
        call_native!(bool, 0x17DF68D720AA77F8u64, ped)
    } // 0x17DF68D720AA77F8 0x8501E727 b323
    pub unsafe fn get_tennis_swing_anim_can_be_interrupted(ped: Ped) -> bool {
        call_native!(bool, 0x19BFED045C647C49u64, ped)
    } // 0x19BFED045C647C49 0x1A332D2D b323
    pub unsafe fn get_tennis_swing_anim_swung(ped: Ped) -> bool {
        call_native!(bool, 0xE95B0C7D5BA3B96Bu64, ped)
    } // 0xE95B0C7D5BA3B96B  b323
    pub unsafe fn play_tennis_dive_anim(
        ped: Ped,
        p_1: i32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: bool,
    ) {
        call_native!(Void, 0x8FA9C42FC5D7C64Bu64, ped, p_1, p_2, p_3, p_4, p_5);
    } // 0x8FA9C42FC5D7C64B 0x0C8865DF b323
    pub unsafe fn set_tennis_move_network_signal_float(ped: Ped, p_1: *const i8, p_2: f32) {
        call_native!(Void, 0x54F157E0336A3822u64, ped, p_1, p_2);
    } // 0x54F157E0336A3822 0x49F977A9 b323
    pub unsafe fn reset_dispatch_spawn_location() {
        call_native!(Void, 0x5896F2BD5683A4E1u64);
    } // 0x5896F2BD5683A4E1  b1868
    pub unsafe fn set_dispatch_spawn_location(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xD10F442036302D50u64, x, y, z);
    } // 0xD10F442036302D50 0x6F009E33 b323
    pub unsafe fn reset_dispatch_ideal_spawn_distance() {
        call_native!(Void, 0x77A84429DD9F0A15u64);
    } // 0x77A84429DD9F0A15 0xDA65ECAA b323
    pub unsafe fn set_dispatch_ideal_spawn_distance(distance: f32) {
        call_native!(Void, 0x6FE601A64180D423u64, distance);
    } // 0x6FE601A64180D423 0x6283BE32 b323
    pub unsafe fn reset_dispatch_time_between_spawn_attempts(p_0: Any) {
        call_native!(Void, 0xEB2DB0CAD13154B3u64, p_0);
    } // 0xEB2DB0CAD13154B3 0x1479E85A b323
    pub unsafe fn set_dispatch_time_between_spawn_attempts(p_0: Any, p_1: f32) {
        call_native!(Void, 0x44F7CBC1BEB3327Du64, p_0, p_1);
    } // 0x44F7CBC1BEB3327D 0xABADB709 b323
    pub unsafe fn set_dispatch_time_between_spawn_attempts_multiplier(p_0: Any, p_1: f32) {
        call_native!(Void, 0x48838ED9937A15D1u64, p_0, p_1);
    } // 0x48838ED9937A15D1 0x1C996BCD b323
    pub unsafe fn add_dispatch_spawn_angled_blocking_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x918C7B2D2FF3928Bu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width
        )
    } // 0x918C7B2D2FF3928B 0xF557BAF9 b323
    pub unsafe fn add_dispatch_spawn_sphere_blocking_area(
        x_1: f32,
        y_1: f32,
        x_2: f32,
        y_2: f32,
    ) -> i32 {
        call_native!(i32, 0x2D4259F1FEB81DA9u64, x_1, y_1, x_2, y_2)
    } // 0x2D4259F1FEB81DA9  b323
    pub unsafe fn remove_dispatch_spawn_blocking_area(p_0: i32) {
        call_native!(Void, 0x264AC28B01B353A5u64, p_0);
    } // 0x264AC28B01B353A5 0xA8D2FB92 b323
    pub unsafe fn reset_dispatch_spawn_blocking_areas() {
        call_native!(Void, 0xAC7BFD5C1D83EA75u64);
    } // 0xAC7BFD5C1D83EA75 0x9A17F835 b323
    pub unsafe fn reset_wanted_response_num_peds_to_spawn() {
        call_native!(Void, 0xD9F692D349249528u64);
    } // 0xD9F692D349249528 0xE0C9307E b323
    pub unsafe fn set_wanted_response_num_peds_to_spawn(p_0: i32, p_1: i32) {
        call_native!(Void, 0xE532EC1A63231B4Fu64, p_0, p_1);
    } // 0xE532EC1A63231B4F 0xA0D8C749 b323
    pub unsafe fn add_tactical_nav_mesh_point(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xB8721407EE9C3FF6u64, x, y, z);
    } // 0xB8721407EE9C3FF6 0x24A4E0B2 b323
    pub unsafe fn clear_tactical_nav_mesh_points() {
        call_native!(Void, 0xB3CD58CCA6CDA852u64);
    } // 0xB3CD58CCA6CDA852 0x66C3C59C b323
    pub unsafe fn set_riot_mode_enabled(toggle: bool) {
        call_native!(Void, 0x2587A48BC88DFADFu64, toggle);
    } // 0x2587A48BC88DFADF 0xD9660339 b323
    pub unsafe fn display_onscreen_keyboard_with_longer_initial_string(
        p_0: i32,
        window_title: *const i8,
        p_2: *mut Any,
        default_text: *const i8,
        default_concat_1: *const i8,
        default_concat_2: *const i8,
        default_concat_3: *const i8,
        default_concat_4: *const i8,
        default_concat_5: *const i8,
        default_concat_6: *const i8,
        default_concat_7: *const i8,
        max_input_length: i32,
    ) {
        call_native!(
            Void,
            0xCA78CFA0366592FEu64,
            p_0,
            window_title,
            p_2,
            default_text,
            default_concat_1,
            default_concat_2,
            default_concat_3,
            default_concat_4,
            default_concat_5,
            default_concat_6,
            default_concat_7,
            max_input_length
        );
    } // 0xCA78CFA0366592FE 0xD2688412 b323
    pub unsafe fn display_onscreen_keyboard(
        p_0: i32,
        window_title: *const i8,
        p_2: *const i8,
        default_text: *const i8,
        default_concat_1: *const i8,
        default_concat_2: *const i8,
        default_concat_3: *const i8,
        max_input_length: i32,
    ) {
        call_native!(
            Void,
            0x00DC833F2568DBF6u64,
            p_0,
            window_title,
            p_2,
            default_text,
            default_concat_1,
            default_concat_2,
            default_concat_3,
            max_input_length
        );
    } // 0x00DC833F2568DBF6 0xAD99F2CE b323
    pub unsafe fn update_onscreen_keyboard() -> i32 {
        call_native!(i32, 0x0CF2B696BBF945AEu64)
    } // 0x0CF2B696BBF945AE 0x23D0A1CE b323
    pub unsafe fn get_onscreen_keyboard_result() -> *const i8 {
        call_native!(*const i8, 0x8362B09B91893647u64)
    } // 0x8362B09B91893647 0x44828FB3 b323
    pub unsafe fn cancel_onscreen_keyboard() {
        call_native!(Void, 0x58A39BE597CE99CDu64);
    } // 0x58A39BE597CE99CD  b757
    pub unsafe fn next_onscreen_keyboard_result_will_display_using_these_fonts(p_0: i32) {
        call_native!(Void, 0x3ED1438C1F5C6612u64, p_0);
    } // 0x3ED1438C1F5C6612 0x3301EA47 b323
    pub unsafe fn action_manager_enable_action(hash: Hash, enable: bool) {
        call_native!(Void, 0xA6A12939F16D85BEu64, hash, enable);
    } // 0xA6A12939F16D85BE 0x42B484ED b323
    pub unsafe fn get_real_world_time() -> i32 {
        call_native!(i32, 0x3F60413F5DF65748u64)
    } // 0x3F60413F5DF65748  b2612
    pub unsafe fn supress_random_event_this_frame(event_type: i32, suppress: bool) {
        call_native!(Void, 0x1EAE0A6E978894A2u64, event_type, suppress);
    } // 0x1EAE0A6E978894A2 0x8F60366E b323
    pub unsafe fn set_explosive_ammo_this_frame(player: Player) {
        call_native!(Void, 0xA66C71C98D5F2CFBu64, player);
    } // 0xA66C71C98D5F2CFB 0x2EAFA1D1 b323
    pub unsafe fn set_fire_ammo_this_frame(player: Player) {
        call_native!(Void, 0x11879CDD803D30F4u64, player);
    } // 0x11879CDD803D30F4 0x7C18FC8A b323
    pub unsafe fn set_explosive_melee_this_frame(player: Player) {
        call_native!(Void, 0xFF1BED81BFDC0FE0u64, player);
    } // 0xFF1BED81BFDC0FE0 0x96663D56 b323
    pub unsafe fn set_super_jump_this_frame(player: Player) {
        call_native!(Void, 0x57FFF03E423A4C0Bu64, player);
    } // 0x57FFF03E423A4C0B 0x86745EF3 b323
    pub unsafe fn set_beast_jump_this_frame(player: Player) {
        call_native!(Void, 0x438822C279B73B93u64, player);
    } // 0x438822C279B73B93  b573
    pub unsafe fn set_forced_jump_this_frame(player: Player) {
        call_native!(Void, 0xA1183BCFEE0F93D1u64, player);
    } // 0xA1183BCFEE0F93D1  b1180
    pub unsafe fn has_game_installed_this_session() -> bool {
        call_native!(bool, 0x6FDDF453C0C756ECu64)
    } // 0x6FDDF453C0C756EC 0xC3C10FCC b323
    pub unsafe fn set_ticker_johnmarston_is_done() {
        call_native!(Void, 0xFB00CA71DA386228u64);
    } // 0xFB00CA71DA386228 0x054EC103 b323
    pub unsafe fn are_profile_settings_valid() -> bool {
        call_native!(bool, 0x5AA3BEFA29F03AD4u64)
    } // 0x5AA3BEFA29F03AD4 0x46B5A15C b323
    pub unsafe fn prevent_arrest_state_this_frame() {
        call_native!(Void, 0xE3D969D2785FFB5Eu64);
    } // 0xE3D969D2785FFB5E  b323
    pub unsafe fn force_game_state_playing() {
        call_native!(Void, 0xC0AA53F866B3134Du64);
    } // 0xC0AA53F866B3134D 0x5D209F25 b323
    pub unsafe fn script_race_init(p_0: i32, p_1: i32, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0A60017F841A54F2u64, p_0, p_1, p_2, p_3);
    } // 0x0A60017F841A54F2 0x2D33F15A b323
    pub unsafe fn script_race_shutdown() {
        call_native!(Void, 0x1FF6BF9A63E5757Fu64);
    } // 0x1FF6BF9A63E5757F 0xDF99925C b323
    pub unsafe fn script_race_player_hit_checkpoint(player: Player, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x1BB299305C3E8C13u64, player, p_1, p_2, p_3);
    } // 0x1BB299305C3E8C13 0xA27F4472 b323
    pub unsafe fn script_race_get_player_split_time(
        player: Player,
        p_1: *mut i32,
        p_2: *mut i32,
    ) -> bool {
        call_native!(bool, 0x8EF5573A1F801A5Cu64, player, p_1, p_2)
    } // 0x8EF5573A1F801A5C 0x07FF553F b323
    pub unsafe fn start_end_user_benchmark() {
        call_native!(Void, 0x92790862E36C2ADAu64);
    } // 0x92790862E36C2ADA  b323
    pub unsafe fn stop_end_user_benchmark() {
        call_native!(Void, 0xC7DB36C24634F52Bu64);
    } // 0xC7DB36C24634F52B  b323
    pub unsafe fn reset_end_user_benchmark() {
        call_native!(Void, 0x437138B6A830166Au64);
    } // 0x437138B6A830166A  b323
    pub unsafe fn save_end_user_benchmark() {
        call_native!(Void, 0x37DEB0AA183FB6D8u64);
    } // 0x37DEB0AA183FB6D8  b323
    pub unsafe fn ui_started_end_user_benchmark() -> bool {
        call_native!(bool, 0xEA2F2061875EED90u64)
    } // 0xEA2F2061875EED90  b323
    pub unsafe fn landing_screen_started_end_user_benchmark() -> bool {
        call_native!(bool, 0x3BBBD13E5041A79Eu64)
    } // 0x3BBBD13E5041A79E  b323
    pub unsafe fn is_commandline_end_user_benchmark() -> bool {
        call_native!(bool, 0xA049A5BE0F04F2F8u64)
    } // 0xA049A5BE0F04F2F8  b323
    pub unsafe fn get_benchmark_iterations() -> i32 {
        call_native!(i32, 0x4750FC27570311ECu64)
    } // 0x4750FC27570311EC  b323
    pub unsafe fn get_benchmark_pass() -> i32 {
        call_native!(i32, 0x1B2366C3F2A5C8DFu64)
    } // 0x1B2366C3F2A5C8DF  b323
    pub unsafe fn restart_game() {
        call_native!(Void, 0xE574A662ACAEFBB1u64);
    } // 0xE574A662ACAEFBB1  b372
    pub unsafe fn quit_game() {
        call_native!(Void, 0xEB6891F03362FB12u64);
    } // 0xEB6891F03362FB12  b323
    pub unsafe fn has_async_install_finished() -> bool {
        call_native!(bool, 0x14832BF2ABA53FC5u64)
    } // 0x14832BF2ABA53FC5  b323
    pub unsafe fn cleanup_async_install() {
        call_native!(Void, 0xC79AE21974B01FB2u64);
    } // 0xC79AE21974B01FB2  b323
    pub unsafe fn plm_is_in_constrained_mode() -> bool {
        call_native!(bool, 0x684A41975F077262u64)
    } // 0x684A41975F077262  b323
    pub unsafe fn plm_get_constrained_duration_ms() -> i32 {
        call_native!(i32, 0xABB2FA71C83A1B72u64)
    } // 0xABB2FA71C83A1B72  b323
    pub unsafe fn set_player_is_in_animal_form(toggle: bool) {
        call_native!(Void, 0x4EBB7E87AA0DBED4u64, toggle);
    } // 0x4EBB7E87AA0DBED4  b323
    pub unsafe fn get_is_player_in_animal_form() -> bool {
        call_native!(bool, 0x9689123E3F213AA5u64)
    } // 0x9689123E3F213AA5  b323
    pub unsafe fn set_player_is_repeating_a_mission(toggle: bool) {
        call_native!(Void, 0x9D8D44ADBBA61EF2u64, toggle);
    } // 0x9D8D44ADBBA61EF2  b323
    pub unsafe fn disable_screen_dimming_this_frame() {
        call_native!(Void, 0x23227DF0B2115469u64);
    } // 0x23227DF0B2115469  b323
    pub unsafe fn get_city_density() -> f32 {
        call_native!(f32, 0xD10282B6E3751BA0u64)
    } // 0xD10282B6E3751BA0  b323
    pub unsafe fn use_active_camera_for_timeslicing_centre() {
        call_native!(Void, 0x693478ACBD7F18E7u64);
    } // 0x693478ACBD7F18E7  b1103
    pub unsafe fn set_content_id_index(content_id: Hash, index: i32) {
        call_native!(Void, 0x4B82FA6F2D624634u64, content_id, index);
    } // 0x4B82FA6F2D624634  b2612
    pub unsafe fn get_content_id_index(content_id: Hash) -> i32 {
        call_native!(i32, 0xECF041186C5A94DCu64, content_id)
    } // 0xECF041186C5A94DC  b2612
    pub unsafe fn _set_content_prop_type(model: Hash, _type: i32) {
        call_native!(Void, 0xBA4583AF4C678A9Bu64, model, _type);
    } // 0xBA4583AF4C678A9B  b3095
    pub unsafe fn _get_content_prop_type(model: Hash) -> i32 {
        call_native!(i32, 0x8BAF8AD59F47AAFCu64, model)
    } // 0x8BAF8AD59F47AAFC  b3095
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod mobile {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn create_mobile_phone(phone_type: i32) {
        call_native!(Void, 0xA4E8E696C532FBC7u64, phone_type);
    } // 0xA4E8E696C532FBC7 0x5BBC5E23 b323
    pub unsafe fn destroy_mobile_phone() {
        call_native!(Void, 0x3BC861DF703E5097u64);
    } // 0x3BC861DF703E5097 0x1A65037B b323
    pub unsafe fn set_mobile_phone_scale(scale: f32) {
        call_native!(Void, 0xCBDD322A73D6D932u64, scale);
    } // 0xCBDD322A73D6D932 0x09BCF1BE b323
    pub unsafe fn set_mobile_phone_rotation(rot_x: f32, rot_y: f32, rot_z: f32, p_3: Any) {
        call_native!(Void, 0xBB779C0CA917E865u64, rot_x, rot_y, rot_z, p_3);
    } // 0xBB779C0CA917E865 0x209C28CF b323
    pub unsafe fn get_mobile_phone_rotation(rotation: *mut Vector3, p_1: Vehicle) {
        call_native!(Void, 0x1CEFB61F193070AEu64, rotation, p_1);
    } // 0x1CEFB61F193070AE 0x17A29F23 b323
    pub unsafe fn set_mobile_phone_position(pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0x693A5C6D6734085Bu64, pos_x, pos_y, pos_z);
    } // 0x693A5C6D6734085B 0x841800B3 b323
    pub unsafe fn get_mobile_phone_position(position: *mut Vector3) {
        call_native!(Void, 0x584FDFDA48805B86u64, position);
    } // 0x584FDFDA48805B86 0xB2E1E1A0 b323
    pub unsafe fn script_is_moving_mobile_phone_offscreen(toggle: bool) {
        call_native!(Void, 0xF511F759238A5122u64, toggle);
    } // 0xF511F759238A5122 0x29828690 b323
    pub unsafe fn can_phone_be_seen_on_screen() -> bool {
        call_native!(bool, 0xC4E2813898C97A4Bu64)
    } // 0xC4E2813898C97A4B 0x5F978584 b323
    pub unsafe fn set_mobile_phone_dof_state(toggle: bool) {
        call_native!(Void, 0x375A706A5C2FD084u64, toggle);
    } // 0x375A706A5C2FD084  b372
    pub unsafe fn cell_set_input(direction: i32) {
        call_native!(Void, 0x95C9E72F3D7DEC9Bu64, direction);
    } // 0x95C9E72F3D7DEC9B  b323
    pub unsafe fn cell_horizontal_mode_toggle(toggle: bool) {
        call_native!(Void, 0x44E44169EF70138Eu64, toggle);
    } // 0x44E44169EF70138E  b323
    pub unsafe fn cell_cam_activate(p_0: bool, p_1: bool) {
        call_native!(Void, 0xFDE8F069C542D126u64, p_0, p_1);
    } // 0xFDE8F069C542D126 0x234C1AE9 b323
    pub unsafe fn cell_cam_activate_selfie_mode(toggle: bool) {
        call_native!(Void, 0x015C49A93E3E086Eu64, toggle);
    } // 0x015C49A93E3E086E 0x4479B304 b323
    pub unsafe fn cell_cam_activate_shallow_dof_mode(toggle: bool) {
        call_native!(Void, 0xA2CCBE62CD4C91A4u64, toggle);
    } // 0xA2CCBE62CD4C91A4 0xC273BB4D b323
    pub unsafe fn cell_cam_set_selfie_mode_side_offset_scaling(p_0: f32) {
        call_native!(Void, 0x1B0B4AEED5B9B41Cu64, p_0);
    } // 0x1B0B4AEED5B9B41C  b323
    pub unsafe fn cell_cam_set_selfie_mode_horz_pan_offset(horizontal_pan: f32) {
        call_native!(Void, 0x53F4892D18EC90A4u64, horizontal_pan);
    } // 0x53F4892D18EC90A4  b323
    pub unsafe fn cell_cam_set_selfie_mode_vert_pan_offset(vert_pan: f32) {
        call_native!(Void, 0x3117D84EFA60F77Bu64, vert_pan);
    } // 0x3117D84EFA60F77B  b323
    pub unsafe fn cell_cam_set_selfie_mode_roll_offset(roll: f32) {
        call_native!(Void, 0x15E69E2802C24B8Du64, roll);
    } // 0x15E69E2802C24B8D  b323
    pub unsafe fn cell_cam_set_selfie_mode_distance_scaling(distance_scaling: f32) {
        call_native!(Void, 0xAC2890471901861Cu64, distance_scaling);
    } // 0xAC2890471901861C  b323
    pub unsafe fn cell_cam_set_selfie_mode_head_yaw_offset(yaw: f32) {
        call_native!(Void, 0xD6ADE981781FCA09u64, yaw);
    } // 0xD6ADE981781FCA09  b323
    pub unsafe fn cell_cam_set_selfie_mode_head_roll_offset(roll: f32) {
        call_native!(Void, 0xF1E22DC13F5EEBADu64, roll);
    } // 0xF1E22DC13F5EEBAD  b323
    pub unsafe fn cell_cam_set_selfie_mode_head_pitch_offset(pitch: f32) {
        call_native!(Void, 0x466DA42C89865553u64, pitch);
    } // 0x466DA42C89865553  b323
    pub unsafe fn cell_cam_is_char_visible_no_face_check(entity: Entity) -> bool {
        call_native!(bool, 0x439E9BC95B7E7FBEu64, entity)
    } // 0x439E9BC95B7E7FBE 0xBEA88097 b323
    pub unsafe fn get_mobile_phone_render_id(render_id: *mut i32) {
        call_native!(Void, 0xB4A53E05F68B6FA1u64, render_id);
    } // 0xB4A53E05F68B6FA1 0x88E4FECE b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod money {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn network_initialize_cash(wallet: i32, bank: i32) {
        call_native!(Void, 0x3DA5ECD1A56CBA6Du64, wallet, bank);
    } // 0x3DA5ECD1A56CBA6D 0x66DA9935 b323
    pub unsafe fn network_delete_character(character_slot: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x05A50AF38947EB8Du64, character_slot, p_1, p_2);
    } // 0x05A50AF38947EB8D 0xA9F7E9C3 b323
    pub unsafe fn network_manual_delete_character(character_slot: i32) {
        call_native!(Void, 0x821418C727FCACD7u64, character_slot);
    } // 0x821418C727FCACD7  b791
    pub unsafe fn network_get_player_is_high_earner() -> bool {
        call_native!(bool, 0xFB2456B2040A6A67u64)
    } // 0xFB2456B2040A6A67 0x63F093A6 b323
    pub unsafe fn network_clear_character_wallet(character_slot: i32) {
        call_native!(Void, 0xA921DED15FDF28F5u64, character_slot);
    } // 0xA921DED15FDF28F5 0x19F0C471 b323
    pub unsafe fn network_give_player_jobshare_cash(amount: i32, gamer_handle: *mut Any) {
        call_native!(Void, 0xFB18DF9CB95E0105u64, amount, gamer_handle);
    } // 0xFB18DF9CB95E0105 0xC6047FDB b323
    pub unsafe fn network_receive_player_jobshare_cash(value: i32, gamer_handle: *mut Any) {
        call_native!(Void, 0x56A3B51944C50598u64, value, gamer_handle);
    } // 0x56A3B51944C50598 0x4ED71C1A b323
    pub unsafe fn network_can_share_job_cash() -> bool {
        call_native!(bool, 0x1C2473301B1C66BAu64)
    } // 0x1C2473301B1C66BA 0xA27B9FE8 b323
    pub unsafe fn network_refund_cash(
        index: i32,
        context: *const i8,
        reason: *const i8,
        p_3: bool,
    ) {
        call_native!(Void, 0xF9C812CD7C46E817u64, index, context, reason, p_3);
    } // 0xF9C812CD7C46E817 0x07C92F21 b323
    pub unsafe fn network_deduct_cash(
        amount: i32,
        p_1: *const i8,
        p_2: *const i8,
        p_3: bool,
        p_4: bool,
        p_5: bool,
    ) {
        call_native!(Void, 0x18B7AE224B087E26u64, amount, p_1, p_2, p_3, p_4, p_5);
    } // 0x18B7AE224B087E26  b323
    pub unsafe fn network_money_can_bet(amount: i32, p_1: bool, p_2: bool) -> bool {
        call_native!(bool, 0x81404F3DC124FE5Bu64, amount, p_1, p_2)
    } // 0x81404F3DC124FE5B 0x8474E6F0 b323
    pub unsafe fn network_can_bet(amount: i32) -> bool {
        call_native!(bool, 0x3A54E33660DED67Fu64, amount)
    } // 0x3A54E33660DED67F 0xE3802533 b323
    pub unsafe fn network_casino_can_bet(hash: Hash) -> bool {
        call_native!(bool, 0x158C16F5E4CF41F8u64, hash)
    } // 0x158C16F5E4CF41F8  b1734
    pub unsafe fn network_casino_can_bet_pvc() -> bool {
        call_native!(bool, 0x394DCDB9E836B7A9u64)
    } // 0x394DCDB9E836B7A9  b1734
    pub unsafe fn network_casino_can_bet_amount(p_0: Any) -> bool {
        call_native!(bool, 0xF62F6D9528358FE4u64, p_0)
    } // 0xF62F6D9528358FE4  b1734
    pub unsafe fn network_casino_can_buy_chips_pvc() -> bool {
        call_native!(bool, 0x8968D4D8C6C40C11u64)
    } // 0x8968D4D8C6C40C11  b1734
    pub unsafe fn network_casino_buy_chips(p_0: i32, p_1: i32) -> bool {
        call_native!(bool, 0x3BD101471C7F9EECu64, p_0, p_1)
    } // 0x3BD101471C7F9EEC  b1734
    pub unsafe fn network_casino_sell_chips(p_0: i32, p_1: i32) -> bool {
        call_native!(bool, 0xED44897CB336F480u64, p_0, p_1)
    } // 0xED44897CB336F480  b1734
    pub unsafe fn network_defer_cash_transactions_until_shop_save() {
        call_native!(Void, 0xCD0F5B5D932AE473u64);
    } // 0xCD0F5B5D932AE473 0xC4CD928D b323
    pub unsafe fn can_pay_amount_to_boss(p_0: i32, p_1: i32, amount: i32, p_3: *mut i32) -> bool {
        call_native!(bool, 0x9777734DAD16992Fu64, p_0, p_1, amount, p_3)
    } // 0x9777734DAD16992F  b573
    pub unsafe fn network_earn_from_pickup(amount: i32) {
        call_native!(Void, 0xED1517D3AF17C698u64, amount);
    } // 0xED1517D3AF17C698 0x70A0ED62 b323
    pub unsafe fn network_earn_from_cashing_out(amount: i32) {
        call_native!(Void, 0x718FBBF67414FA36u64, amount);
    } // 0x718FBBF67414FA36  b1290
    pub unsafe fn network_earn_from_gangattack_pickup(amount: i32) {
        call_native!(Void, 0xA03D4ACE0A3284CEu64, amount);
    } // 0xA03D4ACE0A3284CE 0x33C20BC4 b323
    pub unsafe fn network_earn_assassinate_target_killed(amount: i32) {
        call_native!(Void, 0xFA700D8A9905F78Au64, amount);
    } // 0xFA700D8A9905F78A  b1604
    pub unsafe fn network_earn_from_rob_armored_cars(amount: i32) {
        call_native!(Void, 0xF514621E8EA463D0u64, amount);
    } // 0xF514621E8EA463D0 0x30B3EC0A b323
    pub unsafe fn network_earn_from_crate_drop(amount: i32) {
        call_native!(Void, 0xB1CC1B9EC3007A2Au64, amount);
    } // 0xB1CC1B9EC3007A2A 0xEAF04923 b323
    pub unsafe fn network_earn_from_betting(amount: i32, p_1: *const i8) {
        call_native!(Void, 0x827A5BA1A44ACA6Du64, amount, p_1);
    } // 0x827A5BA1A44ACA6D 0xA0F7F07C b323
    pub unsafe fn network_earn_from_job(amount: i32, p_1: *const i8) {
        call_native!(Void, 0xB2CC4836834E8A98u64, amount, p_1);
    } // 0xB2CC4836834E8A98 0x0B6997FC b323
    pub unsafe fn network_earn_from_jobx2(amount: i32, p_1: *const i8) {
        call_native!(Void, 0xDEBBF584665411D0u64, amount, p_1);
    } // 0xDEBBF584665411D0  b1734
    pub unsafe fn network_earn_from_premium_job(amount: i32, p_1: *const i8) {
        call_native!(Void, 0xC8407624CEF2354Bu64, amount, p_1);
    } // 0xC8407624CEF2354B  b791
    pub unsafe fn network_earn_from_bend_job(amount: i32, heist_hash: *const i8) {
        call_native!(Void, 0x61326EE6DF15B0CAu64, amount, heist_hash);
    } // 0x61326EE6DF15B0CA 0xBB293400 b323
    pub unsafe fn network_earn_from_challenge_win(p_0: Any, p_1: *mut Any, p_2: bool) {
        call_native!(Void, 0x2B171E6B2F64D8DFu64, p_0, p_1, p_2);
    } // 0x2B171E6B2F64D8DF 0x2BEFB6C4 b323
    pub unsafe fn network_earn_from_bounty(
        amount: i32,
        gamer_handle: *mut Any,
        p_2: *mut Any,
        p_3: Any,
    ) {
        call_native!(Void, 0x131BB5DA15453ACFu64, amount, gamer_handle, p_2, p_3);
    } // 0x131BB5DA15453ACF 0x127F2DAE b323
    pub unsafe fn network_earn_from_import_export(amount: i32, model_hash: Hash) {
        call_native!(Void, 0xF92A014A634442D6u64, amount, model_hash);
    } // 0xF92A014A634442D6 0xF11FC458 b323
    pub unsafe fn network_earn_from_holdups(amount: i32) {
        call_native!(Void, 0x45B8154E077D9E4Du64, amount);
    } // 0x45B8154E077D9E4D 0xE6B90E9C b323
    pub unsafe fn network_earn_from_property(amount: i32, property_name: Hash) {
        call_native!(Void, 0x849648349D77F5C5u64, amount, property_name);
    } // 0x849648349D77F5C5 0x9BE4F7E1 b323
    pub unsafe fn network_earn_from_ai_target_kill(p_0: Any, p_1: Any) {
        call_native!(Void, 0x515B4A22E4D3C6D7u64, p_0, p_1);
    } // 0x515B4A22E4D3C6D7 0x866004A8 b323
    pub unsafe fn network_earn_from_not_badsport(amount: i32) {
        call_native!(Void, 0x4337511FA8221D36u64, amount);
    } // 0x4337511FA8221D36 0xCC068380 b323
    pub unsafe fn network_earn_from_vehicle(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0xB539BD8A4C1EECF8u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0xB539BD8A4C1EECF8 0xF803589D b323
    pub unsafe fn network_earn_from_personal_vehicle(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
    ) {
        call_native!(
            Void,
            0x3F4D00167E41E0ADu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0x3F4D00167E41E0AD 0x96B8BEE8 b323
    pub unsafe fn network_earn_from_daily_objectives(
        amount: i32,
        _type: *const i8,
        character_slot: i32,
    ) {
        call_native!(Void, 0x6EA318C91C1A8786u64, amount, _type, character_slot);
    } // 0x6EA318C91C1A8786 0xAB6BD72F b323
    pub unsafe fn network_earn_from_ambient_job(p_0: i32, p_1: *const i8, p_2: *mut Any) {
        call_native!(Void, 0xFB6DB092FBAE29E6u64, p_0, p_1, p_2);
    } // 0xFB6DB092FBAE29E6 0xA14CC95D b323
    pub unsafe fn network_earn_from_job_bonus(p_0: Any, p_1: *mut Any, p_2: *mut Any) {
        call_native!(Void, 0x6816FB4416760775u64, p_0, p_1, p_2);
    } // 0x6816FB4416760775 0xBEE23713 b323
    pub unsafe fn network_earn_from_criminal_mastermind(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xFA009A62990671D4u64, p_0, p_1, p_2);
    } // 0xFA009A62990671D4  b1290
    pub unsafe fn network_earn_heist_award(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x9D4FDBB035229669u64, p_0, p_1, p_2);
    } // 0x9D4FDBB035229669  b1290
    pub unsafe fn network_earn_first_time_bonus(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x11B0A20C493F7E36u64, p_0, p_1, p_2);
    } // 0x11B0A20C493F7E36  b1290
    pub unsafe fn network_earn_goon(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xCDA1C62BE2777802u64, p_0, p_1, p_2);
    } // 0xCDA1C62BE2777802  b573
    pub unsafe fn network_earn_boss(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x08B0CA7A6AB3AC32u64, p_0, p_1, p_2);
    } // 0x08B0CA7A6AB3AC32  b573
    pub unsafe fn network_earn_agency(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0CB1BE0633C024A8u64, p_0, p_1, p_2, p_3);
    } // 0x0CB1BE0633C024A8  b573
    pub unsafe fn network_earn_from_warehouse(amount: i32, id: i32) {
        call_native!(Void, 0x3E4ADAFF1830F146u64, amount, id);
    } // 0x3E4ADAFF1830F146  b757
    pub unsafe fn network_earn_from_contraband(amount: i32, p_1: Any) {
        call_native!(Void, 0xECA658CE2A4E5A72u64, amount, p_1);
    } // 0xECA658CE2A4E5A72  b757
    pub unsafe fn network_earn_from_destroying_contraband(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x84C0116D012E8FC2u64, p_0, p_1, p_2);
    } // 0x84C0116D012E8FC2  b757
    pub unsafe fn network_earn_from_smuggler_work(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x6B7E4FB50D5F3D65u64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x6B7E4FB50D5F3D65  b1180
    pub unsafe fn network_earn_from_hangar_trade(p_0: Any, p_1: Any) {
        call_native!(Void, 0x31BA138F6304FB9Fu64, p_0, p_1);
    } // 0x31BA138F6304FB9F  b1180
    pub unsafe fn network_earn_purchase_club_house(p_0: Any, p_1: Any) {
        call_native!(Void, 0x55A1E095DB052FA5u64, p_0, p_1);
    } // 0x55A1E095DB052FA5  b877
    pub unsafe fn network_earn_from_business_product(amount: i32, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x8586789730B10CAFu64, amount, p_1, p_2, p_3);
    } // 0x8586789730B10CAF  b877
    pub unsafe fn network_earn_from_vehicle_export(amount: i32, p_1: Any, p_2: Any) {
        call_native!(Void, 0xEDEAD9A91EC768B3u64, amount, p_1, p_2);
    } // 0xEDEAD9A91EC768B3  b944
    pub unsafe fn network_earn_smuggler_agency(amount: i32, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xDEE612F2D71B0308u64, amount, p_1, p_2, p_3);
    } // 0xDEE612F2D71B0308  b1180
    pub unsafe fn network_earn_bounty_hunter_reward(p_0: Any) {
        call_native!(Void, 0xF6B170F9A02E9E87u64, p_0);
    } // 0xF6B170F9A02E9E87  b1493
    pub unsafe fn network_earn_from_business_battle(p_0: Any) {
        call_native!(Void, 0x42FCE14F50F27291u64, p_0);
    } // 0x42FCE14F50F27291  b1493
    pub unsafe fn network_earn_from_club_management_participation(p_0: Any, p_1: i32) {
        call_native!(Void, 0xA75EAC69F59E96E7u64, p_0, p_1);
    } // 0xA75EAC69F59E96E7  b1493
    pub unsafe fn network_earn_from_fmbb_phonecall_mission(p_0: Any) {
        call_native!(Void, 0xC5156361F26E2212u64, p_0);
    } // 0xC5156361F26E2212  b1493
    pub unsafe fn network_earn_from_business_hub_sell(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x0B39CF0D53F1C883u64, p_0, p_1, p_2);
    } // 0x0B39CF0D53F1C883  b1493
    pub unsafe fn network_earn_from_fmbb_boss_work(p_0: Any) {
        call_native!(Void, 0x1FDA0AA679C9919Bu64, p_0);
    } // 0x1FDA0AA679C9919B  b1493
    pub unsafe fn network_earn_fmbb_wage_bonus(p_0: Any) {
        call_native!(Void, 0xFFFBA1B1F7C0B6F4u64, p_0);
    } // 0xFFFBA1B1F7C0B6F4  b1493
    pub unsafe fn network_can_spend_money(
        p_0: Any,
        p_1: bool,
        p_2: bool,
        p_3: bool,
        p_4: Any,
        p_5: Any,
    ) -> bool {
        call_native!(bool, 0xAB3CAA6B422164DAu64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0xAB3CAA6B422164DA 0x5AA379D9 b323
    pub unsafe fn network_can_spend_money2(
        p_0: Any,
        p_1: bool,
        p_2: bool,
        p_3: bool,
        p_4: *mut Any,
        p_5: Any,
        p_6: Any,
    ) -> bool {
        call_native!(
            bool,
            0x7303E27CC6532080u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0x7303E27CC6532080  b323
    pub unsafe fn network_buy_item(
        amount: i32,
        item: Hash,
        p_2: Any,
        p_3: Any,
        p_4: bool,
        item_name: *const i8,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: bool,
    ) {
        call_native!(
            Void,
            0xF0077C797F66A355u64,
            amount,
            item,
            p_2,
            p_3,
            p_4,
            item_name,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0xF0077C797F66A355 0xA07B6368 b323
    pub unsafe fn network_spent_taxi(amount: i32, p_1: bool, p_2: bool, p_3: Any, p_4: Any) {
        call_native!(Void, 0x17C3A7D31EAE39F9u64, amount, p_1, p_2, p_3, p_4);
    } // 0x17C3A7D31EAE39F9 0x1F3DB3E3 b323
    pub unsafe fn network_pay_employee_wage(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0x5FD5ED82CBBE9989u64, p_0, p_1, p_2);
    } // 0x5FD5ED82CBBE9989 0xBE70849B b323
    pub unsafe fn network_pay_match_entry_fee(
        amount: i32,
        match_id: *const i8,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0x9346E14F2AF74D46u64, amount, match_id, p_2, p_3);
    } // 0x9346E14F2AF74D46 0x224A3488 b323
    pub unsafe fn network_spent_betting(
        amount: i32,
        p_1: i32,
        match_id: *const i8,
        p_3: bool,
        p_4: bool,
    ) {
        call_native!(Void, 0x1C436FD11FFA692Fu64, amount, p_1, match_id, p_3, p_4);
    } // 0x1C436FD11FFA692F 0xF8A07513 b323
    pub unsafe fn network_spent_wager(p_0: Any, p_1: Any, amount: i32) {
        call_native!(Void, 0xD99DB210089617FEu64, p_0, p_1, amount);
    } // 0xD99DB210089617FE  b573
    pub unsafe fn network_spent_in_stripclub(p_0: Any, p_1: bool, p_2: Any, p_3: bool) {
        call_native!(Void, 0xEE99784E4467689Cu64, p_0, p_1, p_2, p_3);
    } // 0xEE99784E4467689C 0x8957038E b323
    pub unsafe fn network_buy_healthcare(cost: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xD9B067E55253E3DDu64, cost, p_1, p_2);
    } // 0xD9B067E55253E3DD 0x832150E5 b323
    pub unsafe fn network_buy_airstrike(cost: i32, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x763B4BD305338F19u64, cost, p_1, p_2, p_3);
    } // 0x763B4BD305338F19 0x40470683 b323
    pub unsafe fn network_buy_backup_gang(
        p_0: i32,
        p_1: i32,
        p_2: bool,
        p_3: bool,
        npc_provider: i32,
    ) {
        call_native!(
            Void,
            0xA3EDDAA42411D3B9u64,
            p_0,
            p_1,
            p_2,
            p_3,
            npc_provider
        );
    } // 0xA3EDDAA42411D3B9 0x2AD2EC51 b323
    pub unsafe fn network_buy_heli_strike(cost: i32, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x81AA4610E3FD3A69u64, cost, p_1, p_2, p_3);
    } // 0x81AA4610E3FD3A69 0x047547D4 b323
    pub unsafe fn network_spent_ammo_drop(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xB162DC95C0A3317Bu64, p_0, p_1, p_2, p_3);
    } // 0xB162DC95C0A3317B 0x4B643076 b323
    pub unsafe fn network_buy_bounty(amount: i32, victim: Player, p_2: bool, p_3: bool, p_4: Any) {
        call_native!(Void, 0x7B718E197453F2D9u64, amount, victim, p_2, p_3, p_4);
    } // 0x7B718E197453F2D9 0xCB89CBE0 b323
    pub unsafe fn network_buy_property(cost: i32, property_name: Hash, p_2: bool, p_3: bool) {
        call_native!(Void, 0x650A08A280870AF6u64, cost, property_name, p_2, p_3);
    } // 0x650A08A280870AF6 0x7D479AAB b323
    pub unsafe fn network_buy_smokes(p_0: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x75AF80E61248EEBDu64, p_0, p_1, p_2);
    } // 0x75AF80E61248EEBD 0xC0AB03EB b323
    pub unsafe fn network_spent_heli_pickup(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x7BF1D73DB2ECA492u64, p_0, p_1, p_2, p_3);
    } // 0x7BF1D73DB2ECA492 0x27EEBCAB b323
    pub unsafe fn network_spent_boat_pickup(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x524EE43A37232C00u64, p_0, p_1, p_2, p_3);
    } // 0x524EE43A37232C00 0xB241CABD b323
    pub unsafe fn network_spent_bull_shark(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xA6DD8458CE24012Cu64, p_0, p_1, p_2, p_3);
    } // 0xA6DD8458CE24012C 0xDE7D398C b323
    pub unsafe fn network_spent_cash_drop(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x289016EC778D60E0u64, amount, p_1, p_2);
    } // 0x289016EC778D60E0 0x87BD1D11 b323
    pub unsafe fn network_spent_hire_mugger(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xE404BFB981665BF0u64, p_0, p_1, p_2, p_3);
    } // 0xE404BFB981665BF0 0xE792C4A5 b323
    pub unsafe fn network_spent_robbed_by_mugger(amount: i32, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x995A65F15F581359u64, amount, p_1, p_2, p_3);
    } // 0x995A65F15F581359 0xE6AAA0D5 b323
    pub unsafe fn network_spent_hire_mercenary(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xE7B80E2BF9D80BD6u64, p_0, p_1, p_2, p_3);
    } // 0xE7B80E2BF9D80BD6 0x99CF02C4 b323
    pub unsafe fn network_spent_buy_wantedlevel(
        p_0: Any,
        p_1: *mut Any,
        p_2: bool,
        p_3: bool,
        p_4: Any,
    ) {
        call_native!(Void, 0xE1B13771A843C4F6u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xE1B13771A843C4F6 0xE7CB4F95 b323
    pub unsafe fn network_spent_buy_offtheradar(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xA628A745E2275C5Du64, p_0, p_1, p_2, p_3);
    } // 0xA628A745E2275C5D 0x20DDCF2F b323
    pub unsafe fn network_spent_buy_reveal_players(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x6E176F1B18BC0637u64, p_0, p_1, p_2, p_3);
    } // 0x6E176F1B18BC0637 0x2F7836E2 b323
    pub unsafe fn network_spent_carwash(p_0: Any, p_1: Any, p_2: Any, p_3: bool, p_4: bool) {
        call_native!(Void, 0xEC03C719DB2F4306u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xEC03C719DB2F4306 0x8283E028 b323
    pub unsafe fn network_spent_cinema(p_0: Any, p_1: Any, p_2: bool, p_3: bool) {
        call_native!(Void, 0x6B38ECB05A63A685u64, p_0, p_1, p_2, p_3);
    } // 0x6B38ECB05A63A685 0x1100CAF5 b323
    pub unsafe fn network_spent_telescope(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0x7FE61782AD94CC09u64, p_0, p_1, p_2);
    } // 0x7FE61782AD94CC09 0xAE7FF044 b323
    pub unsafe fn network_spent_holdups(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0xD9B86B9872039763u64, p_0, p_1, p_2);
    } // 0xD9B86B9872039763 0x1B3803B1 b323
    pub unsafe fn network_spent_buy_passive_mode(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x6D3A430D1A809179u64, p_0, p_1, p_2, p_3);
    } // 0x6D3A430D1A809179 0x7E97C92C b323
    pub unsafe fn network_spent_bank_interest(p_0: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xCA230C9682556CF1u64, p_0, p_1, p_2);
    } // 0xCA230C9682556CF1 0xF02E92D7 b323
    pub unsafe fn network_spent_prostitutes(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0xB21B89501CFAC79Eu64, p_0, p_1, p_2);
    } // 0xB21B89501CFAC79E 0x78436D07 b323
    pub unsafe fn network_spent_arrest_bail(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0x812F5488B1B2A299u64, p_0, p_1, p_2);
    } // 0x812F5488B1B2A299 0x5AEE2FC1 b323
    pub unsafe fn network_spent_pay_vehicle_insurance_premium(
        amount: i32,
        vehicle_model: Hash,
        gamer_handle: *mut Any,
        not_bankrupt: bool,
        has_the_money: bool,
    ) {
        call_native!(
            Void,
            0x9FF28D88C766E3E8u64,
            amount,
            vehicle_model,
            gamer_handle,
            not_bankrupt,
            has_the_money
        );
    } // 0x9FF28D88C766E3E8 0x4E665BB2 b323
    pub unsafe fn network_spent_call_player(p_0: Any, p_1: *mut Any, p_2: bool, p_3: bool) {
        call_native!(Void, 0xACDE7185B374177Cu64, p_0, p_1, p_2, p_3);
    } // 0xACDE7185B374177C 0x1A89B5FC b323
    pub unsafe fn network_spent_bounty(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0x29B260B84947DFCCu64, p_0, p_1, p_2);
    } // 0x29B260B84947DFCC 0x3401FC96 b323
    pub unsafe fn network_spent_from_rockstar(p_0: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x6A445B64ED7ABEB5u64, p_0, p_1, p_2);
    } // 0x6A445B64ED7ABEB5 0x54198922 b323
    pub unsafe fn network_spend_earned_from_bank_and_wallets(amount: i32) -> i32 {
        call_native!(i32, 0x9B5016A6433A68C5u64, amount)
    } // 0x9B5016A6433A68C5 0xBD64F1B7 b323
    pub unsafe fn process_cash_gift(p_0: *mut i32, p_1: *mut i32, p_2: *const i8) -> *const i8 {
        call_native!(*const i8, 0x20194D48EAEC9A41u64, p_0, p_1, p_2)
    } // 0x20194D48EAEC9A41 0xC5D8B1E9 b323
    pub unsafe fn network_spent_move_submarine(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xCD4D66B43B1DD28Du64, p_0, p_1, p_2);
    } // 0xCD4D66B43B1DD28D  b2189
    pub unsafe fn network_spent_player_healthcare(p_0: i32, p_1: i32, p_2: bool, p_3: bool) {
        call_native!(Void, 0x7C99101F7FCE2EE5u64, p_0, p_1, p_2, p_3);
    } // 0x7C99101F7FCE2EE5 0x3D96A21C b323
    pub unsafe fn network_spent_no_cops(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xD5BB406F4E04019Fu64, p_0, p_1, p_2, p_3);
    } // 0xD5BB406F4E04019F 0x2E51C61C b323
    pub unsafe fn network_spent_cargo_sourcing(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x948705F6F9C50824u64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x948705F6F9C50824  b2699
    pub unsafe fn network_spent_request_job(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x8204DA7934DF3155u64, p_0, p_1, p_2, p_3);
    } // 0x8204DA7934DF3155 0xD57A5125 b323
    pub unsafe fn network_spent_request_heist(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x9D26502BB97BFE62u64, p_0, p_1, p_2, p_3);
    } // 0x9D26502BB97BFE62 0xF4287778 b323
    pub unsafe fn network_buy_fairground_ride(
        amount: i32,
        p_1: Any,
        p_2: bool,
        p_3: bool,
        p_4: Any,
    ) {
        call_native!(Void, 0x8A7B3952DD64D2B5u64, amount, p_1, p_2, p_3, p_4);
    } // 0x8A7B3952DD64D2B5 0xD9622D64 b323
    pub unsafe fn network_economy_has_fixed_crazy_numbers() -> bool {
        call_native!(bool, 0x7C4FCCD2E4DEB394u64)
    } // 0x7C4FCCD2E4DEB394  b323
    pub unsafe fn network_spent_job_skip(amount: i32, match_id: *const i8, p_2: bool, p_3: bool) {
        call_native!(Void, 0x28F174A67B8D0C2Fu64, amount, match_id, p_2, p_3);
    } // 0x28F174A67B8D0C2F  b323
    pub unsafe fn network_spent_boss_goon(amount: i32, p_1: bool, p_2: bool) -> bool {
        call_native!(bool, 0xFFBE02CD385356BDu64, amount, p_1, p_2)
    } // 0xFFBE02CD385356BD  b573
    pub unsafe fn network_spend_goon(p_0: i32, p_1: i32, amount: i32) {
        call_native!(Void, 0x08A1B82B91900682u64, p_0, p_1, amount);
    } // 0x08A1B82B91900682  b573
    pub unsafe fn network_spend_boss(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xDBC966A01C02BCA7u64, p_0, p_1, p_2);
    } // 0xDBC966A01C02BCA7  b573
    pub unsafe fn network_spent_move_yacht(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xE7DF4E0545DFB56Eu64, amount, p_1, p_2);
    } // 0xE7DF4E0545DFB56E  b573
    pub unsafe fn network_spent_rename_organization(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xFC4EE00A7B3BFB76u64, p_0, p_1, p_2, p_3);
    } // 0xFC4EE00A7B3BFB76  b573
    pub unsafe fn network_buy_contraband_mission(
        p_0: i32,
        p_1: i32,
        p_2: Hash,
        p_3: bool,
        p_4: bool,
    ) {
        call_native!(Void, 0x30FD873ECE50E9F6u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x30FD873ECE50E9F6  b757
    pub unsafe fn network_spent_pa_service_heli(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x112209CE0290C03Au64, p_0, p_1, p_2, p_3);
    } // 0x112209CE0290C03A  b757
    pub unsafe fn network_spent_pa_service_vehicle(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xED5FD7AF10F5E262u64, p_0, p_1, p_2, p_3);
    } // 0xED5FD7AF10F5E262  b757
    pub unsafe fn network_spent_pa_service_snack(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0D30EB83668E63C5u64, p_0, p_1, p_2, p_3);
    } // 0x0D30EB83668E63C5  b757
    pub unsafe fn network_spent_pa_service_dancer(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xB49ECA122467D05Fu64, p_0, p_1, p_2, p_3);
    } // 0xB49ECA122467D05F  b757
    pub unsafe fn network_spent_pa_service_impound(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xE23ADC6FCB1F29AEu64, p_0, p_1, p_2);
    } // 0xE23ADC6FCB1F29AE  b757
    pub unsafe fn network_spent_pa_heli_pickup(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0FE8E1FCD2B86B33u64, p_0, p_1, p_2, p_3);
    } // 0x0FE8E1FCD2B86B33  b757
    pub unsafe fn network_spent_purchase_office_property(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x69EF772B192614C1u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x69EF772B192614C1  b757
    pub unsafe fn network_spent_upgrade_office_property(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x8E243837643D9583u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x8E243837643D9583  b757
    pub unsafe fn network_spent_purchase_warehouse_property(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0xBD0EFB25CCA8F97Au64, p_0, p_1, p_2, p_3);
    } // 0xBD0EFB25CCA8F97A  b757
    pub unsafe fn network_spent_upgrade_warehouse_property(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xA95F667A755725DAu64, p_0, p_1, p_2, p_3);
    } // 0xA95F667A755725DA  b757
    pub unsafe fn network_spent_purchase_impexp_warehouse_property(
        amount: i32,
        data: *mut Any,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0x33981D6804E62F49u64, amount, data, p_2, p_3);
    } // 0x33981D6804E62F49  b944
    pub unsafe fn network_spent_upgrade_impexp_warehouse_property(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0x4128464231E3CA0Bu64, p_0, p_1, p_2, p_3);
    } // 0x4128464231E3CA0B  b944
    pub unsafe fn network_spent_trade_impexp_warehouse_property(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0x2FAB6614CE22E196u64, p_0, p_1, p_2, p_3);
    } // 0x2FAB6614CE22E196  b944
    pub unsafe fn network_spent_order_warehouse_vehicle(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x05F04155A226FBBFu64, p_0, p_1, p_2, p_3);
    } // 0x05F04155A226FBBF  b757
    pub unsafe fn network_spent_order_bodyguard_vehicle(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xE8B0B270B6E7C76Eu64, p_0, p_1, p_2, p_3);
    } // 0xE8B0B270B6E7C76E  b757
    pub unsafe fn network_spent_jukebox(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x5BCDE0F640C773D2u64, p_0, p_1, p_2, p_3);
    } // 0x5BCDE0F640C773D2  b877
    pub unsafe fn network_spent_purchase_club_house(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x998E18CEB44487FCu64, p_0, p_1, p_2, p_3);
    } // 0x998E18CEB44487FC  b877
    pub unsafe fn network_spent_upgrade_club_house(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xFA07759E6FDDD7CFu64, p_0, p_1, p_2, p_3);
    } // 0xFA07759E6FDDD7CF  b877
    pub unsafe fn network_spent_purchase_business_property(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x6FD97159FE3C971Au64, p_0, p_1, p_2, p_3);
    } // 0x6FD97159FE3C971A  b877
    pub unsafe fn network_spent_upgrade_business_property(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x675D19C6067CAE08u64, p_0, p_1, p_2, p_3);
    } // 0x675D19C6067CAE08  b877
    pub unsafe fn network_spent_trade_business_property(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xA51B086B0B2C0F7Au64, p_0, p_1, p_2, p_3);
    } // 0xA51B086B0B2C0F7A  b877
    pub unsafe fn network_spent_mc_ability(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xD7CCCBA28C4ECAF0u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xD7CCCBA28C4ECAF0  b877
    pub unsafe fn network_spent_pay_business_supplies(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0035BB914316F1E3u64, p_0, p_1, p_2, p_3);
    } // 0x0035BB914316F1E3  b877
    pub unsafe fn network_spent_change_appearance(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x5F456788B05FAEACu64, p_0, p_1, p_2);
    } // 0x5F456788B05FAEAC  b944
    pub unsafe fn network_spent_vehicle_export_mods(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
    ) {
        call_native!(
            Void,
            0xA75CCF58A60A5FD1u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0xA75CCF58A60A5FD1  b944
    pub unsafe fn network_spent_purchase_office_garage(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xB4C2EC463672474Eu64, p_0, p_1, p_2, p_3);
    } // 0xB4C2EC463672474E  b944
    pub unsafe fn network_spent_upgrade_office_garage(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x2AFC2D19B50797F2u64, p_0, p_1, p_2, p_3);
    } // 0x2AFC2D19B50797F2  b944
    pub unsafe fn network_spent_import_export_repair(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xC1952F3773BA18FEu64, p_0, p_1, p_2);
    } // 0xC1952F3773BA18FE  b944
    pub unsafe fn network_spent_purchase_hangar(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xCCB339CC970452DAu64, p_0, p_1, p_2, p_3);
    } // 0xCCB339CC970452DA  b1180
    pub unsafe fn network_spent_upgrade_hangar(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x615EB504B0788DAFu64, p_0, p_1, p_2, p_3);
    } // 0x615EB504B0788DAF  b1180
    pub unsafe fn network_spent_hangar_utility_charges(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xB18AC2ECBB15CB6Au64, amount, p_1, p_2);
    } // 0xB18AC2ECBB15CB6A  b1180
    pub unsafe fn network_spent_hangar_staff_charges(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xB1F1346FD57685D7u64, amount, p_1, p_2);
    } // 0xB1F1346FD57685D7  b1180
    pub unsafe fn network_spent_buy_truck(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xAC272C0AE01B4BD8u64, p_0, p_1, p_2, p_3);
    } // 0xAC272C0AE01B4BD8  b1103
    pub unsafe fn network_spent_upgrade_truck(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x365E877C61D6988Bu64, p_0, p_1, p_2, p_3);
    } // 0x365E877C61D6988B  b1103
    pub unsafe fn network_spent_buy_bunker(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x12D148D26538D0F9u64, p_0, p_1, p_2, p_3);
    } // 0x12D148D26538D0F9  b1103
    pub unsafe fn network_spent_uprade_bunker(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0C82D21A77C22D49u64, p_0, p_1, p_2, p_3);
    } // 0x0C82D21A77C22D49  b1103
    pub unsafe fn network_earn_from_sell_bunker(amount: i32, bunker_hash: Hash) {
        call_native!(Void, 0x9251B6ABF2D0A5B4u64, amount, bunker_hash);
    } // 0x9251B6ABF2D0A5B4  b1103
    pub unsafe fn network_spent_ballistic_equipment(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x5D97630A8A0EF123u64, amount, p_1, p_2);
    } // 0x5D97630A8A0EF123  b1103
    pub unsafe fn network_earn_rdr_bonus(amount: i32, p_1: Any) {
        call_native!(Void, 0x7A5349B773584675u64, amount, p_1);
    } // 0x7A5349B773584675  b1290
    pub unsafe fn network_earn_wage_payment(amount: i32, p_1: Any) {
        call_native!(Void, 0x35F8DA0E8A31EF1Bu64, amount, p_1);
    } // 0x35F8DA0E8A31EF1B  b1180
    pub unsafe fn network_earn_wage_payment_bonus(amount: i32) {
        call_native!(Void, 0x005ACA7100BD101Du64, amount);
    } // 0x005ACA7100BD101D  b1180
    pub unsafe fn network_spent_buy_base(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x4EA3F425C7744D21u64, p_0, p_1, p_2, p_3);
    } // 0x4EA3F425C7744D21  b1290
    pub unsafe fn network_spent_upgrade_base(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x3DD3F33A5D55EA6Fu64, p_0, p_1, p_2, p_3);
    } // 0x3DD3F33A5D55EA6F  b1290
    pub unsafe fn network_spent_buy_tiltrotor(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x0CCE73BC7A11E885u64, p_0, p_1, p_2, p_3);
    } // 0x0CCE73BC7A11E885  b1290
    pub unsafe fn network_spent_upgrade_tiltrotor(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x165E135D6DFA2907u64, p_0, p_1, p_2, p_3);
    } // 0x165E135D6DFA2907  b1290
    pub unsafe fn network_spent_employ_assassins(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x5BBBD92186E1F1C5u64, p_0, p_1, p_2, p_3);
    } // 0x5BBBD92186E1F1C5  b1290
    pub unsafe fn network_spend_gangops_cannon(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x771ADB0E7635B7BFu64, p_0, p_1, p_2, p_3);
    } // 0x771ADB0E7635B7BF  b1290
    pub unsafe fn network_spend_gangops_skip_mission(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xDA947AE8880D5C18u64, p_0, p_1, p_2, p_3);
    } // 0xDA947AE8880D5C18  b1290
    pub unsafe fn network_spend_casino_heist_skip_mission(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x487009DD91D93429u64, p_0, p_1, p_2, p_3);
    } // 0x487009DD91D93429  b1868
    pub unsafe fn network_earn_sell_base(amount: i32, base_name_hash: Hash) {
        call_native!(Void, 0x0E1E2FF3F4EC11AAu64, amount, base_name_hash);
    } // 0x0E1E2FF3F4EC11AA  b1290
    pub unsafe fn network_earn_target_refund(amount: i32, p_1: i32) {
        call_native!(Void, 0x5B669CF2299A271Fu64, amount, p_1);
    } // 0x5B669CF2299A271F  b1290
    pub unsafe fn network_earn_gangops_wages(amount: i32, p_1: i32) {
        call_native!(Void, 0x2DCB19ABAB0380A8u64, amount, p_1);
    } // 0x2DCB19ABAB0380A8  b1290
    pub unsafe fn network_earn_gangops_wages_bonus(amount: i32, p_1: i32) {
        call_native!(Void, 0x15BB2A5C757EB91Fu64, amount, p_1);
    } // 0x15BB2A5C757EB91F  b1290
    pub unsafe fn network_earn_dar_challenge(amount: i32, p_1: Any) {
        call_native!(Void, 0xCAC672087B4A24ABu64, amount, p_1);
    } // 0xCAC672087B4A24AB  b1290
    pub unsafe fn network_earn_doomsday_finale_bonus(amount: i32, vehicle_hash: Hash) {
        call_native!(Void, 0x128A747F4A230952u64, amount, vehicle_hash);
    } // 0x128A747F4A230952  b1290
    pub unsafe fn network_earn_gangops_award(amount: i32, p_1: *const i8, p_2: Any) {
        call_native!(Void, 0xA9A31475F530DFDAu64, amount, p_1, p_2);
    } // 0xA9A31475F530DFDA  b1290
    pub unsafe fn network_earn_gangops_elite(amount: i32, p_1: *const i8, act_index: i32) {
        call_native!(Void, 0x2597A0D4A4FC2C77u64, amount, p_1, act_index);
    } // 0x2597A0D4A4FC2C77  b1290
    pub unsafe fn network_service_earn_gangops_rival_delivery(earned_money: i32) {
        call_native!(Void, 0x1B882107C23A9022u64, earned_money);
    } // 0x1B882107C23A9022  b1290
    pub unsafe fn network_spend_gangops_start_strand(
        _type: i32,
        amount: i32,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0xA19EC0786E326E06u64, _type, amount, p_2, p_3);
    } // 0xA19EC0786E326E06  b1290
    pub unsafe fn network_spend_gangops_trip_skip(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x5ECE6FD7B4EC8D6Au64, amount, p_1, p_2);
    } // 0x5ECE6FD7B4EC8D6A  b1290
    pub unsafe fn network_earn_gangops_prep_participation(amount: i32) {
        call_native!(Void, 0xED26584F6BDCBBFDu64, amount);
    } // 0xED26584F6BDCBBFD  b1290
    pub unsafe fn network_earn_gangops_setup(amount: i32, p_1: *const i8) {
        call_native!(Void, 0xA9160796D47A2CF8u64, amount, p_1);
    } // 0xA9160796D47A2CF8  b1290
    pub unsafe fn network_earn_gangops_finale(amount: i32, p_1: *const i8) {
        call_native!(Void, 0x1C121FC9545E0D52u64, amount, p_1);
    } // 0x1C121FC9545E0D52  b1290
    pub unsafe fn network_spend_gangops_repair_cost(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x2A7CEC72C3443BCCu64, p_0, p_1, p_2);
    } // 0x2A7CEC72C3443BCC  b1290
    pub unsafe fn network_earn_nightclub(p_0: Any) {
        call_native!(Void, 0xE0F82D68C7039158u64, p_0);
    } // 0xE0F82D68C7039158  b1493
    pub unsafe fn network_earn_nightclub_dancing(p_0: Any) {
        call_native!(Void, 0xB4DEAE67F35E2ACDu64, p_0);
    } // 0xB4DEAE67F35E2ACD  b1493
    pub unsafe fn network_earn_bb_event_bonus(amount: i32) {
        call_native!(Void, 0xFDD8D2440DAF1590u64, amount);
    } // 0xFDD8D2440DAF1590  b1604
    pub unsafe fn network_spent_purchase_hacker_truck(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x2A93C46AAB1EACC9u64, p_0, p_1, p_2, p_3);
    } // 0x2A93C46AAB1EACC9  b1493
    pub unsafe fn network_spent_upgrade_hacker_truck(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x226C284C830D0CA8u64, p_0, p_1, p_2, p_3);
    } // 0x226C284C830D0CA8  b1493
    pub unsafe fn network_earn_hacker_truck(p_0: Any, amount: i32, p_2: Any, p_3: Any) {
        call_native!(Void, 0xE8815FE993896AD3u64, p_0, amount, p_2, p_3);
    } // 0xE8815FE993896AD3  b1493
    pub unsafe fn network_spent_purchase_nightclub_and_warehouse(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0xED76D195E6E3BF7Fu64, p_0, p_1, p_2, p_3);
    } // 0xED76D195E6E3BF7F  b1493
    pub unsafe fn network_spent_upgrade_nightclub_and_warehouse(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0x1DC9B749E7AE282Bu64, p_0, p_1, p_2, p_3);
    } // 0x1DC9B749E7AE282B  b1493
    pub unsafe fn network_earn_nightclub_and_warehouse(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0xC6E74CF8C884C880u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0xC6E74CF8C884C880  b1493
    pub unsafe fn network_spend_nightclub_and_warehouse(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x65482BFD0923C8A1u64, p_0, p_1, p_2, p_3);
    } // 0x65482BFD0923C8A1  b1493
    pub unsafe fn network_spent_rdr_hatchet_bonus(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xE284D46FFDB82E36u64, amount, p_1, p_2);
    } // 0xE284D46FFDB82E36  b1493
    pub unsafe fn network_spent_nightclub_entry_fee(
        player: Player,
        amount: i32,
        p_1: Any,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0x876056684281655Du64, player, amount, p_1, p_2, p_3);
    } // 0x876056684281655D  b1493
    pub unsafe fn network_spend_nightclub_bar_drink(amount: i32, p_1: Any, p_2: bool, p_3: bool) {
        call_native!(Void, 0xDD21B016E4289465u64, amount, p_1, p_2, p_3);
    } // 0xDD21B016E4289465  b1493
    pub unsafe fn network_spend_bounty_hunter_mission(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x1BEA0CD93470BB1Fu64, amount, p_1, p_2);
    } // 0x1BEA0CD93470BB1F  b1493
    pub unsafe fn network_spent_rehire_dj(amount: i32, p_1: Any, p_2: bool, p_3: bool) {
        call_native!(Void, 0xF6C8A544E4CF14FCu64, amount, p_1, p_2, p_3);
    } // 0xF6C8A544E4CF14FC  b1493
    pub unsafe fn network_spent_arena_join_spectator(amount: i32, p_1: Any, p_2: bool, p_3: bool) {
        call_native!(Void, 0x14EAEA58F93B55AFu64, amount, p_1, p_2, p_3);
    } // 0x14EAEA58F93B55AF  b1604
    pub unsafe fn network_earn_arena_skill_level_progression(amount: i32, p_1: Any) {
        call_native!(Void, 0xE08256F972C7BB2Cu64, amount, p_1);
    } // 0xE08256F972C7BB2C  b1604
    pub unsafe fn network_earn_arena_career_progression(amount: i32, p_1: Any) {
        call_native!(Void, 0x0F99F70C61F14619u64, amount, p_1);
    } // 0x0F99F70C61F14619  b1604
    pub unsafe fn network_spend_make_it_rain(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xE5F5A060439C2F5Du64, amount, p_1, p_2);
    } // 0xE5F5A060439C2F5D  b1604
    pub unsafe fn network_spend_buy_arena(amount: i32, p_1: bool, p_2: bool, p_3: *const i8) {
        call_native!(Void, 0x40D5DA9550B7CB46u64, amount, p_1, p_2, p_3);
    } // 0x40D5DA9550B7CB46  b1604
    pub unsafe fn network_spend_upgrade_arena(amount: i32, p_1: bool, p_2: bool, p_3: *const i8) {
        call_native!(Void, 0x037ABB06825D7AB1u64, amount, p_1, p_2, p_3);
    } // 0x037ABB06825D7AB1  b1604
    pub unsafe fn network_spend_arena_spectator_box(amount: i32, _type: i32, p_2: bool, p_3: bool) {
        call_native!(Void, 0x7049BF858601DC0Fu64, amount, _type, p_2, p_3);
    } // 0x7049BF858601DC0F  b1604
    pub unsafe fn network_spend_spin_the_wheel_payment(amount: i32, p_1: Any, p_2: bool) {
        call_native!(Void, 0x9A5BD1D0000B339Cu64, amount, p_1, p_2);
    } // 0x9A5BD1D0000B339C  b1604
    pub unsafe fn network_earn_spin_the_wheel_cash(amount: i32) {
        call_native!(Void, 0x676C48776CACBB5Au64, amount);
    } // 0x676C48776CACBB5A  b1604
    pub unsafe fn network_spend_arena_premium(amount: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x619496D837EFD920u64, amount, p_1, p_2);
    } // 0x619496D837EFD920  b1604
    pub unsafe fn network_earn_arena_war(amount: i32, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x631F1CB8FB4130AAu64, amount, p_1, p_2, p_3);
    } // 0x631F1CB8FB4130AA  b1604
    pub unsafe fn network_earn_arena_war_assassinate_target(amount: i32) {
        call_native!(Void, 0x5E7AE8AABE8B7C0Du64, amount);
    } // 0x5E7AE8AABE8B7C0D  b1604
    pub unsafe fn network_earn_arena_war_event_cargo(amount: i32) {
        call_native!(Void, 0xA82959062361B259u64, amount);
    } // 0xA82959062361B259  b1604
    pub unsafe fn network_earn_rc_time_trial(amount: i32) {
        call_native!(Void, 0xDFF49EE984E7AAE8u64, amount);
    } // 0xDFF49EE984E7AAE8  b1734
    pub unsafe fn network_earn_daily_objective_event(amount: i32) {
        call_native!(Void, 0x5128DF14A5BB86FCu64, amount);
    } // 0x5128DF14A5BB86FC  b1734
    pub unsafe fn network_spend_casino_membership(amount: i32, p_1: bool, p_2: bool, p_3: i32) {
        call_native!(Void, 0xFBBE0570EDF39D46u64, amount, p_1, p_2, p_3);
    } // 0xFBBE0570EDF39D46  b1734
    pub unsafe fn network_spend_buy_casino(amount: i32, p_1: bool, p_2: bool, data: *mut Any) {
        call_native!(Void, 0x34A6FC4D06C4DA0Fu64, amount, p_1, p_2, data);
    } // 0x34A6FC4D06C4DA0F  b1734
    pub unsafe fn network_spend_upgrade_casino(amount: i32, p_1: bool, p_2: bool, data: *mut Any) {
        call_native!(Void, 0x4740D62BC1B4EBEAu64, amount, p_1, p_2, data);
    } // 0x4740D62BC1B4EBEA  b1734
    pub unsafe fn network_spend_casino_generic(
        amount: i32,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x88BF9B612B84D3C3u64, amount, p_1, p_2, p_3, p_4);
    } // 0x88BF9B612B84D3C3  b1734
    pub unsafe fn network_earn_casino_time_trial_win(amount: i32) {
        call_native!(Void, 0x0819DB99FD2FBBD8u64, amount);
    } // 0x0819DB99FD2FBBD8  b1734
    pub unsafe fn network_earn_collectables_action_figures(amount: i32) {
        call_native!(Void, 0x5517F90043466049u64, amount);
    } // 0x5517F90043466049  b1734
    pub unsafe fn network_earn_casino_collectable_completed_collection(amount: i32) {
        call_native!(Void, 0x83AD64F53F4E9483u64, amount);
    } // 0x83AD64F53F4E9483  b1734
    pub unsafe fn network_earn_sell_prize_vehicle(amount: i32, p_1: Any, p_2: Any) {
        call_native!(Void, 0x8BCB27A057DF7B7Fu64, amount, p_1, p_2);
    } // 0x8BCB27A057DF7B7F  b1734
    pub unsafe fn network_earn_casino_mission_reward(amount: i32) {
        call_native!(Void, 0x566FD402B25787DEu64, amount);
    } // 0x566FD402B25787DE  b1734
    pub unsafe fn network_earn_casino_story_mission_reward(amount: i32) {
        call_native!(Void, 0xAC95ED552157E092u64, amount);
    } // 0xAC95ED552157E092  b1734
    pub unsafe fn network_earn_casino_mission_participation(amount: i32) {
        call_native!(Void, 0x09E8F18641BE2575u64, amount);
    } // 0x09E8F18641BE2575  b1734
    pub unsafe fn network_earn_casino_award(amount: i32, hash: Hash) {
        call_native!(Void, 0x973A9781A34F8DEBu64, amount, hash);
    } // 0x973A9781A34F8DEB  b1734
    pub unsafe fn network_spend_buy_arcade(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x870289A558348378u64, p_0, p_1, p_2, p_3);
    } // 0x870289A558348378  b1868
    pub unsafe fn network_spend_upgrade_arcade(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x5574637681911FDAu64, p_0, p_1, p_2, p_3);
    } // 0x5574637681911FDA  b1868
    pub unsafe fn network_spend_casino_heist(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
        p_1_0: Any,
    ) {
        call_native!(
            Void,
            0xD30E8392F407C328u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0xD30E8392F407C328  b1868
    pub unsafe fn network_spend_arcade_mgmt(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xB5B58E24868CB09Eu64, p_0, p_1, p_2, p_3, p_4);
    } // 0xB5B58E24868CB09E  b1868
    pub unsafe fn network_spend_play_arcade(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xEAD3D81F2C3A1458u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xEAD3D81F2C3A1458  b1868
    pub unsafe fn network_spend_arcade(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x43AA7FAC4E6D6687u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x43AA7FAC4E6D6687  b1868
    pub unsafe fn network_earn_casino_heist(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x72E7C7B9615FA3C3u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0x72E7C7B9615FA3C3  b1868
    pub unsafe fn network_earn_upgrade_arcade(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x4C3B75694F7E0D9Cu64, p_0, p_1, p_2);
    } // 0x4C3B75694F7E0D9C  b1868
    pub unsafe fn network_earn_arcade(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xD29334ED1A256DBFu64, p_0, p_1, p_2, p_3, p_4);
    } // 0xD29334ED1A256DBF  b1868
    pub unsafe fn network_earn_collectables(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xA95CFB4E02390842u64, p_0, p_1, p_2);
    } // 0xA95CFB4E02390842  b1868
    pub unsafe fn network_earn_challenge(amount: i32, p_1: Any, p_2: Any) {
        call_native!(Void, 0x0DD362F14F18942Au64, amount, p_1, p_2);
    } // 0x0DD362F14F18942A  b1868
    pub unsafe fn network_earn_casino_heist_awards(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x3EC7471E6909798Au64, p_0, p_1, p_2, p_3, p_4);
    } // 0x3EC7471E6909798A  b1868
    pub unsafe fn network_earn_collectable_item(amount: i32, p_1: Any) {
        call_native!(Void, 0x84FF63BD4966F33Du64, amount, p_1);
    } // 0x84FF63BD4966F33D  b1734
    pub unsafe fn network_earn_collectable_completed_collection(amount: i32, p_1: Any) {
        call_native!(Void, 0x5C9B198AF5A54FA6u64, amount, p_1);
    } // 0x5C9B198AF5A54FA6  b2060
    pub unsafe fn network_earn_yatch_mission(amount: i32, p_1: Any) {
        call_native!(Void, 0xDE68E30D89F97132u64, amount, p_1);
    } // 0xDE68E30D89F97132  b2060
    pub unsafe fn network_earn_dispatch_call(amount: i32, p_1: Any) {
        call_native!(Void, 0xE2E244AB823B4483u64, amount, p_1);
    } // 0xE2E244AB823B4483  b2060
    pub unsafe fn network_spend_beach_party(p_0: Any) {
        call_native!(Void, 0x54ABA22FA6371249u64, p_0);
    } // 0x54ABA22FA6371249  b2189
    pub unsafe fn network_spend_submarine(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x6C8BC1488527AAABu64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x6C8BC1488527AAAB  b2189
    pub unsafe fn network_spend_casino_club(
        amount_1: i32,
        p_1: Any,
        p_2: bool,
        p_3: Any,
        p_4: i32,
        p_5: i32,
        p_6: i32,
        amount_2: i32,
        p_8: Any,
    ) {
        call_native!(
            Void,
            0xC991C255AA6D90B2u64,
            amount_1,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            amount_2,
            p_8
        );
    } // 0xC991C255AA6D90B2  b2189
    pub unsafe fn network_spend_buy_sub(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x90CD7C6871FBF1B4u64, p_0, p_1, p_2, p_3);
    } // 0x90CD7C6871FBF1B4  b2189
    pub unsafe fn network_spend_upgrade_sub(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x89049A84065CE68Eu64, p_0, p_1, p_2, p_3);
    } // 0x89049A84065CE68E  b2189
    pub unsafe fn network_spend_island_heist(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xE86689E5F82DE429u64, p_0, p_1, p_2, p_3);
    } // 0xE86689E5F82DE429  b2189
    pub unsafe fn network_earn_island_heist(
        amount_1: i32,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        amount_2: i32,
        p_5: i32,
    ) {
        call_native!(
            Void,
            0xD21D111C46BA9F15u64,
            amount_1,
            p_1,
            p_2,
            p_3,
            amount_2,
            p_5
        );
    } // 0xD21D111C46BA9F15  b2189
    pub unsafe fn network_earn_beach_party_lost_found(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xA51338E0DCCD4065u64, p_0, p_1, p_2);
    } // 0xA51338E0DCCD4065  b2189
    pub unsafe fn network_earn_from_island_heist_dj_mission(p_0: Any, p_1: Any) {
        call_native!(Void, 0xE2BB399D90942091u64, p_0, p_1);
    } // 0xE2BB399D90942091  b2189
    pub unsafe fn network_spend_car_club_membership(
        amount_1: i32,
        p_1: Any,
        p_2: Any,
        amount_2: i32,
        p_4: Any,
    ) {
        call_native!(
            Void,
            0x1464E17207CD36E2u64,
            amount_1,
            p_1,
            p_2,
            amount_2,
            p_4
        );
    } // 0x1464E17207CD36E2  b2372
    pub unsafe fn network_spend_car_club_bar(p_0: Any, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x925227803A0EAA1Bu64, p_0, p_1, p_2, p_3);
    } // 0x925227803A0EAA1B  b2372
    pub unsafe fn network_spend_autoshop_modify(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x9BEA350D7C48061Bu64, p_0, p_1, p_2, p_3, p_4);
    } // 0x9BEA350D7C48061B  b2372
    pub unsafe fn network_spend_car_club_takeover(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xD1E46824E6FB92B5u64, p_0, p_1, p_2, p_3);
    } // 0xD1E46824E6FB92B5  b2372
    pub unsafe fn network_spend_buy_autoshop(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xEEB7E5D1FEB20869u64, p_0, p_1, p_2, p_3);
    } // 0xEEB7E5D1FEB20869  b2372
    pub unsafe fn network_spend_upgrade_autoshop(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xDD829AA198FDC46Cu64, p_0, p_1, p_2, p_3);
    } // 0xDD829AA198FDC46C  b2372
    pub unsafe fn network_earn_autoshop_business(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x36A7FD5A7194B03Eu64, p_0, p_1, p_2);
    } // 0x36A7FD5A7194B03E  b2372
    pub unsafe fn network_earn_autoshop_income(p_0: Any, p_1: i32) {
        call_native!(Void, 0xC66D1CF99ED7FE25u64, p_0, p_1);
    } // 0xC66D1CF99ED7FE25  b2372
    pub unsafe fn network_earn_carclub_membership(p_0: Any) {
        call_native!(Void, 0xBC6227792A188E2Eu64, p_0);
    } // 0xBC6227792A188E2E  b2372
    pub unsafe fn network_earn_daily_vehicle(p_0: Any, p_1: Any) {
        call_native!(Void, 0x533073E8A596008Cu64, p_0, p_1);
    } // 0x533073E8A596008C  b2372
    pub unsafe fn network_earn_daily_vehicle_bonus(p_0: Any) {
        call_native!(Void, 0xFE65AFE7308E32B2u64, p_0);
    } // 0xFE65AFE7308E32B2  b2372
    pub unsafe fn network_earn_tuner_award(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xB846F547D3792DF6u64, p_0, p_1, p_2);
    } // 0xB846F547D3792DF6  b2372
    pub unsafe fn network_earn_tuner_robbery(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xBCB266247193AC61u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xBCB266247193AC61  b2372
    pub unsafe fn network_earn_upgrade_autoshop(p_0: Any, p_1: Any) {
        call_native!(Void, 0xC10322A8D3E061EEu64, p_0, p_1);
    } // 0xC10322A8D3E061EE  b2372
    pub unsafe fn network_spend_interaction_menu_ability(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x93AA4165CB67E925u64, p_0, p_1, p_2, p_3);
    } // 0x93AA4165CB67E925  b2372
    pub unsafe fn network_spend_set_common_fields(p_0: Any, p_1: Any, p_2: Any, p_3: bool) {
        call_native!(Void, 0xB9F7A469460E7A4Au64, p_0, p_1, p_2, p_3);
    } // 0xB9F7A469460E7A4A  b2372
    pub unsafe fn network_spend_set_discount(p_0: bool) {
        call_native!(Void, 0x7E2F4E8F44CAF4E0u64, p_0);
    } // 0x7E2F4E8F44CAF4E0  b2699
    pub unsafe fn network_spend_buy_agency(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xEA8CD3C9B3C35884u64, p_0, p_1, p_2, p_3);
    } // 0xEA8CD3C9B3C35884  b2545
    pub unsafe fn network_spend_upgrade_agency(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x6CCA64840589A3B6u64, p_0, p_1, p_2, p_3);
    } // 0x6CCA64840589A3B6  b2545
    pub unsafe fn network_spend_agency(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x1B2120405080125Cu64, p_0, p_1, p_2, p_3, p_4);
    } // 0x1B2120405080125C  b2545
    pub unsafe fn network_spend_hidden(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xBF8793B91EA094A7u64, p_0, p_1, p_2, p_3);
    } // 0xBF8793B91EA094A7  b2545
    pub unsafe fn network_spend_source_bike(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xD9DF467CBE4398C8u64, p_0, p_1, p_2, p_3);
    } // 0xD9DF467CBE4398C8  b2545
    pub unsafe fn network_spend_comp_suv(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xD86581F9E7CDA383u64, p_0, p_1, p_2, p_3);
    } // 0xD86581F9E7CDA383  b2545
    pub unsafe fn network_spend_suv_fst_trvl(p_0: i32, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x61A2DF64ED2D396Eu64, p_0, p_1, p_2, p_3);
    } // 0x61A2DF64ED2D396E  b2545
    pub unsafe fn network_spend_supply(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xEBD482B82ACB8BADu64, p_0, p_1, p_2, p_3);
    } // 0xEBD482B82ACB8BAD  b2545
    pub unsafe fn network_spend_bike_shop(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x923AEA8E78F8DF0Bu64, p_0, p_1, p_2, p_3);
    } // 0x923AEA8E78F8DF0B  b2699
    pub unsafe fn network_spend_vehicle_requested(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x02D24A35A9CC3503u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x02D24A35A9CC3503  b2699
    pub unsafe fn network_spend_gunrunning(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x2CEB0E0BC2A77C05u64, p_0, p_1, p_2, p_3);
    } // 0x2CEB0E0BC2A77C05  b2699
    pub unsafe fn network_earn_agency_safe(p_0: Any) {
        call_native!(Void, 0x663B4B9D11742A12u64, p_0);
    } // 0x663B4B9D11742A12  b2545
    pub unsafe fn network_earn_award_contract(p_0: Any, p_1: Any) {
        call_native!(Void, 0x146D4EB6D22A403Fu64, p_0, p_1);
    } // 0x146D4EB6D22A403F  b2545
    pub unsafe fn network_earn_agency_contract(p_0: Any, p_1: Any) {
        call_native!(Void, 0x38482AD49CB905C7u64, p_0, p_1);
    } // 0x38482AD49CB905C7  b2545
    pub unsafe fn network_earn_award_phone(p_0: Any, p_1: Any) {
        call_native!(Void, 0x7397A115030F1BE3u64, p_0, p_1);
    } // 0x7397A115030F1BE3  b2545
    pub unsafe fn network_earn_agency_phone(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xE29F3D5FA63B1B82u64, p_0, p_1, p_2);
    } // 0xE29F3D5FA63B1B82  b2545
    pub unsafe fn network_earn_award_fixer_mission(p_0: Any, p_1: Any) {
        call_native!(Void, 0x88D6C327D6C57C45u64, p_0, p_1);
    } // 0x88D6C327D6C57C45  b2545
    pub unsafe fn network_earn_fixer_prep(p_0: Any, p_1: Any) {
        call_native!(Void, 0x6283E5DE4C4460C6u64, p_0, p_1);
    } // 0x6283E5DE4C4460C6  b2545
    pub unsafe fn network_earn_fixer_finale(p_0: Any, p_1: Any) {
        call_native!(Void, 0xBA154373C5FE51E8u64, p_0, p_1);
    } // 0xBA154373C5FE51E8  b2545
    pub unsafe fn network_earn_fixer_agency_short_trip(p_0: Any, p_1: Any) {
        call_native!(Void, 0xF4A8E57460BF2037u64, p_0, p_1);
    } // 0xF4A8E57460BF2037  b2545
    pub unsafe fn network_earn_award_short_trip(p_0: Any, p_1: Any) {
        call_native!(Void, 0x5B4DBDED84D6A420u64, p_0, p_1);
    } // 0x5B4DBDED84D6A420  b2545
    pub unsafe fn network_earn_fixer_rival_delivery(p_0: Any, p_1: Any) {
        call_native!(Void, 0x235D41210B3A1A5Eu64, p_0, p_1);
    } // 0x235D41210B3A1A5E  b2545
    pub unsafe fn network_earn_upgrade_agency(p_0: Any, p_1: Any) {
        call_native!(Void, 0xD07C7C3F1995108Cu64, p_0, p_1);
    } // 0xD07C7C3F1995108C  b2545
    pub unsafe fn network_spend_apartment_utilities(
        amount: i32,
        p_1: bool,
        p_2: bool,
        data: *mut Any,
    ) {
        call_native!(Void, 0x1254B5B3925EFD3Du64, amount, p_1, p_2, data);
    } // 0x1254B5B3925EFD3D  b2545
    pub unsafe fn network_spend_business_property_fees(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x92D1CFDA1227FF1Cu64, p_0, p_1, p_2, p_3);
    } // 0x92D1CFDA1227FF1C  b2545
    pub unsafe fn network_earn_sightseeing_reward(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x45087AE480B233ACu64, p_0, p_1, p_2, p_3);
    } // 0x45087AE480B233AC  b2699
    pub unsafe fn network_earn_biker_shop(p_0: Any, p_1: Any) {
        call_native!(Void, 0x2C5809EB9DF57257u64, p_0, p_1);
    } // 0x2C5809EB9DF57257  b2699
    pub unsafe fn network_earn_biker(p_0: Any) {
        call_native!(Void, 0x71BEC32FA466E105u64, p_0);
    } // 0x71BEC32FA466E105  b2699
    pub unsafe fn network_yohan_source_goods(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x59498BC8B1C8B15Cu64, p_0, p_1, p_2, p_3);
    } // 0x59498BC8B1C8B15C  b2699
    pub unsafe fn _network_spend_buy_mfgarage(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xA2ED36DCF0FCA413u64, p_0, p_1, p_2, p_3);
    } // 0xA2ED36DCF0FCA413  b2802
    pub unsafe fn _network_spend_upgrade_mfgarage(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xCF8F346DDDC66643u64, p_0, p_1, p_2, p_3);
    } // 0xCF8F346DDDC66643  b2802
    pub unsafe fn _network_spend_buy_supplies(p_0: i32, p_1: bool, p_2: bool, p_3: i32) {
        call_native!(Void, 0xB48185C0CA67B16Bu64, p_0, p_1, p_2, p_3);
    } // 0xB48185C0CA67B16B  b2802
    pub unsafe fn _network_spend_buy_acid_lab(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xF1E26A7924327152u64, p_0, p_1, p_2, p_3);
    } // 0xF1E26A7924327152  b2802
    pub unsafe fn _network_spend_upgrade_acid_lab_equipment(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) {
        call_native!(Void, 0x110EE9D486C23126u64, p_0, p_1, p_2, p_3);
    } // 0x110EE9D486C23126  b2802
    pub unsafe fn _network_spend_upgrade_acid_lab_armor(p_0: i32, p_1: bool, p_2: bool, p_3: i32) {
        call_native!(Void, 0xA7D541C9ACD63133u64, p_0, p_1, p_2, p_3);
    } // 0xA7D541C9ACD63133  b2802
    pub unsafe fn _network_spend_upgrade_acid_lab_scoop(p_0: i32, p_1: bool, p_2: bool, p_3: i32) {
        call_native!(Void, 0x2940558E05BCC2ECu64, p_0, p_1, p_2, p_3);
    } // 0x2940558E05BCC2EC  b2802
    pub unsafe fn _network_spend_upgrade_acid_lab_mines(p_0: i32, p_1: bool, p_2: bool, p_3: i32) {
        call_native!(Void, 0x4B99AB08C92C54E4u64, p_0, p_1, p_2, p_3);
    } // 0x4B99AB08C92C54E4  b2802
    pub unsafe fn _network_spend_rename_acid_lab(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x842B1C5AF61ACDE9u64, p_0, p_1, p_2, p_3);
    } // 0x842B1C5AF61ACDE9  b2802
    pub unsafe fn _network_spend_rename_acid_product(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x446798F7495DD7D8u64, p_0, p_1, p_2, p_3);
    } // 0x446798F7495DD7D8  b2802
    pub unsafe fn _network_earn_award_juggalo_mission(p_0: Any, p_1: Any) {
        call_native!(Void, 0xDDF047577F1A02A7u64, p_0, p_1);
    } // 0xDDF047577F1A02A7  b2802
    pub unsafe fn _network_earn_award_acid_lab(p_0: Any, p_1: Any) {
        call_native!(Void, 0xD1A8165767AD2D23u64, p_0, p_1);
    } // 0xD1A8165767AD2D23  b2802
    pub unsafe fn _network_earn_award_daily_stash(p_0: Any, p_1: Any) {
        call_native!(Void, 0xC30650FA74A19D02u64, p_0, p_1);
    } // 0xC30650FA74A19D02  b2802
    pub unsafe fn _network_earn_award_dead_drop(p_0: Any, p_1: Any) {
        call_native!(Void, 0xD01EBAEA1F905EF6u64, p_0, p_1);
    } // 0xD01EBAEA1F905EF6  b2802
    pub unsafe fn _network_earn_award_random_event(p_0: Any, p_1: Any) {
        call_native!(Void, 0xBEAFBB1B98B7EF55u64, p_0, p_1);
    } // 0xBEAFBB1B98B7EF55  b2802
    pub unsafe fn _network_earn_award_taxi(p_0: Any, p_1: Any) {
        call_native!(Void, 0xA914768AD35CD3A5u64, p_0, p_1);
    } // 0xA914768AD35CD3A5  b2802
    pub unsafe fn _network_earn_street_dealer(p_0: Any, p_1: Any) {
        call_native!(Void, 0xA81017EE1324FDFEu64, p_0, p_1);
    } // 0xA81017EE1324FDFE  b2802
    pub unsafe fn _network_earn_sell_acid(p_0: Any, p_1: Any) {
        call_native!(Void, 0x79B656937DF6DF5Du64, p_0, p_1);
    } // 0x79B656937DF6DF5D  b2802
    pub unsafe fn _network_earn_setup_participation_acid_lab(p_0: Any, p_1: Any) {
        call_native!(Void, 0xE3942D59E8A7F70Du64, p_0, p_1);
    } // 0xE3942D59E8A7F70D  b2802
    pub unsafe fn _network_earn_source_participation_acid_lab(p_0: Any, p_1: Any) {
        call_native!(Void, 0x136F11B5DF1B304Du64, p_0, p_1);
    } // 0x136F11B5DF1B304D  b2802
    pub unsafe fn _network_earn_sell_participation_acid_lab(p_0: Any, p_1: Any) {
        call_native!(Void, 0xCA3EF9B09A8D76B4u64, p_0, p_1);
    } // 0xCA3EF9B09A8D76B4  b2802
    pub unsafe fn _network_earn_juggalo_story_mission(p_0: Any, p_1: Any) {
        call_native!(Void, 0xE01D10BA8CD53621u64, p_0, p_1);
    } // 0xE01D10BA8CD53621  b2802
    pub unsafe fn _network_earn_juggalo_story_mission_participation(p_0: Any, p_1: Any) {
        call_native!(Void, 0x40FF6CCCC476185Cu64, p_0, p_1);
    } // 0x40FF6CCCC476185C  b2802
    pub unsafe fn _network_earn_fooligan_job(p_0: Any, p_1: Any) {
        call_native!(Void, 0xCE4452AE85F5E252u64, p_0, p_1);
    } // 0xCE4452AE85F5E252  b2802
    pub unsafe fn _network_earn_fooligan_job_participation(p_0: Any, p_1: Any) {
        call_native!(Void, 0xC376B92D0E060970u64, p_0, p_1);
    } // 0xC376B92D0E060970  b2802
    pub unsafe fn _network_earn_taxi_job(p_0: Any, p_1: Any) {
        call_native!(Void, 0x991E1588FAD9019Du64, p_0, p_1);
    } // 0x991E1588FAD9019D  b2802
    pub unsafe fn _network_earn_daily_stash_house_completed(p_0: Any, p_1: Any) {
        call_native!(Void, 0xCABC9874AFA70D6Du64, p_0, p_1);
    } // 0xCABC9874AFA70D6D  b2802
    pub unsafe fn _network_earn_daily_stash_house_participation(p_0: Any, p_1: Any) {
        call_native!(Void, 0x9C0C6BD0F94CE391u64, p_0, p_1);
    } // 0x9C0C6BD0F94CE391  b2802
    pub unsafe fn _network_earn_avenger(amount: i32, p_1: i32) {
        call_native!(Void, 0x55F006B9D4A46C1Du64, amount, p_1);
    } // 0x55F006B9D4A46C1D  b2944
    pub unsafe fn _network_earn_smuggler_ops(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xDEA273D5F8A9661Au64, p_0, p_1, p_2);
    } // 0xDEA273D5F8A9661A  b2944
    pub unsafe fn _network_earn_bonus_objective(amount: i32, p_1: Any, p_2: Any) {
        call_native!(Void, 0xDCEF983C24191997u64, amount, p_1, p_2);
    } // 0xDCEF983C24191997  b2944
    pub unsafe fn _network_earn_progress_hub(p_0: Any, p_1: Any) {
        call_native!(Void, 0xF8332B06F0EECC9Cu64, p_0, p_1);
    } // 0xF8332B06F0EECC9C  b2944
    pub unsafe fn _network_spent_air_freight(
        hangar_cargo_sourcing_price: i32,
        from_bank: bool,
        from_bank_and_wallet: bool,
        cost: i32,
        warehouse_id: i32,
        warehouse_slot: i32,
    ) {
        call_native!(
            Void,
            0x8C7E8D6F96C9E948u64,
            hangar_cargo_sourcing_price,
            from_bank,
            from_bank_and_wallet,
            cost,
            warehouse_id,
            warehouse_slot
        );
    } // 0x8C7E8D6F96C9E948  b2944
    pub unsafe fn _network_spent_skip_cargo_source_setup(
        amount: i32,
        from_bank: bool,
        from_bank_and_wallet: bool,
        cost: i32,
    ) {
        call_native!(
            Void,
            0xED1B407BADA42CECu64,
            amount,
            from_bank,
            from_bank_and_wallet,
            cost
        );
    } // 0xED1B407BADA42CEC  b2944
    pub unsafe fn _network_spent_stealth_module(
        amount: i32,
        from_bank: bool,
        from_bank_and_wallet: bool,
        p_3: Hash,
    ) {
        call_native!(
            Void,
            0x95CE79A6939C537Au64,
            amount,
            from_bank,
            from_bank_and_wallet,
            p_3
        );
    } // 0x95CE79A6939C537A  b2944
    pub unsafe fn _network_spent_missile_jammer(
        amount: i32,
        from_bank: bool,
        from_bank_and_wallet: bool,
        p_3: Hash,
    ) {
        call_native!(
            Void,
            0xD687100F616163F4u64,
            amount,
            from_bank,
            from_bank_and_wallet,
            p_3
        );
    } // 0xD687100F616163F4  b2944
    pub unsafe fn _network_spent_generic(
        price: i32,
        p_1: bool,
        p_2: bool,
        stat: Hash,
        spent: Hash,
        p_5: *const i8,
        p_6: *const i8,
        data: *mut Any,
    ) {
        call_native!(
            Void,
            0x2803B027479FB640u64,
            price,
            p_1,
            p_2,
            stat,
            spent,
            p_5,
            p_6,
            data
        );
    } // 0x2803B027479FB640  b3095
    pub unsafe fn _network_earn_generic(
        amount: i32,
        earn: Hash,
        p_2: *const i8,
        p_3: *const i8,
        data: *mut Any,
    ) {
        call_native!(Void, 0xBF7B5BB7ED890380u64, amount, earn, p_2, p_3, data);
    } // 0xBF7B5BB7ED890380  b3095
    pub unsafe fn _network_clear_transaction_telemetry_nonce() {
        call_native!(Void, 0xE03B9F95556E48E9u64);
    } // 0xE03B9F95556E48E9  b3095
    pub unsafe fn network_get_vc_bank_balance() -> i32 {
        call_native!(i32, 0x76EF28DA05EA395Au64)
    } // 0x76EF28DA05EA395A 0x16184FB5 b323
    pub unsafe fn network_get_vc_wallet_balance(character_slot: i32) -> i32 {
        call_native!(i32, 0xA40F9C2623F6A8B5u64, character_slot)
    } // 0xA40F9C2623F6A8B5 0x4F5B781C b323
    pub unsafe fn network_get_vc_balance() -> i32 {
        call_native!(i32, 0x5CBAD97E059E1B94u64)
    } // 0x5CBAD97E059E1B94 0xADF8F882 b323
    pub unsafe fn network_get_evc_balance() -> i32 {
        call_native!(i32, 0x5D1E75F91C07DEE5u64)
    } // 0x5D1E75F91C07DEE5 0xF1EDB7F4 b323
    pub unsafe fn network_get_pvc_balance() -> i32 {
        call_native!(i32, 0x4F54F3B6C202FB4Eu64)
    } // 0x4F54F3B6C202FB4E 0x56485B56 b323
    pub unsafe fn network_get_string_wallet_balance(character_slot: i32) -> *const i8 {
        call_native!(*const i8, 0xF9B10B529DCFB33Bu64, character_slot)
    } // 0xF9B10B529DCFB33B 0xC1A11435 b323
    pub unsafe fn network_get_string_bank_balance() -> *const i8 {
        call_native!(*const i8, 0xA6FA3979BED01B81u64)
    } // 0xA6FA3979BED01B81 0xAA7EA3BD b323
    pub unsafe fn network_get_string_bank_wallet_balance(character: i32) -> *const i8 {
        call_native!(*const i8, 0x700AF71AE615E6DDu64, character)
    } // 0x700AF71AE615E6DD 0x7D4FD28C b323
    pub unsafe fn network_get_can_spend_from_wallet(amount: i32, character_slot: i32) -> bool {
        call_native!(bool, 0xED5AB8860415BABAu64, amount, character_slot)
    } // 0xED5AB8860415BABA 0x0EA2188C b323
    pub unsafe fn network_get_can_spend_from_bank(amount: i32) -> bool {
        call_native!(bool, 0xA31FD6A0865B6D14u64, amount)
    } // 0xA31FD6A0865B6D14 0xABED6020 b323
    pub unsafe fn network_get_can_spend_from_bank_and_wallet(
        amount: i32,
        character_slot: i32,
    ) -> bool {
        call_native!(bool, 0xDC18531D7019A535u64, amount, character_slot)
    } // 0xDC18531D7019A535 0xCA23FD25 b323
    pub unsafe fn network_get_pvc_transfer_balance() -> i32 {
        call_native!(i32, 0x13A8DE2FD77D04F3u64)
    } // 0x13A8DE2FD77D04F3 0xC670C814 b323
    pub unsafe fn network_get_can_transfer_cash(amount: i32) -> bool {
        call_native!(bool, 0x08E8EEADFD0DC4A0u64, amount)
    } // 0x08E8EEADFD0DC4A0 0x03461981 b323
    pub unsafe fn network_can_receive_player_cash(p_0: Any, p_1: Any, p_2: Any, p_3: Any) -> bool {
        call_native!(bool, 0x5D17BE59D2123284u64, p_0, p_1, p_2, p_3)
    } // 0x5D17BE59D2123284 0x41F5F10E b323
    pub unsafe fn network_get_remaining_transfer_balance() -> i32 {
        call_native!(i32, 0xEA560AC9EEB1E19Bu64)
    } // 0xEA560AC9EEB1E19B 0xA9021211 b323
    pub unsafe fn withdraw_vc(amount: i32) -> i32 {
        call_native!(i32, 0xF70EFA14FE091429u64, amount)
    } // 0xF70EFA14FE091429 0x8B755993 b323
    pub unsafe fn deposit_vc(amount: i32) -> bool {
        call_native!(bool, 0xE260E0BB9CD995ACu64, amount)
    } // 0xE260E0BB9CD995AC 0x8F266745 b323
    pub unsafe fn has_vc_withdrawal_completed(p_0: Any) -> bool {
        call_native!(bool, 0xE154B48B68EF72BCu64, p_0)
    } // 0xE154B48B68EF72BC 0x531E4892 b323
    pub unsafe fn was_vc_withdrawal_successful(p_0: Any) -> bool {
        call_native!(bool, 0x6FCF8DDEA146C45Bu64, p_0)
    } // 0x6FCF8DDEA146C45B 0xB96C7ABE b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod netshopping {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn net_gameserver_use_server_transactions() -> bool {
        call_native!(bool, 0x7D2708796355B20Bu64)
    } // 0x7D2708796355B20B  b1290
    pub unsafe fn net_gameserver_catalog_item_is_valid(name: *const i8) -> bool {
        call_native!(bool, 0xBD4D7EAF8A30F637u64, name)
    } // 0xBD4D7EAF8A30F637  b323
    pub unsafe fn net_gameserver_catalog_item_key_is_valid(hash: Hash) -> bool {
        call_native!(bool, 0x247F0F73A182EA0Bu64, hash)
    } // 0x247F0F73A182EA0B  b323
    pub unsafe fn net_gameserver_get_price(item_hash: Hash, category_hash: Hash, p_2: bool) -> i32 {
        call_native!(i32, 0xC27009422FCCA88Du64, item_hash, category_hash, p_2)
    } // 0xC27009422FCCA88D  b323
    pub unsafe fn net_gameserver_catalog_is_valid() -> bool {
        call_native!(bool, 0x3C4487461E9B0DCBu64)
    } // 0x3C4487461E9B0DCB  b323
    pub unsafe fn net_gameserver_is_catalog_current() -> bool {
        call_native!(bool, 0x2B949A1E6AEC8F6Au64)
    } // 0x2B949A1E6AEC8F6A  b323
    pub unsafe fn net_gameserver_get_catalog_cloud_crc() -> Hash {
        call_native!(Hash, 0x85F6C9ABA1DE2BCFu64)
    } // 0x85F6C9ABA1DE2BCF  b323
    pub unsafe fn net_gameserver_refresh_server_catalog() -> bool {
        call_native!(bool, 0x357B152EF96C30B6u64)
    } // 0x357B152EF96C30B6  b323
    pub unsafe fn net_gameserver_retrieve_catalog_refresh_status(state: *mut i32) -> bool {
        call_native!(bool, 0xCF38DAFBB49EDE5Eu64, state)
    } // 0xCF38DAFBB49EDE5E  b323
    pub unsafe fn net_gameserver_init_session() -> bool {
        call_native!(bool, 0xE3E5A7C64CA2C6EDu64)
    } // 0xE3E5A7C64CA2C6ED  b323
    pub unsafe fn net_gameserver_retrieve_init_session_status(p_0: *mut i32) -> bool {
        call_native!(bool, 0x0395CB47B022E62Cu64, p_0)
    } // 0x0395CB47B022E62C  b323
    pub unsafe fn net_gameserver_start_session(char_slot: i32) -> bool {
        call_native!(bool, 0xA135AC892A58FC07u64, char_slot)
    } // 0xA135AC892A58FC07  b323
    pub unsafe fn net_gameserver_start_session_pending() -> bool {
        call_native!(bool, 0x72EB7BA9B69BF6ABu64)
    } // 0x72EB7BA9B69BF6AB  b323
    pub unsafe fn net_gameserver_retrieve_start_session_status(p_0: *mut i32) -> bool {
        call_native!(bool, 0x170910093218C8B9u64, p_0)
    } // 0x170910093218C8B9  b323
    pub unsafe fn net_gameserver_retrieve_session_error_code(p_0: *mut i32) -> bool {
        call_native!(bool, 0xC13C38E47EA5DF31u64, p_0)
    } // 0xC13C38E47EA5DF31  b323
    pub unsafe fn net_gameserver_is_session_valid(char_slot: i32) -> bool {
        call_native!(bool, 0xB24F0944DA203D9Eu64, char_slot)
    } // 0xB24F0944DA203D9E  b323
    pub unsafe fn net_gameserver_clear_session(p_0: i32) -> bool {
        call_native!(bool, 0x74A0FD0688F1EE45u64, p_0)
    } // 0x74A0FD0688F1EE45  b323
    pub unsafe fn net_gameserver_session_apply_received_data(char_slot: i32) -> bool {
        call_native!(bool, 0x2F41D51BA3BCD1F1u64, char_slot)
    } // 0x2F41D51BA3BCD1F1  b323
    pub unsafe fn net_gameserver_is_session_refresh_pending() -> bool {
        call_native!(bool, 0x810E8431C0614BF9u64)
    } // 0x810E8431C0614BF9  b323
    pub unsafe fn net_gameserver_start_session_restart(
        inventory: bool,
        playerbalance: bool,
    ) -> bool {
        call_native!(bool, 0x35A1B3E1D1315CFAu64, inventory, playerbalance)
    } // 0x35A1B3E1D1315CFA  b323
    pub unsafe fn net_gameserver_transaction_in_progress() -> bool {
        call_native!(bool, 0x613F125BA3BD2EB9u64)
    } // 0x613F125BA3BD2EB9  b372
    pub unsafe fn net_gameserver_get_session_state_and_status(
        p_0: *mut i32,
        p_1: *mut Bool,
    ) -> bool {
        call_native!(bool, 0x897433D292B44130u64, p_0, p_1)
    } // 0x897433D292B44130  b323
    pub unsafe fn net_gameserver_basket_start(
        transaction_id: *mut i32,
        category_hash: Hash,
        action_hash: Hash,
        flags: i32,
    ) -> bool {
        call_native!(
            bool,
            0x279F08B1A4B29B7Eu64,
            transaction_id,
            category_hash,
            action_hash,
            flags
        )
    } // 0x279F08B1A4B29B7E  b323
    pub unsafe fn net_gameserver_basket_end() -> bool {
        call_native!(bool, 0xFA336E7F40C0A0D0u64)
    } // 0xFA336E7F40C0A0D0  b372
    pub unsafe fn net_gameserver_basket_is_active() -> bool {
        call_native!(bool, 0xA65568121DF2EA26u64)
    } // 0xA65568121DF2EA26  b323
    pub unsafe fn net_gameserver_basket_add_item(item_data: *mut Any, quantity: i32) -> bool {
        call_native!(bool, 0xF30980718C8ED876u64, item_data, quantity)
    } // 0xF30980718C8ED876  b323
    pub unsafe fn net_gameserver_basket_is_full() -> bool {
        call_native!(bool, 0x27F76CC6C55AD30Eu64)
    } // 0x27F76CC6C55AD30E  b323
    pub unsafe fn net_gameserver_basket_apply_server_data(p_0: Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xE1A0450ED46A7812u64, p_0, p_1)
    } // 0xE1A0450ED46A7812  b323
    pub unsafe fn net_gameserver_checkout_start(transaction_id: i32) -> bool {
        call_native!(bool, 0x39BE7CEA8D9CC8E6u64, transaction_id)
    } // 0x39BE7CEA8D9CC8E6  b323
    pub unsafe fn net_gameserver_begin_service(
        transaction_id: *mut i32,
        category_hash: Hash,
        item_hash: Hash,
        action_type_hash: Hash,
        value: i32,
        flags: i32,
    ) -> bool {
        call_native!(
            bool,
            0x3C5FD37B5499582Eu64,
            transaction_id,
            category_hash,
            item_hash,
            action_type_hash,
            value,
            flags
        )
    } // 0x3C5FD37B5499582E  b323
    pub unsafe fn net_gameserver_end_service(transaction_id: i32) -> bool {
        call_native!(bool, 0xE2A99A9B524BEFFFu64, transaction_id)
    } // 0xE2A99A9B524BEFFF  b323
    pub unsafe fn net_gameserver_delete_character(slot: i32, transfer: bool, reason: Hash) -> bool {
        call_native!(bool, 0x51F1A8E48C3D2F6Du64, slot, transfer, reason)
    } // 0x51F1A8E48C3D2F6D  b323
    pub unsafe fn net_gameserver_delete_character_get_status() -> i32 {
        call_native!(i32, 0x0A6D923DFFC9BD89u64)
    } // 0x0A6D923DFFC9BD89  b323
    pub unsafe fn net_gameserver_delete_set_telemetry_nonce_seed() -> bool {
        call_native!(bool, 0x112CEF1615A1139Fu64)
    } // 0x112CEF1615A1139F  b323
    pub unsafe fn net_gameserver_transfer_bank_to_wallet(char_slot: i32, amount: i32) -> bool {
        call_native!(bool, 0xD47A2C1BA117471Du64, char_slot, amount)
    } // 0xD47A2C1BA117471D  b323
    pub unsafe fn net_gameserver_transfer_wallet_to_bank(char_slot: i32, amount: i32) -> bool {
        call_native!(bool, 0xC2F7FE5309181C7Du64, char_slot, amount)
    } // 0xC2F7FE5309181C7D  b323
    pub unsafe fn net_gameserver_transfer_bank_to_wallet_get_status() -> i32 {
        call_native!(i32, 0x23789E777D14CE44u64)
    } // 0x23789E777D14CE44  b323
    pub unsafe fn net_gameserver_transfer_wallet_to_bank_get_status() -> i32 {
        call_native!(i32, 0x350AA5EBC03D3BD2u64)
    } // 0x350AA5EBC03D3BD2  b323
    pub unsafe fn net_gameserver_transfer_cash_set_telemetry_nonce_seed() -> bool {
        call_native!(bool, 0x498C1E05CE5F7877u64)
    } // 0x498C1E05CE5F7877  b323
    pub unsafe fn net_gameserver_set_telemetry_nonce_seed(p_0: i32) -> bool {
        call_native!(bool, 0x9507D4271988E1AEu64, p_0)
    } // 0x9507D4271988E1AE  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod network {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_online_version() -> *const i8 {
        call_native!(*const i8, 0xFCA9373EF340AC0Au64)
    } // 0xFCA9373EF340AC0A  b323
    pub unsafe fn network_is_signed_in() -> bool {
        call_native!(bool, 0x054354A99211EB96u64)
    } // 0x054354A99211EB96 0xADD0B40F b323
    pub unsafe fn network_is_signed_online() -> bool {
        call_native!(bool, 0x1077788E268557C2u64)
    } // 0x1077788E268557C2 0x6E5BDCE2 b323
    pub unsafe fn network_is_np_available() -> bool {
        call_native!(bool, 0xBD545D44CCE70597u64)
    } // 0xBD545D44CCE70597  b323
    pub unsafe fn network_is_np_pending() -> bool {
        call_native!(bool, 0xEBCAB9E5048434F4u64)
    } // 0xEBCAB9E5048434F4  b323
    pub unsafe fn network_get_np_unavailable_reason() -> i32 {
        call_native!(i32, 0x74FB3E29E6D10FA9u64)
    } // 0x74FB3E29E6D10FA9  b323
    pub unsafe fn network_is_conneted_to_np_presence() -> bool {
        call_native!(bool, 0x7808619F31FF22DBu64)
    } // 0x7808619F31FF22DB  b323
    pub unsafe fn network_is_logged_in_to_psn() -> bool {
        call_native!(bool, 0xA0FA4EC6A05DA44Eu64)
    } // 0xA0FA4EC6A05DA44E  b323
    pub unsafe fn network_has_valid_ros_credentials() -> bool {
        call_native!(bool, 0x85443FF4C328F53Bu64)
    } // 0x85443FF4C328F53B 0x3FB40673 b323
    pub unsafe fn network_is_refreshing_ros_credentials() -> bool {
        call_native!(bool, 0x8D11E61A4ABF49CCu64)
    } // 0x8D11E61A4ABF49CC 0xBDC8F63E b323
    pub unsafe fn network_is_cloud_available() -> bool {
        call_native!(bool, 0x9A4CF4F48AD77302u64)
    } // 0x9A4CF4F48AD77302 0xC7FF5AFC b323
    pub unsafe fn network_has_social_club_account() -> bool {
        call_native!(bool, 0x67A5589628E0CFF6u64)
    } // 0x67A5589628E0CFF6 0x66EC713F b323
    pub unsafe fn network_are_social_club_policies_current() -> bool {
        call_native!(bool, 0xBA9775570DB788CFu64)
    } // 0xBA9775570DB788CF 0x358D1D77 b323
    pub unsafe fn network_is_host() -> bool {
        call_native!(bool, 0x8DB296B814EDDA07u64)
    } // 0x8DB296B814EDDA07 0xE46AC10F b323
    pub unsafe fn network_get_host_player_index() -> Player {
        call_native!(Player, 0x8251FB94DC4FDFC8u64)
    } // 0x8251FB94DC4FDFC8  b2612
    pub unsafe fn network_was_game_suspended() -> bool {
        call_native!(bool, 0x4237E822315D8BA9u64)
    } // 0x4237E822315D8BA9  b323
    pub unsafe fn network_have_online_privileges() -> bool {
        call_native!(bool, 0x25CB5A9F37BFD063u64)
    } // 0x25CB5A9F37BFD063 0xEF63BFDF b323
    pub unsafe fn network_has_age_restrictions() -> bool {
        call_native!(bool, 0x1353F87E89946207u64)
    } // 0x1353F87E89946207  b323
    pub unsafe fn network_have_user_content_privileges(p_0: i32) -> bool {
        call_native!(bool, 0x72D918C99BCACC54u64, p_0)
    } // 0x72D918C99BCACC54 0x1F88819D b323
    pub unsafe fn network_have_communication_privileges(p_0: i32, player: Player) -> bool {
        call_native!(bool, 0xAEEF48CDF5B6CE7Cu64, p_0, player)
    } // 0xAEEF48CDF5B6CE7C 0x2D817A5E b323
    pub unsafe fn _network_have_platform_communication_privileges() -> bool {
        call_native!(bool, 0xE1E02509169C124Eu64)
    } // 0xE1E02509169C124E  b3095
    pub unsafe fn network_check_online_privileges(p_0: Any, p_1: bool) -> bool {
        call_native!(bool, 0x78321BEA235FD8CDu64, p_0, p_1)
    } // 0x78321BEA235FD8CD  b323
    pub unsafe fn network_check_user_content_privileges(p_0: i32, p_1: i32, p_2: bool) -> bool {
        call_native!(bool, 0x595F028698072DD9u64, p_0, p_1, p_2)
    } // 0x595F028698072DD9 0xBB54AA3D b323
    pub unsafe fn network_check_communication_privileges(p_0: i32, p_1: i32, p_2: bool) -> bool {
        call_native!(bool, 0x83F28CE49FBBFFBAu64, p_0, p_1, p_2)
    } // 0x83F28CE49FBBFFBA 0xA79E5B05 b323
    pub unsafe fn network_check_text_communication_privileges(
        p_0: Any,
        p_1: Any,
        p_2: Any,
    ) -> bool {
        call_native!(bool, 0x07EAB372C8841D99u64, p_0, p_1, p_2)
    } // 0x07EAB372C8841D99  b1011
    pub unsafe fn network_is_using_online_promotion() -> bool {
        call_native!(bool, 0x906CA41A4B74ECA4u64)
    } // 0x906CA41A4B74ECA4  b1493
    pub unsafe fn network_should_show_promotion_alert_screen() -> bool {
        call_native!(bool, 0x023ACAB2DC9DC4A4u64)
    } // 0x023ACAB2DC9DC4A4  b1493
    pub unsafe fn network_has_social_networking_sharing_priv() -> bool {
        call_native!(bool, 0x76BF03FADBF154F5u64)
    } // 0x76BF03FADBF154F5 0xEB864288 b323
    pub unsafe fn network_get_age_group() -> i32 {
        call_native!(i32, 0x9614B71F8ADB982Bu64)
    } // 0x9614B71F8ADB982B 0xAB07CBBE b323
    pub unsafe fn network_check_privileges(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x0CF6CC51AA18F0F8u64, p_0, p_1, p_2)
    } // 0x0CF6CC51AA18F0F8  b1180
    pub unsafe fn network_is_privilege_check_in_progress() -> bool {
        call_native!(bool, 0x64E5C4CC82847B73u64)
    } // 0x64E5C4CC82847B73  b1734
    pub unsafe fn network_set_privilege_check_result_not_needed() {
        call_native!(Void, 0x1F7BC3539F9E0224u64);
    } // 0x1F7BC3539F9E0224  b1180
    pub unsafe fn network_resolve_privilege_user_content() -> bool {
        call_native!(bool, 0xDE9225854F37BF72u64)
    } // 0xDE9225854F37BF72  b2612
    pub unsafe fn network_have_platform_subscription() -> bool {
        call_native!(bool, 0x5EA784D197556507u64)
    } // 0x5EA784D197556507  b323
    pub unsafe fn network_is_platform_subscription_check_pending() -> bool {
        call_native!(bool, 0xA8ACB6459542A8C8u64)
    } // 0xA8ACB6459542A8C8  b323
    pub unsafe fn network_show_account_upgrade_ui() {
        call_native!(Void, 0x83FE8D7229593017u64);
    } // 0x83FE8D7229593017  b323
    pub unsafe fn network_is_showing_system_ui_or_recently_requested_upsell() -> bool {
        call_native!(bool, 0x7788DFE15016A182u64)
    } // 0x7788DFE15016A182  b2612
    pub unsafe fn network_need_to_start_new_game_but_blocked() -> bool {
        call_native!(bool, 0x53C10C8BD774F2C9u64)
    } // 0x53C10C8BD774F2C9  b1011
    pub unsafe fn network_can_bail() -> bool {
        call_native!(bool, 0x580CE4438479CC61u64)
    } // 0x580CE4438479CC61 0x60E1FEDF b323
    pub unsafe fn network_bail(p_0: i32, p_1: i32, p_2: i32) {
        call_native!(Void, 0x95914459A87EBA28u64, p_0, p_1, p_2);
    } // 0x95914459A87EBA28 0x87D79A04 b323
    pub unsafe fn network_on_return_to_single_player() {
        call_native!(Void, 0x283B6062A2C01E9Bu64);
    } // 0x283B6062A2C01E9B 0x96E28FE2 b323
    pub unsafe fn network_transition_start(p_0: i32, p_1: Any, p_2: Any, p_3: Any) -> bool {
        call_native!(bool, 0x8B4FFC790CA131EFu64, p_0, p_1, p_2, p_3)
    } // 0x8B4FFC790CA131EF  b617
    pub unsafe fn network_transition_add_stage(
        hash: Hash,
        p_1: i32,
        p_2: i32,
        state: i32,
        p_4: i32,
    ) -> bool {
        call_native!(bool, 0xC3BFED92026A2AADu64, hash, p_1, p_2, state, p_4)
    } // 0xC3BFED92026A2AAD  b617
    pub unsafe fn network_transition_finish(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x04918A41BC9B8157u64, p_0, p_1, p_2)
    } // 0x04918A41BC9B8157  b617
    pub unsafe fn network_can_access_multiplayer(loading_state: *mut i32) -> bool {
        call_native!(bool, 0xAF50DA1A3F8B1BA4u64, loading_state)
    } // 0xAF50DA1A3F8B1BA4 0xA520B982 b323
    pub unsafe fn network_is_multiplayer_disabled() -> bool {
        call_native!(bool, 0x9747292807126EDAu64)
    } // 0x9747292807126EDA 0x05518C0F b323
    pub unsafe fn network_can_enter_multiplayer() -> bool {
        call_native!(bool, 0x7E782A910C362C25u64)
    } // 0x7E782A910C362C25 0x4A23B9C9 b323
    pub unsafe fn network_session_do_freeroam_quickmatch(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x330ED4D05491934Fu64, p_0, p_1, p_2)
    } // 0x330ED4D05491934F  b323
    pub unsafe fn network_session_do_friend_matchmaking(p_0: i32, p_1: i32, p_2: i32) -> bool {
        call_native!(bool, 0x2CFC76E0D087C994u64, p_0, p_1, p_2)
    } // 0x2CFC76E0D087C994  b323
    pub unsafe fn network_session_do_crew_matchmaking(
        crew_id: i32,
        p_1: i32,
        p_2: i32,
        max_players: i32,
    ) -> bool {
        call_native!(bool, 0x94BC51E9449D917Fu64, crew_id, p_1, p_2, max_players)
    } // 0x94BC51E9449D917F  b323
    pub unsafe fn network_session_do_activity_quickmatch(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) -> bool {
        call_native!(bool, 0xBE3E347A87ACEB82u64, p_0, p_1, p_2, p_3, p_4)
    } // 0xBE3E347A87ACEB82  b323
    pub unsafe fn network_session_host(p_0: i32, max_players: i32, p_2: bool) -> bool {
        call_native!(bool, 0x6F3D4ED9BEE4E61Du64, p_0, max_players, p_2)
    } // 0x6F3D4ED9BEE4E61D 0x6716460F b323
    pub unsafe fn network_session_host_closed(p_0: i32, max_players: i32) -> bool {
        call_native!(bool, 0xED34C0C02C098BB7u64, p_0, max_players)
    } // 0xED34C0C02C098BB7 0x8AC9EA19 b323
    pub unsafe fn network_session_host_friends_only(p_0: i32, max_players: i32) -> bool {
        call_native!(bool, 0xB9CFD27A5D578D83u64, p_0, max_players)
    } // 0xB9CFD27A5D578D83 0x26864403 b323
    pub unsafe fn network_session_is_closed_friends() -> bool {
        call_native!(bool, 0xFBCFA2EA2E206890u64)
    } // 0xFBCFA2EA2E206890 0x56E75FE4 b323
    pub unsafe fn network_session_is_closed_crew() -> bool {
        call_native!(bool, 0x74732C6CA90DA2B4u64)
    } // 0x74732C6CA90DA2B4 0xA95299B9 b323
    pub unsafe fn network_session_is_solo() -> bool {
        call_native!(bool, 0xF3929C2379B60CCEu64)
    } // 0xF3929C2379B60CCE 0x3D2C1916 b323
    pub unsafe fn network_session_is_private() -> bool {
        call_native!(bool, 0xCEF70AA5B3F89BA1u64)
    } // 0xCEF70AA5B3F89BA1 0xDB67785D b323
    pub unsafe fn _network_session_leave_including_reason(
        leave_flags: i32,
        leave_reason: i32,
    ) -> bool {
        call_native!(bool, 0xE0128328CF1FD9F4u64, leave_flags, leave_reason)
    } // 0xE0128328CF1FD9F4  b3095
    pub unsafe fn network_session_end(p_0: bool, p_1: bool) -> bool {
        call_native!(bool, 0xA02E59562D711006u64, p_0, p_1)
    } // 0xA02E59562D711006 0xBCACBEA2 b323
    pub unsafe fn network_session_leave(p_0: Any) -> bool {
        call_native!(bool, 0xB9351A07A0D458B1u64, p_0)
    } // 0xB9351A07A0D458B1  b2060
    pub unsafe fn network_session_kick_player(player: Player) {
        call_native!(Void, 0xFA8904DC5F304220u64, player);
    } // 0xFA8904DC5F304220 0x1E20138A b323
    pub unsafe fn network_session_get_kick_vote(player: Player) -> bool {
        call_native!(bool, 0xD6D09A6F32F49EF1u64, player)
    } // 0xD6D09A6F32F49EF1 0x8A559D26 b323
    pub unsafe fn network_session_reserve_slots_transition(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x041C7F2A6C9894E6u64, p_0, p_1, p_2)
    } // 0x041C7F2A6C9894E6  b463
    pub unsafe fn network_join_previously_failed_session() -> bool {
        call_native!(bool, 0x59DF79317F85A7E0u64)
    } // 0x59DF79317F85A7E0 0x6CDAA7D2 b323
    pub unsafe fn network_join_previously_failed_transition() -> bool {
        call_native!(bool, 0xFFE1E5B792D92B34u64)
    } // 0xFFE1E5B792D92B34 0xBF21818E b323
    pub unsafe fn network_session_set_matchmaking_group(matchmaking_group: i32) {
        call_native!(Void, 0x49EC8030F5015F8Bu64, matchmaking_group);
    } // 0x49EC8030F5015F8B 0x3C3E2AB6 b323
    pub unsafe fn network_session_set_matchmaking_group_max(player_type: i32, player_count: i32) {
        call_native!(Void, 0x8B6A4DD0AF9CE215u64, player_type, player_count);
    } // 0x8B6A4DD0AF9CE215 0x5F29A7E0 b323
    pub unsafe fn network_session_get_matchmaking_group_free(p_0: i32) -> i32 {
        call_native!(i32, 0x56CE820830EF040Bu64, p_0)
    } // 0x56CE820830EF040B 0x36EAD960 b323
    pub unsafe fn network_session_add_active_matchmaking_group(group_id: i32) {
        call_native!(Void, 0xCAE55F48D3D7875Cu64, group_id);
    } // 0xCAE55F48D3D7875C 0x5BE529F7 b323
    pub unsafe fn network_session_set_unique_crew_limit(p_0: Any) {
        call_native!(Void, 0xF49ABC20D8552257u64, p_0);
    } // 0xF49ABC20D8552257 0x454C7B67 b323
    pub unsafe fn network_session_get_unique_crew_limit() -> i32 {
        call_native!(i32, 0xCDC936BF35EDCB73u64)
    } // 0xCDC936BF35EDCB73  b3095
    pub unsafe fn network_session_set_unique_crew_limit_transition(p_0: Any) {
        call_native!(Void, 0x4811BBAC21C5FCD5u64, p_0);
    } // 0x4811BBAC21C5FCD5 0xE5961511 b323
    pub unsafe fn network_session_set_unique_crew_only_crews_transition(p_0: bool) {
        call_native!(Void, 0x5539C3EBF104A53Au64, p_0);
    } // 0x5539C3EBF104A53A 0xAE396263 b323
    pub unsafe fn network_session_set_crew_limit_max_members_transition(p_0: Any) {
        call_native!(Void, 0x702BC4D605522539u64, p_0);
    } // 0x702BC4D605522539 0x913FD7D6 b323
    pub unsafe fn network_session_set_matchmaking_property_id(p_0: bool) {
        call_native!(Void, 0x3F52E880AAF6C8CAu64, p_0);
    } // 0x3F52E880AAF6C8CA 0xB3D9A67F b323
    pub unsafe fn network_session_set_matchmaking_mental_state(p_0: i32) {
        call_native!(Void, 0xF1EEA2DDA9FFA69Du64, p_0);
    } // 0xF1EEA2DDA9FFA69D 0x6CC062FC b323
    pub unsafe fn network_session_set_num_bosses(num: i32) {
        call_native!(Void, 0x59D421683D31835Au64, num);
    } // 0x59D421683D31835A  b573
    pub unsafe fn network_session_set_script_validate_join() {
        call_native!(Void, 0x1153FA02A659051Cu64);
    } // 0x1153FA02A659051C 0x57F9BC83 b323
    pub unsafe fn network_session_validate_join(p_0: bool) {
        call_native!(Void, 0xC19F6C8E7865A6FFu64, p_0);
    } // 0xC19F6C8E7865A6FF 0xF3768F90 b323
    pub unsafe fn network_add_followers(p_0: *mut i32, p_1: i32) {
        call_native!(Void, 0x236406F60CF216D6u64, p_0, p_1);
    } // 0x236406F60CF216D6 0x0EC62629 b323
    pub unsafe fn network_clear_followers() {
        call_native!(Void, 0x058F43EC59A8631Au64);
    } // 0x058F43EC59A8631A 0x5E557307 b323
    pub unsafe fn network_get_global_multiplayer_clock(
        hours: *mut i32,
        minutes: *mut i32,
        seconds: *mut i32,
    ) {
        call_native!(Void, 0x6D03BFBD643B2A02u64, hours, minutes, seconds);
    } // 0x6D03BFBD643B2A02 0x74E8C53E b323
    pub unsafe fn network_session_set_gamemode(p_0: Any) {
        call_native!(Void, 0x600F8CB31C7AAB6Eu64, p_0);
    } // 0x600F8CB31C7AAB6E 0x959E43A3 b323
    pub unsafe fn network_session_get_host_aim_preference() -> i32 {
        call_native!(i32, 0xDFFA5BE8381C3314u64)
    } // 0xDFFA5BE8381C3314  b463
    pub unsafe fn network_find_gamers_in_crew(crew_id: i32) -> bool {
        call_native!(bool, 0xE532D6811B3A4D2Au64, crew_id)
    } // 0xE532D6811B3A4D2A 0x7771AB83 b323
    pub unsafe fn network_find_matched_gamers(
        attribute: i32,
        fallback_limit: f32,
        lower_limit: f32,
        upper_limit: f32,
    ) -> bool {
        call_native!(
            bool,
            0xF7B2CFDE5C9F700Du64,
            attribute,
            fallback_limit,
            lower_limit,
            upper_limit
        )
    } // 0xF7B2CFDE5C9F700D 0xA13045D4 b323
    pub unsafe fn network_is_finding_gamers() -> bool {
        call_native!(bool, 0xDDDF64C91BFCF0AAu64)
    } // 0xDDDF64C91BFCF0AA 0xA6DAA79F b323
    pub unsafe fn network_did_find_gamers_succeed() -> bool {
        call_native!(bool, 0xF9B83B77929D8863u64)
    } // 0xF9B83B77929D8863 0xBEDC4503 b323
    pub unsafe fn network_get_num_found_gamers() -> i32 {
        call_native!(i32, 0xA1B043EE79A916FBu64)
    } // 0xA1B043EE79A916FB 0xF4B80C7E b323
    pub unsafe fn network_get_found_gamer(p_0: *mut Any, p_1: Any) -> bool {
        call_native!(bool, 0x9DCFF2AFB68B3476u64, p_0, p_1)
    } // 0x9DCFF2AFB68B3476 0xA08C9141 b323
    pub unsafe fn network_clear_found_gamers() {
        call_native!(Void, 0x6D14CCEE1B40381Au64);
    } // 0x6D14CCEE1B40381A 0x6AA9A154 b323
    pub unsafe fn network_queue_gamer_for_status(p_0: *mut Any) -> bool {
        call_native!(bool, 0x85A0EF54A500882Cu64, p_0)
    } // 0x85A0EF54A500882C 0x42BD0780 b323
    pub unsafe fn network_get_gamer_status_from_queue() -> bool {
        call_native!(bool, 0x2CC848A861D01493u64)
    } // 0x2CC848A861D01493 0xBEB98840 b323
    pub unsafe fn network_is_getting_gamer_status() -> bool {
        call_native!(bool, 0x94A8394D150B013Au64)
    } // 0x94A8394D150B013A 0x08029970 b323
    pub unsafe fn network_did_get_gamer_status_succeed() -> bool {
        call_native!(bool, 0x5AE17C6B0134B7F1u64)
    } // 0x5AE17C6B0134B7F1 0xC871E745 b323
    pub unsafe fn network_get_gamer_status_result(p_0: *mut Any, p_1: Any) -> bool {
        call_native!(bool, 0x02A8BEC6FD9AF660u64, p_0, p_1)
    } // 0x02A8BEC6FD9AF660 0xB5ABC4B4 b323
    pub unsafe fn network_clear_get_gamer_status() {
        call_native!(Void, 0x86E0660E4F5C956Du64);
    } // 0x86E0660E4F5C956D 0x3F7EDBBD b323
    pub unsafe fn network_session_join_invite() {
        call_native!(Void, 0xC6F8AB8A4189CF3Au64);
    } // 0xC6F8AB8A4189CF3A 0x3D6360B5 b323
    pub unsafe fn network_session_cancel_invite() {
        call_native!(Void, 0x2FBF47B1B36D36F9u64);
    } // 0x2FBF47B1B36D36F9 0x20317535 b323
    pub unsafe fn network_session_force_cancel_invite() {
        call_native!(Void, 0xA29177F7703B5644u64);
    } // 0xA29177F7703B5644 0x3FD49D3B b323
    pub unsafe fn network_has_pending_invite() -> bool {
        call_native!(bool, 0xAC8C7B9B88C4A668u64)
    } // 0xAC8C7B9B88C4A668 0x0C207D6E b323
    pub unsafe fn network_has_confirmed_invite() -> bool {
        call_native!(bool, 0xC42DD763159F3461u64)
    } // 0xC42DD763159F3461 0xFBBAC350 b323
    pub unsafe fn network_request_invite_confirmed_event() -> bool {
        call_native!(bool, 0x62A0296C1BB1CEB3u64)
    } // 0x62A0296C1BB1CEB3 0x0907A6BF b323
    pub unsafe fn network_session_was_invited() -> bool {
        call_native!(bool, 0x23DFB504655D0CE4u64)
    } // 0x23DFB504655D0CE4 0x6A0BEA60 b323
    pub unsafe fn network_session_get_inviter(gamer_handle: *mut Any) {
        call_native!(Void, 0xE57397B4A3429DD0u64, gamer_handle);
    } // 0xE57397B4A3429DD0 0xE9C6B3FD b323
    pub unsafe fn network_session_is_awaiting_invite_response() -> bool {
        call_native!(bool, 0xD313DE83394AF134u64)
    } // 0xD313DE83394AF134 0x3EA9D44C b323
    pub unsafe fn network_session_is_displaying_invite_confirmation() -> bool {
        call_native!(bool, 0xBDB6F89C729CF388u64)
    } // 0xBDB6F89C729CF388 0x9374523F b323
    pub unsafe fn network_suppress_invite(toggle: bool) {
        call_native!(Void, 0xA0682D67EF1FBA3Du64, toggle);
    } // 0xA0682D67EF1FBA3D 0x323DC78C b323
    pub unsafe fn network_block_invites(toggle: bool) {
        call_native!(Void, 0x34F9E9049454A7A0u64, toggle);
    } // 0x34F9E9049454A7A0 0xD156FD1A b323
    pub unsafe fn network_block_join_queue_invites(toggle: bool) {
        call_native!(Void, 0xCFEB8AF24FC1D0BBu64, toggle);
    } // 0xCFEB8AF24FC1D0BB 0x8AB4890B b323
    pub unsafe fn network_set_can_receive_rs_invites(p_0: bool) {
        call_native!(Void, 0x68980414688F7F9Du64, p_0);
    } // 0x68980414688F7F9D  b2612
    pub unsafe fn network_store_invite_through_restart() {
        call_native!(Void, 0xF814FEC6A19FD6E0u64);
    } // 0xF814FEC6A19FD6E0 0x32B7A076 b323
    pub unsafe fn network_allow_invite_process_in_player_switch(p_0: bool) {
        call_native!(Void, 0x6B07B9CE4D390375u64, p_0);
    } // 0x6B07B9CE4D390375 0x0FCE995D b323
    pub unsafe fn network_set_script_ready_for_events(toggle: bool) {
        call_native!(Void, 0x7AC752103856FB20u64, toggle);
    } // 0x7AC752103856FB20 0xA639DCA2 b323
    pub unsafe fn network_is_offline_invite_pending() -> bool {
        call_native!(bool, 0x74698374C45701D2u64)
    } // 0x74698374C45701D2 0x70ED476A b323
    pub unsafe fn network_clear_offline_invite_pending() {
        call_native!(Void, 0x140E6A44870A11CEu64);
    } // 0x140E6A44870A11CE 0x50507BED b323
    pub unsafe fn _network_invite_get_join_fail_reason() -> *const i8 {
        call_native!(*const i8, 0x7B335F84501145BBu64)
    } // 0x7B335F84501145BB  b3179
    pub unsafe fn _network_invite_clear_join_fail_reason() {
        call_native!(Void, 0x8EF5F5811A940F82u64);
    } // 0x8EF5F5811A940F82  b3179
    pub unsafe fn network_session_host_single_player(p_0: i32) {
        call_native!(Void, 0xC74C33FCA52856D5u64, p_0);
    } // 0xC74C33FCA52856D5 0xF3B1CA85 b323
    pub unsafe fn network_session_leave_single_player() {
        call_native!(Void, 0x3442775428FD2DAAu64);
    } // 0x3442775428FD2DAA 0xC692F86A b323
    pub unsafe fn network_is_game_in_progress() -> bool {
        call_native!(bool, 0x10FAB35428CCC9D7u64)
    } // 0x10FAB35428CCC9D7 0x09B88E3E b323
    pub unsafe fn network_is_session_active() -> bool {
        call_native!(bool, 0xD83C2B94E7508980u64)
    } // 0xD83C2B94E7508980 0x715CB8C4 b323
    pub unsafe fn network_is_in_session() -> bool {
        call_native!(bool, 0xCA97246103B63917u64)
    } // 0xCA97246103B63917 0x4BC4105E b323
    pub unsafe fn _network_is_americas_version() -> bool {
        call_native!(bool, 0x0292BD7F3766CEBCu64)
    } // 0x0292BD7F3766CEBC  b3095
    pub unsafe fn network_is_session_started() -> bool {
        call_native!(bool, 0x9DE624D2FC4B603Fu64)
    } // 0x9DE624D2FC4B603F 0x9D854A37 b323
    pub unsafe fn network_is_session_busy() -> bool {
        call_native!(bool, 0xF4435D66A8E2905Eu64)
    } // 0xF4435D66A8E2905E 0x8592152D b323
    pub unsafe fn network_can_session_end() -> bool {
        call_native!(bool, 0x4EEBC3694E49C572u64)
    } // 0x4EEBC3694E49C572 0xE1FCCDBA b323
    pub unsafe fn network_get_game_mode() -> i32 {
        call_native!(i32, 0x4C9034162368E206u64)
    } // 0x4C9034162368E206  b2060
    pub unsafe fn network_session_mark_visible(toggle: bool) {
        call_native!(Void, 0x271CC6AB59EBF9A5u64, toggle);
    } // 0x271CC6AB59EBF9A5 0x7017257D b323
    pub unsafe fn network_session_is_visible() -> bool {
        call_native!(bool, 0xBA416D68C631496Au64)
    } // 0xBA416D68C631496A 0x4977AC28 b323
    pub unsafe fn network_session_block_join_requests(toggle: bool) {
        call_native!(Void, 0xA73667484D7037C3u64, toggle);
    } // 0xA73667484D7037C3 0xE6EEF8AF b323
    pub unsafe fn network_session_change_slots(slots: i32, p_1: bool) {
        call_native!(Void, 0xB4AB419E0D86ACAEu64, slots, p_1);
    } // 0xB4AB419E0D86ACAE 0x6BB93227 b323
    pub unsafe fn network_session_get_private_slots() -> i32 {
        call_native!(i32, 0x53AFD64C6758F2F9u64)
    } // 0x53AFD64C6758F2F9 0xE642F2FD b323
    pub unsafe fn network_session_voice_host() -> bool {
        call_native!(bool, 0x9C1556705F864230u64)
    } // 0x9C1556705F864230 0x345C2980 b323
    pub unsafe fn network_session_voice_leave() -> bool {
        call_native!(bool, 0x6793E42BE02B575Du64)
    } // 0x6793E42BE02B575D 0xE566C7DA b323
    pub unsafe fn network_session_voice_connect_to_player(gamer_handle: *mut Any) {
        call_native!(Void, 0xABD5E88B8A2D3DB2u64, gamer_handle);
    } // 0xABD5E88B8A2D3DB2 0x9DFD89E6 b323
    pub unsafe fn network_session_voice_respond_to_request(p_0: bool, p_1: i32) {
        call_native!(Void, 0x7F8413B7FC2AA6B9u64, p_0, p_1);
    } // 0x7F8413B7FC2AA6B9 0x075321B5 b323
    pub unsafe fn network_session_voice_set_timeout(timeout: i32) {
        call_native!(Void, 0x5B8ED3DB018927B1u64, timeout);
    } // 0x5B8ED3DB018927B1 0x6EFC2FD0 b323
    pub unsafe fn network_session_is_in_voice_session() -> bool {
        call_native!(bool, 0x855BC38818F6F684u64)
    } // 0x855BC38818F6F684 0x60AA4AA1 b323
    pub unsafe fn network_session_is_voice_session_active() -> bool {
        call_native!(bool, 0xB5D3453C98456528u64)
    } // 0xB5D3453C98456528  b323
    pub unsafe fn network_session_is_voice_session_busy() -> bool {
        call_native!(bool, 0xEF0912DDF7C4CB4Bu64)
    } // 0xEF0912DDF7C4CB4B 0x132CA01E b323
    pub unsafe fn network_send_text_message(message: *const i8, gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x3A214F2EC889B100u64, message, gamer_handle)
    } // 0x3A214F2EC889B100 0xAFFEA720 b323
    pub unsafe fn network_set_activity_spectator(toggle: bool) {
        call_native!(Void, 0x75138790B4359A74u64, toggle);
    } // 0x75138790B4359A74 0xFC9AD060 b323
    pub unsafe fn network_is_activity_spectator() -> bool {
        call_native!(bool, 0x12103B9E0C9F92FBu64)
    } // 0x12103B9E0C9F92FB 0xAF329720 b323
    pub unsafe fn network_set_activity_player_max(p_0: Any) {
        call_native!(Void, 0x0E4F77F7B9D74D84u64, p_0);
    } // 0x0E4F77F7B9D74D84 0x04CB2AB4 b573
    pub unsafe fn network_set_activity_spectator_max(max_spectators: i32) {
        call_native!(Void, 0x9D277B76D1D12222u64, max_spectators);
    } // 0x9D277B76D1D12222 0x74E0BC0A b323
    pub unsafe fn network_get_activity_player_num(p_0: bool) -> i32 {
        call_native!(i32, 0x73E2B500410DA5A2u64, p_0)
    } // 0x73E2B500410DA5A2 0x31F951FD b323
    pub unsafe fn network_is_activity_spectator_from_handle(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x2763BBAA72A7BCB9u64, gamer_handle)
    } // 0x2763BBAA72A7BCB9 0x58F1DF7D b323
    pub unsafe fn network_host_transition(
        p_0: i32,
        p_1: i32,
        p_2: i32,
        p_3: i32,
        p_4: Any,
        p_5: bool,
        p_6: bool,
        p_7: i32,
        p_8: Any,
        p_9: i32,
    ) -> bool {
        call_native!(
            bool,
            0xA60BB5CE242BB254u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        )
    } // 0xA60BB5CE242BB254 0x146764FB b323
    pub unsafe fn network_do_transition_quickmatch(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) -> bool {
        call_native!(bool, 0x71FB0EBCD4915D56u64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x71FB0EBCD4915D56 0x2FF65C0B b323
    pub unsafe fn network_do_transition_quickmatch_async(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) -> bool {
        call_native!(bool, 0xA091A5E44F0072E5u64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0xA091A5E44F0072E5 0x47D61C99 b323
    pub unsafe fn network_do_transition_quickmatch_with_group(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: *mut Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
    ) -> bool {
        call_native!(
            bool,
            0x9C4AB58491FDC98Au64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        )
    } // 0x9C4AB58491FDC98A 0x5CE60A11 b323
    pub unsafe fn network_join_group_activity() -> bool {
        call_native!(bool, 0xA06509A691D12BE4u64)
    } // 0xA06509A691D12BE4 0x0D7E5CF9 b323
    pub unsafe fn network_clear_group_activity() {
        call_native!(Void, 0x1888694923EF4591u64);
    } // 0x1888694923EF4591 0x157D44D3 b393
    pub unsafe fn network_retain_activity_group() {
        call_native!(Void, 0xB13E88E655E5A3BCu64);
    } // 0xB13E88E655E5A3BC 0x36A5F2DA b323
    pub unsafe fn network_is_transition_closed_friends() -> bool {
        call_native!(bool, 0x6512765E3BE78C50u64)
    } // 0x6512765E3BE78C50 0x95FFACF8 b323
    pub unsafe fn network_is_transition_closed_crew() -> bool {
        call_native!(bool, 0x0DBD5D7E3C5BEC3Bu64)
    } // 0x0DBD5D7E3C5BEC3B 0xB97A966B b323
    pub unsafe fn network_is_transition_solo() -> bool {
        call_native!(bool, 0x5DC577201723960Au64)
    } // 0x5DC577201723960A 0x063DC4A5 b323
    pub unsafe fn network_is_transition_private() -> bool {
        call_native!(bool, 0x5A6AA44FF8E931E6u64)
    } // 0x5A6AA44FF8E931E6 0x104DDE8D b323
    pub unsafe fn network_get_num_transition_non_async_gamers() -> i32 {
        call_native!(i32, 0x617F49C2668E6155u64)
    } // 0x617F49C2668E6155  b757
    pub unsafe fn network_mark_as_preferred_activity(p_0: bool) {
        call_native!(Void, 0x261E97AD7BCF3D40u64, p_0);
    } // 0x261E97AD7BCF3D40 0x7EF353E1 b323
    pub unsafe fn network_mark_as_waiting_async(p_0: bool) {
        call_native!(Void, 0x39917E1B4CB0F911u64, p_0);
    } // 0x39917E1B4CB0F911 0xF60986FC b323
    pub unsafe fn network_set_in_progress_finish_time(p_0: Any) {
        call_native!(Void, 0x2CE9D95E4051AECDu64, p_0);
    } // 0x2CE9D95E4051AECD  b678
    pub unsafe fn network_set_transition_creator_handle(p_0: *mut Any) {
        call_native!(Void, 0xEF26739BCD9907D5u64, p_0);
    } // 0xEF26739BCD9907D5 0x1DD01FE7 b323
    pub unsafe fn network_clear_transition_creator_handle() {
        call_native!(Void, 0xFB3272229A82C759u64);
    } // 0xFB3272229A82C759 0x8BB336F7 b323
    pub unsafe fn network_invite_gamers_to_transition(p_0: *mut Any, p_1: Any) -> bool {
        call_native!(bool, 0x4A595C32F77DFF76u64, p_0, p_1)
    } // 0x4A595C32F77DFF76 0x5332E645 b323
    pub unsafe fn network_set_gamer_invited_to_transition(gamer_handle: *mut Any) {
        call_native!(Void, 0xCA2C8073411ECDB6u64, gamer_handle);
    } // 0xCA2C8073411ECDB6 0x17F1C69D b323
    pub unsafe fn network_leave_transition() -> bool {
        call_native!(bool, 0xD23A1A815D21DB19u64)
    } // 0xD23A1A815D21DB19 0x3A3599B7 b323
    pub unsafe fn network_launch_transition() -> bool {
        call_native!(bool, 0x2DCF46CB1A4F0884u64)
    } // 0x2DCF46CB1A4F0884 0xE3570BA2 b323
    pub unsafe fn network_set_do_not_launch_from_join_as_migrated_host(toggle: bool) {
        call_native!(Void, 0xA2E9C1AB8A92E8CDu64, toggle);
    } // 0xA2E9C1AB8A92E8CD 0x8D014B23 b323
    pub unsafe fn network_cancel_transition_matchmaking() {
        call_native!(Void, 0x023782EFC70585EEu64);
    } // 0x023782EFC70585EE  b2699
    pub unsafe fn network_bail_transition(p_0: i32, p_1: i32, p_2: i32) {
        call_native!(Void, 0xEAA572036990CD1Bu64, p_0, p_1, p_2);
    } // 0xEAA572036990CD1B 0xB59D74CA b323
    pub unsafe fn network_do_transition_to_game(p_0: bool, max_players: i32) -> bool {
        call_native!(bool, 0x3E9BB38102A589B0u64, p_0, max_players)
    } // 0x3E9BB38102A589B0 0x1B2114D2 b323
    pub unsafe fn network_do_transition_to_new_game(
        p_0: bool,
        max_players: i32,
        p_2: bool,
    ) -> bool {
        call_native!(bool, 0x4665F51EFED00034u64, p_0, max_players, p_2)
    } // 0x4665F51EFED00034 0x58AFBE63 b323
    pub unsafe fn network_do_transition_to_freemode(
        p_0: *mut Any,
        p_1: Any,
        p_2: bool,
        players: i32,
        p_4: bool,
    ) -> bool {
        call_native!(bool, 0x3AAD8B2FCA1E289Fu64, p_0, p_1, p_2, players, p_4)
    } // 0x3AAD8B2FCA1E289F 0xC7CB8ADF b323
    pub unsafe fn network_do_transition_to_new_freemode(
        p_0: *mut Any,
        p_1: Any,
        players: i32,
        p_3: bool,
        p_4: bool,
        p_5: bool,
    ) -> bool {
        call_native!(
            bool,
            0x9E80A5BA8109F974u64,
            p_0,
            p_1,
            players,
            p_3,
            p_4,
            p_5
        )
    } // 0x9E80A5BA8109F974 0xAD13375E b323
    pub unsafe fn network_is_transition_to_game() -> bool {
        call_native!(bool, 0x9D7696D8F4FA6CB7u64)
    } // 0x9D7696D8F4FA6CB7 0x17146B2B b323
    pub unsafe fn network_get_transition_members(data: *mut Any, data_count: i32) -> i32 {
        call_native!(i32, 0x73B000F7FBC55829u64, data, data_count)
    } // 0x73B000F7FBC55829 0x31F19263 b323
    pub unsafe fn network_apply_transition_parameter(p_0: i32, p_1: i32) {
        call_native!(Void, 0x521638ADA1BA0D18u64, p_0, p_1);
    } // 0x521638ADA1BA0D18 0xCEE79711 b323
    pub unsafe fn network_apply_transition_parameter_string(
        p_0: i32,
        string: *const i8,
        p_2: bool,
    ) {
        call_native!(Void, 0xEBEFC2E77084F599u64, p_0, string, p_2);
    } // 0xEBEFC2E77084F599 0xE0C28DB5 b323
    pub unsafe fn network_send_transition_gamer_instruction(
        gamer_handle: *mut Any,
        p_1: *const i8,
        p_2: i32,
        p_3: i32,
        p_4: bool,
    ) -> bool {
        call_native!(
            bool,
            0x31D1D2B858D25E6Bu64,
            gamer_handle,
            p_1,
            p_2,
            p_3,
            p_4
        )
    } // 0x31D1D2B858D25E6B 0x468B0884 b323
    pub unsafe fn network_mark_transition_gamer_as_fully_joined(p_0: *mut Any) -> bool {
        call_native!(bool, 0x5728BB6D63E3FF1Du64, p_0)
    } // 0x5728BB6D63E3FF1D 0x03383F57 b323
    pub unsafe fn network_is_transition_host() -> bool {
        call_native!(bool, 0x0B824797C9BF2159u64)
    } // 0x0B824797C9BF2159 0x0C0900BC b323
    pub unsafe fn network_is_transition_host_from_handle(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x6B5C83BA3EFE6A10u64, gamer_handle)
    } // 0x6B5C83BA3EFE6A10 0x0E2854C4 b323
    pub unsafe fn network_get_transition_host(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x65042B9774C4435Eu64, gamer_handle)
    } // 0x65042B9774C4435E 0x73098D40 b323
    pub unsafe fn network_is_in_transition() -> bool {
        call_native!(bool, 0x68049AEFF83D8F0Au64)
    } // 0x68049AEFF83D8F0A 0xC3CDB626 b323
    pub unsafe fn network_is_transition_started() -> bool {
        call_native!(bool, 0x53FA83401D9C07FEu64)
    } // 0x53FA83401D9C07FE 0x7917E111 b323
    pub unsafe fn network_is_transition_busy() -> bool {
        call_native!(bool, 0x520F3282A53D26B7u64)
    } // 0x520F3282A53D26B7 0xA357A2C6 b323
    pub unsafe fn network_is_transition_matchmaking() -> bool {
        call_native!(bool, 0x292564C735375EDFu64)
    } // 0x292564C735375EDF 0x8262C70E b323
    pub unsafe fn network_is_transition_leave_postponed() -> bool {
        call_native!(bool, 0xC571D0E77D8BBC29u64)
    } // 0xC571D0E77D8BBC29 0x4F4BB300 b323
    pub unsafe fn network_transition_set_in_progress(p_0: Any) {
        call_native!(Void, 0x1398582B7F72B3EDu64, p_0);
    } // 0x1398582B7F72B3ED  b505
    pub unsafe fn network_transition_set_content_creator(p_0: Any) {
        call_native!(Void, 0x1F8E00FB18239600u64, p_0);
    } // 0x1F8E00FB18239600  b573
    pub unsafe fn network_transition_set_activity_island(p_0: Any) {
        call_native!(Void, 0xF6F4383B7C92F11Au64, p_0);
    } // 0xF6F4383B7C92F11A  b573
    pub unsafe fn network_open_transition_matchmaking() {
        call_native!(Void, 0x2B3A8F7CA3A38FDEu64);
    } // 0x2B3A8F7CA3A38FDE 0xC71E607B b323
    pub unsafe fn network_close_transition_matchmaking() {
        call_native!(Void, 0x43F4DBA69710E01Eu64);
    } // 0x43F4DBA69710E01E 0x82D32D07 b323
    pub unsafe fn network_is_transition_open_to_matchmaking() -> bool {
        call_native!(bool, 0x37A4494483B9F5C9u64)
    } // 0x37A4494483B9F5C9 0xC901AA9F b323
    pub unsafe fn network_set_transition_visibility_lock(p_0: bool, p_1: bool) {
        call_native!(Void, 0x0C978FDA19692C2Cu64, p_0, p_1);
    } // 0x0C978FDA19692C2C 0x4AF0ADF5 b323
    pub unsafe fn network_is_transition_visibility_locked() -> bool {
        call_native!(bool, 0xD0A484CB2F829FBEu64)
    } // 0xD0A484CB2F829FBE 0xF637166E b323
    pub unsafe fn network_set_transition_activity_id(p_0: Any) {
        call_native!(Void, 0x30DE938B516F0AD2u64, p_0);
    } // 0x30DE938B516F0AD2 0xCCA9C022 b323
    pub unsafe fn network_change_transition_slots(p_0: Any, p_1: bool) {
        call_native!(Void, 0xEEEDA5E6D7080987u64, p_0, p_1);
    } // 0xEEEDA5E6D7080987 0x1E5F6AEF b323
    pub unsafe fn network_transition_block_join_requests(p_0: bool) {
        call_native!(Void, 0x973D76AA760A6CB6u64, p_0);
    } // 0x973D76AA760A6CB6 0x0532DDD2 b323
    pub unsafe fn network_has_player_started_transition(player: Player) -> bool {
        call_native!(bool, 0x9AC9CCBFA8C29795u64, player)
    } // 0x9AC9CCBFA8C29795 0x4ABD1E59 b323
    pub unsafe fn network_are_transition_details_valid(p_0: Any) -> bool {
        call_native!(bool, 0x2615AA2A695930C1u64, p_0)
    } // 0x2615AA2A695930C1 0xCDEBCCE7 b323
    pub unsafe fn network_join_transition(player: Player) -> bool {
        call_native!(bool, 0x9D060B08CD63321Au64, player)
    } // 0x9D060B08CD63321A 0xB054EC4B b323
    pub unsafe fn network_has_invited_gamer_to_transition(p_0: *mut Any) -> bool {
        call_native!(bool, 0x7284A47B3540E6CFu64, p_0)
    } // 0x7284A47B3540E6CF 0x4F41DF6B b323
    pub unsafe fn network_has_transition_invite_been_acked(p_0: *mut Any) -> bool {
        call_native!(bool, 0x3F9990BF5F22759Cu64, p_0)
    } // 0x3F9990BF5F22759C 0x00F26CDC b323
    pub unsafe fn network_is_activity_session() -> bool {
        call_native!(bool, 0x05095437424397FAu64)
    } // 0x05095437424397FA 0x577DAA8A b323
    pub unsafe fn network_disable_realtime_multiplayer() {
        call_native!(Void, 0x236905C700FDB54Du64);
    } // 0x236905C700FDB54D  b2612
    pub unsafe fn network_set_presence_session_invites_blocked(toggle: bool) {
        call_native!(Void, 0x4A9FDE3A5A6D0437u64, toggle);
    } // 0x4A9FDE3A5A6D0437 0x18F03AFD b323
    pub unsafe fn network_send_invite_via_presence(
        gamer_handle: *mut Any,
        p_1: *const i8,
        data_count: i32,
        p_3: i32,
    ) -> bool {
        call_native!(
            bool,
            0xC3C7A6AFDB244624u64,
            gamer_handle,
            p_1,
            data_count,
            p_3
        )
    } // 0xC3C7A6AFDB244624 0x8B99B72B b323
    pub unsafe fn network_send_transition_invite_via_presence(
        gamer_handle: *mut Any,
        p_1: *const i8,
        data_count: i32,
        p_3: i32,
    ) -> bool {
        call_native!(
            bool,
            0xC116FF9B4D488291u64,
            gamer_handle,
            p_1,
            data_count,
            p_3
        )
    } // 0xC116FF9B4D488291 0x877C0E1C b323
    pub unsafe fn network_send_important_transition_invite_via_presence(
        gamer_handle: *mut Any,
        p_1: *const i8,
        data_count: i32,
        p_3: i32,
    ) -> bool {
        call_native!(
            bool,
            0x1171A97A3D3981B6u64,
            gamer_handle,
            p_1,
            data_count,
            p_3
        )
    } // 0x1171A97A3D3981B6  b323
    pub unsafe fn network_get_presence_invite_index_by_id(p_0: i32) -> i32 {
        call_native!(i32, 0x742B58F723233ED9u64, p_0)
    } // 0x742B58F723233ED9 0x5E832444 b323
    pub unsafe fn network_get_num_presence_invites() -> i32 {
        call_native!(i32, 0xCEFA968912D0F78Du64)
    } // 0xCEFA968912D0F78D 0x3FDA00F3 b323
    pub unsafe fn network_accept_presence_invite(p_0: i32) -> bool {
        call_native!(bool, 0xFA91550DF9318B22u64, p_0)
    } // 0xFA91550DF9318B22 0xE5DA4CED b323
    pub unsafe fn network_remove_presence_invite(p_0: i32) -> bool {
        call_native!(bool, 0xF0210268DB0974B1u64, p_0)
    } // 0xF0210268DB0974B1 0x93C665FA b323
    pub unsafe fn network_get_presence_invite_id(p_0: i32) -> i32 {
        call_native!(i32, 0xDFF09646E12EC386u64, p_0)
    } // 0xDFF09646E12EC386 0xD50DF46C b323
    pub unsafe fn network_get_presence_invite_inviter(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0x4962CC4AA2F345B7u64, p_0)
    } // 0x4962CC4AA2F345B7 0x19EC65D9 b323
    pub unsafe fn network_get_presence_invite_handle(p_0: Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0x38D5B0FEBB086F75u64, p_0, p_1)
    } // 0x38D5B0FEBB086F75 0xB2451429 b323
    pub unsafe fn network_get_presence_invite_session_id(p_0: Any) -> i32 {
        call_native!(i32, 0x26E1CD96B0903D60u64, p_0)
    } // 0x26E1CD96B0903D60 0xC5E0C989 b323
    pub unsafe fn network_get_presence_invite_content_id(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0x24409FC4C55CB22Du64, p_0)
    } // 0x24409FC4C55CB22D 0xA4302183 b323
    pub unsafe fn network_get_presence_invite_playlist_length(p_0: i32) -> i32 {
        call_native!(i32, 0xD39B3FFF8FFDD5BFu64, p_0)
    } // 0xD39B3FFF8FFDD5BF 0x51B2D848 b323
    pub unsafe fn network_get_presence_invite_playlist_current(p_0: i32) -> i32 {
        call_native!(i32, 0x728C4CC7920CD102u64, p_0)
    } // 0x728C4CC7920CD102 0x4677C656 b323
    pub unsafe fn network_get_presence_invite_from_admin(p_0: i32) -> bool {
        call_native!(bool, 0x3DBF2DF0AEB7D289u64, p_0)
    } // 0x3DBF2DF0AEB7D289 0xF5E3401C b323
    pub unsafe fn network_get_presence_invite_is_tournament(p_0: Any) -> bool {
        call_native!(bool, 0x8806CEBFABD3CE05u64, p_0)
    } // 0x8806CEBFABD3CE05 0x7D593B4C b323
    pub unsafe fn network_has_follow_invite() -> bool {
        call_native!(bool, 0x76D9B976C4C09FDEu64)
    } // 0x76D9B976C4C09FDE 0xE96CFE7D b323
    pub unsafe fn network_action_follow_invite() -> bool {
        call_native!(bool, 0xC88156EBB786F8D5u64)
    } // 0xC88156EBB786F8D5 0xAB969F00 b323
    pub unsafe fn network_clear_follow_invite() -> bool {
        call_native!(bool, 0x439BFDE3CD0610F6u64)
    } // 0x439BFDE3CD0610F6 0x3242F952 b323
    pub unsafe fn network_remove_and_cancel_all_invites() {
        call_native!(Void, 0xEBF8284D8CADEB53u64);
    } // 0xEBF8284D8CADEB53 0x9773F36A b323
    pub unsafe fn network_remove_transition_invite(p_0: *mut Any) {
        call_native!(Void, 0x7524B431B2E6F7EEu64, p_0);
    } // 0x7524B431B2E6F7EE 0xFDE84CB7 b323
    pub unsafe fn network_remove_all_transition_invite() {
        call_native!(Void, 0x726E0375C7A26368u64);
    } // 0x726E0375C7A26368 0xF7134E73 b323
    pub unsafe fn network_remove_and_cancel_all_transition_invites() {
        call_native!(Void, 0xF083835B70BA9BFEu64);
    } // 0xF083835B70BA9BFE 0xC47352E7 b323
    pub unsafe fn network_invite_gamers(p_0: *mut Any, p_1: Any, p_2: *mut Any, p_3: Any) -> bool {
        call_native!(bool, 0x9D80CD1D0E6327DEu64, p_0, p_1, p_2, p_3)
    } // 0x9D80CD1D0E6327DE 0x52FB8074 b323
    pub unsafe fn network_has_invited_gamer(p_0: *mut Any) -> bool {
        call_native!(bool, 0x4D86CD31E8976ECEu64, p_0)
    } // 0x4D86CD31E8976ECE 0xEC651BC0 b323
    pub unsafe fn network_has_made_invite_decision(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x71DC455F5CD1C2B1u64, gamer_handle)
    } // 0x71DC455F5CD1C2B1  b505
    pub unsafe fn network_get_invite_reply_status(p_0: Any) -> i32 {
        call_native!(i32, 0x3855FB5EB2C5E8B2u64, p_0)
    } // 0x3855FB5EB2C5E8B2  b505
    pub unsafe fn network_get_currently_selected_gamer_handle_from_invite_menu(
        p_0: *mut Any,
    ) -> bool {
        call_native!(bool, 0x74881E6BCAE2327Cu64, p_0)
    } // 0x74881E6BCAE2327C 0x72BA00CE b323
    pub unsafe fn network_set_currently_selected_gamer_handle_from_invite_menu(
        p_0: *mut Any,
    ) -> bool {
        call_native!(bool, 0x7206F674F2A3B1BBu64, p_0)
    } // 0x7206F674F2A3B1BB 0xFD95899E b323
    pub unsafe fn network_set_invite_on_call_for_invite_menu(p_0: *mut Any) {
        call_native!(Void, 0x66F010A4B031A331u64, p_0);
    } // 0x66F010A4B031A331 0x11378777 b323
    pub unsafe fn network_check_data_manager_succeeded_for_handle(
        p_0: i32,
        gamer_handle: *mut Any,
    ) -> bool {
        call_native!(bool, 0x44B37CDCAE765AAEu64, p_0, gamer_handle)
    } // 0x44B37CDCAE765AAE 0x13301529 b323
    pub unsafe fn network_check_data_manager_for_handle(p_0: Any, gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x4AD490AE1536933Bu64, p_0, gamer_handle)
    } // 0x4AD490AE1536933B  b372
    pub unsafe fn network_set_invite_failed_message_for_invite_menu(p_0: *mut Any, p_1: *mut Any) {
        call_native!(Void, 0x0D77A82DC2D0DA59u64, p_0, p_1);
    } // 0x0D77A82DC2D0DA59 0x0808D4CC b323
    pub unsafe fn fillout_pm_player_list(gamer_handle: *mut Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0xCBBD7C4991B64809u64, gamer_handle, p_1, p_2)
    } // 0xCBBD7C4991B64809 0xCE40F423 b323
    pub unsafe fn fillout_pm_player_list_with_names(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: Any,
        p_3: Any,
    ) -> bool {
        call_native!(bool, 0x716B6DB9D1886106u64, p_0, p_1, p_2, p_3)
    } // 0x716B6DB9D1886106 0xB8DF604E b323
    pub unsafe fn refresh_player_list_stats(p_0: i32) -> bool {
        call_native!(bool, 0xE26CCFF8094D8C74u64, p_0)
    } // 0xE26CCFF8094D8C74 0xF49C1533 b323
    pub unsafe fn network_set_current_data_manager_handle(p_0: *mut Any) -> bool {
        call_native!(bool, 0x796A87B3B68D1F3Du64, p_0)
    } // 0x796A87B3B68D1F3D  b323
    pub unsafe fn network_is_in_platform_party() -> bool {
        call_native!(bool, 0x2FC5650B0271CB57u64)
    } // 0x2FC5650B0271CB57 0xA812B6CB b323
    pub unsafe fn network_get_platform_party_member_count() -> i32 {
        call_native!(i32, 0x01ABCE5E7CBDA196u64)
    } // 0x01ABCE5E7CBDA196  b323
    pub unsafe fn network_get_platform_party_members(data: *mut Any, data_size: i32) -> i32 {
        call_native!(i32, 0x120364DE2845DAF8u64, data, data_size)
    } // 0x120364DE2845DAF8 0xF30E5814 b323
    pub unsafe fn network_is_in_platform_party_chat() -> bool {
        call_native!(bool, 0xFD8B834A8BA05048u64)
    } // 0xFD8B834A8BA05048 0xC6609191 b323
    pub unsafe fn network_is_chatting_in_platform_party(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x8DE9945BCC9AEC52u64, gamer_handle)
    } // 0x8DE9945BCC9AEC52 0x51367B34 b323
    pub unsafe fn network_can_queue_for_previous_session_join() -> bool {
        call_native!(bool, 0x2BF66D2E7414F686u64)
    } // 0x2BF66D2E7414F686 0x9156EFC0 b323
    pub unsafe fn network_is_queuing_for_session_join() -> bool {
        call_native!(bool, 0x14922ED3E38761F0u64)
    } // 0x14922ED3E38761F0 0x8FA6EE0E b323
    pub unsafe fn network_clear_queued_join_request() {
        call_native!(Void, 0x6CE50E47F5543D0Cu64);
    } // 0x6CE50E47F5543D0C  b573
    pub unsafe fn network_send_queued_join_request() {
        call_native!(Void, 0xFA2888E3833C8E96u64);
    } // 0xFA2888E3833C8E96 0x7F70C15A b323
    pub unsafe fn network_remove_all_queued_join_requests() {
        call_native!(Void, 0x25D990F8E0E3F13Cu64);
    } // 0x25D990F8E0E3F13C 0x4FD83F5B b323
    pub unsafe fn network_seed_random_number_generator(seed: i32) {
        call_native!(Void, 0xF1B84178F8674195u64, seed);
    } // 0xF1B84178F8674195 0x41702C8A b323
    pub unsafe fn network_get_random_int() -> i32 {
        call_native!(i32, 0x599E4FA1F87EB5FFu64)
    } // 0x599E4FA1F87EB5FF 0x208DD848 b323
    pub unsafe fn network_get_random_int_ranged(range_start: i32, range_end: i32) -> i32 {
        call_native!(i32, 0xE30CF56F1EFA5F43u64, range_start, range_end)
    } // 0xE30CF56F1EFA5F43 0xF9B6426D b323
    pub unsafe fn _network_get_random_float_ranged(range_start: f32, range_end: f32) -> f32 {
        call_native!(f32, 0x04BD27B5ACB67067u64, range_start, range_end)
    } // 0x04BD27B5ACB67067  b2802
    pub unsafe fn network_player_is_cheater() -> bool {
        call_native!(bool, 0x655B91F1495A9090u64)
    } // 0x655B91F1495A9090 0xA51DC214 b323
    pub unsafe fn network_player_get_cheater_reason() -> i32 {
        call_native!(i32, 0x172F75B6EE2233BAu64)
    } // 0x172F75B6EE2233BA 0x1720ABA6 b323
    pub unsafe fn network_player_is_badsport() -> bool {
        call_native!(bool, 0x19D8DA0E5A68045Au64)
    } // 0x19D8DA0E5A68045A 0xA19708E3 b323
    pub unsafe fn remote_cheater_player_detected(player: Player, a: i32, b: i32) -> bool {
        call_native!(bool, 0x472841A026D26D8Bu64, player, a, b)
    } // 0x472841A026D26D8B  b1103
    pub unsafe fn bad_sport_player_left_detected(
        gamer_handle: *mut Any,
        event: i32,
        amount_received: i32,
    ) -> bool {
        call_native!(
            bool,
            0xEC5E3AF5289DCA81u64,
            gamer_handle,
            event,
            amount_received
        )
    } // 0xEC5E3AF5289DCA81 0x4C2C6B6A b323
    pub unsafe fn network_add_invalid_object_model(model_hash: Hash) {
        call_native!(Void, 0x7F562DBC212E81F9u64, model_hash);
    } // 0x7F562DBC212E81F9  b2545
    pub unsafe fn network_remove_invalid_object_model(model_hash: Hash) {
        call_native!(Void, 0x791EDB5803B2F468u64, model_hash);
    } // 0x791EDB5803B2F468  b2545
    pub unsafe fn network_clear_invalid_object_models() {
        call_native!(Void, 0x03B2F03A53D85E41u64);
    } // 0x03B2F03A53D85E41  b2545
    pub unsafe fn network_apply_ped_scar_data(ped: Ped, p_1: i32) {
        call_native!(Void, 0xE66C690248F11150u64, ped, p_1);
    } // 0xE66C690248F11150 0x4818ACD0 b323
    pub unsafe fn network_set_this_script_is_network_script(
        max_num_mission_participants: i32,
        p_1: bool,
        instance_id: i32,
    ) {
        call_native!(
            Void,
            0x1CA59E306ECB80A5u64,
            max_num_mission_participants,
            p_1,
            instance_id
        );
    } // 0x1CA59E306ECB80A5 0x470810ED b323
    pub unsafe fn network_try_to_set_this_script_is_network_script(
        p_0: Any,
        p_1: bool,
        p_2: Any,
    ) -> bool {
        call_native!(bool, 0xD1110739EEADB592u64, p_0, p_1, p_2)
    } // 0xD1110739EEADB592  b323
    pub unsafe fn network_get_this_script_is_network_script() -> bool {
        call_native!(bool, 0x2910669969E9535Eu64)
    } // 0x2910669969E9535E 0xD9BF6549 b323
    pub unsafe fn network_get_max_num_participants() -> i32 {
        call_native!(i32, 0xA6C90FBC38E395EEu64)
    } // 0xA6C90FBC38E395EE 0xCCD8C02D b323
    pub unsafe fn network_get_num_participants() -> i32 {
        call_native!(i32, 0x18D0456E86604654u64)
    } // 0x18D0456E86604654 0x3E25A3C5 b323
    pub unsafe fn network_get_script_status() -> i32 {
        call_native!(i32, 0x57D158647A6BFABFu64)
    } // 0x57D158647A6BFABF 0x2BE9235A b323
    pub unsafe fn network_register_host_broadcast_variables(
        vars: *mut i32,
        num_vars: i32,
        debug_name: *const i8,
    ) {
        call_native!(Void, 0x3E9B2F01C50DF595u64, vars, num_vars, debug_name);
    } // 0x3E9B2F01C50DF595 0xDAF3B0AE b323
    pub unsafe fn network_register_player_broadcast_variables(
        vars: *mut i32,
        num_vars: i32,
        debug_name: *const i8,
    ) {
        call_native!(Void, 0x3364AA97340CA215u64, vars, num_vars, debug_name);
    } // 0x3364AA97340CA215 0xBE3D32B4 b323
    pub unsafe fn network_register_high_frequency_host_broadcast_variables(
        p_0: Any,
        p_1: Any,
        p_2: Any,
    ) {
        call_native!(Void, 0xEA8C0DDB10E2822Au64, p_0, p_1, p_2);
    } // 0xEA8C0DDB10E2822A  b1868
    pub unsafe fn network_register_high_frequency_player_broadcast_variables(
        p_0: Any,
        p_1: Any,
        p_2: Any,
    ) {
        call_native!(Void, 0xD6D7478CA62B8D41u64, p_0, p_1, p_2);
    } // 0xD6D7478CA62B8D41  b1868
    pub unsafe fn network_finish_broadcasting_data() {
        call_native!(Void, 0x64F62AFB081E260Du64);
    } // 0x64F62AFB081E260D 0xA71A1D2A b323
    pub unsafe fn network_has_received_host_broadcast_data() -> bool {
        call_native!(bool, 0x5D10B3795F3FC886u64)
    } // 0x5D10B3795F3FC886 0x0B739F53 b323
    pub unsafe fn network_get_player_index(player: Player) -> Player {
        call_native!(Player, 0x24FB80D107371267u64, player)
    } // 0x24FB80D107371267 0xBE1C1506 b323
    pub unsafe fn network_get_participant_index(index: i32) -> i32 {
        call_native!(i32, 0x1B84DF6AF2A46938u64, index)
    } // 0x1B84DF6AF2A46938 0xC4D91094 b323
    pub unsafe fn network_get_player_index_from_ped(ped: Ped) -> Player {
        call_native!(Player, 0x6C0E2E0125610278u64, ped)
    } // 0x6C0E2E0125610278 0x40DBF464 b323
    pub unsafe fn network_get_num_connected_players() -> i32 {
        call_native!(i32, 0xA4A79DD2D9600654u64)
    } // 0xA4A79DD2D9600654 0xF7952E62 b323
    pub unsafe fn network_is_player_connected(player: Player) -> bool {
        call_native!(bool, 0x93DC1BE4E1ABE9D1u64, player)
    } // 0x93DC1BE4E1ABE9D1 0x168EE2C2 b323
    pub unsafe fn network_get_total_num_players() -> i32 {
        call_native!(i32, 0xCF61D4B4702EE9EBu64)
    } // 0xCF61D4B4702EE9EB 0xF4F13B06 b323
    pub unsafe fn network_is_participant_active(p_0: i32) -> bool {
        call_native!(bool, 0x6FF8FF40B6357D45u64, p_0)
    } // 0x6FF8FF40B6357D45 0x4E2C348B b323
    pub unsafe fn network_is_player_active(player: Player) -> bool {
        call_native!(bool, 0xB8DFD30D6973E135u64, player)
    } // 0xB8DFD30D6973E135 0x43657B17 b323
    pub unsafe fn network_is_player_a_participant(player: Player) -> bool {
        call_native!(bool, 0x3CA58F6CB7CBD784u64, player)
    } // 0x3CA58F6CB7CBD784 0xB08B6992 b323
    pub unsafe fn network_is_host_of_this_script() -> bool {
        call_native!(bool, 0x83CD99A1E6061AB5u64)
    } // 0x83CD99A1E6061AB5 0x6970BA94 b323
    pub unsafe fn network_get_host_of_this_script() -> Player {
        call_native!(Player, 0xC7B4D79B01FA7A5Cu64)
    } // 0xC7B4D79B01FA7A5C 0x89EA7B54 b323
    pub unsafe fn network_get_host_of_script(
        script_name: *const i8,
        instance_id: i32,
        position_hash: i32,
    ) -> Player {
        call_native!(
            Player,
            0x1D6A14F1F9A736FCu64,
            script_name,
            instance_id,
            position_hash
        )
    } // 0x1D6A14F1F9A736FC 0x9C95D0BB b323
    pub unsafe fn network_set_mission_finished() {
        call_native!(Void, 0x3B3D11CD9FFCDFC9u64);
    } // 0x3B3D11CD9FFCDFC9 0x3083FAD7 b323
    pub unsafe fn network_is_script_active(
        script_name: *const i8,
        instance_id: i32,
        p_2: bool,
        position_hash: i32,
    ) -> bool {
        call_native!(
            bool,
            0x9D40DF90FAD26098u64,
            script_name,
            instance_id,
            p_2,
            position_hash
        )
    } // 0x9D40DF90FAD26098 0x4A65250C b323
    pub unsafe fn network_is_script_active_by_hash(
        script_hash: Hash,
        p_1: i32,
        p_2: bool,
        p_3: i32,
    ) -> bool {
        call_native!(bool, 0xDA7DE67F5FE5EE13u64, script_hash, p_1, p_2, p_3)
    } // 0xDA7DE67F5FE5EE13  b2245
    pub unsafe fn network_is_thread_a_network_script(thread_id: i32) -> bool {
        call_native!(bool, 0x560B423D73015E77u64, thread_id)
    } // 0x560B423D73015E77  b1604
    pub unsafe fn network_get_num_script_participants(
        script_name: *const i8,
        instance_id: i32,
        position_hash: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x3658E8CD94FC121Au64,
            script_name,
            instance_id,
            position_hash
        )
    } // 0x3658E8CD94FC121A 0x8F7D9F46 b323
    pub unsafe fn network_get_instance_id_of_this_script() -> i32 {
        call_native!(i32, 0x638A3A81733086DBu64)
    } // 0x638A3A81733086DB 0xDB8B5D71 b323
    pub unsafe fn network_get_position_hash_of_this_script() -> Hash {
        call_native!(Hash, 0x257ED0FADF750BCFu64)
    } // 0x257ED0FADF750BCF  b2372
    pub unsafe fn network_is_player_a_participant_on_script(
        player: Player,
        script: *const i8,
        instance_id: i32,
    ) -> bool {
        call_native!(bool, 0x1AD5B71586B94820u64, player, script, instance_id)
    } // 0x1AD5B71586B94820 0xCEA55F4C b323
    pub unsafe fn network_prevent_script_host_migration() {
        call_native!(Void, 0x2302C0264EA58D31u64);
    } // 0x2302C0264EA58D31 0x8DCFE77D b323
    pub unsafe fn network_request_to_be_host_of_this_script() {
        call_native!(Void, 0x741A3D8380319A81u64);
    } // 0x741A3D8380319A81 0x331D9A27 b323
    pub unsafe fn participant_id() -> Player {
        call_native!(Player, 0x90986E8876CE0A83u64)
    } // 0x90986E8876CE0A83 0x9C35A221 b323
    pub unsafe fn participant_id_to_int() -> i32 {
        call_native!(i32, 0x57A3BDDAD8E5AA0Au64)
    } // 0x57A3BDDAD8E5AA0A 0x907498B0 b323
    pub unsafe fn network_get_killer_of_player(player: Player, weapon_hash: *mut Hash) -> Player {
        call_native!(Player, 0x2DA41ED6E1FCD7A5u64, player, weapon_hash)
    } // 0x2DA41ED6E1FCD7A5  b463
    pub unsafe fn network_get_destroyer_of_network_id(
        net_id: i32,
        weapon_hash: *mut Hash,
    ) -> Player {
        call_native!(Player, 0x7A1ADEEF01740A24u64, net_id, weapon_hash)
    } // 0x7A1ADEEF01740A24 0x4FCA6436 b323
    pub unsafe fn network_get_destroyer_of_entity(
        entity: Entity,
        weapon_hash: *mut Hash,
    ) -> Player {
        call_native!(Player, 0xC434133D9BA52777u64, entity, weapon_hash)
    } // 0xC434133D9BA52777  b463
    pub unsafe fn network_get_assisted_kill_of_entity(
        player: Player,
        entity: Entity,
        p_2: *mut i32,
    ) -> bool {
        call_native!(bool, 0x83660B734994124Du64, player, entity, p_2)
    } // 0x83660B734994124D  b463
    pub unsafe fn network_get_assisted_damage_of_entity(
        player: Player,
        entity: Entity,
        p_2: *mut i32,
    ) -> bool {
        call_native!(bool, 0x4CACA84440FA26F6u64, player, entity, p_2)
    } // 0x4CACA84440FA26F6 0x28A45454 b323
    pub unsafe fn network_get_entity_killer_of_player(
        player: Player,
        weapon_hash: *mut Hash,
    ) -> Entity {
        call_native!(Entity, 0x42B2DAA6B596F5F8u64, player, weapon_hash)
    } // 0x42B2DAA6B596F5F8 0xA7E7E04F b323
    pub unsafe fn network_set_current_public_content_id(mission_id: *const i8) {
        call_native!(Void, 0x2C863ACDCD12B3DBu64, mission_id);
    } // 0x2C863ACDCD12B3DB  b2699
    pub unsafe fn network_set_current_chat_option(new_chat_option: i32) {
        call_native!(Void, 0x3DAD00265FBF356Bu64, new_chat_option);
    } // 0x3DAD00265FBF356B  b2802
    pub unsafe fn network_set_current_spawn_location_option(mp_setting_spawn: Hash) {
        call_native!(Void, 0xAA6D5451DC3448B6u64, mp_setting_spawn);
    } // 0xAA6D5451DC3448B6  b2699
    pub unsafe fn network_set_vehicle_driven_in_test_drive(toggle: bool) {
        call_native!(Void, 0x8C70252FC40F320Bu64, toggle);
    } // 0x8C70252FC40F320B  b2699
    pub unsafe fn network_set_vehicle_driven_location(location: Hash) {
        call_native!(Void, 0xA0CE91E47531D3BBu64, location);
    } // 0xA0CE91E47531D3BB  b2944
    pub unsafe fn network_resurrect_local_player(
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        p_4: bool,
        changetime: bool,
        p_6: bool,
        p_7: i32,
        p_8: i32,
    ) {
        call_native!(
            Void,
            0xEA23C49EAA83ACFBu64,
            x,
            y,
            z,
            heading,
            p_4,
            changetime,
            p_6,
            p_7,
            p_8
        );
    } // 0xEA23C49EAA83ACFB 0xF1F9D4B4 b323
    pub unsafe fn network_set_local_player_invincible_time(time: i32) {
        call_native!(Void, 0x2D95C7E2D7E07307u64, time);
    } // 0x2D95C7E2D7E07307 0xFEA9B85C b323
    pub unsafe fn network_is_local_player_invincible() -> bool {
        call_native!(bool, 0x8A8694B48715B000u64)
    } // 0x8A8694B48715B000 0x8DE13B36 b323
    pub unsafe fn network_disable_invincible_flashing(player: Player, toggle: bool) {
        call_native!(Void, 0x9DD368BF06983221u64, player, toggle);
    } // 0x9DD368BF06983221 0x8D27280E b323
    pub unsafe fn network_patch_post_cutscene_hs4f_tun_ent(ped: Ped) {
        call_native!(Void, 0xF0BC9BCD24A511D5u64, ped);
    } // 0xF0BC9BCD24A511D5  b2372
    pub unsafe fn network_set_local_player_sync_look_at(toggle: bool) {
        call_native!(Void, 0x524FF0AEFF9C3973u64, toggle);
    } // 0x524FF0AEFF9C3973 0xB72F086D b323
    pub unsafe fn network_has_entity_been_registered_with_this_thread(entity: Entity) -> bool {
        call_native!(bool, 0xB07D3185E11657A5u64, entity)
    } // 0xB07D3185E11657A5 0xEDA68956 b323
    pub unsafe fn network_get_network_id_from_entity(entity: Entity) -> i32 {
        call_native!(i32, 0xA11700682F3AD45Cu64, entity)
    } // 0xA11700682F3AD45C 0x9E35DAB6 b323
    pub unsafe fn network_get_entity_from_network_id(net_id: i32) -> Entity {
        call_native!(Entity, 0xCE4E5D9B0A4FF560u64, net_id)
    } // 0xCE4E5D9B0A4FF560 0x5B912C3F b323
    pub unsafe fn network_get_entity_is_networked(entity: Entity) -> bool {
        call_native!(bool, 0xC7827959479DCC78u64, entity)
    } // 0xC7827959479DCC78 0xD7F934F4 b323
    pub unsafe fn network_get_entity_is_local(entity: Entity) -> bool {
        call_native!(bool, 0x0991549DE4D64762u64, entity)
    } // 0x0991549DE4D64762 0x813353ED b323
    pub unsafe fn network_register_entity_as_networked(entity: Entity) {
        call_native!(Void, 0x06FAACD625D80CAAu64, entity);
    } // 0x06FAACD625D80CAA 0x31A630A4 b323
    pub unsafe fn network_unregister_networked_entity(entity: Entity) {
        call_native!(Void, 0x7368E683BB9038D6u64, entity);
    } // 0x7368E683BB9038D6 0x5C645F64 b323
    pub unsafe fn network_does_network_id_exist(net_id: i32) -> bool {
        call_native!(bool, 0x38CE16C96BD11344u64, net_id)
    } // 0x38CE16C96BD11344 0xB8D2C99E b323
    pub unsafe fn network_does_entity_exist_with_network_id(net_id: i32) -> bool {
        call_native!(bool, 0x18A47D074708FD68u64, net_id)
    } // 0x18A47D074708FD68 0x1E2E3177 b323
    pub unsafe fn network_request_control_of_network_id(net_id: i32) -> bool {
        call_native!(bool, 0xA670B3662FAFFBD0u64, net_id)
    } // 0xA670B3662FAFFBD0 0x9262A60A b323
    pub unsafe fn network_has_control_of_network_id(net_id: i32) -> bool {
        call_native!(bool, 0x4D36070FE0215186u64, net_id)
    } // 0x4D36070FE0215186 0x92E77D21 b323
    pub unsafe fn network_is_network_id_remotely_controlled(net_id: i32) -> bool {
        call_native!(bool, 0x7242F8B741CE1086u64, net_id)
    } // 0x7242F8B741CE1086  b678
    pub unsafe fn network_request_control_of_entity(entity: Entity) -> bool {
        call_native!(bool, 0xB69317BF5E782347u64, entity)
    } // 0xB69317BF5E782347 0xA05FEBD7 b323
    pub unsafe fn network_request_control_of_door(door_i_d: i32) -> bool {
        call_native!(bool, 0x870DDFD5A4A796E4u64, door_i_d)
    } // 0x870DDFD5A4A796E4 0xF60DAAF6 b323
    pub unsafe fn network_has_control_of_entity(entity: Entity) -> bool {
        call_native!(bool, 0x01BF60A500E28887u64, entity)
    } // 0x01BF60A500E28887 0x005FD797 b323
    pub unsafe fn network_has_control_of_pickup(pickup: Pickup) -> bool {
        call_native!(bool, 0x5BC9495F0B3B6FA6u64, pickup)
    } // 0x5BC9495F0B3B6FA6 0xF7784FC8 b323
    pub unsafe fn network_has_control_of_door(door_hash: Hash) -> bool {
        call_native!(bool, 0xCB3C68ADB06195DFu64, door_hash)
    } // 0xCB3C68ADB06195DF 0x136326EC b323
    pub unsafe fn network_is_door_networked(door_hash: Hash) -> bool {
        call_native!(bool, 0xC01E93FAC20C3346u64, door_hash)
    } // 0xC01E93FAC20C3346 0xD14D9C07 b323
    pub unsafe fn veh_to_net(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xB4C94523F023419Cu64, vehicle)
    } // 0xB4C94523F023419C 0xF17634EB b323
    pub unsafe fn ped_to_net(ped: Ped) -> i32 {
        call_native!(i32, 0x0EDEC3C276198689u64, ped)
    } // 0x0EDEC3C276198689 0x86A0B759 b323
    pub unsafe fn obj_to_net(object: Object) -> i32 {
        call_native!(i32, 0x99BFDC94A603E541u64, object)
    } // 0x99BFDC94A603E541 0x1E05F29F b323
    pub unsafe fn net_to_veh(net_handle: i32) -> Vehicle {
        call_native!(Vehicle, 0x367B936610BA360Cu64, net_handle)
    } // 0x367B936610BA360C 0x7E02FAEA b323
    pub unsafe fn net_to_ped(net_handle: i32) -> Ped {
        call_native!(Ped, 0xBDCD95FC216A8B3Eu64, net_handle)
    } // 0xBDCD95FC216A8B3E 0x87717DD4 b323
    pub unsafe fn net_to_obj(net_handle: i32) -> Object {
        call_native!(Object, 0xD8515F5FEA14CB3Fu64, net_handle)
    } // 0xD8515F5FEA14CB3F 0x27AA14D8 b323
    pub unsafe fn net_to_ent(net_handle: i32) -> Entity {
        call_native!(Entity, 0xBFFEAB45A9A9094Au64, net_handle)
    } // 0xBFFEAB45A9A9094A 0x5E149683 b323
    pub unsafe fn network_get_local_handle(gamer_handle: *mut Any, gamer_handle_size: i32) {
        call_native!(Void, 0xE86051786B66CD8Eu64, gamer_handle, gamer_handle_size);
    } // 0xE86051786B66CD8E 0x08023B16 b323
    pub unsafe fn network_handle_from_user_id(
        user_id: *const i8,
        gamer_handle: *mut Any,
        gamer_handle_size: i32,
    ) {
        call_native!(
            Void,
            0xDCD51DD8F87AEC5Cu64,
            user_id,
            gamer_handle,
            gamer_handle_size
        );
    } // 0xDCD51DD8F87AEC5C 0x74C2C1B7 b323
    pub unsafe fn network_handle_from_member_id(
        member_id: *const i8,
        gamer_handle: *mut Any,
        gamer_handle_size: i32,
    ) {
        call_native!(
            Void,
            0xA0FD21BED61E5C4Cu64,
            member_id,
            gamer_handle,
            gamer_handle_size
        );
    } // 0xA0FD21BED61E5C4C 0x9BFC9FE2 b323
    pub unsafe fn network_handle_from_player(
        player: Player,
        gamer_handle: *mut Any,
        gamer_handle_size: i32,
    ) {
        call_native!(
            Void,
            0x388EB2B86C73B6B3u64,
            player,
            gamer_handle,
            gamer_handle_size
        );
    } // 0x388EB2B86C73B6B3 0xD3498917 b323
    pub unsafe fn network_hash_from_player_handle(player: Player) -> Hash {
        call_native!(Hash, 0xBC1D768F2F5D6C05u64, player)
    } // 0xBC1D768F2F5D6C05 0xF8D7AF3B b323
    pub unsafe fn network_hash_from_gamer_handle(gamer_handle: *mut Any) -> Hash {
        call_native!(Hash, 0x58575AC3CF2CA8ECu64, gamer_handle)
    } // 0x58575AC3CF2CA8EC 0x5AC9F04D b323
    pub unsafe fn network_handle_from_friend(
        friend_index: i32,
        gamer_handle: *mut Any,
        gamer_handle_size: i32,
    ) {
        call_native!(
            Void,
            0xD45CB817D7E177D2u64,
            friend_index,
            gamer_handle,
            gamer_handle_size
        );
    } // 0xD45CB817D7E177D2 0x3B0BB3A3 b323
    pub unsafe fn network_gamertag_from_handle_start(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x9F0C0A981D73FA56u64, gamer_handle)
    } // 0x9F0C0A981D73FA56 0xEBA00C2A b323
    pub unsafe fn network_gamertag_from_handle_pending() -> bool {
        call_native!(bool, 0xB071E27958EF4CF0u64)
    } // 0xB071E27958EF4CF0 0xF000828E b323
    pub unsafe fn network_gamertag_from_handle_succeeded() -> bool {
        call_native!(bool, 0xFD00798DBA7523DDu64)
    } // 0xFD00798DBA7523DD 0x89C2B5EA b323
    pub unsafe fn network_get_gamertag_from_handle(gamer_handle: *mut Any) -> *const i8 {
        call_native!(*const i8, 0x426141162EBE5CDBu64, gamer_handle)
    } // 0x426141162EBE5CDB 0xA18A1B26 b323
    pub unsafe fn network_displaynames_from_handles_start(p_0: *mut Any, p_1: Any) -> i32 {
        call_native!(i32, 0xD66C9E72B3CC4982u64, p_0, p_1)
    } // 0xD66C9E72B3CC4982  b323
    pub unsafe fn network_get_displaynames_from_handles(p_0: Any, p_1: Any, p_2: Any) -> i32 {
        call_native!(i32, 0x58CC181719256197u64, p_0, p_1, p_2)
    } // 0x58CC181719256197  b323
    pub unsafe fn network_are_handles_the_same(
        gamer_handle_1: *mut Any,
        gamer_handle_2: *mut Any,
    ) -> bool {
        call_native!(bool, 0x57DBA049E110F217u64, gamer_handle_1, gamer_handle_2)
    } // 0x57DBA049E110F217 0x45975AE3 b323
    pub unsafe fn network_is_handle_valid(gamer_handle: *mut Any, gamer_handle_size: i32) -> bool {
        call_native!(bool, 0x6F79B93B0A8E4133u64, gamer_handle, gamer_handle_size)
    } // 0x6F79B93B0A8E4133 0xF0996C6E b323
    pub unsafe fn network_get_player_from_gamer_handle(gamer_handle: *mut Any) -> Player {
        call_native!(Player, 0xCE5F689CF5A0A49Du64, gamer_handle)
    } // 0xCE5F689CF5A0A49D 0x2E96EF1E b323
    pub unsafe fn network_member_id_from_gamer_handle(gamer_handle: *mut Any) -> *const i8 {
        call_native!(*const i8, 0xC82630132081BB6Fu64, gamer_handle)
    } // 0xC82630132081BB6F 0x62EF0A63 b323
    pub unsafe fn network_is_gamer_in_my_session(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x0F10B05DDF8D16E9u64, gamer_handle)
    } // 0x0F10B05DDF8D16E9 0x59127716 b323
    pub unsafe fn network_show_profile_ui(gamer_handle: *mut Any) {
        call_native!(Void, 0x859ED1CEA343FCA8u64, gamer_handle);
    } // 0x859ED1CEA343FCA8 0xF00A20B0 b323
    pub unsafe fn network_player_get_name(player: Player) -> *const i8 {
        call_native!(*const i8, 0x7718D2E2060837D2u64, player)
    } // 0x7718D2E2060837D2 0xCE48F260 b323
    pub unsafe fn network_player_get_userid(player: Player, user_i_d: *mut i32) -> *const i8 {
        call_native!(*const i8, 0x4927FC39CD0869A0u64, player, user_i_d)
    } // 0x4927FC39CD0869A0 0x4EC0D983 b323
    pub unsafe fn network_player_is_rockstar_dev(player: Player) -> bool {
        call_native!(bool, 0x544ABDDA3B409B6Du64, player)
    } // 0x544ABDDA3B409B6D 0xF6659045 b323
    pub unsafe fn network_player_index_is_cheater(player: Player) -> bool {
        call_native!(bool, 0x565E430DB3B05BECu64, player)
    } // 0x565E430DB3B05BEC 0xD265B049 b323
    pub unsafe fn network_entity_get_object_id(entity: Entity) -> i32 {
        call_native!(i32, 0x815F18AD865F057Fu64, entity)
    } // 0x815F18AD865F057F  b463
    pub unsafe fn network_get_entity_from_object_id(p_0: Any) -> Entity {
        call_native!(Entity, 0x37D5F739FD494675u64, p_0)
    } // 0x37D5F739FD494675  b505
    pub unsafe fn network_is_inactive_profile(p_0: *mut Any) -> bool {
        call_native!(bool, 0x7E58745504313A2Eu64, p_0)
    } // 0x7E58745504313A2E 0x95481343 b323
    pub unsafe fn network_get_max_friends() -> i32 {
        call_native!(i32, 0xAFEBB0D5D8F687D2u64)
    } // 0xAFEBB0D5D8F687D2 0x048171BC b323
    pub unsafe fn network_get_friend_count() -> i32 {
        call_native!(i32, 0x203F1CFD823B27A4u64)
    } // 0x203F1CFD823B27A4 0xA396ACDE b323
    pub unsafe fn network_get_friend_name(friend_index: i32) -> *const i8 {
        call_native!(*const i8, 0xE11EBBB2A783FE8Bu64, friend_index)
    } // 0xE11EBBB2A783FE8B 0x97420B6D b323
    pub unsafe fn network_get_friend_display_name(friend_index: i32) -> *const i8 {
        call_native!(*const i8, 0x4164F227D052E293u64, friend_index)
    } // 0x4164F227D052E293  b323
    pub unsafe fn network_is_friend_online(name: *const i8) -> bool {
        call_native!(bool, 0x425A44533437B64Du64, name)
    } // 0x425A44533437B64D 0xE0A42430 b323
    pub unsafe fn network_is_friend_handle_online(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x87EB7A3FFCB314DBu64, gamer_handle)
    } // 0x87EB7A3FFCB314DB  b323
    pub unsafe fn network_is_friend_in_same_title(friend_name: *const i8) -> bool {
        call_native!(bool, 0x2EA9A3BEDF3F17B8u64, friend_name)
    } // 0x2EA9A3BEDF3F17B8 0xC54365C2 b323
    pub unsafe fn network_is_friend_in_multiplayer(friend_name: *const i8) -> bool {
        call_native!(bool, 0x57005C18827F3A28u64, friend_name)
    } // 0x57005C18827F3A28 0x400BDDD9 b323
    pub unsafe fn network_is_friend(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x1A24A179F9B31654u64, gamer_handle)
    } // 0x1A24A179F9B31654 0x2DA4C282 b323
    pub unsafe fn network_is_pending_friend(p_0: Any) -> bool {
        call_native!(bool, 0x0BE73DA6984A6E33u64, p_0)
    } // 0x0BE73DA6984A6E33 0x5C85FF81 b323
    pub unsafe fn network_is_adding_friend() -> bool {
        call_native!(bool, 0x6EA101606F6E4D81u64)
    } // 0x6EA101606F6E4D81 0xBB7EC8C4 b323
    pub unsafe fn network_add_friend(gamer_handle: *mut Any, message: *const i8) -> bool {
        call_native!(bool, 0x8E02D73914064223u64, gamer_handle, message)
    } // 0x8E02D73914064223 0x20E5B3EE b323
    pub unsafe fn network_is_friend_index_online(friend_index: i32) -> bool {
        call_native!(bool, 0xBAD8F2A42B844821u64, friend_index)
    } // 0xBAD8F2A42B844821 0x94AE7172 b323
    pub unsafe fn network_set_player_is_passive(toggle: bool) {
        call_native!(Void, 0x1B857666604B1A74u64, toggle);
    } // 0x1B857666604B1A74 0x76A9FEB6 b323
    pub unsafe fn network_get_player_owns_waypoint(player: Player) -> bool {
        call_native!(bool, 0x82377B65E943F72Du64, player)
    } // 0x82377B65E943F72D 0xB802B671 b323
    pub unsafe fn network_can_set_waypoint() -> bool {
        call_native!(bool, 0xC927EC229934AF60u64)
    } // 0xC927EC229934AF60 0x009E68F3 b323
    pub unsafe fn network_ignore_remote_waypoints() {
        call_native!(Void, 0x4C2A9FDC22377075u64);
    } // 0x4C2A9FDC22377075  b372
    pub unsafe fn _network_does_communication_group_exist(communication_type: i32) -> bool {
        call_native!(bool, 0xDBDF80673BBA3D65u64, communication_type)
    } // 0xDBDF80673BBA3D65  b3095
    pub unsafe fn _network_get_communication_group_flags(communication_type: i32) -> i32 {
        call_native!(i32, 0x40DF02F371F40883u64, communication_type)
    } // 0x40DF02F371F40883  b3095
    pub unsafe fn _network_set_communication_group_flags(
        communication_type: i32,
        communication_group_flag: i32,
    ) {
        call_native!(
            Void,
            0xE549F846DE7D32D5u64,
            communication_type,
            communication_group_flag
        );
    } // 0xE549F846DE7D32D5  b3095
    pub unsafe fn network_is_player_on_blocklist(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xAD4326FCA30D62F8u64, gamer_handle)
    } // 0xAD4326FCA30D62F8  b2802
    pub unsafe fn network_set_script_automuted(p_0: Any) -> bool {
        call_native!(bool, 0xB309EBEA797E001Fu64, p_0)
    } // 0xB309EBEA797E001F 0x5C0AB2A9 b323
    pub unsafe fn network_has_automute_override() -> bool {
        call_native!(bool, 0x26F07DD83A5F7F98u64)
    } // 0x26F07DD83A5F7F98 0x9A176B6E b323
    pub unsafe fn network_has_headset() -> bool {
        call_native!(bool, 0xE870F9F1F7B4F1FAu64)
    } // 0xE870F9F1F7B4F1FA 0xA7DC5657 b323
    pub unsafe fn network_set_look_at_talkers(p_0: bool) {
        call_native!(Void, 0x7D395EA61622E116u64, p_0);
    } // 0x7D395EA61622E116 0x5C05B7E1 b323
    pub unsafe fn network_is_push_to_talk_active() -> bool {
        call_native!(bool, 0xC0D2AF00BCC234CAu64)
    } // 0xC0D2AF00BCC234CA  b323
    pub unsafe fn network_gamer_has_headset(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xF2FD55CB574BCC55u64, gamer_handle)
    } // 0xF2FD55CB574BCC55 0xD036DA4A b323
    pub unsafe fn network_is_gamer_talking(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x71C33B22606CD88Au64, gamer_handle)
    } // 0x71C33B22606CD88A 0x99B58DBC b323
    pub unsafe fn network_permissions_has_gamer_record(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x559EBF901A8C68E0u64, gamer_handle)
    } // 0x559EBF901A8C68E0  b2699
    pub unsafe fn network_can_communicate_with_gamer(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x8F5D1AD832AEB06Cu64, gamer_handle)
    } // 0x8F5D1AD832AEB06C 0xD05EB7F6 b323
    pub unsafe fn network_can_text_chat_with_gamer(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xA150A4F065806B1Fu64, gamer_handle)
    } // 0xA150A4F065806B1F  b944
    pub unsafe fn network_is_gamer_muted_by_me(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xCE60DE011B6C7978u64, gamer_handle)
    } // 0xCE60DE011B6C7978 0x001B4046 b323
    pub unsafe fn network_am_i_muted_by_gamer(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xDF02A2C93F1F26DAu64, gamer_handle)
    } // 0xDF02A2C93F1F26DA 0x7685B333 b323
    pub unsafe fn network_is_gamer_blocked_by_me(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xE944C4F5AF1B5883u64, gamer_handle)
    } // 0xE944C4F5AF1B5883 0x3FDCC8D7 b323
    pub unsafe fn network_am_i_blocked_by_gamer(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x15337C7C268A27B2u64, gamer_handle)
    } // 0x15337C7C268A27B2 0xD19B312C b323
    pub unsafe fn network_can_view_gamer_user_content(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xB57A49545BA53CE7u64, gamer_handle)
    } // 0xB57A49545BA53CE7  b323
    pub unsafe fn network_has_view_gamer_user_content_result(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xCCA4318E1AB03F1Fu64, gamer_handle)
    } // 0xCCA4318E1AB03F1F  b323
    pub unsafe fn network_can_play_multiplayer_with_gamer(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x07DD29D5E22763F1u64, gamer_handle)
    } // 0x07DD29D5E22763F1  b323
    pub unsafe fn network_can_gamer_play_multiplayer_with_me(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x135F9B7B7ADD2185u64, gamer_handle)
    } // 0x135F9B7B7ADD2185  b323
    pub unsafe fn network_can_send_local_invite(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x021ABCBD98EC4320u64, gamer_handle)
    } // 0x021ABCBD98EC4320  b2612
    pub unsafe fn network_can_receive_local_invite(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0x421E34C55F125964u64, gamer_handle)
    } // 0x421E34C55F125964  b2612
    pub unsafe fn network_is_player_talking(player: Player) -> bool {
        call_native!(bool, 0x031E11F3D447647Eu64, player)
    } // 0x031E11F3D447647E 0xDA9FD9DB b323
    pub unsafe fn network_player_has_headset(player: Player) -> bool {
        call_native!(bool, 0x3FB99A8B08D18FD6u64, player)
    } // 0x3FB99A8B08D18FD6 0x451FB6B6 b323
    pub unsafe fn network_is_player_muted_by_me(player: Player) -> bool {
        call_native!(bool, 0x8C71288AE68EDE39u64, player)
    } // 0x8C71288AE68EDE39 0x7A21050E b323
    pub unsafe fn network_am_i_muted_by_player(player: Player) -> bool {
        call_native!(bool, 0x9D6981DFC91A8604u64, player)
    } // 0x9D6981DFC91A8604 0xE128F2B0 b323
    pub unsafe fn network_is_player_blocked_by_me(player: Player) -> bool {
        call_native!(bool, 0x57AF1F8E27483721u64, player)
    } // 0x57AF1F8E27483721 0xAE4F4560 b323
    pub unsafe fn network_am_i_blocked_by_player(player: Player) -> bool {
        call_native!(bool, 0x87F395D957D4353Du64, player)
    } // 0x87F395D957D4353D 0x953EF45E b323
    pub unsafe fn network_get_player_loudness(player: Player) -> f32 {
        call_native!(f32, 0x21A1684A25C2867Fu64, player)
    } // 0x21A1684A25C2867F 0xF2F67014 b323
    pub unsafe fn network_set_talker_proximity(value: f32) {
        call_native!(Void, 0xCBF12D65F95AD686u64, value);
    } // 0xCBF12D65F95AD686 0x67555C66 b323
    pub unsafe fn network_get_talker_proximity() -> f32 {
        call_native!(f32, 0x84F0F13120B4E098u64)
    } // 0x84F0F13120B4E098 0x19991ADD b323
    pub unsafe fn network_set_voice_active(toggle: bool) {
        call_native!(Void, 0xBABEC9E69A91C57Bu64, toggle);
    } // 0xBABEC9E69A91C57B 0x8011247F b323
    pub unsafe fn network_remain_in_game_chat(p_0: bool) {
        call_native!(Void, 0xCFEB46DCD7D8D5EBu64, p_0);
    } // 0xCFEB46DCD7D8D5EB 0x1A3EA6CD b323
    pub unsafe fn network_override_transition_chat(p_0: bool) {
        call_native!(Void, 0xAF66059A131AA269u64, p_0);
    } // 0xAF66059A131AA269 0xCAB21090 b323
    pub unsafe fn network_set_team_only_chat(toggle: bool) {
        call_native!(Void, 0xD5B4883AC32F24C3u64, toggle);
    } // 0xD5B4883AC32F24C3 0x3813019A b323
    pub unsafe fn network_set_script_controlling_teams(p_0: Any) {
        call_native!(Void, 0x265559DA40B3F327u64, p_0);
    } // 0x265559DA40B3F327  b573
    pub unsafe fn network_set_same_team_as_local_player(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0x4348BFDA56023A2Fu64, p_0, p_1)
    } // 0x4348BFDA56023A2F  b573
    pub unsafe fn network_override_team_restrictions(team: i32, toggle: bool) {
        call_native!(Void, 0x6F697A66CE78674Eu64, team, toggle);
    } // 0x6F697A66CE78674E 0xC8CC9E75 b323
    pub unsafe fn network_set_override_spectator_mode(toggle: bool) {
        call_native!(Void, 0x70DA3BF8DACD3210u64, toggle);
    } // 0x70DA3BF8DACD3210 0xA0FD42D3 b323
    pub unsafe fn network_set_override_tutorial_session_chat(toggle: bool) {
        call_native!(Void, 0x3C5C1E2C2FF814B1u64, toggle);
    } // 0x3C5C1E2C2FF814B1 0xC9DDA85B b323
    pub unsafe fn network_set_proximity_affects_team(toggle: bool) {
        call_native!(Void, 0x9D7AFCBF21C51712u64, toggle);
    } // 0x9D7AFCBF21C51712 0xE5219410 b323
    pub unsafe fn network_set_no_spectator_chat(toggle: bool) {
        call_native!(Void, 0xF46A1E03E8755980u64, toggle);
    } // 0xF46A1E03E8755980 0xD33AFF79 b323
    pub unsafe fn network_set_ignore_spectator_chat_limits_same_team(toggle: bool) {
        call_native!(Void, 0x6A5D89D7769A40D8u64, toggle);
    } // 0x6A5D89D7769A40D8 0x4FFEFE43 b323
    pub unsafe fn network_override_chat_restrictions(player: Player, toggle: bool) {
        call_native!(Void, 0x3039AE5AD2C9C0C4u64, player, toggle);
    } // 0x3039AE5AD2C9C0C4 0x74EE2D8B b323
    pub unsafe fn network_override_send_restrictions(player: Player, toggle: bool) {
        call_native!(Void, 0x97DD4C5944CC2E6Au64, player, toggle);
    } // 0x97DD4C5944CC2E6A 0x6C344AE3 b323
    pub unsafe fn network_override_send_restrictions_all(toggle: bool) {
        call_native!(Void, 0x57B192B4D4AD23D5u64, toggle);
    } // 0x57B192B4D4AD23D5 0x2F98B405 b323
    pub unsafe fn network_override_receive_restrictions(player: Player, toggle: bool) {
        call_native!(Void, 0xDDF73E2B1FEC5AB4u64, player, toggle);
    } // 0xDDF73E2B1FEC5AB4 0x95F1C60D b323
    pub unsafe fn network_override_receive_restrictions_all(toggle: bool) {
        call_native!(Void, 0x0FF2862B61A58AF9u64, toggle);
    } // 0x0FF2862B61A58AF9 0x1BCD3DDF b323
    pub unsafe fn network_set_voice_channel(channel: i32) {
        call_native!(Void, 0xEF6212C2EFEF1A23u64, channel);
    } // 0xEF6212C2EFEF1A23 0x3974879F b323
    pub unsafe fn network_clear_voice_channel() {
        call_native!(Void, 0xE036A705F989E049u64);
    } // 0xE036A705F989E049 0x9ECF722A b323
    pub unsafe fn network_apply_voice_proximity_override(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xDBD2056652689917u64, x, y, z);
    } // 0xDBD2056652689917 0xF1E84832 b323
    pub unsafe fn network_clear_voice_proximity_override() {
        call_native!(Void, 0xF03755696450470Cu64);
    } // 0xF03755696450470C 0x7F9B9052 b323
    pub unsafe fn network_enable_voice_bandwidth_restriction(player: Player) {
        call_native!(Void, 0x5E3AA4CA2B6FB0EEu64, player);
    } // 0x5E3AA4CA2B6FB0EE 0x7BBEA8CF b323
    pub unsafe fn network_disable_voice_bandwidth_restriction(player: Player) {
        call_native!(Void, 0xCA575C391FEA25CCu64, player);
    } // 0xCA575C391FEA25CC 0xE797A4B6 b323
    pub unsafe fn network_get_mute_count_for_player(p_0: Player, p_1: *mut f32, p_2: *mut f32) {
        call_native!(Void, 0xADB57E5B663CCA8Bu64, p_0, p_1, p_2);
    } // 0xADB57E5B663CCA8B 0x92268BB5 b323
    pub unsafe fn network_set_spectator_to_non_spectator_text_chat(toggle: bool) {
        call_native!(Void, 0x8EF52ACAECC51D9Cu64, toggle);
    } // 0x8EF52ACAECC51D9C  b1734
    pub unsafe fn network_text_chat_is_typing() -> bool {
        call_native!(bool, 0x5FCF4D7069B09026u64)
    } // 0x5FCF4D7069B09026  b323
    pub unsafe fn shutdown_and_launch_single_player_game() {
        call_native!(Void, 0x593850C16A36B692u64);
    } // 0x593850C16A36B692 0x92B7351C b323
    pub unsafe fn shutdown_and_load_most_recent_save() -> bool {
        call_native!(bool, 0x9ECA15ADFE141431u64)
    } // 0x9ECA15ADFE141431  b505
    pub unsafe fn network_set_friendly_fire_option(toggle: bool) {
        call_native!(Void, 0xF808475FA571D823u64, toggle);
    } // 0xF808475FA571D823 0x6BAF95FA b323
    pub unsafe fn network_set_rich_presence(p_0: i32, p_1: i32, p_2: Any, p_3: Any) {
        call_native!(Void, 0x1DCCACDCFC569362u64, p_0, p_1, p_2, p_3);
    } // 0x1DCCACDCFC569362 0x932A6CED b323
    pub unsafe fn network_set_rich_presence_string(p_0: i32, text_label: *const i8) {
        call_native!(Void, 0x3E200C2BCF4164EBu64, p_0, text_label);
    } // 0x3E200C2BCF4164EB 0x017E6777 b323
    pub unsafe fn network_get_timeout_time() -> i32 {
        call_native!(i32, 0x5ED0356A0CE3A34Fu64)
    } // 0x5ED0356A0CE3A34F 0xE1F86C6A b323
    pub unsafe fn network_leave_ped_behind_before_warp(
        player: Player,
        x: f32,
        y: f32,
        z: f32,
        p_4: bool,
        p_5: bool,
    ) {
        call_native!(Void, 0x9769F811D1785B03u64, player, x, y, z, p_4, p_5);
    } // 0x9769F811D1785B03 0xBE6A30C3 b323
    pub unsafe fn network_leave_ped_behind_before_cutscene(player: Player, p_1: bool) {
        call_native!(Void, 0xBF22E0F32968E967u64, player, p_1);
    } // 0xBF22E0F32968E967 0x22E03AD0 b323
    pub unsafe fn remove_all_sticky_bombs_from_entity(entity: Entity, ped: Ped) {
        call_native!(Void, 0x715135F4B82AC90Du64, entity, ped);
    } // 0x715135F4B82AC90D 0xCEAE5AFC b323
    pub unsafe fn network_keep_entity_collision_disabled_after_anim_scene(p_0: Any, p_1: Any) {
        call_native!(Void, 0x17C9E241111A674Du64, p_0, p_1);
    } // 0x17C9E241111A674D  b2060
    pub unsafe fn network_is_any_player_near(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) -> bool {
        call_native!(
            bool,
            0x2E4C123D1C8A710Eu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0x2E4C123D1C8A710E  b505
    pub unsafe fn network_clan_service_is_valid() -> bool {
        call_native!(bool, 0x579CCED0265D4896u64)
    } // 0x579CCED0265D4896 0xF5F4BD95 b323
    pub unsafe fn network_clan_player_is_active(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xB124B57F571D8F18u64, gamer_handle)
    } // 0xB124B57F571D8F18 0xAB8319A3 b323
    pub unsafe fn network_clan_player_get_desc(
        clan_desc: *mut Any,
        buffer_size: i32,
        gamer_handle: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0xEEE6EACBE8874FBAu64,
            clan_desc,
            buffer_size,
            gamer_handle
        )
    } // 0xEEE6EACBE8874FBA 0x6EE4A282 b323
    pub unsafe fn network_clan_is_rockstar_clan(clan_desc: *mut Any, buffer_size: i32) -> bool {
        call_native!(bool, 0x7543BB439F63792Bu64, clan_desc, buffer_size)
    } // 0x7543BB439F63792B 0x54E79E9C b323
    pub unsafe fn network_clan_get_ui_formatted_tag(
        clan_desc: *mut Any,
        buffer_size: i32,
        formatted_tag: *mut i8,
    ) {
        call_native!(
            Void,
            0xF45352426FF3A4F0u64,
            clan_desc,
            buffer_size,
            formatted_tag
        );
    } // 0xF45352426FF3A4F0 0xF633805A b323
    pub unsafe fn network_clan_get_local_memberships_count() -> i32 {
        call_native!(i32, 0x1F471B79ACC90BEFu64)
    } // 0x1F471B79ACC90BEF 0x807B3450 b323
    pub unsafe fn network_clan_get_membership_desc(member_desc: *mut Any, p_1: i32) -> bool {
        call_native!(bool, 0x48DE78AF2C8885B8u64, member_desc, p_1)
    } // 0x48DE78AF2C8885B8 0x3369DD1F b323
    pub unsafe fn network_clan_download_membership(gamer_handle: *mut Any) -> bool {
        call_native!(bool, 0xA989044E70010ABEu64, gamer_handle)
    } // 0xA989044E70010ABE 0x8E8CB520 b323
    pub unsafe fn network_clan_download_membership_pending(p_0: *mut Any) -> bool {
        call_native!(bool, 0x5B9E023DC6EBEDC0u64, p_0)
    } // 0x5B9E023DC6EBEDC0 0x1FDB590F b323
    pub unsafe fn network_clan_any_download_membership_pending() -> bool {
        call_native!(bool, 0xB3F64A6A91432477u64)
    } // 0xB3F64A6A91432477 0x83ED8E08 b323
    pub unsafe fn network_clan_remote_memberships_are_in_cache(p_0: *mut i32) -> bool {
        call_native!(bool, 0xBB6E6FEE99D866B2u64, p_0)
    } // 0xBB6E6FEE99D866B2 0x40202867 b323
    pub unsafe fn network_clan_get_membership_count(p_0: *mut i32) -> i32 {
        call_native!(i32, 0xAAB11F6C4ADBC2C1u64, p_0)
    } // 0xAAB11F6C4ADBC2C1 0x25924010 b323
    pub unsafe fn network_clan_get_membership_valid(p_0: *mut i32, p_1: Any) -> bool {
        call_native!(bool, 0x48A59CF88D43DF0Eu64, p_0, p_1)
    } // 0x48A59CF88D43DF0E 0x48914F6A b323
    pub unsafe fn network_clan_get_membership(
        p_0: *mut i32,
        clan_membership: *mut Any,
        p_2: i32,
    ) -> bool {
        call_native!(bool, 0xC8BC2011F67B3411u64, p_0, clan_membership, p_2)
    } // 0xC8BC2011F67B3411 0xCDC4A590 b323
    pub unsafe fn network_clan_join(clan_desc: i32) -> bool {
        call_native!(bool, 0x9FAAA4F4FC71F87Fu64, clan_desc)
    } // 0x9FAAA4F4FC71F87F 0x79C916C5 b323
    pub unsafe fn network_clan_crewinfo_get_string_value(
        anim_dict: *const i8,
        anim_name: *const i8,
    ) -> bool {
        call_native!(bool, 0x729E3401F0430686u64, anim_dict, anim_name)
    } // 0x729E3401F0430686 0xBDA90BAC b323
    pub unsafe fn network_clan_crewinfo_get_crewranktitle(p_0: i32, p_1: *const i8) -> bool {
        call_native!(bool, 0x2B51EDBEFC301339u64, p_0, p_1)
    } // 0x2B51EDBEFC301339 0x8E952B12 b323
    pub unsafe fn network_clan_has_crewinfo_metadata_been_received() -> bool {
        call_native!(bool, 0xC32EA7A2F6CA7557u64)
    } // 0xC32EA7A2F6CA7557 0x966C90FD b323
    pub unsafe fn network_clan_get_emblem_txd_name(
        net_handle: *mut Any,
        txd_name: *mut i8,
    ) -> bool {
        call_native!(bool, 0x5835D9CD92E83184u64, net_handle, txd_name)
    } // 0x5835D9CD92E83184 0xBA672146 b323
    pub unsafe fn network_clan_request_emblem(p_0: Any) -> bool {
        call_native!(bool, 0x13518FF1C6B28938u64, p_0)
    } // 0x13518FF1C6B28938 0x7963FA4D b323
    pub unsafe fn network_clan_is_emblem_ready(p_0: Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xA134777FF7F33331u64, p_0, p_1)
    } // 0xA134777FF7F33331 0x88B13CDC b323
    pub unsafe fn network_clan_release_emblem(p_0: Any) {
        call_native!(Void, 0x113E6E3E50E286B0u64, p_0);
    } // 0x113E6E3E50E286B0 0xD6E3D5EA b323
    pub unsafe fn network_get_primary_clan_data_clear() -> bool {
        call_native!(bool, 0x9AA46BADAD0E27EDu64)
    } // 0x9AA46BADAD0E27ED 0xE22445DA b323
    pub unsafe fn network_get_primary_clan_data_cancel() {
        call_native!(Void, 0x042E4B70B93E6054u64);
    } // 0x042E4B70B93E6054 0x455DDF5C b323
    pub unsafe fn network_get_primary_clan_data_start(p_0: *mut Any, p_1: Any) -> bool {
        call_native!(bool, 0xCE86D8191B762107u64, p_0, p_1)
    } // 0xCE86D8191B762107 0x89DB0EC7 b323
    pub unsafe fn network_get_primary_clan_data_pending() -> bool {
        call_native!(bool, 0xB5074DB804E28CE7u64)
    } // 0xB5074DB804E28CE7 0xA4EF02F3 b323
    pub unsafe fn network_get_primary_clan_data_success() -> bool {
        call_native!(bool, 0x5B4F04F19376A0BAu64)
    } // 0x5B4F04F19376A0BA 0x068A054E b323
    pub unsafe fn network_get_primary_clan_data_new(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xC080FF658B2E41DAu64, p_0, p_1)
    } // 0xC080FF658B2E41DA 0x9B8631EB b323
    pub unsafe fn set_network_id_can_migrate(net_id: i32, toggle: bool) {
        call_native!(Void, 0x299EEB23175895FCu64, net_id, toggle);
    } // 0x299EEB23175895FC 0x47C8E5FF b323
    pub unsafe fn set_network_id_exists_on_all_machines(net_id: i32, toggle: bool) {
        call_native!(Void, 0xE05E81A888FA63C8u64, net_id, toggle);
    } // 0xE05E81A888FA63C8 0x68D486B2 b323
    pub unsafe fn set_network_id_always_exists_for_player(
        net_id: i32,
        player: Player,
        toggle: bool,
    ) {
        call_native!(Void, 0xA8A024587329F36Au64, net_id, player, toggle);
    } // 0xA8A024587329F36A 0x4D15FDB1 b323
    pub unsafe fn set_network_id_can_be_reassigned(net_id: i32, toggle: bool) {
        call_native!(Void, 0x9D724B400A7E8FFCu64, net_id, toggle);
    } // 0x9D724B400A7E8FFC  b2189
    pub unsafe fn network_set_entity_can_blend(entity: Entity, toggle: bool) {
        call_native!(Void, 0xD830567D88A1E873u64, entity, toggle);
    } // 0xD830567D88A1E873 0xDE8C0DB8 b323
    pub unsafe fn network_set_object_can_blend_when_fixed(object: Object, toggle: bool) {
        call_native!(Void, 0x0379DAF89BA09AA5u64, object, toggle);
    } // 0x0379DAF89BA09AA5  b944
    pub unsafe fn network_set_entity_only_exists_for_participants(entity: Entity, toggle: bool) {
        call_native!(Void, 0xF1CA12B18AEF5298u64, entity, toggle);
    } // 0xF1CA12B18AEF5298 0x09CBC4B0 b323
    pub unsafe fn set_network_id_visible_in_cutscene(net_id: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0xA6928482543022B4u64, net_id, p_1, p_2);
    } // 0xA6928482543022B4 0x199E75EF b323
    pub unsafe fn set_network_id_visible_in_cutscene_hack(net_id: i32, p_1: bool, p_2: bool) {
        call_native!(Void, 0x32EBD154CB6B8B99u64, net_id, p_1, p_2);
    } // 0x32EBD154CB6B8B99  b505
    pub unsafe fn set_network_id_visible_in_cutscene_remain_hack(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x76B3F29D3F967692u64, p_0, p_1, p_2);
    } // 0x76B3F29D3F967692  b2189
    pub unsafe fn set_network_cutscene_entities(toggle: bool) {
        call_native!(Void, 0xAAA553E7DD28A457u64, toggle);
    } // 0xAAA553E7DD28A457 0xFD0F7EDD b323
    pub unsafe fn are_cutscene_entities_networked() -> bool {
        call_native!(bool, 0x66D6A5E9C511214Au64)
    } // 0x66D6A5E9C511214A  b2699
    pub unsafe fn set_network_id_pass_control_in_tutorial(net_id: i32, state: bool) {
        call_native!(Void, 0x3FA36981311FA4FFu64, net_id, state);
    } // 0x3FA36981311FA4FF 0x00AE4E17 b323
    pub unsafe fn is_network_id_owned_by_participant(net_id: i32) -> bool {
        call_native!(bool, 0xA1607996431332DFu64, net_id)
    } // 0xA1607996431332DF 0xEA5176C0 b323
    pub unsafe fn set_remote_player_visible_in_cutscene(player: Player, locally_visible: bool) {
        call_native!(Void, 0x96320E6549DAE7B4u64, player, locally_visible);
    } // 0x96320E6549DAE7B4  b2802
    pub unsafe fn set_local_player_visible_in_cutscene(p_0: bool, p_1: bool) {
        call_native!(Void, 0xD1065D68947E7B6Eu64, p_0, p_1);
    } // 0xD1065D68947E7B6E 0x59F3479B b323
    pub unsafe fn set_local_player_invisible_locally(b_include_players_vehicle: bool) {
        call_native!(Void, 0xE5F773C1A1D9D168u64, b_include_players_vehicle);
    } // 0xE5F773C1A1D9D168 0x764F6222 b323
    pub unsafe fn set_local_player_visible_locally(b_include_players_vehicle: bool) {
        call_native!(Void, 0x7619364C82D3BF14u64, b_include_players_vehicle);
    } // 0x7619364C82D3BF14 0x324B56DB b323
    pub unsafe fn set_player_invisible_locally(player: Player, b_include_players_vehicle: bool) {
        call_native!(
            Void,
            0x12B37D54667DB0B8u64,
            player,
            b_include_players_vehicle
        );
    } // 0x12B37D54667DB0B8 0x18227209 b323
    pub unsafe fn set_player_visible_locally(player: Player, b_include_players_vehicle: bool) {
        call_native!(
            Void,
            0xFAA10F1FAFB11AF2u64,
            player,
            b_include_players_vehicle
        );
    } // 0xFAA10F1FAFB11AF2 0xBA2BB4B4 b323
    pub unsafe fn fade_out_local_player(p_0: bool) {
        call_native!(Void, 0x416DBD4CD6ED8DD2u64, p_0);
    } // 0x416DBD4CD6ED8DD2 0x8FA7CEBD b323
    pub unsafe fn network_fade_out_entity(entity: Entity, normal: bool, slow: bool) {
        call_native!(Void, 0xDE564951F95E09EDu64, entity, normal, slow);
    } // 0xDE564951F95E09ED 0x47EDEE56 b323
    pub unsafe fn network_fade_in_entity(entity: Entity, state: bool, p_2: Any) {
        call_native!(Void, 0x1F4ED342ACEFE62Du64, entity, state, p_2);
    } // 0x1F4ED342ACEFE62D 0x9B9FCD02 b323
    pub unsafe fn network_is_player_fading(player: Player) -> bool {
        call_native!(bool, 0x631DC5DFF4B110E3u64, player)
    } // 0x631DC5DFF4B110E3 0x065C597B b323
    pub unsafe fn network_is_entity_fading(entity: Entity) -> bool {
        call_native!(bool, 0x422F32CC7E56ABADu64, entity)
    } // 0x422F32CC7E56ABAD 0xB5087ACF b323
    pub unsafe fn is_player_in_cutscene(player: Player) -> bool {
        call_native!(bool, 0xE73092F4157CD126u64, player)
    } // 0xE73092F4157CD126 0xE0A619BD b323
    pub unsafe fn set_entity_visible_in_cutscene(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0xE0031D3C8F36AB82u64, p_0, p_1, p_2);
    } // 0xE0031D3C8F36AB82 0xDBFB067B b323
    pub unsafe fn set_entity_locally_invisible(entity: Entity) {
        call_native!(Void, 0xE135A9FF3F5D05D8u64, entity);
    } // 0xE135A9FF3F5D05D8 0x51ADCC5F b323
    pub unsafe fn set_entity_locally_visible(entity: Entity) {
        call_native!(Void, 0x241E289B5C059EDCu64, entity);
    } // 0x241E289B5C059EDC 0x235A57B3 b323
    pub unsafe fn is_damage_tracker_active_on_network_id(net_i_d: i32) -> bool {
        call_native!(bool, 0x6E192E33AD436366u64, net_i_d)
    } // 0x6E192E33AD436366 0x597063BA b323
    pub unsafe fn activate_damage_tracker_on_network_id(net_i_d: i32, toggle: bool) {
        call_native!(Void, 0xD45B1FFCCD52FF19u64, net_i_d, toggle);
    } // 0xD45B1FFCCD52FF19 0x95D07BA5 b323
    pub unsafe fn is_damage_tracker_active_on_player(player: Player) -> bool {
        call_native!(bool, 0xB2092A1EAA7FD45Fu64, player)
    } // 0xB2092A1EAA7FD45F  b757
    pub unsafe fn activate_damage_tracker_on_player(player: Player, toggle: bool) {
        call_native!(Void, 0xBEC0816FF5ACBCDAu64, player, toggle);
    } // 0xBEC0816FF5ACBCDA  b757
    pub unsafe fn is_sphere_visible_to_another_machine(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
    ) -> bool {
        call_native!(bool, 0xD82CF8E64C8729D8u64, p_0, p_1, p_2, p_3)
    } // 0xD82CF8E64C8729D8 0x23C5274E b323
    pub unsafe fn is_sphere_visible_to_player(
        p_0: Any,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
    ) -> bool {
        call_native!(bool, 0xDC3A310219E5DA62u64, p_0, p_1, p_2, p_3, p_4)
    } // 0xDC3A310219E5DA62 0xE9FCFB32 b323
    pub unsafe fn reserve_network_mission_objects(amount: i32) {
        call_native!(Void, 0x4E5C93BD0C32FBF8u64, amount);
    } // 0x4E5C93BD0C32FBF8 0x391DF4F3 b323
    pub unsafe fn reserve_network_mission_peds(amount: i32) {
        call_native!(Void, 0xB60FEBA45333D36Fu64, amount);
    } // 0xB60FEBA45333D36F 0x54998C37 b323
    pub unsafe fn reserve_network_mission_vehicles(amount: i32) {
        call_native!(Void, 0x76B02E21ED27A469u64, amount);
    } // 0x76B02E21ED27A469 0x5062875E b323
    pub unsafe fn reserve_local_network_mission_objects(amount: i32) {
        call_native!(Void, 0x797F9C5E661D920Eu64, amount);
    } // 0x797F9C5E661D920E  b1290
    pub unsafe fn reserve_local_network_mission_peds(amount: i32) {
        call_native!(Void, 0x2C8DF5D129595281u64, amount);
    } // 0x2C8DF5D129595281  b1493
    pub unsafe fn reserve_local_network_mission_vehicles(amount: i32) {
        call_native!(Void, 0x42613035157E4208u64, amount);
    } // 0x42613035157E4208  b1103
    pub unsafe fn can_register_mission_objects(amount: i32) -> bool {
        call_native!(bool, 0x800DD4721A8B008Bu64, amount)
    } // 0x800DD4721A8B008B 0x7F85DFDE b323
    pub unsafe fn can_register_mission_peds(amount: i32) -> bool {
        call_native!(bool, 0xBCBF4FEF9FA5D781u64, amount)
    } // 0xBCBF4FEF9FA5D781 0xCCAA5CE9 b323
    pub unsafe fn can_register_mission_vehicles(amount: i32) -> bool {
        call_native!(bool, 0x7277F1F2E085EE74u64, amount)
    } // 0x7277F1F2E085EE74 0x818B6830 b323
    pub unsafe fn can_register_mission_pickups(amount: i32) -> bool {
        call_native!(bool, 0x0A49D1CB6E34AF72u64, amount)
    } // 0x0A49D1CB6E34AF72  b757
    pub unsafe fn can_register_mission_doors(p_0: Any) -> bool {
        call_native!(bool, 0xE16AA70CE9BEEDC3u64, p_0)
    } // 0xE16AA70CE9BEEDC3  b877
    pub unsafe fn can_register_mission_entities(
        ped_amt: i32,
        vehicle_amt: i32,
        object_amt: i32,
        pickup_amt: i32,
    ) -> bool {
        call_native!(
            bool,
            0x69778E7564BADE6Du64,
            ped_amt,
            vehicle_amt,
            object_amt,
            pickup_amt
        )
    } // 0x69778E7564BADE6D 0x83794008 b323
    pub unsafe fn get_num_reserved_mission_objects(p_0: bool, p_1: Any) -> i32 {
        call_native!(i32, 0xAA81B5F10BC43AC2u64, p_0, p_1)
    } // 0xAA81B5F10BC43AC2 0x16A80CD6 b323
    pub unsafe fn get_num_reserved_mission_peds(p_0: bool, p_1: Any) -> i32 {
        call_native!(i32, 0x1F13D5AE5CB17E17u64, p_0, p_1)
    } // 0x1F13D5AE5CB17E17 0x6C25975C b323
    pub unsafe fn get_num_reserved_mission_vehicles(p_0: bool, p_1: Any) -> i32 {
        call_native!(i32, 0xCF3A965906452031u64, p_0, p_1)
    } // 0xCF3A965906452031 0xA9A308F3 b323
    pub unsafe fn get_num_created_mission_objects(p_0: bool) -> i32 {
        call_native!(i32, 0x12B6281B6C6706C0u64, p_0)
    } // 0x12B6281B6C6706C0 0x603FA104 b323
    pub unsafe fn get_num_created_mission_peds(p_0: bool) -> i32 {
        call_native!(i32, 0xCB215C4B56A7FAE7u64, p_0)
    } // 0xCB215C4B56A7FAE7 0xD8FEC4F8 b323
    pub unsafe fn get_num_created_mission_vehicles(p_0: bool) -> i32 {
        call_native!(i32, 0x0CD9AB83489430EAu64, p_0)
    } // 0x0CD9AB83489430EA 0x20527695 b323
    pub unsafe fn get_reserved_mission_entities_in_area(
        x: f32,
        y: f32,
        z: f32,
        p_3: Any,
        out_1: *mut Any,
        out_2: *mut Any,
        out_3: *mut Any,
    ) {
        call_native!(
            Void,
            0xE42D626EEC94E5D9u64,
            x,
            y,
            z,
            p_3,
            out_1,
            out_2,
            out_3
        );
    } // 0xE42D626EEC94E5D9  b1290
    pub unsafe fn get_max_num_network_objects() -> i32 {
        call_native!(i32, 0xC7BE335216B5EC7Cu64)
    } // 0xC7BE335216B5EC7C 0x8687E285 b323
    pub unsafe fn get_max_num_network_peds() -> i32 {
        call_native!(i32, 0x0C1F7D49C39D2289u64)
    } // 0x0C1F7D49C39D2289 0x744AC008 b323
    pub unsafe fn get_max_num_network_vehicles() -> i32 {
        call_native!(i32, 0x0AFCE529F69B21FFu64)
    } // 0x0AFCE529F69B21FF 0xC3A12135 b323
    pub unsafe fn get_max_num_network_pickups() -> i32 {
        call_native!(i32, 0xA72835064DD63E4Cu64)
    } // 0xA72835064DD63E4C 0x6A036061 b323
    pub unsafe fn network_set_object_scope_distance(object: Object, range: f32) {
        call_native!(Void, 0xBA7F0B77D80A4EB7u64, object, range);
    } // 0xBA7F0B77D80A4EB7  b372
    pub unsafe fn network_allow_cloning_while_in_tutorial(p_0: Any, p_1: Any) {
        call_native!(Void, 0x0F1A4B45B7693B95u64, p_0, p_1);
    } // 0x0F1A4B45B7693B95  b2189
    pub unsafe fn network_set_task_cutscene_inscope_multipler(p_0: Any) {
        call_native!(Void, 0xC6FCEE21C6FCEE21u64, p_0);
    } // 0xC6FCEE21C6FCEE21  b2545
    pub unsafe fn get_network_time() -> i32 {
        call_native!(i32, 0x7A5487FE9FAA6B48u64)
    } // 0x7A5487FE9FAA6B48 0x998103C2 b323
    pub unsafe fn get_network_time_accurate() -> i32 {
        call_native!(i32, 0x89023FBBF9200E9Fu64)
    } // 0x89023FBBF9200E9F 0x98AA48E5 b323
    pub unsafe fn has_network_time_started() -> bool {
        call_native!(bool, 0x46718ACEEDEAFC84u64)
    } // 0x46718ACEEDEAFC84 0x4538C4A2 b323
    pub unsafe fn get_time_offset(time_a: i32, time_b: i32) -> i32 {
        call_native!(i32, 0x017008CCDAD48503u64, time_a, time_b)
    } // 0x017008CCDAD48503 0x2E079AE6 b323
    pub unsafe fn is_time_less_than(time_a: i32, time_b: i32) -> bool {
        call_native!(bool, 0xCB2CF5148012C8D0u64, time_a, time_b)
    } // 0xCB2CF5148012C8D0 0x50EF8FC6 b323
    pub unsafe fn is_time_more_than(time_a: i32, time_b: i32) -> bool {
        call_native!(bool, 0xDE350F8651E4346Cu64, time_a, time_b)
    } // 0xDE350F8651E4346C 0xBBB6DF61 b323
    pub unsafe fn is_time_equal_to(time_a: i32, time_b: i32) -> bool {
        call_native!(bool, 0xF5BC95857BD6D512u64, time_a, time_b)
    } // 0xF5BC95857BD6D512 0x8B4D1C06 b323
    pub unsafe fn get_time_difference(time_a: i32, time_b: i32) -> i32 {
        call_native!(i32, 0xA2C6FC031D46FFF0u64, time_a, time_b)
    } // 0xA2C6FC031D46FFF0 0x5666A837 b323
    pub unsafe fn get_time_as_string(time: i32) -> *const i8 {
        call_native!(*const i8, 0x9E23B1777A927DADu64, time)
    } // 0x9E23B1777A927DAD 0x8218944E b323
    pub unsafe fn get_cloud_time_as_string() -> *const i8 {
        call_native!(*const i8, 0xF12E6CD06C73D69Eu64)
    } // 0xF12E6CD06C73D69E  b1103
    pub unsafe fn get_cloud_time_as_int() -> i32 {
        call_native!(i32, 0x9A73240B49945C76u64)
    } // 0x9A73240B49945C76 0xF2FDF2E0 b323
    pub unsafe fn convert_posix_time(posix_time: i32, time_structure: *mut Any) {
        call_native!(Void, 0xAC97AF97FA68E5D5u64, posix_time, time_structure);
    } // 0xAC97AF97FA68E5D5 0xBB7CCE49 b323
    pub unsafe fn network_set_in_spectator_mode(toggle: bool, player_ped: Ped) {
        call_native!(Void, 0x423DE3854BB50894u64, toggle, player_ped);
    } // 0x423DE3854BB50894 0x5C4C8458 b323
    pub unsafe fn network_set_in_spectator_mode_extended(toggle: bool, player_ped: Ped, p_2: bool) {
        call_native!(Void, 0x419594E137637120u64, toggle, player_ped, p_2);
    } // 0x419594E137637120 0x54058F5F b323
    pub unsafe fn network_set_in_free_cam_mode(toggle: bool) {
        call_native!(Void, 0xFC18DB55AE19E046u64, toggle);
    } // 0xFC18DB55AE19E046 0xA7E36020 b323
    pub unsafe fn network_set_antagonistic_to_player(toggle: bool, player: Player) {
        call_native!(Void, 0x5C707A667DF8B9FAu64, toggle, player);
    } // 0x5C707A667DF8B9FA 0x64235620 b323
    pub unsafe fn network_is_in_spectator_mode() -> bool {
        call_native!(bool, 0x048746E388762E11u64)
    } // 0x048746E388762E11 0x3EAD9DB8 b323
    pub unsafe fn network_set_in_mp_cutscene(p_0: bool, p_1: bool) {
        call_native!(Void, 0x9CA5DE655269FEC4u64, p_0, p_1);
    } // 0x9CA5DE655269FEC4 0x8434CB43 b323
    pub unsafe fn network_is_in_mp_cutscene() -> bool {
        call_native!(bool, 0x6CC27C9FA2040220u64)
    } // 0x6CC27C9FA2040220 0x4BB33316 b323
    pub unsafe fn network_is_player_in_mp_cutscene(player: Player) -> bool {
        call_native!(bool, 0x63F9EE203C3619F2u64, player)
    } // 0x63F9EE203C3619F2 0x56F961E4 b323
    pub unsafe fn network_hide_projectile_in_cutscene() {
        call_native!(Void, 0xFAC18E7356BD3210u64);
    } // 0xFAC18E7356BD3210  b1180
    pub unsafe fn set_network_vehicle_respot_timer(net_id: i32, time: i32, p_2: Any, p_3: Any) {
        call_native!(Void, 0xEC51713AB6EC36E8u64, net_id, time, p_2, p_3);
    } // 0xEC51713AB6EC36E8 0x2C30912D b323
    pub unsafe fn is_network_vehicle_running_respot_timer(network_i_d: i32) -> bool {
        call_native!(bool, 0xDD7CEF5B3A4DA8A6u64, network_i_d)
    } // 0xDD7CEF5B3A4DA8A6  b2802
    pub unsafe fn set_network_vehicle_as_ghost(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x6274C4712850841Eu64, vehicle, toggle);
    } // 0x6274C4712850841E 0xEA235081 b323
    pub unsafe fn set_network_vehicle_max_position_delta_multiplier(
        vehicle: Vehicle,
        multiplier: f32,
    ) {
        call_native!(Void, 0xA2A707979FE754DCu64, vehicle, multiplier);
    } // 0xA2A707979FE754DC  b877
    pub unsafe fn set_network_enable_high_speed_edge_fall_detection(
        vehicle: Vehicle,
        toggle: bool,
    ) {
        call_native!(Void, 0x838DA0936A24ED4Du64, vehicle, toggle);
    } // 0x838DA0936A24ED4D  b944
    pub unsafe fn set_local_player_as_ghost(toggle: bool, p_1: bool) {
        call_native!(Void, 0x5FFE9B4144F9712Fu64, toggle, p_1);
    } // 0x5FFE9B4144F9712F  b323
    pub unsafe fn is_entity_a_ghost(entity: Entity) -> bool {
        call_native!(bool, 0x21D04D7BC538C146u64, entity)
    } // 0x21D04D7BC538C146  b323
    pub unsafe fn set_non_participants_of_this_script_as_ghosts(p_0: bool) {
        call_native!(Void, 0x13F1FCB111B820B0u64, p_0);
    } // 0x13F1FCB111B820B0  b877
    pub unsafe fn set_remote_player_as_ghost(player: Player, p_1: bool) {
        call_native!(Void, 0xA7C511FA1C5BDA38u64, player, p_1);
    } // 0xA7C511FA1C5BDA38  b463
    pub unsafe fn set_ghost_alpha(alpha: i32) {
        call_native!(Void, 0x658500AE6D723A7Eu64, alpha);
    } // 0x658500AE6D723A7E  b791
    pub unsafe fn reset_ghost_alpha() {
        call_native!(Void, 0x17330EBF2F2124A8u64);
    } // 0x17330EBF2F2124A8  b791
    pub unsafe fn set_entity_ghosted_for_ghost_players(entity: Entity, toggle: bool) {
        call_native!(Void, 0x4BA166079D658ED4u64, entity, toggle);
    } // 0x4BA166079D658ED4  b944
    pub unsafe fn set_invert_ghosting(p_0: bool) {
        call_native!(Void, 0xD7B6C73CAD419BCFu64, p_0);
    } // 0xD7B6C73CAD419BCF  b944
    pub unsafe fn is_entity_in_ghost_collision(entity: Entity) -> bool {
        call_native!(bool, 0x7EF7649B64D7FF10u64, entity)
    } // 0x7EF7649B64D7FF10  b944
    pub unsafe fn use_player_colour_instead_of_team_colour(toggle: bool) {
        call_native!(Void, 0x77758139EC9B66C7u64, toggle);
    } // 0x77758139EC9B66C7 0x4DD46DAE b323
    pub unsafe fn network_create_synchronised_scene(
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        rotation_order: i32,
        use_occlusion_portal: bool,
        looped: bool,
        p_9: f32,
        anim_time: f32,
        p_1_1: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x7CD6BC4C2BBDD526u64,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            rotation_order,
            use_occlusion_portal,
            looped,
            p_9,
            anim_time,
            p_1_1
        )
    } // 0x7CD6BC4C2BBDD526 0xB06FE3FE b323
    pub unsafe fn network_add_ped_to_synchronised_scene(
        ped: Ped,
        net_scene: i32,
        anim_dict: *const i8,
        animn_name: *const i8,
        speed: f32,
        speed_multiplier: f32,
        duration: i32,
        flag: i32,
        playback_rate: f32,
        p_9: Any,
    ) {
        call_native!(
            Void,
            0x742A637471BCECD9u64,
            ped,
            net_scene,
            anim_dict,
            animn_name,
            speed,
            speed_multiplier,
            duration,
            flag,
            playback_rate,
            p_9
        );
    } // 0x742A637471BCECD9 0xB386713E b323
    pub unsafe fn network_add_ped_to_synchronised_scene_with_ik(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
    ) {
        call_native!(
            Void,
            0xA5EAFE473E45C442u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0xA5EAFE473E45C442  b1290
    pub unsafe fn network_add_entity_to_synchronised_scene(
        entity: Entity,
        net_scene: i32,
        anim_dict: *const i8,
        anim_name: *const i8,
        speed: f32,
        speed_mulitiplier: f32,
        flag: i32,
    ) {
        call_native!(
            Void,
            0xF2404D68CBC855FAu64,
            entity,
            net_scene,
            anim_dict,
            anim_name,
            speed,
            speed_mulitiplier,
            flag
        );
    } // 0xF2404D68CBC855FA 0x10DD636C b323
    pub unsafe fn network_add_map_entity_to_synchronised_scene(
        net_scene: i32,
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        p_5: f32,
        p_6: *const i8,
        p_7: f32,
        p_8: f32,
        flags: i32,
    ) {
        call_native!(
            Void,
            0x45F35C0EDC33B03Bu64,
            net_scene,
            model_hash,
            x,
            y,
            z,
            p_5,
            p_6,
            p_7,
            p_8,
            flags
        );
    } // 0x45F35C0EDC33B03B  b1734
    pub unsafe fn network_add_synchronised_scene_camera(
        net_scene: i32,
        anim_dict: *const i8,
        anim_name: *const i8,
    ) {
        call_native!(Void, 0xCF8BD3B0BD6D42D7u64, net_scene, anim_dict, anim_name);
    } // 0xCF8BD3B0BD6D42D7 0xBFFE8B5C b323
    pub unsafe fn network_attach_synchronised_scene_to_entity(
        net_scene: i32,
        entity: Entity,
        bone: i32,
    ) {
        call_native!(Void, 0x478DCBD2A98B705Au64, net_scene, entity, bone);
    } // 0x478DCBD2A98B705A 0x3FE5B222 b323
    pub unsafe fn network_start_synchronised_scene(net_scene: i32) {
        call_native!(Void, 0x9A1B3FCDB36C8697u64, net_scene);
    } // 0x9A1B3FCDB36C8697 0xA9DFDC40 b323
    pub unsafe fn network_stop_synchronised_scene(net_scene: i32) {
        call_native!(Void, 0xC254481A4574CB2Fu64, net_scene);
    } // 0xC254481A4574CB2F 0x97B1CDF6 b323
    pub unsafe fn network_get_local_scene_from_network_id(net_id: i32) -> i32 {
        call_native!(i32, 0x02C40BF885C567B6u64, net_id)
    } // 0x02C40BF885C567B6 0x16AED87B b323
    pub unsafe fn network_force_local_use_of_synced_scene_camera(net_scene: i32) {
        call_native!(Void, 0xC9B43A33D09CADA7u64, net_scene);
    } // 0xC9B43A33D09CADA7 0xC3AA2EC7 b323
    pub unsafe fn network_allow_remote_synced_scene_local_player_requests(p_0: Any) {
        call_native!(Void, 0x144DA052257AE7D8u64, p_0);
    } // 0x144DA052257AE7D8  b1103
    pub unsafe fn network_find_largest_bunch_of_players(p_0: i32, p_1: Any) -> bool {
        call_native!(bool, 0xFB1F9381E80FA13Fu64, p_0, p_1)
    } // 0xFB1F9381E80FA13F 0x0679CE71 b323
    pub unsafe fn network_start_respawn_search_for_player(
        player: Player,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        flags: i32,
    ) -> bool {
        call_native!(
            bool,
            0x5A6FFA2433E2F14Cu64,
            player,
            x,
            y,
            z,
            radius,
            p_5,
            p_6,
            p_7,
            flags
        )
    } // 0x5A6FFA2433E2F14C 0xC62E77B3 b323
    pub unsafe fn network_start_respawn_search_in_angled_area_for_player(
        player: Player,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        p_8: f32,
        p_9: f32,
        p_1_0: f32,
        flags: i32,
    ) -> bool {
        call_native!(
            bool,
            0x4BA92A18502BCA61u64,
            player,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            p_8,
            p_9,
            p_1_0,
            flags
        )
    } // 0x4BA92A18502BCA61 0x74D6B13C b323
    pub unsafe fn network_query_respawn_results(p_0: *mut Any) -> i32 {
        call_native!(i32, 0x3C891A251567DFCEu64, p_0)
    } // 0x3C891A251567DFCE 0x90700C7D b323
    pub unsafe fn network_cancel_respawn_search() {
        call_native!(Void, 0xFB8F2A6F3DF08CBEu64);
    } // 0xFB8F2A6F3DF08CBE 0x44BFB619 b323
    pub unsafe fn network_get_respawn_result(
        random_int: i32,
        coordinates: *mut Vector3,
        heading: *mut f32,
    ) {
        call_native!(
            Void,
            0x371EA43692861CF1u64,
            random_int,
            coordinates,
            heading
        );
    } // 0x371EA43692861CF1 0xDDFE9FBC b323
    pub unsafe fn network_get_respawn_result_flags(p_0: i32) -> i32 {
        call_native!(i32, 0x6C34F1208B8923FDu64, p_0)
    } // 0x6C34F1208B8923FD 0x03287FD2 b323
    pub unsafe fn network_start_solo_tutorial_session() {
        call_native!(Void, 0x17E0198B3882C2CBu64);
    } // 0x17E0198B3882C2CB 0x408A9436 b323
    pub unsafe fn network_allow_gang_to_join_tutorial_session(team_id: i32, instance_id: i32) {
        call_native!(Void, 0xFB680D403909DC70u64, team_id, instance_id);
    } // 0xFB680D403909DC70 0xFFB2ADA1 b323
    pub unsafe fn network_end_tutorial_session() {
        call_native!(Void, 0xD0AFAFF5A51D72F7u64);
    } // 0xD0AFAFF5A51D72F7 0xBA57E53E b323
    pub unsafe fn network_is_in_tutorial_session() -> bool {
        call_native!(bool, 0xADA24309FE08DACFu64)
    } // 0xADA24309FE08DACF 0x34DD7B28 b323
    pub unsafe fn network_waiting_pop_clear_tutorial_session() -> bool {
        call_native!(bool, 0xB37E4E6A2388CA7Bu64)
    } // 0xB37E4E6A2388CA7B 0x755A2B3E b323
    pub unsafe fn network_is_tutorial_session_change_pending() -> bool {
        call_native!(bool, 0x35F0B98A8387274Du64)
    } // 0x35F0B98A8387274D 0xA003C40B b323
    pub unsafe fn network_get_player_tutorial_session_instance(player: Player) -> i32 {
        call_native!(i32, 0x3B39236746714134u64, player)
    } // 0x3B39236746714134 0x5E1020CC b323
    pub unsafe fn network_are_players_in_same_tutorial_session(player: Player, index: i32) -> bool {
        call_native!(bool, 0x9DE986FC9A87C474u64, player, index)
    } // 0x9DE986FC9A87C474 0xE66A0B40 b323
    pub unsafe fn network_block_proxy_migration_between_tutorial_sessions(p_0: Any) {
        call_native!(Void, 0xFEA7A352DDB34D52u64, p_0);
    } // 0xFEA7A352DDB34D52  b2545
    pub unsafe fn network_conceal_player(player: Player, toggle: bool, p_2: bool) {
        call_native!(Void, 0xBBDF066252829606u64, player, toggle, p_2);
    } // 0xBBDF066252829606 0x72052DB3 b323
    pub unsafe fn network_is_player_concealed(player: Player) -> bool {
        call_native!(bool, 0x919B3C98ED8292F9u64, player)
    } // 0x919B3C98ED8292F9 0xB0313590 b323
    pub unsafe fn network_conceal_entity(entity: Entity, toggle: bool) {
        call_native!(Void, 0x1632BE0AC1E62876u64, entity, toggle);
    } // 0x1632BE0AC1E62876  b877
    pub unsafe fn network_is_entity_concealed(entity: Entity) -> bool {
        call_native!(bool, 0x71302EC70689052Au64, entity)
    } // 0x71302EC70689052A  b877
    pub unsafe fn network_override_clock_time(hours: i32, minutes: i32, seconds: i32) {
        call_native!(Void, 0xE679E3E06E363892u64, hours, minutes, seconds);
    } // 0xE679E3E06E363892 0xC077BCD6 b323
    pub unsafe fn network_override_clock_rate(ms: i32) {
        call_native!(Void, 0x42BF1D2E723B6D7Eu64, ms);
    } // 0x42BF1D2E723B6D7E  b2189
    pub unsafe fn network_clear_clock_time_override() {
        call_native!(Void, 0xD972DF67326F966Eu64);
    } // 0xD972DF67326F966E 0xC4AEAF49 b323
    pub unsafe fn network_is_clock_time_overridden() -> bool {
        call_native!(bool, 0xD7C95D322FF57522u64)
    } // 0xD7C95D322FF57522 0x2465296D b323
    pub unsafe fn network_add_entity_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> i32 {
        call_native!(i32, 0x494C8FB299290269u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x494C8FB299290269 0x51030E5B b323
    pub unsafe fn network_add_entity_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x376C6375BA60293Au64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width
        )
    } // 0x376C6375BA60293A 0xCD69BEA1 b323
    pub unsafe fn network_add_client_entity_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> i32 {
        call_native!(i32, 0x25B99872D588A101u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x25B99872D588A101 0x4C2C2B12 b323
    pub unsafe fn network_add_client_entity_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        radius: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x2B1C623823DB0D9Du64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            radius
        )
    } // 0x2B1C623823DB0D9D  b1103
    pub unsafe fn network_remove_entity_area(area_handle: i32) -> bool {
        call_native!(bool, 0x93CF869BAA0C4874u64, area_handle)
    } // 0x93CF869BAA0C4874 0xEAB97F25 b323
    pub unsafe fn network_entity_area_does_exist(area_handle: i32) -> bool {
        call_native!(bool, 0xE64A3CA08DFA37A9u64, area_handle)
    } // 0xE64A3CA08DFA37A9 0x69956127 b323
    pub unsafe fn network_entity_area_have_all_replied(area_handle: i32) -> bool {
        call_native!(bool, 0x4DF7CFFF471A7FB1u64, area_handle)
    } // 0x4DF7CFFF471A7FB1 0xCB1CD6D3 b323
    pub unsafe fn network_entity_area_is_occupied(area_handle: i32) -> bool {
        call_native!(bool, 0x4A2D4E8BF4265B0Fu64, area_handle)
    } // 0x4A2D4E8BF4265B0F 0xC6D53AA0 b323
    pub unsafe fn network_use_high_precision_blending(net_i_d: i32, toggle: bool) {
        call_native!(Void, 0x2B1813ABA29016C5u64, net_i_d, toggle);
    } // 0x2B1813ABA29016C5 0x155465EE b323
    pub unsafe fn network_set_custom_arena_ball_params(net_id: i32) {
        call_native!(Void, 0xA6FCECCF4721D679u64, net_id);
    } // 0xA6FCECCF4721D679  b1604
    pub unsafe fn network_entity_use_high_precision_rotation(net_id: i32, toggle: bool) {
        call_native!(Void, 0x95BAF97C82464629u64, net_id, toggle);
    } // 0x95BAF97C82464629  b1604
    pub unsafe fn network_request_cloud_background_scripts() -> bool {
        call_native!(bool, 0x924426BFFD82E915u64)
    } // 0x924426BFFD82E915 0x98EFB921 b323
    pub unsafe fn network_is_cloud_background_script_request_pending() -> bool {
        call_native!(bool, 0x8132C0EB8B2B3293u64)
    } // 0x8132C0EB8B2B3293 0x20AB933A b323
    pub unsafe fn network_request_cloud_tunables() {
        call_native!(Void, 0x42FB3B532D526E6Cu64);
    } // 0x42FB3B532D526E6C 0xD760CAD5 b323
    pub unsafe fn network_is_tunable_cloud_request_pending() -> bool {
        call_native!(bool, 0x0467C11ED88B7D28u64)
    } // 0x0467C11ED88B7D28 0x47978D7F b323
    pub unsafe fn network_get_tunable_cloud_crc() -> i32 {
        call_native!(i32, 0x10BD227A753B0D84u64)
    } // 0x10BD227A753B0D84 0x231CFD12 b323
    pub unsafe fn network_does_tunable_exist(
        tunable_context: *const i8,
        tunable_name: *const i8,
    ) -> bool {
        call_native!(bool, 0x85E5F8B9B898B20Au64, tunable_context, tunable_name)
    } // 0x85E5F8B9B898B20A 0x9FCE9C9A b323
    pub unsafe fn network_access_tunable_int(
        tunable_context: *const i8,
        tunable_name: *const i8,
        value: *mut i32,
    ) -> bool {
        call_native!(
            bool,
            0x8BE1146DFD5D4468u64,
            tunable_context,
            tunable_name,
            value
        )
    } // 0x8BE1146DFD5D4468 0xE4B3726A b323
    pub unsafe fn network_access_tunable_float(
        tunable_context: *const i8,
        tunable_name: *const i8,
        value: *mut f32,
    ) -> bool {
        call_native!(
            bool,
            0xE5608CA7BC163A5Fu64,
            tunable_context,
            tunable_name,
            value
        )
    } // 0xE5608CA7BC163A5F 0x41E8912A b323
    pub unsafe fn network_access_tunable_bool(
        tunable_context: *const i8,
        tunable_name: *const i8,
    ) -> bool {
        call_native!(bool, 0xAA6A47A573ABB75Au64, tunable_context, tunable_name)
    } // 0xAA6A47A573ABB75A 0x8A04E1FE b323
    pub unsafe fn network_does_tunable_exist_hash(
        tunable_context: Hash,
        tunable_name: Hash,
    ) -> bool {
        call_native!(bool, 0xE4E53E1419D81127u64, tunable_context, tunable_name)
    } // 0xE4E53E1419D81127 0x25915CB9 b323
    pub unsafe fn network_access_tunable_modification_detection_clear() -> bool {
        call_native!(bool, 0xFAFC23AEE23868DBu64)
    } // 0xFAFC23AEE23868DB  b393
    pub unsafe fn network_access_tunable_int_hash(
        tunable_context: Hash,
        tunable_name: Hash,
        value: *mut i32,
    ) -> bool {
        call_native!(
            bool,
            0x40FCE03E50E8DBE8u64,
            tunable_context,
            tunable_name,
            value
        )
    } // 0x40FCE03E50E8DBE8 0xB2E83B75 b323
    pub unsafe fn network_access_tunable_int_modification_detection_registration_hash(
        context_hash: Hash,
        name_hash: Hash,
        value: *mut i32,
    ) -> bool {
        call_native!(bool, 0x3A8B55FDA4C8DDEFu64, context_hash, name_hash, value)
    } // 0x3A8B55FDA4C8DDEF  b393
    pub unsafe fn network_access_tunable_float_hash(
        tunable_context: Hash,
        tunable_name: Hash,
        value: *mut f32,
    ) -> bool {
        call_native!(
            bool,
            0x972BC203BBC4C4D5u64,
            tunable_context,
            tunable_name,
            value
        )
    } // 0x972BC203BBC4C4D5 0x3972551F b323
    pub unsafe fn network_access_tunable_float_modification_detection_registration_hash(
        context_hash: Hash,
        name_hash: Hash,
        value: *mut f32,
    ) -> bool {
        call_native!(bool, 0x1950DAE9848A4739u64, context_hash, name_hash, value)
    } // 0x1950DAE9848A4739  b393
    pub unsafe fn network_access_tunable_bool_hash(
        tunable_context: Hash,
        tunable_name: Hash,
    ) -> bool {
        call_native!(bool, 0xEA16B69D93D71A45u64, tunable_context, tunable_name)
    } // 0xEA16B69D93D71A45 0x18867C61 b323
    pub unsafe fn network_access_tunable_bool_modification_detection_registration_hash(
        context_hash: Hash,
        name_hash: Hash,
        value: *mut Bool,
    ) -> bool {
        call_native!(bool, 0x697F508861875B42u64, context_hash, name_hash, value)
    } // 0x697F508861875B42  b393
    pub unsafe fn network_try_access_tunable_bool_hash(
        tunable_context: Hash,
        tunable_name: Hash,
        default_value: bool,
    ) -> bool {
        call_native!(
            bool,
            0xC7420099936CE286u64,
            tunable_context,
            tunable_name,
            default_value
        )
    } // 0xC7420099936CE286 0x8AFE3D90 b323
    pub unsafe fn network_get_content_modifier_list_id(content_hash: Hash) -> i32 {
        call_native!(i32, 0x187382F8A3E0A6C3u64, content_hash)
    } // 0x187382F8A3E0A6C3 0xA78571CA b323
    pub unsafe fn network_get_bone_id_of_fatal_hit() -> i32 {
        call_native!(i32, 0x7DB53B37A2F211A0u64)
    } // 0x7DB53B37A2F211A0 0x053BB329 b323
    pub unsafe fn network_reset_body_tracker() {
        call_native!(Void, 0x72433699B4E6DD64u64);
    } // 0x72433699B4E6DD64 0x3914463F b323
    pub unsafe fn network_get_number_body_tracker_hits() -> i32 {
        call_native!(i32, 0xD38C4A6D047C019Du64)
    } // 0xD38C4A6D047C019D 0x17CBC608 b323
    pub unsafe fn network_has_bone_been_hit_by_killer(bone_index: i32) -> bool {
        call_native!(bool, 0x2E0BF682CC778D49u64, bone_index)
    } // 0x2E0BF682CC778D49 0xBFAA349B b323
    pub unsafe fn network_set_attribute_damage_to_player(ped: Ped, player: Player) -> bool {
        call_native!(bool, 0x0EDE326D47CD0F3Eu64, ped, player)
    } // 0x0EDE326D47CD0F3E 0xBEB7281A b323
    pub unsafe fn network_trigger_damage_event_for_zero_damage(entity: Entity, toggle: bool) {
        call_native!(Void, 0x890E2C5ABED7236Du64, entity, toggle);
    } // 0x890E2C5ABED7236D  b1365
    pub unsafe fn network_trigger_damage_event_for_zero_weapon_hash(entity: Entity, toggle: bool) {
        call_native!(Void, 0x38B7C51AB1EDC7D8u64, entity, toggle);
    } // 0x38B7C51AB1EDC7D8  b1734
    pub unsafe fn network_set_no_longer_needed(entity: Entity, toggle: bool) {
        call_native!(Void, 0x3FC795691834481Du64, entity, toggle);
    } // 0x3FC795691834481D  b1868
    pub unsafe fn network_explode_vehicle(
        vehicle: Vehicle,
        is_audible: bool,
        is_invisible: bool,
        net_id: i32,
    ) -> bool {
        call_native!(
            bool,
            0x301A42153C9AD707u64,
            vehicle,
            is_audible,
            is_invisible,
            net_id
        )
    } // 0x301A42153C9AD707 0x0E1B38AE b323
    pub unsafe fn network_explode_heli(
        vehicle: Vehicle,
        is_audible: bool,
        is_invisible: bool,
        net_id: i32,
    ) {
        call_native!(
            Void,
            0x2A5E0621DD815A9Au64,
            vehicle,
            is_audible,
            is_invisible,
            net_id
        );
    } // 0x2A5E0621DD815A9A 0x955B31BF b463
    pub unsafe fn network_use_logarithmic_blending_this_frame(entity: Entity) {
        call_native!(Void, 0xCD71A4ECAB22709Eu64, entity);
    } // 0xCD71A4ECAB22709E 0xBC54371B b323
    pub unsafe fn network_override_coords_and_heading(
        entity: Entity,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
    ) {
        call_native!(Void, 0xA7E30DE9272B6D49u64, entity, x, y, z, heading);
    } // 0xA7E30DE9272B6D49 0x644141C5 b323
    pub unsafe fn network_enable_extra_vehicle_orientation_blend_checks(net_id: i32, toggle: bool) {
        call_native!(Void, 0xE6717E652B8C8D8Au64, net_id, toggle);
    } // 0xE6717E652B8C8D8A  b617
    pub unsafe fn network_disable_proximity_migration(net_i_d: i32) {
        call_native!(Void, 0x407091CF6037118Eu64, net_i_d);
    } // 0x407091CF6037118E 0x9F82917F b323
    pub unsafe fn network_set_property_id(id: i32) {
        call_native!(Void, 0x1775961C2FBBCB5Cu64, id);
    } // 0x1775961C2FBBCB5C 0x5A74E873 b323
    pub unsafe fn network_clear_property_id() {
        call_native!(Void, 0xC2B82527CA77053Eu64);
    } // 0xC2B82527CA77053E 0x38BC35C8 b323
    pub unsafe fn network_set_player_mental_state(p_0: i32) {
        call_native!(Void, 0x367EF5E2F439B4C6u64, p_0);
    } // 0x367EF5E2F439B4C6 0x53C9563C b323
    pub unsafe fn network_set_minimum_rank_for_mission(p_0: bool) {
        call_native!(Void, 0x94538037EE44F5CFu64, p_0);
    } // 0x94538037EE44F5CF 0x6B97075B b323
    pub unsafe fn network_cache_local_player_head_blend_data() {
        call_native!(Void, 0xBD0BE0BFC927EAC1u64);
    } // 0xBD0BE0BFC927EAC1 0x94AB35A9 b323
    pub unsafe fn network_has_cached_player_head_blend_data(player: Player) -> bool {
        call_native!(bool, 0x237D5336A9A54108u64, player)
    } // 0x237D5336A9A54108 0x7B2A0337 b323
    pub unsafe fn network_apply_cached_player_head_blend_data(ped: Ped, player: Player) -> bool {
        call_native!(bool, 0x99B72C7ABDE5C910u64, ped, player)
    } // 0x99B72C7ABDE5C910 0x99F58A07 b323
    pub unsafe fn get_num_commerce_items() -> i32 {
        call_native!(i32, 0xF2EAC213D5EA0623u64)
    } // 0xF2EAC213D5EA0623 0x965EA007 b323
    pub unsafe fn is_commerce_data_valid() -> bool {
        call_native!(bool, 0xEA14EEF5B7CD2C30u64)
    } // 0xEA14EEF5B7CD2C30 0xEEFC8A55 b323
    pub unsafe fn trigger_commerce_data_fetch(p_0: Any) {
        call_native!(Void, 0xB606E6CC59664972u64, p_0);
    } // 0xB606E6CC59664972 0x866D1B67 b323
    pub unsafe fn is_commerce_data_fetch_in_progress() -> bool {
        call_native!(bool, 0x1D4DC17C38FEAFF0u64)
    } // 0x1D4DC17C38FEAFF0 0xED4A272F b323
    pub unsafe fn get_commerce_item_id(index: i32) -> *const i8 {
        call_native!(*const i8, 0x662635855957C411u64, index)
    } // 0x662635855957C411 0x4ACF110C b323
    pub unsafe fn get_commerce_item_name(index: i32) -> *const i8 {
        call_native!(*const i8, 0xB4271092CA7EDF48u64, index)
    } // 0xB4271092CA7EDF48 0x1AA3A0D5 b323
    pub unsafe fn get_commerce_product_price(index: i32) -> *const i8 {
        call_native!(*const i8, 0xCA94551B50B4932Cu64, index)
    } // 0xCA94551B50B4932C 0x37877757 b323
    pub unsafe fn get_commerce_item_num_cats(index: i32) -> i32 {
        call_native!(i32, 0x2A7776C709904AB0u64, index)
    } // 0x2A7776C709904AB0 0x1CF89DA5 b323
    pub unsafe fn get_commerce_item_cat(index: i32, index_2: i32) -> *const i8 {
        call_native!(*const i8, 0x6F44CBF56D79FAC0u64, index, index_2)
    } // 0x6F44CBF56D79FAC0 0x16E53875 b323
    pub unsafe fn open_commerce_store(p_0: *const i8, p_1: *const i8, p_2: i32) {
        call_native!(Void, 0x58C21165F6545892u64, p_0, p_1, p_2);
    } // 0x58C21165F6545892 0x365C50EE b323
    pub unsafe fn is_commerce_store_open() -> bool {
        call_native!(bool, 0x2EAC52B4019E2782u64)
    } // 0x2EAC52B4019E2782 0x25E2DBA9 b323
    pub unsafe fn set_store_enabled(toggle: bool) {
        call_native!(Void, 0x9641A9FF718E9C5Eu64, toggle);
    } // 0x9641A9FF718E9C5E 0xC1F6443B b323
    pub unsafe fn request_commerce_item_image(index: i32) -> bool {
        call_native!(bool, 0xA2F952104FC6DD4Bu64, index)
    } // 0xA2F952104FC6DD4B 0x1FDC75DC b323
    pub unsafe fn release_all_commerce_item_images() {
        call_native!(Void, 0x72D0706CD6CCDB58u64);
    } // 0x72D0706CD6CCDB58 0xCA7A0A49 b323
    pub unsafe fn get_commerce_item_texturename(index: i32) -> *const i8 {
        call_native!(*const i8, 0x722F5D28B61C5EA8u64, index)
    } // 0x722F5D28B61C5EA8 0x44A58B0A b323
    pub unsafe fn is_store_available_to_user() -> bool {
        call_native!(bool, 0x883D79C4071E18B3u64)
    } // 0x883D79C4071E18B3 0xD32FA11F b323
    pub unsafe fn delay_mp_store_open() {
        call_native!(Void, 0x265635150FB0D82Eu64);
    } // 0x265635150FB0D82E 0xA7FA70AE b323
    pub unsafe fn reset_store_network_game_tracking() {
        call_native!(Void, 0x444C4525ECE0A4B9u64);
    } // 0x444C4525ECE0A4B9 0xCC7DCE24 b323
    pub unsafe fn is_user_old_enough_to_access_store() -> bool {
        call_native!(bool, 0x59328EB08C5CEB2Bu64)
    } // 0x59328EB08C5CEB2B 0x70F6D3AD b323
    pub unsafe fn set_last_viewed_shop_item(p_0: Hash, p_1: i32, p_2: Hash) {
        call_native!(Void, 0xFAE628F1E9ADB239u64, p_0, p_1, p_2);
    } // 0xFAE628F1E9ADB239 0xD59A822B b323
    pub unsafe fn get_user_premium_access() -> i32 {
        call_native!(i32, 0x754615490A029508u64)
    } // 0x754615490A029508  b1290
    pub unsafe fn get_user_starter_access() -> i32 {
        call_native!(i32, 0x155467ACA0F55705u64)
    } // 0x155467ACA0F55705  b1290
    pub unsafe fn cloud_delete_member_file(p_0: *const i8) -> i32 {
        call_native!(i32, 0xC64DED7EF0D2FE37u64, p_0)
    } // 0xC64DED7EF0D2FE37 0x2B7B57B3 b323
    pub unsafe fn cloud_has_request_completed(request_id: i32) -> bool {
        call_native!(bool, 0x4C61B39930D045DAu64, request_id)
    } // 0x4C61B39930D045DA 0xBAF52DD8 b323
    pub unsafe fn cloud_did_request_succeed(request_id: i32) -> bool {
        call_native!(bool, 0x3A3D5568AF297CD5u64, request_id)
    } // 0x3A3D5568AF297CD5 0x9B9AFFF1 b323
    pub unsafe fn cloud_check_availability() {
        call_native!(Void, 0x4F18196C8D38768Du64);
    } // 0x4F18196C8D38768D 0xC38E9DB0 b323
    pub unsafe fn cloud_is_checking_availability() -> bool {
        call_native!(bool, 0xC7ABAC5DE675EE3Bu64)
    } // 0xC7ABAC5DE675EE3B 0x32A4EB22 b323
    pub unsafe fn cloud_get_availability_check_result() -> bool {
        call_native!(bool, 0x0B0CC10720653F3Bu64)
    } // 0x0B0CC10720653F3B 0x9262744C b323
    pub unsafe fn get_content_to_load_type() -> i32 {
        call_native!(i32, 0x8B0C2964BA471961u64)
    } // 0x8B0C2964BA471961  b323
    pub unsafe fn get_is_launch_from_live_area() -> bool {
        call_native!(bool, 0x88B588B41FF7868Eu64)
    } // 0x88B588B41FF7868E  b323
    pub unsafe fn get_is_live_area_launch_with_content() -> bool {
        call_native!(bool, 0x67FC09BC554A75E5u64)
    } // 0x67FC09BC554A75E5  b323
    pub unsafe fn clear_service_event_arguments() {
        call_native!(Void, 0x966DD84FB6A46017u64);
    } // 0x966DD84FB6A46017  b323
    pub unsafe fn ugc_copy_content(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0x152D90E4C1B4738Au64, p_0, p_1)
    } // 0x152D90E4C1B4738A 0x08243B79 b323
    pub unsafe fn ugc_is_creating() -> bool {
        call_native!(bool, 0x9FEDF86898F100E9u64)
    } // 0x9FEDF86898F100E9 0x798D6C27 b323
    pub unsafe fn ugc_has_create_finished() -> bool {
        call_native!(bool, 0x5E24341A7F92A74Bu64)
    } // 0x5E24341A7F92A74B 0xE69E8D0D b323
    pub unsafe fn ugc_did_create_succeed() -> bool {
        call_native!(bool, 0x24E4E51FC16305F9u64)
    } // 0x24E4E51FC16305F9 0x742075FE b323
    pub unsafe fn ugc_get_create_result() -> i32 {
        call_native!(i32, 0xFBC5E768C7A77A6Au64)
    } // 0xFBC5E768C7A77A6A 0xCE569932 b323
    pub unsafe fn ugc_get_create_content_id() -> *const i8 {
        call_native!(*const i8, 0xC55A0B40FFB1ED23u64)
    } // 0xC55A0B40FFB1ED23 0x82146BE9 b323
    pub unsafe fn ugc_clear_create_result() {
        call_native!(Void, 0x17440AA15D1D3739u64);
    } // 0x17440AA15D1D3739 0x133FF2D5 b323
    pub unsafe fn ugc_query_my_content(
        p_0: Any,
        p_1: Any,
        p_2: *mut Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) -> bool {
        call_native!(bool, 0x9BF438815F5D96EAu64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x9BF438815F5D96EA 0xCBA7242F b323
    pub unsafe fn ugc_query_by_category(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: *const i8,
        p_4: Any,
        p_5: bool,
    ) -> bool {
        call_native!(bool, 0x692D58DF40657E8Cu64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x692D58DF40657E8C  b323
    pub unsafe fn ugc_query_by_content_id(
        content_id: *const i8,
        latest_version: bool,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0x158EC424F35EC469u64,
            content_id,
            latest_version,
            content_type_name
        )
    } // 0x158EC424F35EC469 0xDED82A6E b323
    pub unsafe fn ugc_query_by_content_ids(
        data: *mut Any,
        count: i32,
        latest_version: bool,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0xC7397A83F7A2A462u64,
            data,
            count,
            latest_version,
            content_type_name
        )
    } // 0xC7397A83F7A2A462 0x47B3C35E b323
    pub unsafe fn ugc_query_most_recently_created_content(
        offset: i32,
        count: i32,
        content_type_name: *const i8,
        p_3: i32,
    ) -> bool {
        call_native!(
            bool,
            0x6D4CB481FAC835E8u64,
            offset,
            count,
            content_type_name,
            p_3
        )
    } // 0x6D4CB481FAC835E8 0x40CF0783 b323
    pub unsafe fn ugc_get_bookmarked_content(
        p_0: Any,
        p_1: Any,
        p_2: *const i8,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0xD5A4B59980401588u64, p_0, p_1, p_2, p_3)
    } // 0xD5A4B59980401588 0x4609D596 b323
    pub unsafe fn ugc_get_my_content(p_0: Any, p_1: Any, p_2: *const i8, p_3: *mut Any) -> bool {
        call_native!(bool, 0x3195F8DD0D531052u64, p_0, p_1, p_2, p_3)
    } // 0x3195F8DD0D531052 0x4C2C0D1F b323
    pub unsafe fn ugc_get_friend_content(
        p_0: Any,
        p_1: Any,
        p_2: *const i8,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0xF9E1CCAE8BA4C281u64, p_0, p_1, p_2, p_3)
    } // 0xF9E1CCAE8BA4C281 0x9EFBD5D1 b323
    pub unsafe fn ugc_get_crew_content(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: *const i8,
        p_4: *mut Any,
    ) -> bool {
        call_native!(bool, 0x9F6E2821885CAEE2u64, p_0, p_1, p_2, p_3, p_4)
    } // 0x9F6E2821885CAEE2 0xA6D8B798 b323
    pub unsafe fn ugc_get_get_by_category(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: *const i8,
        p_4: *mut Any,
    ) -> bool {
        call_native!(bool, 0x678BB03C1A3BD51Eu64, p_0, p_1, p_2, p_3, p_4)
    } // 0x678BB03C1A3BD51E 0x67E74842 b323
    pub unsafe fn ugc_get_get_by_content_id(
        content_id: *const i8,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(bool, 0x815E5E3073DA1D67u64, content_id, content_type_name)
    } // 0x815E5E3073DA1D67 0xE123C7AC b323
    pub unsafe fn ugc_get_get_by_content_ids(
        data: *mut Any,
        data_count: i32,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0xB8322EEB38BE7C26u64,
            data,
            data_count,
            content_type_name
        )
    } // 0xB8322EEB38BE7C26 0x22C33603 b323
    pub unsafe fn ugc_get_most_recently_created_content(
        p_0: Any,
        p_1: Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0xA7862BC5ED1DFD7Eu64, p_0, p_1, p_2, p_3)
    } // 0xA7862BC5ED1DFD7E 0x37F5BD93 b323
    pub unsafe fn ugc_get_most_recently_played_content(
        p_0: Any,
        p_1: Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0x97A770BEEF227E2Bu64, p_0, p_1, p_2, p_3)
    } // 0x97A770BEEF227E2B 0x1CFB3F51 b323
    pub unsafe fn ugc_get_top_rated_content(
        p_0: Any,
        p_1: Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) -> bool {
        call_native!(bool, 0x5324A0E3E4CE3570u64, p_0, p_1, p_2, p_3)
    } // 0x5324A0E3E4CE3570 0x87D1E6BD b323
    pub unsafe fn ugc_cancel_query() {
        call_native!(Void, 0xE9B99B6853181409u64);
    } // 0xE9B99B6853181409 0x021D5A94 b323
    pub unsafe fn ugc_is_getting() -> bool {
        call_native!(bool, 0xD53ACDBEF24A46E8u64)
    } // 0xD53ACDBEF24A46E8 0x4908A514 b323
    pub unsafe fn ugc_has_get_finished() -> bool {
        call_native!(bool, 0x02ADA21EA2F6918Fu64)
    } // 0x02ADA21EA2F6918F 0x50296140 b323
    pub unsafe fn ugc_did_get_succeed() -> bool {
        call_native!(bool, 0x941E5306BCD7C2C7u64)
    } // 0x941E5306BCD7C2C7 0x3970B0DA b323
    pub unsafe fn ugc_was_query_force_cancelled() -> bool {
        call_native!(bool, 0xC87E740D9F3872CCu64)
    } // 0xC87E740D9F3872CC 0xC1487110 b323
    pub unsafe fn ugc_get_query_result() -> i32 {
        call_native!(i32, 0xEDF7F927136C224Bu64)
    } // 0xEDF7F927136C224B 0xCC2356E3 b323
    pub unsafe fn ugc_get_content_num() -> i32 {
        call_native!(i32, 0xE0A6138401BCB837u64)
    } // 0xE0A6138401BCB837 0x2DE69817 b323
    pub unsafe fn ugc_get_content_total() -> i32 {
        call_native!(i32, 0x769951E2455E2EB5u64)
    } // 0x769951E2455E2EB5 0x81BD8D3B b323
    pub unsafe fn ugc_get_content_hash() -> Hash {
        call_native!(Hash, 0x3A17A27D75C74887u64)
    } // 0x3A17A27D75C74887 0x8E1D8F78 b323
    pub unsafe fn ugc_clear_query_results() {
        call_native!(Void, 0xBA96394A0EECFA65u64);
    } // 0xBA96394A0EECFA65 0x0D35DD93 b323
    pub unsafe fn ugc_get_content_user_id(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0xCD67AD041A394C9Cu64, p_0)
    } // 0xCD67AD041A394C9C 0x8F3137E6 b323
    pub unsafe fn ugc_get_content_creator_gamer_handle(p_0: i32, p_1: *mut Any) -> bool {
        call_native!(bool, 0x584770794D758C18u64, p_0, p_1)
    } // 0x584770794D758C18  b323
    pub unsafe fn ugc_get_content_created_by_local_player(p_0: Any) -> bool {
        call_native!(bool, 0x8C8D2739BA44AF0Fu64, p_0)
    } // 0x8C8D2739BA44AF0F  b323
    pub unsafe fn ugc_get_content_user_name(p_0: Any) -> *const i8 {
        call_native!(*const i8, 0x703F12425ECA8BF5u64, p_0)
    } // 0x703F12425ECA8BF5 0xB9137BA7 b323
    pub unsafe fn ugc_get_content_is_using_sc_nickname(p_0: Any) -> bool {
        call_native!(bool, 0xAEAB987727C5A8A4u64, p_0)
    } // 0xAEAB987727C5A8A4 0x9FEEAA9C b323
    pub unsafe fn ugc_get_content_category(p_0: i32) -> i32 {
        call_native!(i32, 0xA7BAB11E7C9C6C5Au64, p_0)
    } // 0xA7BAB11E7C9C6C5A 0x5E8A7559 b323
    pub unsafe fn ugc_get_content_id(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0x55AA95F481D694D2u64, p_0)
    } // 0x55AA95F481D694D2 0x331AEABF b323
    pub unsafe fn ugc_get_root_content_id(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0xC0173D6BFF4E0348u64, p_0)
    } // 0xC0173D6BFF4E0348 0x0E5E8E5C b323
    pub unsafe fn ugc_get_content_name(p_0: Any) -> *const i8 {
        call_native!(*const i8, 0xBF09786A7FCAB582u64, p_0)
    } // 0xBF09786A7FCAB582 0xA5A0C695 b323
    pub unsafe fn ugc_get_content_description_hash(p_0: Any) -> i32 {
        call_native!(i32, 0x7CF0448787B23758u64, p_0)
    } // 0x7CF0448787B23758 0x91534C6E b323
    pub unsafe fn ugc_get_content_path(p_0: i32, p_1: i32) -> *const i8 {
        call_native!(*const i8, 0xBAF6BABF9E7CCC13u64, p_0, p_1)
    } // 0xBAF6BABF9E7CCC13 0x744A9EA5 b323
    pub unsafe fn ugc_get_content_updated_date(p_0: Any, p_1: *mut Any) {
        call_native!(Void, 0xCFD115B373C0DF63u64, p_0, p_1);
    } // 0xCFD115B373C0DF63 0xA19A238D b323
    pub unsafe fn ugc_get_content_file_version(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x37025B27D9B658B1u64, p_0, p_1)
    } // 0x37025B27D9B658B1 0xFF7D44E6 b323
    pub unsafe fn ugc_get_content_has_lo_res_photo(p_0: i32) -> bool {
        call_native!(bool, 0x1D610EB0FEA716D9u64, p_0)
    } // 0x1D610EB0FEA716D9  b323
    pub unsafe fn ugc_get_content_has_hi_res_photo(p_0: i32) -> bool {
        call_native!(bool, 0x7FCC39C46C3C03BDu64, p_0)
    } // 0x7FCC39C46C3C03BD  b323
    pub unsafe fn ugc_get_content_language(p_0: Any) -> i32 {
        call_native!(i32, 0x32DD916F3F7C9672u64, p_0)
    } // 0x32DD916F3F7C9672 0xA2C5BD9D b323
    pub unsafe fn ugc_get_content_is_published(p_0: Any) -> bool {
        call_native!(bool, 0x3054F114121C21EAu64, p_0)
    } // 0x3054F114121C21EA 0xA850DDE1 b323
    pub unsafe fn ugc_get_content_is_verified(p_0: Any) -> bool {
        call_native!(bool, 0xA9240A96C74CCA13u64, p_0)
    } // 0xA9240A96C74CCA13 0x8F6754AE b323
    pub unsafe fn ugc_get_content_rating(p_0: Any, p_1: Any) -> f32 {
        call_native!(f32, 0x1ACCFBA3D8DAB2EEu64, p_0, p_1)
    } // 0x1ACCFBA3D8DAB2EE 0x1E34953F b323
    pub unsafe fn ugc_get_content_rating_count(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x759299C5BB31D2A9u64, p_0, p_1)
    } // 0x759299C5BB31D2A9 0x771FE190 b323
    pub unsafe fn ugc_get_content_rating_positive_count(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x87E5C46C187FE0AEu64, p_0, p_1)
    } // 0x87E5C46C187FE0AE 0x3276D9D3 b323
    pub unsafe fn ugc_get_content_rating_negative_count(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x4E548C0D7AE39FF9u64, p_0, p_1)
    } // 0x4E548C0D7AE39FF9 0x41A0FB02 b323
    pub unsafe fn ugc_get_content_has_player_record(p_0: Any) -> bool {
        call_native!(bool, 0x70EA8DA57840F9BEu64, p_0)
    } // 0x70EA8DA57840F9BE 0x11DC0F27 b323
    pub unsafe fn ugc_get_content_has_player_bookmarked(p_0: Any) -> bool {
        call_native!(bool, 0x993CBE59D350D225u64, p_0)
    } // 0x993CBE59D350D225 0x0DEB3F5A b323
    pub unsafe fn ugc_request_content_data_from_index(p_0: i32, p_1: i32) -> i32 {
        call_native!(i32, 0x171DF6A0C07FB3DCu64, p_0, p_1)
    } // 0x171DF6A0C07FB3DC 0x84315226 b323
    pub unsafe fn ugc_request_content_data_from_params(
        content_type_name: *const i8,
        content_id: *const i8,
        p_2: i32,
        p_3: i32,
        p_4: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x7FD2990AF016795Eu64,
            content_type_name,
            content_id,
            p_2,
            p_3,
            p_4
        )
    } // 0x7FD2990AF016795E 0x38FC2EEB b323
    pub unsafe fn ugc_request_cached_description(p_0: i32) -> i32 {
        call_native!(i32, 0x5E0165278F6339EEu64, p_0)
    } // 0x5E0165278F6339EE 0x1C4F9FDB b323
    pub unsafe fn ugc_is_description_request_in_progress(p_0: Any) -> bool {
        call_native!(bool, 0x2D5DC831176D0114u64, p_0)
    } // 0x2D5DC831176D0114 0xA69AE16C b323
    pub unsafe fn ugc_has_description_request_finished(p_0: Any) -> bool {
        call_native!(bool, 0xEBFA8D50ADDC54C4u64, p_0)
    } // 0xEBFA8D50ADDC54C4 0xF50BC67A b323
    pub unsafe fn ugc_did_description_request_succeed(p_0: Any) -> bool {
        call_native!(bool, 0x162C23CA83ED0A62u64, p_0)
    } // 0x162C23CA83ED0A62 0xB3BBD241 b323
    pub unsafe fn ugc_get_cached_description(p_0: Any, p_1: Any) -> *const i8 {
        call_native!(*const i8, 0x40F7E66472DF3E5Cu64, p_0, p_1)
    } // 0x40F7E66472DF3E5C 0x70A2845C b323
    pub unsafe fn ugc_release_cached_description(p_0: Any) -> bool {
        call_native!(bool, 0x5A34CD9C3C5BEC44u64, p_0)
    } // 0x5A34CD9C3C5BEC44 0x346B506C b323
    pub unsafe fn ugc_release_all_cached_descriptions() {
        call_native!(Void, 0x68103E2247887242u64);
    } // 0x68103E2247887242 0x0095DB71 b323
    pub unsafe fn ugc_has_permission_to_write() -> bool {
        call_native!(bool, 0xC33E7CBC06EC1A8Du64)
    } // 0xC33E7CBC06EC1A8D  b3095
    pub unsafe fn ugc_publish(
        content_id: *const i8,
        base_content_id: *const i8,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0x1DE0F5F50D723CAAu64,
            content_id,
            base_content_id,
            content_type_name
        )
    } // 0x1DE0F5F50D723CAA 0xAD334B40 b323
    pub unsafe fn ugc_set_bookmarked(
        content_id: *const i8,
        bookmarked: bool,
        content_type_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0x274A1519DFC1094Fu64,
            content_id,
            bookmarked,
            content_type_name
        )
    } // 0x274A1519DFC1094F 0x980D45D7 b323
    pub unsafe fn ugc_set_deleted(p_0: *mut Any, p_1: bool, p_2: *const i8) -> bool {
        call_native!(bool, 0xD05D1A6C74DA3498u64, p_0, p_1, p_2)
    } // 0xD05D1A6C74DA3498 0x48CCC328 b323
    pub unsafe fn ugc_is_modifying() -> bool {
        call_native!(bool, 0x45E816772E93A9DBu64)
    } // 0x45E816772E93A9DB 0x8E664EFD b323
    pub unsafe fn ugc_has_modify_finished() -> bool {
        call_native!(bool, 0x299EF3C576773506u64)
    } // 0x299EF3C576773506 0x611E0BE2 b323
    pub unsafe fn ugc_did_modify_succeed() -> bool {
        call_native!(bool, 0x793FF272D5B365F4u64)
    } // 0x793FF272D5B365F4 0xF0211AC1 b323
    pub unsafe fn ugc_get_modify_result() -> i32 {
        call_native!(i32, 0x5A0A3D1A186A5508u64)
    } // 0x5A0A3D1A186A5508 0x1F0DD8AF b323
    pub unsafe fn ugc_clear_modify_result() {
        call_native!(Void, 0xA1E5E0204A6FCC70u64);
    } // 0xA1E5E0204A6FCC70 0x405ECA16 b323
    pub unsafe fn ugc_get_creators_by_user_id(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xB746D20B17F2A229u64, p_0, p_1)
    } // 0xB746D20B17F2A229 0x9567392B b323
    pub unsafe fn ugc_has_query_creators_finished() -> bool {
        call_native!(bool, 0x63B406D7884BFA95u64)
    } // 0x63B406D7884BFA95 0xF79FFF3C b323
    pub unsafe fn ugc_did_query_creators_succeed() -> bool {
        call_native!(bool, 0x4D02279C83BE69FEu64)
    } // 0x4D02279C83BE69FE 0xA7F3F82B b323
    pub unsafe fn ugc_get_creator_num() -> i32 {
        call_native!(i32, 0x597F8DBA9B206FC7u64)
    } // 0x597F8DBA9B206FC7 0x410C61D1 b323
    pub unsafe fn ugc_load_offline_query(p_0: Any) -> bool {
        call_native!(bool, 0x5CAE833B0EE0C500u64, p_0)
    } // 0x5CAE833B0EE0C500 0x0D4F845D b323
    pub unsafe fn ugc_clear_offline_query() {
        call_native!(Void, 0x61A885D3F7CFEE9Au64);
    } // 0x61A885D3F7CFEE9A 0xE13C1F7F b323
    pub unsafe fn ugc_set_query_data_from_offline(p_0: bool) {
        call_native!(Void, 0xF98DDE0A8ED09323u64, p_0);
    } // 0xF98DDE0A8ED09323 0x213C6D36 b323
    pub unsafe fn ugc_set_using_offline_content(p_0: bool) {
        call_native!(Void, 0xFD75DABC0957BF33u64, p_0);
    } // 0xFD75DABC0957BF33 0x511E6F50 b323
    pub unsafe fn ugc_is_language_supported(p_0: Any) -> bool {
        call_native!(bool, 0xF53E48461B71EECBu64, p_0)
    } // 0xF53E48461B71EECB 0xB4668B23 b323
    pub unsafe fn facebook_post_completed_heist(
        heist_name: *const i8,
        cash_earned: i32,
        xp_earned: i32,
    ) -> bool {
        call_native!(
            bool,
            0x098AB65B9ED9A9ECu64,
            heist_name,
            cash_earned,
            xp_earned
        )
    } // 0x098AB65B9ED9A9EC 0x30B51753 b323
    pub unsafe fn facebook_post_create_character() -> bool {
        call_native!(bool, 0xDC48473142545431u64)
    } // 0xDC48473142545431 0x02DAD93F b323
    pub unsafe fn facebook_post_completed_milestone(milestone_id: i32) -> bool {
        call_native!(bool, 0x0AE1F1653B554AB9u64, milestone_id)
    } // 0x0AE1F1653B554AB9 0x2D947814 b323
    pub unsafe fn facebook_has_post_completed() -> bool {
        call_native!(bool, 0x62B9FEC9A11F10EFu64)
    } // 0x62B9FEC9A11F10EF 0x37A28C26 b323
    pub unsafe fn facebook_did_post_succeed() -> bool {
        call_native!(bool, 0xA75E2B6733DA5142u64)
    } // 0xA75E2B6733DA5142 0x11E8B5CD b323
    pub unsafe fn facebook_can_post_to_facebook() -> bool {
        call_native!(bool, 0x43865688AE10F0D7u64)
    } // 0x43865688AE10F0D7 0x429AEAB3 b323
    pub unsafe fn texture_download_request(
        gamer_handle: *mut Any,
        file_path: *const i8,
        name: *const i8,
        p_3: bool,
    ) -> i32 {
        call_native!(
            i32,
            0x16160DA74A8E74A2u64,
            gamer_handle,
            file_path,
            name,
            p_3
        )
    } // 0x16160DA74A8E74A2 0xAD546CC3 b323
    pub unsafe fn title_texture_download_request(
        file_path: *const i8,
        name: *const i8,
        p_2: bool,
    ) -> i32 {
        call_native!(i32, 0x0B203B4AFDE53A4Fu64, file_path, name, p_2)
    } // 0x0B203B4AFDE53A4F 0x1856D008 b323
    pub unsafe fn ugc_texture_download_request(
        p_0: *const i8,
        p_1: i32,
        p_2: i32,
        p_3: i32,
        p_4: *const i8,
        p_5: bool,
    ) -> i32 {
        call_native!(i32, 0x308F96458B7087CCu64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x308F96458B7087CC 0x68C9AF69 b323
    pub unsafe fn texture_download_release(p_0: i32) {
        call_native!(Void, 0x487EB90B98E9FB19u64, p_0);
    } // 0x487EB90B98E9FB19 0xEE8D9E70 b323
    pub unsafe fn texture_download_has_failed(p_0: i32) -> bool {
        call_native!(bool, 0x5776ED562C134687u64, p_0)
    } // 0x5776ED562C134687 0xE4547765 b323
    pub unsafe fn texture_download_get_name(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0x3448505B6E35262Du64, p_0)
    } // 0x3448505B6E35262D 0xA40EF65A b323
    pub unsafe fn get_status_of_texture_download(p_0: i32) -> i32 {
        call_native!(i32, 0x8BD6C6DEA20E82C6u64, p_0)
    } // 0x8BD6C6DEA20E82C6 0x03225BA3 b323
    pub unsafe fn network_check_ros_link_wentdown_not_net() -> bool {
        call_native!(bool, 0x60EDD13EB3AC1FF3u64)
    } // 0x60EDD13EB3AC1FF3 0x4DEBC227 b323
    pub unsafe fn network_should_show_strict_nat_warning() -> bool {
        call_native!(bool, 0x82A2B386716608F1u64)
    } // 0x82A2B386716608F1  b393
    pub unsafe fn network_is_cable_connected() -> bool {
        call_native!(bool, 0xEFFB25453D8600F9u64)
    } // 0xEFFB25453D8600F9 0x5C065D55 b323
    pub unsafe fn network_have_scs_private_msg_priv() -> bool {
        call_native!(bool, 0x66B59CFFD78467AFu64)
    } // 0x66B59CFFD78467AF 0x0CA1167F b323
    pub unsafe fn network_have_ros_social_club_priv() -> bool {
        call_native!(bool, 0x606E4D3E3CCCF3EBu64)
    } // 0x606E4D3E3CCCF3EB 0x424C6E27 b323
    pub unsafe fn network_have_ros_banned_priv() -> bool {
        call_native!(bool, 0x8020A73847E0CA7Du64)
    } // 0x8020A73847E0CA7D 0xD3BBE42F b323
    pub unsafe fn network_have_ros_create_ticket_priv() -> bool {
        call_native!(bool, 0xA0AD7E2AF5349F61u64)
    } // 0xA0AD7E2AF5349F61 0xBDBB5948 b323
    pub unsafe fn network_have_ros_multiplayer_priv() -> bool {
        call_native!(bool, 0x5F91D5D0B36AA310u64)
    } // 0x5F91D5D0B36AA310 0x97287D68 b323
    pub unsafe fn network_have_ros_leaderboard_write_priv() -> bool {
        call_native!(bool, 0x422D396F80A96547u64)
    } // 0x422D396F80A96547 0xC6EA802E b323
    pub unsafe fn network_has_ros_privilege(index: i32) -> bool {
        call_native!(bool, 0xA699957E60D80214u64, index)
    } // 0xA699957E60D80214 0xFD261E30 b323
    pub unsafe fn network_has_ros_privilege_end_date(
        privilege: i32,
        ban_type: *mut i32,
        time_data: *mut Any,
    ) -> bool {
        call_native!(bool, 0xC22912B1D85F26B1u64, privilege, ban_type, time_data)
    } // 0xC22912B1D85F26B1 0x8570DD34 b323
    pub unsafe fn network_has_ros_privilege_played_last_gen() -> bool {
        call_native!(bool, 0x593570C289A77688u64)
    } // 0x593570C289A77688  b323
    pub unsafe fn network_has_ros_privilege_special_edition_content() -> bool {
        call_native!(bool, 0x91B87C55093DE351u64)
    } // 0x91B87C55093DE351  b323
    pub unsafe fn _network_has_ros_privilege_mp_text_communication() -> bool {
        call_native!(bool, 0xD9719341663C385Fu64)
    } // 0xD9719341663C385F  b3095
    pub unsafe fn _network_has_ros_privilege_mp_voice_communication() -> bool {
        call_native!(bool, 0x8956A309BE90057Cu64)
    } // 0x8956A309BE90057C  b3095
    pub unsafe fn network_start_communication_permissions_check(p_0: Any) -> i32 {
        call_native!(i32, 0x36391F397731595Du64, p_0)
    } // 0x36391F397731595D  b323
    pub unsafe fn network_start_user_content_permissions_check(net_handle: *mut Any) -> i32 {
        call_native!(i32, 0xDEB2B99A1AF1A2A6u64, net_handle)
    } // 0xDEB2B99A1AF1A2A6  b323
    pub unsafe fn network_skip_radio_reset_next_close() {
        call_native!(Void, 0x9465E683B12D3F6Bu64);
    } // 0x9465E683B12D3F6B 0x273C6180 b323
    pub unsafe fn network_skip_radio_reset_next_open() {
        call_native!(Void, 0xCA59CCAE5D01E4CEu64);
    } // 0xCA59CCAE5D01E4CE  b1734
    pub unsafe fn network_skip_radio_warning() -> bool {
        call_native!(bool, 0x659CF2EF7F550C4Fu64)
    } // 0x659CF2EF7F550C4F  b1011
    pub unsafe fn network_force_local_player_scar_sync() {
        call_native!(Void, 0xB7C7F6AD6424304Bu64);
    } // 0xB7C7F6AD6424304B 0x371BBA08 b323
    pub unsafe fn network_disable_leave_remote_ped_behind(toggle: bool) {
        call_native!(Void, 0xC505036A35AFD01Bu64, toggle);
    } // 0xC505036A35AFD01B 0xA100CC97 b323
    pub unsafe fn network_allow_remote_attachment_modification(entity: Entity, toggle: bool) {
        call_native!(Void, 0x267C78C60E806B9Au64, entity, toggle);
    } // 0x267C78C60E806B9A 0xBB2D33D3 b323
    pub unsafe fn network_show_chat_restriction_msc(player: Player) {
        call_native!(Void, 0x6BFF5F84102DF80Au64, player);
    } // 0x6BFF5F84102DF80A  b323
    pub unsafe fn network_show_psn_ugc_restriction() {
        call_native!(Void, 0x5C497525F803486Bu64);
    } // 0x5C497525F803486B  b323
    pub unsafe fn network_is_title_update_required() -> bool {
        call_native!(bool, 0x6FB7BB3607D27FA2u64)
    } // 0x6FB7BB3607D27FA2  b323
    pub unsafe fn network_quit_mp_to_desktop() {
        call_native!(Void, 0x45A83257ED02D9BCu64);
    } // 0x45A83257ED02D9BC  b323
    pub unsafe fn network_is_connected_via_relay(player: Player) -> bool {
        call_native!(bool, 0x16D3D49902F697BBu64, player)
    } // 0x16D3D49902F697BB  b323
    pub unsafe fn network_get_average_latency(player: Player) -> f32 {
        call_native!(f32, 0xD414BE129BB81B32u64, player)
    } // 0xD414BE129BB81B32  b323
    pub unsafe fn network_get_average_ping(player: Player) -> f32 {
        call_native!(f32, 0x0E3A041ED6AC2B45u64, player)
    } // 0x0E3A041ED6AC2B45  b323
    pub unsafe fn network_get_average_packet_loss(player: Player) -> f32 {
        call_native!(f32, 0x350C23949E43686Cu64, player)
    } // 0x350C23949E43686C  b323
    pub unsafe fn network_get_num_unacked_reliables(player: Player) -> i32 {
        call_native!(i32, 0xFF8FCF9FFC458A1Cu64, player)
    } // 0xFF8FCF9FFC458A1C  b323
    pub unsafe fn network_get_unreliable_resend_count(player: Player) -> i32 {
        call_native!(i32, 0x3765C3A3E8192E10u64, player)
    } // 0x3765C3A3E8192E10  b323
    pub unsafe fn network_get_highest_reliable_resend_count(player: Player) -> i32 {
        call_native!(i32, 0x52C1EADAF7B10302u64, player)
    } // 0x52C1EADAF7B10302  b323
    pub unsafe fn network_report_code_tamper() {
        call_native!(Void, 0x5626D9D6810730D5u64);
    } // 0x5626D9D6810730D5  b350
    pub unsafe fn network_get_last_entity_pos_received_over_network(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x64D779659BC37B19u64, entity)
    } // 0x64D779659BC37B19  b393
    pub unsafe fn network_get_last_player_pos_received_over_network(player: Player) -> Vector3 {
        call_native!(Vector3, 0x125E6D638B8605D4u64, player)
    } // 0x125E6D638B8605D4  b393
    pub unsafe fn network_get_last_vel_received_over_network(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x33DE49EDF4DDE77Au64, entity)
    } // 0x33DE49EDF4DDE77A  b1103
    pub unsafe fn network_get_predicted_velocity(
        entity: Entity,
        max_speed_to_predict: f32,
    ) -> Vector3 {
        call_native!(Vector3, 0xAA5FAFCD2C5F5E47u64, entity, max_speed_to_predict)
    } // 0xAA5FAFCD2C5F5E47  b1103
    pub unsafe fn network_dump_net_if_config() {
        call_native!(Void, 0xAEDF1BC1C133D6E3u64);
    } // 0xAEDF1BC1C133D6E3  b323
    pub unsafe fn network_get_signalling_info(p_0: *mut Any) {
        call_native!(Void, 0x2555CF7DA5473794u64, p_0);
    } // 0x2555CF7DA5473794  b323
    pub unsafe fn network_get_net_statistics_info(p_0: *mut Any) {
        call_native!(Void, 0x6FD992C4A1C1B986u64, p_0);
    } // 0x6FD992C4A1C1B986  b323
    pub unsafe fn network_get_player_account_id(player: Player) -> i32 {
        call_native!(i32, 0xDB663CC9FF3407A9u64, player)
    } // 0xDB663CC9FF3407A9  b1734
    pub unsafe fn network_ugc_nav(p_0: Any, p_1: Any) {
        call_native!(Void, 0xC1447451DDB512F0u64, p_0, p_1);
    } // 0xC1447451DDB512F0  b2372
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod object {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn create_object(
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        is_network: bool,
        b_script_host_obj: bool,
        dynamic: bool,
    ) -> Object {
        call_native!(
            Object,
            0x509D5878EB39E842u64,
            model_hash,
            x,
            y,
            z,
            is_network,
            b_script_host_obj,
            dynamic
        )
    } // 0x509D5878EB39E842 0x2F7AA05C b323
    pub unsafe fn create_object_no_offset(
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        is_network: bool,
        b_script_host_obj: bool,
        dynamic: bool,
    ) -> Object {
        call_native!(
            Object,
            0x9A294B2138ABB884u64,
            model_hash,
            x,
            y,
            z,
            is_network,
            b_script_host_obj,
            dynamic
        )
    } // 0x9A294B2138ABB884 0x58040420 b323
    pub unsafe fn delete_object(object: *mut Object) {
        call_native!(Void, 0x539E0AE3E6634B9Fu64, object);
    } // 0x539E0AE3E6634B9F 0xD6EF9DA7 b323
    pub unsafe fn place_object_on_ground_properly(object: Object) -> bool {
        call_native!(bool, 0x58A850EAEE20FAA3u64, object)
    } // 0x58A850EAEE20FAA3 0x8F95A20B b323
    pub unsafe fn place_object_on_ground_or_object_properly(object: Object) -> bool {
        call_native!(bool, 0xD76EEEF746057FD6u64, object)
    } // 0xD76EEEF746057FD6  b505
    pub unsafe fn rotate_object(object: Object, p_1: f32, p_2: f32, p_3: bool) -> bool {
        call_native!(bool, 0xAFE24E4D29249E4Au64, object, p_1, p_2, p_3)
    } // 0xAFE24E4D29249E4A  b1734
    pub unsafe fn slide_object(
        object: Object,
        to_x: f32,
        to_y: f32,
        to_z: f32,
        speed_x: f32,
        speed_y: f32,
        speed_z: f32,
        collision: bool,
    ) -> bool {
        call_native!(
            bool,
            0x2FDFF4107B8C1147u64,
            object,
            to_x,
            to_y,
            to_z,
            speed_x,
            speed_y,
            speed_z,
            collision
        )
    } // 0x2FDFF4107B8C1147 0x63BFA7A0 b323
    pub unsafe fn set_object_targettable(object: Object, targettable: bool, p_2: Any) {
        call_native!(Void, 0x8A7391690F5AFD81u64, object, targettable, p_2);
    } // 0x8A7391690F5AFD81 0x3F88CD86 b323
    pub unsafe fn set_object_force_vehicles_to_avoid(object: Object, toggle: bool) {
        call_native!(Void, 0x77F33F2CCF64B3AAu64, object, toggle);
    } // 0x77F33F2CCF64B3AA 0x483C5C88 b323
    pub unsafe fn get_closest_object_of_type(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        is_mission: bool,
        p_6: bool,
        p_7: bool,
    ) -> Object {
        call_native!(
            Object,
            0xE143FA2249364369u64,
            x,
            y,
            z,
            radius,
            model_hash,
            is_mission,
            p_6,
            p_7
        )
    } // 0xE143FA2249364369 0x45619B33 b323
    pub unsafe fn has_object_been_broken(object: Object, p_1: Any) -> bool {
        call_native!(bool, 0x8ABFB70C49CC43E2u64, object, p_1)
    } // 0x8ABFB70C49CC43E2 0xFE21F891 b323
    pub unsafe fn has_closest_object_of_type_been_broken(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        model_hash: Hash,
        p_5: Any,
    ) -> bool {
        call_native!(
            bool,
            0x761B0E69AC4D007Eu64,
            p_0,
            p_1,
            p_2,
            p_3,
            model_hash,
            p_5
        )
    } // 0x761B0E69AC4D007E 0x6FC0353D b323
    pub unsafe fn has_closest_object_of_type_been_completely_destroyed(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        p_5: bool,
    ) -> bool {
        call_native!(
            bool,
            0x46494A2475701343u64,
            x,
            y,
            z,
            radius,
            model_hash,
            p_5
        )
    } // 0x46494A2475701343 0x7DB578DD b323
    pub unsafe fn get_has_object_been_completely_destroyed(p_0: Any) -> bool {
        call_native!(bool, 0x2542269291C6AC84u64, p_0)
    } // 0x2542269291C6AC84  b1180
    pub unsafe fn get_offset_from_coord_and_heading_in_world_coords(
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        heading: f32,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x163E252DE035A133u64,
            x_pos,
            y_pos,
            z_pos,
            heading,
            x_offset,
            y_offset,
            z_offset
        )
    } // 0x163E252DE035A133 0x87A42A12 b323
    pub unsafe fn get_coords_and_rotation_of_closest_object_of_type(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        out_position: *mut Vector3,
        out_rotation: *mut Vector3,
        rotation_order: i32,
    ) -> bool {
        call_native!(
            bool,
            0x163F8B586BC95F2Au64,
            x,
            y,
            z,
            radius,
            model_hash,
            out_position,
            out_rotation,
            rotation_order
        )
    } // 0x163F8B586BC95F2A 0x65213FC3 b323
    pub unsafe fn set_state_of_closest_door_of_type(
        _type: Hash,
        x: f32,
        y: f32,
        z: f32,
        locked: bool,
        heading: f32,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0xF82D8F1926A02C3Du64,
            _type,
            x,
            y,
            z,
            locked,
            heading,
            p_6
        );
    } // 0xF82D8F1926A02C3D 0x38C951A4 b323
    pub unsafe fn get_state_of_closest_door_of_type(
        _type: Hash,
        x: f32,
        y: f32,
        z: f32,
        locked: *mut Bool,
        heading: *mut f32,
    ) {
        call_native!(Void, 0xEDC1A5B84AEF33FFu64, _type, x, y, z, locked, heading);
    } // 0xEDC1A5B84AEF33FF 0x4B44A83D b323
    pub unsafe fn set_locked_unstreamed_in_door_of_type(
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        locked: bool,
        x_rot_mult: f32,
        y_rot_mult: f32,
        z_rot_mult: f32,
    ) {
        call_native!(
            Void,
            0x9B12F9A24FABEDB0u64,
            model_hash,
            x,
            y,
            z,
            locked,
            x_rot_mult,
            y_rot_mult,
            z_rot_mult
        );
    } // 0x9B12F9A24FABEDB0 0x4E0A260B b323
    pub unsafe fn play_object_auto_start_anim(p_0: Any) {
        call_native!(Void, 0x006E4B040ED37EC3u64, p_0);
    } // 0x006E4B040ED37EC3  b1868
    pub unsafe fn add_door_to_system(
        door_hash: Hash,
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        p_5: bool,
        script_door: bool,
        is_local: bool,
    ) {
        call_native!(
            Void,
            0x6F8838D03D1DC226u64,
            door_hash,
            model_hash,
            x,
            y,
            z,
            p_5,
            script_door,
            is_local
        );
    } // 0x6F8838D03D1DC226 0x9D2D778D b323
    pub unsafe fn remove_door_from_system(door_hash: Hash, p_1: Any) {
        call_native!(Void, 0x464D8E1427156FE4u64, door_hash, p_1);
    } // 0x464D8E1427156FE4 0x00253286 b323
    pub unsafe fn door_system_set_door_state(
        door_hash: Hash,
        state: i32,
        request_door: bool,
        force_update: bool,
    ) {
        call_native!(
            Void,
            0x6BAB9442830C7F53u64,
            door_hash,
            state,
            request_door,
            force_update
        );
    } // 0x6BAB9442830C7F53 0xDF83DB47 b323
    pub unsafe fn door_system_get_door_state(door_hash: Hash) -> i32 {
        call_native!(i32, 0x160AA1B32F6139B8u64, door_hash)
    } // 0x160AA1B32F6139B8 0xD42A41C2 b323
    pub unsafe fn door_system_get_door_pending_state(door_hash: Hash) -> i32 {
        call_native!(i32, 0x4BC2854478F3A749u64, door_hash)
    } // 0x4BC2854478F3A749 0xD649B7E1 b323
    pub unsafe fn door_system_set_automatic_rate(
        door_hash: Hash,
        rate: f32,
        request_door: bool,
        force_update: bool,
    ) {
        call_native!(
            Void,
            0x03C27E13B42A0E82u64,
            door_hash,
            rate,
            request_door,
            force_update
        );
    } // 0x03C27E13B42A0E82 0x4F44AF21 b323
    pub unsafe fn door_system_set_automatic_distance(
        door_hash: Hash,
        distance: f32,
        request_door: bool,
        force_update: bool,
    ) {
        call_native!(
            Void,
            0x9BA001CB45CBF627u64,
            door_hash,
            distance,
            request_door,
            force_update
        );
    } // 0x9BA001CB45CBF627 0x47531446 b323
    pub unsafe fn door_system_set_open_ratio(
        door_hash: Hash,
        ajar: f32,
        request_door: bool,
        force_update: bool,
    ) {
        call_native!(
            Void,
            0xB6E6FBA95C7324ACu64,
            door_hash,
            ajar,
            request_door,
            force_update
        );
    } // 0xB6E6FBA95C7324AC 0x34883DE3 b323
    pub unsafe fn door_system_get_automatic_distance(door_hash: Hash) -> f32 {
        call_native!(f32, 0xE851471AEFC3374Fu64, door_hash)
    } // 0xE851471AEFC3374F  b1868
    pub unsafe fn door_system_get_open_ratio(door_hash: Hash) -> f32 {
        call_native!(f32, 0x65499865FCA6E5ECu64, door_hash)
    } // 0x65499865FCA6E5EC 0xB74C3BD7 b323
    pub unsafe fn door_system_set_spring_removed(
        door_hash: Hash,
        removed: bool,
        request_door: bool,
        force_update: bool,
    ) {
        call_native!(
            Void,
            0xC485E07E4F0B7958u64,
            door_hash,
            removed,
            request_door,
            force_update
        );
    } // 0xC485E07E4F0B7958 0xB4A9A558 b323
    pub unsafe fn door_system_set_hold_open(door_hash: Hash, toggle: bool) {
        call_native!(Void, 0xD9B71952F78A2640u64, door_hash, toggle);
    } // 0xD9B71952F78A2640 0xECE58AE0 b323
    pub unsafe fn door_system_set_door_open_for_races(door_hash: Hash, p_1: bool) {
        call_native!(Void, 0xA85A21582451E951u64, door_hash, p_1);
    } // 0xA85A21582451E951 0xF736227C b323
    pub unsafe fn is_door_registered_with_system(door_hash: Hash) -> bool {
        call_native!(bool, 0xC153C43EA202C8C1u64, door_hash)
    } // 0xC153C43EA202C8C1 0x5AFCD8A1 b323
    pub unsafe fn is_door_closed(door_hash: Hash) -> bool {
        call_native!(bool, 0xC531EE8A1145A149u64, door_hash)
    } // 0xC531EE8A1145A149 0x48659CD7 b323
    pub unsafe fn open_all_barriers_for_race(p_0: bool) {
        call_native!(Void, 0xC7F29CA00F46350Eu64, p_0);
    } // 0xC7F29CA00F46350E 0x9BF33E41 b323
    pub unsafe fn close_all_barriers_for_race() {
        call_native!(Void, 0x701FDA1E82076BA4u64);
    } // 0x701FDA1E82076BA4 0xF592AD10 b323
    pub unsafe fn door_system_get_is_physics_loaded(p_0: Any) -> bool {
        call_native!(bool, 0xDF97CDD4FC08FD34u64, p_0)
    } // 0xDF97CDD4FC08FD34 0x17FF9393 b323
    pub unsafe fn door_system_find_existing_door(
        x: f32,
        y: f32,
        z: f32,
        model_hash: Hash,
        out_door_hash: *mut Hash,
    ) -> bool {
        call_native!(
            bool,
            0x589F80B325CC82C5u64,
            x,
            y,
            z,
            model_hash,
            out_door_hash
        )
    } // 0x589F80B325CC82C5 0xE9AE494F b323
    pub unsafe fn is_garage_empty(garage_hash: Hash, p_1: bool, p_2: i32) -> bool {
        call_native!(bool, 0x90E47239EA1980B8u64, garage_hash, p_1, p_2)
    } // 0x90E47239EA1980B8 0xA8B37DEA b323
    pub unsafe fn is_player_entirely_inside_garage(
        garage_hash: Hash,
        player: Player,
        p_2: f32,
        p_3: i32,
    ) -> bool {
        call_native!(bool, 0x024A60DEB0EA69F0u64, garage_hash, player, p_2, p_3)
    } // 0x024A60DEB0EA69F0 0xC33ED360 b323
    pub unsafe fn is_player_partially_inside_garage(
        garage_hash: Hash,
        player: Player,
        p_2: i32,
    ) -> bool {
        call_native!(bool, 0x1761DC5D8471CBAAu64, garage_hash, player, p_2)
    } // 0x1761DC5D8471CBAA 0x41924877 b323
    pub unsafe fn are_entities_entirely_inside_garage(
        garage_hash: Hash,
        p_1: bool,
        p_2: bool,
        p_3: bool,
        p_4: Any,
    ) -> bool {
        call_native!(bool, 0x85B6C850546FDDE2u64, garage_hash, p_1, p_2, p_3, p_4)
    } // 0x85B6C850546FDDE2 0x4BD59750 b323
    pub unsafe fn is_any_entity_entirely_inside_garage(
        garage_hash: Hash,
        p_1: bool,
        p_2: bool,
        p_3: bool,
        p_4: Any,
    ) -> bool {
        call_native!(bool, 0x673ED815D6E323B7u64, garage_hash, p_1, p_2, p_3, p_4)
    } // 0x673ED815D6E323B7 0x7B44D659 b323
    pub unsafe fn is_object_entirely_inside_garage(
        garage_hash: Hash,
        entity: Entity,
        p_2: f32,
        p_3: i32,
    ) -> bool {
        call_native!(bool, 0x372EF6699146A1E4u64, garage_hash, entity, p_2, p_3)
    } // 0x372EF6699146A1E4 0x142C8F76 b323
    pub unsafe fn is_object_partially_inside_garage(
        garage_hash: Hash,
        entity: Entity,
        p_2: i32,
    ) -> bool {
        call_native!(bool, 0xF0EED5A6BC7B237Au64, garage_hash, entity, p_2)
    } // 0xF0EED5A6BC7B237A 0x95A9AB2B b323
    pub unsafe fn clear_garage(garage_hash: Hash, is_network: bool) {
        call_native!(Void, 0xDA05194260CDCDF9u64, garage_hash, is_network);
    } // 0xDA05194260CDCDF9  b678
    pub unsafe fn clear_objects_inside_garage(
        garage_hash: Hash,
        vehicles: bool,
        peds: bool,
        objects: bool,
        is_network: bool,
    ) {
        call_native!(
            Void,
            0x190428512B240692u64,
            garage_hash,
            vehicles,
            peds,
            objects,
            is_network
        );
    } // 0x190428512B240692 0xA565E27E b323
    pub unsafe fn disable_tidying_up_in_garage(id: i32, toggle: bool) {
        call_native!(Void, 0x659F9D71F52843F8u64, id, toggle);
    } // 0x659F9D71F52843F8  b1290
    pub unsafe fn enable_saving_in_garage(garage_hash: Hash, toggle: bool) {
        call_native!(Void, 0xF2E1A7133DD356A6u64, garage_hash, toggle);
    } // 0xF2E1A7133DD356A6 0x43BB7E48 b323
    pub unsafe fn close_safehouse_garages() {
        call_native!(Void, 0x66A49D021870FE88u64);
    } // 0x66A49D021870FE88 0x6158959E b323
    pub unsafe fn does_object_of_type_exist_at_coords(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        hash: Hash,
        p_5: bool,
    ) -> bool {
        call_native!(bool, 0xBFA48E2FF417213Fu64, x, y, z, radius, hash, p_5)
    } // 0xBFA48E2FF417213F 0x23FF2BA4 b323
    pub unsafe fn is_point_in_angled_area(
        x_pos: f32,
        y_pos: f32,
        z_pos: f32,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        debug: bool,
        include_z: bool,
    ) -> bool {
        call_native!(
            bool,
            0x2A70BAE8883E4C81u64,
            x_pos,
            y_pos,
            z_pos,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            debug,
            include_z
        )
    } // 0x2A70BAE8883E4C81 0x73BCFFDC b323
    pub unsafe fn set_object_allow_low_lod_buoyancy(object: Object, toggle: bool) {
        call_native!(Void, 0x4D89D607CB3DD1D2u64, object, toggle);
    } // 0x4D89D607CB3DD1D2 0x19B17769 b323
    pub unsafe fn set_object_physics_params(
        object: Object,
        weight: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        gravity: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        p_1_0: f32,
        buoyancy: f32,
    ) {
        call_native!(
            Void,
            0xF6DF6E90DE7DF90Fu64,
            object,
            weight,
            p_2,
            p_3,
            p_4,
            p_5,
            gravity,
            p_7,
            p_8,
            p_9,
            p_1_0,
            buoyancy
        );
    } // 0xF6DF6E90DE7DF90F 0xE8D11C58 b323
    pub unsafe fn get_object_fragment_damage_health(p_0: Any, p_1: bool) -> f32 {
        call_native!(f32, 0xB6FBFD079B8D0596u64, p_0, p_1)
    } // 0xB6FBFD079B8D0596 0xF0B330AD b323
    pub unsafe fn set_activate_object_physics_as_soon_as_it_is_unfrozen(
        object: Object,
        toggle: bool,
    ) {
        call_native!(Void, 0x406137F8EF90EAF5u64, object, toggle);
    } // 0x406137F8EF90EAF5 0x3E263AE1 b323
    pub unsafe fn is_any_object_near_point(x: f32, y: f32, z: f32, range: f32, p_4: bool) -> bool {
        call_native!(bool, 0x397DC58FF00298D1u64, x, y, z, range, p_4)
    } // 0x397DC58FF00298D1 0xE9E46941 b323
    pub unsafe fn is_object_near_point(
        object_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        range: f32,
    ) -> bool {
        call_native!(bool, 0x8C90FE4B381BA60Au64, object_hash, x, y, z, range)
    } // 0x8C90FE4B381BA60A 0x50A62C43 b323
    pub unsafe fn remove_object_high_detail_model(object: Object) {
        call_native!(Void, 0x4A39DB43E47CF3AAu64, object);
    } // 0x4A39DB43E47CF3AA 0xE3261B35 b323
    pub unsafe fn break_object_fragment_child(p_0: Object, p_1: Any, p_2: bool) {
        call_native!(Void, 0xE7E4C198B0185900u64, p_0, p_1, p_2);
    } // 0xE7E4C198B0185900 0x1E82C2AE b323
    pub unsafe fn damage_object_fragment_child(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xE05F6AEEFEB0BB02u64, p_0, p_1, p_2);
    } // 0xE05F6AEEFEB0BB02  b1180
    pub unsafe fn fix_object_fragment(object: Object) {
        call_native!(Void, 0xF9C1681347C8BD15u64, object);
    } // 0xF9C1681347C8BD15  b323
    pub unsafe fn track_object_visibility(object: Object) {
        call_native!(Void, 0xB252BC036B525623u64, object);
    } // 0xB252BC036B525623 0x46D06B9A b323
    pub unsafe fn is_object_visible(object: Object) -> bool {
        call_native!(bool, 0x8B32ACE6326A7546u64, object)
    } // 0x8B32ACE6326A7546 0xF4FD8AE4 b323
    pub unsafe fn set_object_is_special_golfball(object: Object, toggle: bool) {
        call_native!(Void, 0xC6033D32241F6FB5u64, object, toggle);
    } // 0xC6033D32241F6FB5 0xF4A1A14A b323
    pub unsafe fn set_object_takes_damage_from_colliding_with_buildings(p_0: Any, p_1: bool) {
        call_native!(Void, 0xEB6F1A9B5510A5D2u64, p_0, p_1);
    } // 0xEB6F1A9B5510A5D2 0xAF016CC1 b323
    pub unsafe fn allow_damage_events_for_non_networked_objects(value: bool) {
        call_native!(Void, 0xABDABF4E1EDECBFAu64, value);
    } // 0xABDABF4E1EDECBFA  b1365
    pub unsafe fn set_cutscenes_weapon_flashlight_on_this_frame(object: Object, toggle: bool) {
        call_native!(Void, 0xBCE595371A5FBAAFu64, object, toggle);
    } // 0xBCE595371A5FBAAF 0x3A68AA46 b323
    pub unsafe fn get_rayfire_map_object(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        name: *const i8,
    ) -> Object {
        call_native!(Object, 0xB48FCED898292E52u64, x, y, z, radius, name)
    } // 0xB48FCED898292E52 0xA286DE96 b323
    pub unsafe fn set_state_of_rayfire_map_object(object: Object, state: i32) {
        call_native!(Void, 0x5C29F698D404C5E1u64, object, state);
    } // 0x5C29F698D404C5E1 0x21F51560 b323
    pub unsafe fn get_state_of_rayfire_map_object(object: Object) -> i32 {
        call_native!(i32, 0x899BA936634A322Eu64, object)
    } // 0x899BA936634A322E 0xF1B8817A b323
    pub unsafe fn does_rayfire_map_object_exist(object: Object) -> bool {
        call_native!(bool, 0x52AF537A0C5B8AADu64, object)
    } // 0x52AF537A0C5B8AAD 0xE08C834D b323
    pub unsafe fn get_rayfire_map_object_anim_phase(object: Object) -> f32 {
        call_native!(f32, 0x260EE4FDBDF4DB01u64, object)
    } // 0x260EE4FDBDF4DB01 0x020497DE b323
    pub unsafe fn create_pickup(
        pickup_hash: Hash,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        p_4: i32,
        value: i32,
        p_6: bool,
        model_hash: Hash,
    ) -> Pickup {
        call_native!(
            Pickup,
            0xFBA08C503DD5FA58u64,
            pickup_hash,
            pos_x,
            pos_y,
            pos_z,
            p_4,
            value,
            p_6,
            model_hash
        )
    } // 0xFBA08C503DD5FA58 0x5E14DF68 b323
    pub unsafe fn create_pickup_rotate(
        pickup_hash: Hash,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        flag: i32,
        amount: i32,
        p_9: Any,
        p_1_0: bool,
        model_hash: Hash,
    ) -> Pickup {
        call_native!(
            Pickup,
            0x891804727E0A98B7u64,
            pickup_hash,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            flag,
            amount,
            p_9,
            p_1_0,
            model_hash
        )
    } // 0x891804727E0A98B7 0xF015BFE2 b323
    pub unsafe fn force_pickup_rotate_face_up() {
        call_native!(Void, 0x394CD08E31313C28u64);
    } // 0x394CD08E31313C28  b944
    pub unsafe fn set_custom_pickup_weapon_hash(pickup_hash: Hash, pickup: Pickup) {
        call_native!(Void, 0x826D1EE4D1CAFC78u64, pickup_hash, pickup);
    } // 0x826D1EE4D1CAFC78  b505
    pub unsafe fn create_ambient_pickup(
        pickup_hash: Hash,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        flags: i32,
        value: i32,
        model_hash: Hash,
        p_7: bool,
        p_8: bool,
    ) -> Object {
        call_native!(
            Object,
            0x673966A0C0FD7171u64,
            pickup_hash,
            pos_x,
            pos_y,
            pos_z,
            flags,
            value,
            model_hash,
            p_7,
            p_8
        )
    } // 0x673966A0C0FD7171 0x17B99CE7 b323
    pub unsafe fn create_non_networked_ambient_pickup(
        pickup_hash: Hash,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        flags: i32,
        value: i32,
        model_hash: Hash,
        p_7: bool,
        p_8: bool,
    ) -> Object {
        call_native!(
            Object,
            0x9C93764223E29C50u64,
            pickup_hash,
            pos_x,
            pos_y,
            pos_z,
            flags,
            value,
            model_hash,
            p_7,
            p_8
        )
    } // 0x9C93764223E29C50  b2372
    pub unsafe fn block_players_for_ambient_pickup(p_0: Any, p_1: Any) {
        call_native!(Void, 0x1E3F1B1B891A2AAAu64, p_0, p_1);
    } // 0x1E3F1B1B891A2AAA  b573
    pub unsafe fn create_portable_pickup(
        pickup_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        place_on_ground: bool,
        model_hash: Hash,
    ) -> Object {
        call_native!(
            Object,
            0x2EAF1FDB2FB55698u64,
            pickup_hash,
            x,
            y,
            z,
            place_on_ground,
            model_hash
        )
    } // 0x2EAF1FDB2FB55698 0x8C886BE5 b323
    pub unsafe fn create_non_networked_portable_pickup(
        pickup_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        place_on_ground: bool,
        model_hash: Hash,
    ) -> Object {
        call_native!(
            Object,
            0x125494B98A21AAF7u64,
            pickup_hash,
            x,
            y,
            z,
            place_on_ground,
            model_hash
        )
    } // 0x125494B98A21AAF7 0x56A02502 b323
    pub unsafe fn attach_portable_pickup_to_ped(pickup_object: Object, ped: Ped) {
        call_native!(Void, 0x8DC39368BDD57755u64, pickup_object, ped);
    } // 0x8DC39368BDD57755 0x184F6AB3 b323
    pub unsafe fn detach_portable_pickup_from_ped(pickup_object: Object) {
        call_native!(Void, 0xCF463D1E9A0AECB1u64, pickup_object);
    } // 0xCF463D1E9A0AECB1 0x1D094562 b323
    pub unsafe fn force_portable_pickup_last_accessible_position_setting(object: Object) {
        call_native!(Void, 0x5CE2E45A5CE2E45Au64, object);
    } // 0x5CE2E45A5CE2E45A  b2545
    pub unsafe fn hide_portable_pickup_when_detached(pickup_object: Object, toggle: bool) {
        call_native!(Void, 0x867458251D47CCB2u64, pickup_object, toggle);
    } // 0x867458251D47CCB2 0x1F63B042 b463
    pub unsafe fn set_max_num_portable_pickups_carried_by_player(model_hash: Hash, number: i32) {
        call_native!(Void, 0x0BF3B3BD47D79C08u64, model_hash, number);
    } // 0x0BF3B3BD47D79C08 0x7EFBA039 b323
    pub unsafe fn set_local_player_can_collect_portable_pickups(toggle: bool) {
        call_native!(Void, 0x78857FC65CADB909u64, toggle);
    } // 0x78857FC65CADB909 0xA3CDF152 b323
    pub unsafe fn get_safe_pickup_coords(x: f32, y: f32, z: f32, p_3: f32, p_4: f32) -> Vector3 {
        call_native!(Vector3, 0x6E16BC2503FF1FF0u64, x, y, z, p_3, p_4)
    } // 0x6E16BC2503FF1FF0 0x618B5F67 b323
    pub unsafe fn add_extended_pickup_probe_area(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0xD4A7A435B3710D05u64, x, y, z, radius);
    } // 0xD4A7A435B3710D05  b1290
    pub unsafe fn clear_extended_pickup_probe_areas() {
        call_native!(Void, 0xB7C6D80FB371659Au64);
    } // 0xB7C6D80FB371659A  b1290
    pub unsafe fn get_pickup_coords(pickup: Pickup) -> Vector3 {
        call_native!(Vector3, 0x225B8B35C88029B3u64, pickup)
    } // 0x225B8B35C88029B3 0xC2E1E2C5 b323
    pub unsafe fn suppress_pickup_sound_for_pickup(p_0: Any, p_1: Any) {
        call_native!(Void, 0x8DCA505A5C196F05u64, p_0, p_1);
    } // 0x8DCA505A5C196F05  b1180
    pub unsafe fn remove_all_pickups_of_type(pickup_hash: Hash) {
        call_native!(Void, 0x27F9D613092159CFu64, pickup_hash);
    } // 0x27F9D613092159CF 0x40062C53 b323
    pub unsafe fn has_pickup_been_collected(pickup: Pickup) -> bool {
        call_native!(bool, 0x80EC48E6679313F9u64, pickup)
    } // 0x80EC48E6679313F9 0x0BE5CCED b323
    pub unsafe fn remove_pickup(pickup: Pickup) {
        call_native!(Void, 0x3288D8ACAECD2AB2u64, pickup);
    } // 0x3288D8ACAECD2AB2 0x64A7A0E0 b323
    pub unsafe fn create_money_pickups(
        x: f32,
        y: f32,
        z: f32,
        value: i32,
        amount: i32,
        model: Hash,
    ) {
        call_native!(Void, 0x0589B5E791CE9B2Bu64, x, y, z, value, amount, model);
    } // 0x0589B5E791CE9B2B 0x36C9A5EA b323
    pub unsafe fn does_pickup_exist(pickup: Pickup) -> bool {
        call_native!(bool, 0xAFC1CA75AD4074D1u64, pickup)
    } // 0xAFC1CA75AD4074D1 0x9C6DA0B3 b323
    pub unsafe fn does_pickup_object_exist(pickup_object: Object) -> bool {
        call_native!(bool, 0xD9EFB6DBF7DAAEA3u64, pickup_object)
    } // 0xD9EFB6DBF7DAAEA3 0xE0B32108 b323
    pub unsafe fn get_pickup_object(pickup: Pickup) -> Object {
        call_native!(Object, 0x5099BC55630B25AEu64, pickup)
    } // 0x5099BC55630B25AE 0x6052E62E b323
    pub unsafe fn is_object_a_pickup(object: Object) -> bool {
        call_native!(bool, 0xFC481C641EBBD27Du64, object)
    } // 0xFC481C641EBBD27D 0x93D23399 b1365
    pub unsafe fn is_object_a_portable_pickup(object: Object) -> bool {
        call_native!(bool, 0x0378C08504160D0Du64, object)
    } // 0x0378C08504160D0D 0x0F0E94FF b323
    pub unsafe fn does_pickup_of_type_exist_in_area(
        pickup_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> bool {
        call_native!(bool, 0xF9C36251F6E48E33u64, pickup_hash, x, y, z, radius)
    } // 0xF9C36251F6E48E33 0xF139681B b323
    pub unsafe fn set_pickup_regeneration_time(pickup: Pickup, duration: i32) {
        call_native!(Void, 0x78015C9B4B3ECC9Du64, pickup, duration);
    } // 0x78015C9B4B3ECC9D 0xAB11267D b323
    pub unsafe fn force_pickup_regenerate(p_0: Any) {
        call_native!(Void, 0x758A5C1B3B1E1990u64, p_0);
    } // 0x758A5C1B3B1E1990  b1011
    pub unsafe fn set_player_permitted_to_collect_pickups_of_type(
        player: Player,
        pickup_hash: Hash,
        toggle: bool,
    ) {
        call_native!(Void, 0x616093EC6B139DD9u64, player, pickup_hash, toggle);
    } // 0x616093EC6B139DD9 0x7FADB4B9 b323
    pub unsafe fn set_local_player_permitted_to_collect_pickups_with_model(
        model_hash: Hash,
        toggle: bool,
    ) {
        call_native!(Void, 0x88EAEC617CD26926u64, model_hash, toggle);
    } // 0x88EAEC617CD26926 0x3A8F1BF7 b323
    pub unsafe fn allow_all_players_to_collect_pickups_of_type(pickup_hash: Hash) {
        call_native!(Void, 0xFDC07C58E8AAB715u64, pickup_hash);
    } // 0xFDC07C58E8AAB715  b1734
    pub unsafe fn set_team_pickup_object(object: Object, p_1: Any, p_2: bool) {
        call_native!(Void, 0x53E0DF1A2A3CF0CAu64, object, p_1, p_2);
    } // 0x53E0DF1A2A3CF0CA 0x77687DC5 b323
    pub unsafe fn prevent_collection_of_portable_pickup(object: Object, p_1: bool, p_2: bool) {
        call_native!(Void, 0x92AEFB5F6E294023u64, object, p_1, p_2);
    } // 0x92AEFB5F6E294023 0xCBB5F9B6 b323
    pub unsafe fn set_pickup_object_glow_when_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x27F248C3FEBFAAD3u64, pickup, toggle);
    } // 0x27F248C3FEBFAAD3  b2372
    pub unsafe fn set_pickup_glow_offset(pickup: Pickup, p_1: f32) {
        call_native!(Void, 0x0596843B34B95CE5u64, pickup, p_1);
    } // 0x0596843B34B95CE5  b505
    pub unsafe fn set_pickup_object_glow_offset(pickup: Pickup, p_1: f32, p_2: bool) {
        call_native!(Void, 0xA08FE5E49BDC39DDu64, pickup, p_1, p_2);
    } // 0xA08FE5E49BDC39DD 0x276A7807 b323
    pub unsafe fn set_object_glow_in_same_team(pickup: Pickup) {
        call_native!(Void, 0x62454A641B41F3C5u64, pickup);
    } // 0x62454A641B41F3C5  b678
    pub unsafe fn set_pickup_object_arrow_marker(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x39A5FB7EAF150840u64, pickup, toggle);
    } // 0x39A5FB7EAF150840  b678
    pub unsafe fn allow_pickup_arrow_marker_when_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x834344A414C7C85Du64, pickup, toggle);
    } // 0x834344A414C7C85D  b2372
    pub unsafe fn get_default_ammo_for_weapon_pickup(pickup_hash: Hash) -> i32 {
        call_native!(i32, 0xDB41D07A45A6D4B7u64, pickup_hash)
    } // 0xDB41D07A45A6D4B7 0x000E92DC b323
    pub unsafe fn set_pickup_generation_range_multiplier(multiplier: f32) {
        call_native!(Void, 0x318516E02DE3ECE2u64, multiplier);
    } // 0x318516E02DE3ECE2 0x9879AC51 b323
    pub unsafe fn get_pickup_generation_range_multiplier() -> f32 {
        call_native!(f32, 0xB3ECA65C7317F174u64)
    } // 0xB3ECA65C7317F174  b944
    pub unsafe fn set_only_allow_ammo_collection_when_low(p_0: bool) {
        call_native!(Void, 0x31F924B53EADDF65u64, p_0);
    } // 0x31F924B53EADDF65 0xDB18FA01 b323
    pub unsafe fn set_pickup_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x1C1B69FAE509BA97u64, pickup, toggle);
    } // 0x1C1B69FAE509BA97  b757
    pub unsafe fn set_pickup_transparent_when_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x858EC9FD25DE04AAu64, pickup, toggle);
    } // 0x858EC9FD25DE04AA  b757
    pub unsafe fn set_pickup_hidden_when_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x3ED2B83AB2E82799u64, pickup, toggle);
    } // 0x3ED2B83AB2E82799  b757
    pub unsafe fn set_pickup_object_transparent_when_uncollectable(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x8881C98A31117998u64, pickup, toggle);
    } // 0x8881C98A31117998  b678
    pub unsafe fn set_pickup_object_alpha_when_transparent(p_0: i32) {
        call_native!(Void, 0x8CFF648FBD7330F1u64, p_0);
    } // 0x8CFF648FBD7330F1  b757
    pub unsafe fn set_portable_pickup_persist(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x46F3ADD1E2D5BAF2u64, pickup, toggle);
    } // 0x46F3ADD1E2D5BAF2  b877
    pub unsafe fn allow_portable_pickup_to_migrate_to_non_participants(
        pickup: Pickup,
        toggle: bool,
    ) {
        call_native!(Void, 0x641F272B52E2F0F8u64, pickup, toggle);
    } // 0x641F272B52E2F0F8  b877
    pub unsafe fn force_activate_physics_on_unfixed_pickup(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0x4C134B4DF76025D0u64, pickup, toggle);
    } // 0x4C134B4DF76025D0  b1180
    pub unsafe fn allow_pickup_by_none_participant(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0xAA059C615DE9DD03u64, pickup, toggle);
    } // 0xAA059C615DE9DD03  b1180
    pub unsafe fn suppress_pickup_reward_type(reward_type: i32, suppress: bool) {
        call_native!(Void, 0xF92099527DB8E2A7u64, reward_type, suppress);
    } // 0xF92099527DB8E2A7 0xA7E936FD b323
    pub unsafe fn clear_all_pickup_reward_type_suppression() {
        call_native!(Void, 0xA2C1F5E92AFE49EDu64);
    } // 0xA2C1F5E92AFE49ED 0xB241806C b323
    pub unsafe fn clear_pickup_reward_type_suppression(reward_type: i32) {
        call_native!(Void, 0x762DB2D380B48D04u64, reward_type);
    } // 0x762DB2D380B48D04 0xD1BAAFB7 b323
    pub unsafe fn render_fake_pickup_glow(x: f32, y: f32, z: f32, color_index: i32) {
        call_native!(Void, 0x3430676B11CDF21Du64, x, y, z, color_index);
    } // 0x3430676B11CDF21D 0x63B02FAD b323
    pub unsafe fn set_pickup_object_collectable_in_vehicle(pickup: Pickup) {
        call_native!(Void, 0x7813E8B8C4AE4799u64, pickup);
    } // 0x7813E8B8C4AE4799  b1734
    pub unsafe fn set_pickup_track_damage_events(pickup: Pickup, toggle: bool) {
        call_native!(Void, 0xBFFE53AE7E67FCDCu64, pickup, toggle);
    } // 0xBFFE53AE7E67FCDC  b1290
    pub unsafe fn set_entity_flag_suppress_shadow(entity: Entity, toggle: bool) {
        call_native!(Void, 0xD05A3241B9A86F19u64, entity, toggle);
    } // 0xD05A3241B9A86F19  b1180
    pub unsafe fn set_entity_flag_render_small_shadow(object: Object, toggle: bool) {
        call_native!(Void, 0xB2D0BDE54F0E8E5Au64, object, toggle);
    } // 0xB2D0BDE54F0E8E5A 0x132B6D92 b323
    pub unsafe fn get_weapon_type_from_pickup_type(pickup_hash: Hash) -> Hash {
        call_native!(Hash, 0x08F96CA6C551AD51u64, pickup_hash)
    } // 0x08F96CA6C551AD51 0xEDD01937 b323
    pub unsafe fn get_pickup_type_from_weapon_hash(weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0xD6429A016084F1A5u64, weapon_hash)
    } // 0xD6429A016084F1A5  b1290
    pub unsafe fn is_pickup_weapon_object_valid(object: Object) -> bool {
        call_native!(bool, 0x11D1E53A726891FEu64, object)
    } // 0x11D1E53A726891FE 0x883DAB2D b323
    pub unsafe fn get_object_tint_index(object: Object) -> i32 {
        call_native!(i32, 0xE84EB93729C5F36Au64, object)
    } // 0xE84EB93729C5F36A  b757
    pub unsafe fn set_object_tint_index(object: Object, texture_variation: i32) {
        call_native!(Void, 0x971DA0055324D033u64, object, texture_variation);
    } // 0x971DA0055324D033  b323
    pub unsafe fn set_tint_index_closest_building_of_type(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        texture_variation: i32,
    ) -> bool {
        call_native!(
            bool,
            0xF12E33034D887F66u64,
            x,
            y,
            z,
            radius,
            model_hash,
            texture_variation
        )
    } // 0xF12E33034D887F66  b1103
    pub unsafe fn set_prop_tint_index(p_0: Any, p_1: Any) {
        call_native!(Void, 0x31574B1B41268673u64, p_0, p_1);
    } // 0x31574B1B41268673  b2189
    pub unsafe fn set_prop_light_color(object: Object, p_1: bool, r: i32, g: i32, b: i32) -> bool {
        call_native!(bool, 0x5F048334B4A4E774u64, object, p_1, r, g, b)
    } // 0x5F048334B4A4E774  b1493
    pub unsafe fn is_prop_light_overriden(object: Object) -> bool {
        call_native!(bool, 0xADF084FB8F075D06u64, object)
    } // 0xADF084FB8F075D06  b1604
    pub unsafe fn set_object_is_visible_in_mirrors(object: Object, toggle: bool) {
        call_native!(Void, 0x3B2FD68DB5F8331Cu64, object, toggle);
    } // 0x3B2FD68DB5F8331C  b757
    pub unsafe fn set_object_speed_boost_amount(object: Object, p_1: Any) {
        call_native!(Void, 0x96EE0EBA0163DF80u64, object, p_1);
    } // 0x96EE0EBA0163DF80  b791
    pub unsafe fn set_object_speed_boost_duration(object: Object, duration: f32) {
        call_native!(Void, 0xDF6CA0330F2E737Bu64, object, duration);
    } // 0xDF6CA0330F2E737B  b791
    pub unsafe fn convert_old_pickup_type_to_new(pickup_hash: Hash) -> Hash {
        call_native!(Hash, 0x5EAAD83F8CFB4575u64, pickup_hash)
    } // 0x5EAAD83F8CFB4575 0x6AE36192 b323
    pub unsafe fn set_force_object_this_frame(x: f32, y: f32, z: f32, p_3: f32) {
        call_native!(Void, 0xF538081986E49E9Du64, x, y, z, p_3);
    } // 0xF538081986E49E9D 0x3DA41C1A b323
    pub unsafe fn only_clean_up_object_when_out_of_range(object: Object) {
        call_native!(Void, 0xADBE4809F19F927Au64, object);
    } // 0xADBE4809F19F927A 0x2048A7DD b323
    pub unsafe fn set_disable_collisions_between_cars_and_car_parachute(p_0: Any) {
        call_native!(Void, 0x8CAAB2BD3EA58BD4u64, p_0);
    } // 0x8CAAB2BD3EA58BD4  b1011
    pub unsafe fn set_projectiles_should_explode_on_contact(entity: Entity, p_1: Any) {
        call_native!(Void, 0x63ECF581BC70E363u64, entity, p_1);
    } // 0x63ECF581BC70E363  b1365
    pub unsafe fn set_drive_articulated_joint(object: Object, toggle: bool, p_2: i32) {
        call_native!(Void, 0x911024442F4898F0u64, object, toggle, p_2);
    } // 0x911024442F4898F0  b1604
    pub unsafe fn set_drive_articulated_joint_with_inflictor(
        object: Object,
        toggle: bool,
        p_2: i32,
        ped: Ped,
    ) {
        call_native!(Void, 0xB20834A7DD3D8896u64, object, toggle, p_2, ped);
    } // 0xB20834A7DD3D8896  b1604
    pub unsafe fn set_object_is_a_pressure_plate(object: Object, toggle: bool) {
        call_native!(Void, 0x734E1714D077DA9Au64, object, toggle);
    } // 0x734E1714D077DA9A  b1604
    pub unsafe fn set_weapon_impacts_apply_greater_force(object: Object, p_1: bool) {
        call_native!(Void, 0x1A6CBB06E2D0D79Du64, object, p_1);
    } // 0x1A6CBB06E2D0D79D  b1604
    pub unsafe fn get_is_articulated_joint_at_min_angle(object: Object, p_1: Any) -> bool {
        call_native!(bool, 0x43C677F1E1158005u64, object, p_1)
    } // 0x43C677F1E1158005  b1604
    pub unsafe fn get_is_articulated_joint_at_max_angle(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0x3BD770D281982DB5u64, p_0, p_1)
    } // 0x3BD770D281982DB5  b1604
    pub unsafe fn set_is_object_articulated(object: Object, toggle: bool) {
        call_native!(Void, 0x1C57C94A6446492Au64, object, toggle);
    } // 0x1C57C94A6446492A  b1604
    pub unsafe fn set_is_object_ball(object: Object, toggle: bool) {
        call_native!(Void, 0xB5B7742424BD4445u64, object, toggle);
    } // 0xB5B7742424BD4445  b1604
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod pad {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn is_control_enabled(control: i32, action: i32) -> bool {
        call_native!(bool, 0x1CEA6BFDF248E5D9u64, control, action)
    } // 0x1CEA6BFDF248E5D9 0x9174AF84 b323
    pub unsafe fn is_control_pressed(control: i32, action: i32) -> bool {
        call_native!(bool, 0xF3A21BCD95725A4Au64, control, action)
    } // 0xF3A21BCD95725A4A 0x517A4384 b323
    pub unsafe fn is_control_released(control: i32, action: i32) -> bool {
        call_native!(bool, 0x648EE3E7F38877DDu64, control, action)
    } // 0x648EE3E7F38877DD 0x1F91A06E b323
    pub unsafe fn is_control_just_pressed(control: i32, action: i32) -> bool {
        call_native!(bool, 0x580417101DDB492Fu64, control, action)
    } // 0x580417101DDB492F 0x4487F579 b323
    pub unsafe fn is_control_just_released(control: i32, action: i32) -> bool {
        call_native!(bool, 0x50F940259D3841E6u64, control, action)
    } // 0x50F940259D3841E6 0x2314444B b323
    pub unsafe fn get_control_value(control: i32, action: i32) -> i32 {
        call_native!(i32, 0xD95E79E8686D2C27u64, control, action)
    } // 0xD95E79E8686D2C27 0xC526F3C6 b323
    pub unsafe fn get_control_normal(control: i32, action: i32) -> f32 {
        call_native!(f32, 0xEC3C9B8D5327B563u64, control, action)
    } // 0xEC3C9B8D5327B563 0x5DE226A5 b323
    pub unsafe fn set_use_adjusted_mouse_coords(toggle: bool) {
        call_native!(Void, 0x5B73C77D9EB66E24u64, toggle);
    } // 0x5B73C77D9EB66E24  b323
    pub unsafe fn get_control_unbound_normal(control: i32, action: i32) -> f32 {
        call_native!(f32, 0x5B84D09CEC5209C5u64, control, action)
    } // 0x5B84D09CEC5209C5 0xC49343BB b323
    pub unsafe fn set_control_value_next_frame(control: i32, action: i32, value: f32) -> bool {
        call_native!(bool, 0xE8A25867FBA3B05Eu64, control, action, value)
    } // 0xE8A25867FBA3B05E  b323
    pub unsafe fn is_disabled_control_pressed(control: i32, action: i32) -> bool {
        call_native!(bool, 0xE2587F8CBBD87B1Du64, control, action)
    } // 0xE2587F8CBBD87B1D 0x32A93544 b323
    pub unsafe fn is_disabled_control_released(control: i32, action: i32) -> bool {
        call_native!(bool, 0xFB6C4072E9A32E92u64, control, action)
    } // 0xFB6C4072E9A32E92  b757
    pub unsafe fn is_disabled_control_just_pressed(control: i32, action: i32) -> bool {
        call_native!(bool, 0x91AEF906BCA88877u64, control, action)
    } // 0x91AEF906BCA88877 0xEE6ABD32 b323
    pub unsafe fn is_disabled_control_just_released(control: i32, action: i32) -> bool {
        call_native!(bool, 0x305C8DCD79DA8B0Fu64, control, action)
    } // 0x305C8DCD79DA8B0F 0xD6A679E1 b323
    pub unsafe fn get_disabled_control_normal(control: i32, action: i32) -> f32 {
        call_native!(f32, 0x11E65974A982637Cu64, control, action)
    } // 0x11E65974A982637C 0x66FF4FAA b323
    pub unsafe fn get_disabled_control_unbound_normal(control: i32, action: i32) -> f32 {
        call_native!(f32, 0x4F8A26A890FD62FBu64, control, action)
    } // 0x4F8A26A890FD62FB 0xF2A65A4C b323
    pub unsafe fn get_control_how_long_ago(control: i32) -> i32 {
        call_native!(i32, 0xD7D22F5592AED8BAu64, control)
    } // 0xD7D22F5592AED8BA 0x0E8EF929 b323
    pub unsafe fn is_using_keyboard_and_mouse(control: i32) -> bool {
        call_native!(bool, 0xA571D46727E2B718u64, control)
    } // 0xA571D46727E2B718  b323
    pub unsafe fn is_using_cursor(control: i32) -> bool {
        call_native!(bool, 0x13337B38DB572509u64, control)
    } // 0x13337B38DB572509  b323
    pub unsafe fn set_cursor_position(x: f32, y: f32) -> bool {
        call_native!(bool, 0xFC695459D4D0E219u64, x, y)
    } // 0xFC695459D4D0E219  b323
    pub unsafe fn is_using_remote_play(control: i32) -> bool {
        call_native!(bool, 0x23F09EADC01449D6u64, control)
    } // 0x23F09EADC01449D6  b323
    pub unsafe fn have_controls_changed(control: i32) -> bool {
        call_native!(bool, 0x6CD79468A1E595C6u64, control)
    } // 0x6CD79468A1E595C6  b323
    pub unsafe fn get_control_instructional_buttons_string(
        control: i32,
        action: i32,
        allow_x_o_swap: bool,
    ) -> *const i8 {
        call_native!(
            *const i8,
            0x0499D7B09FC9B407u64,
            control,
            action,
            allow_x_o_swap
        )
    } // 0x0499D7B09FC9B407  b323
    pub unsafe fn get_control_group_instructional_buttons_string(
        control: i32,
        control_group: i32,
        allow_x_o_swap: bool,
    ) -> *const i8 {
        call_native!(
            *const i8,
            0x80C2FD58D720C801u64,
            control,
            control_group,
            allow_x_o_swap
        )
    } // 0x80C2FD58D720C801  b323
    pub unsafe fn set_control_light_effect_color(control: i32, red: i32, green: i32, blue: i32) {
        call_native!(Void, 0x8290252FFF36ACB5u64, control, red, green, blue);
    } // 0x8290252FFF36ACB5  b323
    pub unsafe fn clear_control_light_effect(control: i32) {
        call_native!(Void, 0xCB0360EFEFB2580Du64, control);
    } // 0xCB0360EFEFB2580D  b323
    pub unsafe fn set_control_shake(control: i32, duration: i32, frequency: i32) {
        call_native!(Void, 0x48B3886C1358D0D5u64, control, duration, frequency);
    } // 0x48B3886C1358D0D5  b323
    pub unsafe fn set_control_trigger_shake(
        control: i32,
        left_duration: i32,
        left_frequency: i32,
        right_duration: i32,
        right_frequency: i32,
    ) {
        call_native!(
            Void,
            0x14D29BB12D47F68Cu64,
            control,
            left_duration,
            left_frequency,
            right_duration,
            right_frequency
        );
    } // 0x14D29BB12D47F68C  b323
    pub unsafe fn stop_control_shake(control: i32) {
        call_native!(Void, 0x38C16A305E8CDC8Du64, control);
    } // 0x38C16A305E8CDC8D  b323
    pub unsafe fn set_control_shake_suppressed_id(control: i32, unique_id: i32) {
        call_native!(Void, 0xF239400E16C23E08u64, control, unique_id);
    } // 0xF239400E16C23E08  b323
    pub unsafe fn clear_control_shake_suppressed_id(control: i32) {
        call_native!(Void, 0xA0CEFCEA390AAB9Bu64, control);
    } // 0xA0CEFCEA390AAB9B  b323
    pub unsafe fn is_look_inverted() -> bool {
        call_native!(bool, 0x77B612531280010Du64)
    } // 0x77B612531280010D 0x313434B2 b323
    pub unsafe fn is_mouse_look_inverted() -> bool {
        call_native!(bool, 0xE1615EC03B3BB4FDu64)
    } // 0xE1615EC03B3BB4FD  b323
    pub unsafe fn get_local_player_aim_state() -> i32 {
        call_native!(i32, 0xBB41AFBBBC0A0287u64)
    } // 0xBB41AFBBBC0A0287 0x81802053 b323
    pub unsafe fn get_local_player_gamepad_aim_state() -> i32 {
        call_native!(i32, 0x59B9A7AF4C95133Cu64)
    } // 0x59B9A7AF4C95133C  b323
    pub unsafe fn get_is_using_alternate_handbrake() -> bool {
        call_native!(bool, 0x25AAA32BDC98F2A3u64)
    } // 0x25AAA32BDC98F2A3  b1365
    pub unsafe fn get_is_using_alternate_driveby() -> bool {
        call_native!(bool, 0x0F70731BACCFBB96u64)
    } // 0x0F70731BACCFBB96 0xC1AFABD5 b323
    pub unsafe fn get_allow_movement_while_zoomed() -> bool {
        call_native!(bool, 0xFC859E2374407556u64)
    } // 0xFC859E2374407556 0xC0823820 b323
    pub unsafe fn set_playerpad_shakes_when_controller_disabled(toggle: bool) {
        call_native!(Void, 0x798FDEB5B1575088u64, toggle);
    } // 0x798FDEB5B1575088 0xA86BD91F b323
    pub unsafe fn set_input_exclusive(control: i32, action: i32) {
        call_native!(Void, 0xEDE476E5EE29EDB1u64, control, action);
    } // 0xEDE476E5EE29EDB1 0x4E8E29E6 b323
    pub unsafe fn disable_control_action(control: i32, action: i32, disable_related_actions: bool) {
        call_native!(
            Void,
            0xFE99B66D079CF6BCu64,
            control,
            action,
            disable_related_actions
        );
    } // 0xFE99B66D079CF6BC 0x3800C0DC b323
    pub unsafe fn enable_control_action(control: i32, action: i32, enable_related_actions: bool) {
        call_native!(
            Void,
            0x351220255D64C155u64,
            control,
            action,
            enable_related_actions
        );
    } // 0x351220255D64C155 0xD2753551 b323
    pub unsafe fn disable_all_control_actions(control: i32) {
        call_native!(Void, 0x5F4B6931816E599Bu64, control);
    } // 0x5F4B6931816E599B 0x16753CF4 b323
    pub unsafe fn enable_all_control_actions(control: i32) {
        call_native!(Void, 0xA5FFE9B05F199DE7u64, control);
    } // 0xA5FFE9B05F199DE7 0xFC2F119F b323
    pub unsafe fn init_pc_scripted_controls(scheme_name: *const i8) -> bool {
        call_native!(bool, 0x3D42B92563939375u64, scheme_name)
    } // 0x3D42B92563939375 0xD2C80B2E b323
    pub unsafe fn switch_pc_scripted_controls(scheme_name: *const i8) -> bool {
        call_native!(bool, 0x4683149ED1DDE7A1u64, scheme_name)
    } // 0x4683149ED1DDE7A1 0xBBFC9050 b323
    pub unsafe fn shutdown_pc_scripted_controls() {
        call_native!(Void, 0x643ED62D5EA3BEBDu64);
    } // 0x643ED62D5EA3BEBD 0x42140FF9 b323
    pub unsafe fn allow_alternative_script_controls_layout(control: i32) {
        call_native!(Void, 0x7F4724035FDCA1DDu64, control);
    } // 0x7F4724035FDCA1DD 0x2CEDE6C5 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod pathfind {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn set_roads_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        node_enabled: bool,
        unknown_2: bool,
    ) {
        call_native!(
            Void,
            0xBF1A602B5BA52FEEu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            node_enabled,
            unknown_2
        );
    } // 0xBF1A602B5BA52FEE 0xEBC7B918 b323
    pub unsafe fn set_roads_in_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        unknown_1: bool,
        unknown_2: bool,
        unknown_3: bool,
    ) {
        call_native!(
            Void,
            0x1A5AA1208AF5DB59u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            unknown_1,
            unknown_2,
            unknown_3
        );
    } // 0x1A5AA1208AF5DB59 0xBD088F4B b323
    pub unsafe fn set_ped_paths_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: bool,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0x34F060F4BF92E018u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6,
            p_7
        );
    } // 0x34F060F4BF92E018 0x2148EA84 b323
    pub unsafe fn get_safe_coord_for_ped(
        x: f32,
        y: f32,
        z: f32,
        on_ground: bool,
        out_position: *mut Vector3,
        flags: i32,
    ) -> bool {
        call_native!(
            bool,
            0xB61C8E878A4199CAu64,
            x,
            y,
            z,
            on_ground,
            out_position,
            flags
        )
    } // 0xB61C8E878A4199CA 0xB370270A b323
    pub unsafe fn get_closest_vehicle_node(
        x: f32,
        y: f32,
        z: f32,
        out_position: *mut Vector3,
        node_flags: i32,
        p_5: f32,
        p_6: f32,
    ) -> bool {
        call_native!(
            bool,
            0x240A18690AE96513u64,
            x,
            y,
            z,
            out_position,
            node_flags,
            p_5,
            p_6
        )
    } // 0x240A18690AE96513 0x6F5F1E6C b323
    pub unsafe fn get_closest_major_vehicle_node(
        x: f32,
        y: f32,
        z: f32,
        out_position: *mut Vector3,
        unknown_1: f32,
        unknown_2: f32,
    ) -> bool {
        call_native!(
            bool,
            0x2EABE3B06F58C1BEu64,
            x,
            y,
            z,
            out_position,
            unknown_1,
            unknown_2
        )
    } // 0x2EABE3B06F58C1BE 0x04B5F15B b323
    pub unsafe fn get_closest_vehicle_node_with_heading(
        x: f32,
        y: f32,
        z: f32,
        out_position: *mut Vector3,
        out_heading: *mut f32,
        node_type: i32,
        p_6: f32,
        p_7: f32,
    ) -> bool {
        call_native!(
            bool,
            0xFF071FB798B803B0u64,
            x,
            y,
            z,
            out_position,
            out_heading,
            node_type,
            p_6,
            p_7
        )
    } // 0xFF071FB798B803B0 0x8BD5759B b323
    pub unsafe fn get_nth_closest_vehicle_node(
        x: f32,
        y: f32,
        z: f32,
        nth_closest: i32,
        out_position: *mut Vector3,
        node_flags: i32,
        unknown_1: f32,
        unknown_2: f32,
    ) -> bool {
        call_native!(
            bool,
            0xE50E52416CCF948Bu64,
            x,
            y,
            z,
            nth_closest,
            out_position,
            node_flags,
            unknown_1,
            unknown_2
        )
    } // 0xE50E52416CCF948B 0xF125BFCC b323
    pub unsafe fn get_nth_closest_vehicle_node_id(
        x: f32,
        y: f32,
        z: f32,
        nth: i32,
        node_flags: i32,
        p_5: f32,
        p_6: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x22D7275A79FE8215u64,
            x,
            y,
            z,
            nth,
            node_flags,
            p_5,
            p_6
        )
    } // 0x22D7275A79FE8215 0x3F358BEA b323
    pub unsafe fn get_nth_closest_vehicle_node_with_heading(
        x: f32,
        y: f32,
        z: f32,
        nth_closest: i32,
        out_position: *mut Vector3,
        out_heading: *mut f32,
        out_num_lanes: *mut i32,
        node_flags: i32,
        unknown_3: f32,
        unknown_4: f32,
    ) -> bool {
        call_native!(
            bool,
            0x80CA6A8B6C094CC4u64,
            x,
            y,
            z,
            nth_closest,
            out_position,
            out_heading,
            out_num_lanes,
            node_flags,
            unknown_3,
            unknown_4
        )
    } // 0x80CA6A8B6C094CC4 0x7349C856 b323
    pub unsafe fn get_nth_closest_vehicle_node_id_with_heading(
        x: f32,
        y: f32,
        z: f32,
        nth_closest: i32,
        out_position: *mut Vector3,
        out_heading: *mut f32,
        node_flags: i32,
        p_7: f32,
        p_8: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x6448050E9C2A7207u64,
            x,
            y,
            z,
            nth_closest,
            out_position,
            out_heading,
            node_flags,
            p_7,
            p_8
        )
    } // 0x6448050E9C2A7207 0xC1AEB88D b323
    pub unsafe fn get_nth_closest_vehicle_node_favour_direction(
        x: f32,
        y: f32,
        z: f32,
        desired_x: f32,
        desired_y: f32,
        desired_z: f32,
        nth_closest: i32,
        out_position: *mut Vector3,
        out_heading: *mut f32,
        node_flags: i32,
        p_1_0: f32,
        p_1_1: f32,
    ) -> bool {
        call_native!(
            bool,
            0x45905BE8654AE067u64,
            x,
            y,
            z,
            desired_x,
            desired_y,
            desired_z,
            nth_closest,
            out_position,
            out_heading,
            node_flags,
            p_1_0,
            p_1_1
        )
    } // 0x45905BE8654AE067 0x928A4DEC b323
    pub unsafe fn get_vehicle_node_properties(
        x: f32,
        y: f32,
        z: f32,
        density: *mut i32,
        flags: *mut i32,
    ) -> bool {
        call_native!(bool, 0x0568566ACBB5DEDCu64, x, y, z, density, flags)
    } // 0x0568566ACBB5DEDC 0xCC90110B b323
    pub unsafe fn is_vehicle_node_id_valid(vehicle_node_id: i32) -> bool {
        call_native!(bool, 0x1EAF30FCFBF5AF74u64, vehicle_node_id)
    } // 0x1EAF30FCFBF5AF74 0x57DFB1EF b323
    pub unsafe fn get_vehicle_node_position(node_id: i32, out_position: *mut Vector3) {
        call_native!(Void, 0x703123E5E7D429C2u64, node_id, out_position);
    } // 0x703123E5E7D429C2 0xE38E252D b323
    pub unsafe fn get_vehicle_node_is_gps_allowed(node_i_d: i32) -> bool {
        call_native!(bool, 0xA2AE5C478B96E3B6u64, node_i_d)
    } // 0xA2AE5C478B96E3B6 0xEE4B1219 b323
    pub unsafe fn get_vehicle_node_is_switched_off(node_i_d: i32) -> bool {
        call_native!(bool, 0x4F5070AA58F69279u64, node_i_d)
    } // 0x4F5070AA58F69279 0x56737A3C b323
    pub unsafe fn get_closest_road(
        x: f32,
        y: f32,
        z: f32,
        p_3: f32,
        p_4: i32,
        p_5: *mut Vector3,
        p_6: *mut Vector3,
        p_7: *mut Any,
        p_8: *mut Any,
        p_9: *mut f32,
        p_1_0: bool,
    ) -> bool {
        call_native!(
            bool,
            0x132F52BBA570FE92u64,
            x,
            y,
            z,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        )
    } // 0x132F52BBA570FE92 0x567B0E11 b323
    pub unsafe fn load_all_path_nodes(set: bool) -> bool {
        call_native!(bool, 0xC2AB6BFE34E92F8Bu64, set)
    } // 0xC2AB6BFE34E92F8B  b2802
    pub unsafe fn set_allow_stream_prologue_nodes(toggle: bool) {
        call_native!(Void, 0x228E5C6AD4D74BFDu64, toggle);
    } // 0x228E5C6AD4D74BFD 0xD6A3B458 b323
    pub unsafe fn set_allow_stream_heist_island_nodes(_type: i32) {
        call_native!(Void, 0xF74B1FFA4A15FBEAu64, _type);
    } // 0xF74B1FFA4A15FBEA  b2189
    pub unsafe fn are_nodes_loaded_for_area(x_1: f32, y_1: f32, x_2: f32, y_2: f32) -> bool {
        call_native!(bool, 0xF7B79A50B905A30Du64, x_1, y_1, x_2, y_2)
    } // 0xF7B79A50B905A30D 0x86E80A17 b323
    pub unsafe fn request_path_nodes_in_area_this_frame(
        x_1: f32,
        y_1: f32,
        x_2: f32,
        y_2: f32,
    ) -> bool {
        call_native!(bool, 0x07FB139B592FA687u64, x_1, y_1, x_2, y_2)
    } // 0x07FB139B592FA687 0x2CDA5012 b323
    pub unsafe fn set_roads_back_to_original(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x1EE7063B80FFC77Cu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0x1EE7063B80FFC77C 0x86AC4A85 b323
    pub unsafe fn set_roads_back_to_original_in_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0x0027501B9F3B407Eu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            p_7
        );
    } // 0x0027501B9F3B407E 0x9DB5D209 b323
    pub unsafe fn set_ambient_ped_range_multiplier_this_frame(multiplier: f32) {
        call_native!(Void, 0x0B919E1FB47CC4E0u64, multiplier);
    } // 0x0B919E1FB47CC4E0 0x3C5085E4 b323
    pub unsafe fn adjust_ambient_ped_spawn_densities_this_frame(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0xAA76052DDA9BFC3Eu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0xAA76052DDA9BFC3E 0xD0F51299 b323
    pub unsafe fn set_ped_paths_back_to_original(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0xE04B48F2CC926253u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6
        );
    } // 0xE04B48F2CC926253 0x3F1ABDA4 b323
    pub unsafe fn get_random_vehicle_node(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: bool,
        p_5: bool,
        p_6: bool,
        out_position: *mut Vector3,
        node_id: *mut i32,
    ) -> bool {
        call_native!(
            bool,
            0x93E0DB8440B73A7Du64,
            x,
            y,
            z,
            radius,
            p_4,
            p_5,
            p_6,
            out_position,
            node_id
        )
    } // 0x93E0DB8440B73A7D 0xAD1476EA b323
    pub unsafe fn get_spawn_coords_for_vehicle_node(
        node_address: i32,
        towards_coors_x: f32,
        towards_coors_y: f32,
        towards_coors_z: f32,
        centre_point: *mut Vector3,
        heading: *mut f32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x809549AFC7AEC597u64,
            node_address,
            towards_coors_x,
            towards_coors_y,
            towards_coors_z,
            centre_point,
            heading
        )
    } // 0x809549AFC7AEC597  b2944
    pub unsafe fn get_street_name_at_coord(
        x: f32,
        y: f32,
        z: f32,
        street_name: *mut Hash,
        crossing_road: *mut Hash,
    ) {
        call_native!(
            Void,
            0x2EB41072B4C1E4C0u64,
            x,
            y,
            z,
            street_name,
            crossing_road
        );
    } // 0x2EB41072B4C1E4C0 0xDEBEEFCF b323
    pub unsafe fn generate_directions_to_coord(
        x: f32,
        y: f32,
        z: f32,
        p_3: bool,
        direction: *mut i32,
        p_5: *mut f32,
        dist_to_nx_junction: *mut f32,
    ) -> i32 {
        call_native!(
            i32,
            0xF90125F1F79ECDF8u64,
            x,
            y,
            z,
            p_3,
            direction,
            p_5,
            dist_to_nx_junction
        )
    } // 0xF90125F1F79ECDF8 0xED35C094 b323
    pub unsafe fn set_ignore_no_gps_flag(toggle: bool) {
        call_native!(Void, 0x72751156E7678833u64, toggle);
    } // 0x72751156E7678833 0xB72CF194 b323
    pub unsafe fn set_ignore_no_gps_flag_until_first_normal_node(toggle: bool) {
        call_native!(Void, 0x1FC289A0C3FF470Fu64, toggle);
    } // 0x1FC289A0C3FF470F 0x90DF7A4C b323
    pub unsafe fn set_gps_disabled_zone(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_3: f32,
    ) {
        call_native!(Void, 0xDC20483CD3DD5201u64, x_1, y_1, z_1, x_2, y_2, z_3);
    } // 0xDC20483CD3DD5201 0x720B8073 b323
    pub unsafe fn get_gps_blip_route_length() -> i32 {
        call_native!(i32, 0xBBB45C3CF5C8AA85u64)
    } // 0xBBB45C3CF5C8AA85 0x4B770634 b323
    pub unsafe fn get_pos_along_gps_type_route(
        result: *mut Vector3,
        p_1: bool,
        p_2: f32,
        p_3: i32,
    ) -> bool {
        call_native!(bool, 0xF3162836C28F9DA5u64, result, p_1, p_2, p_3)
    } // 0xF3162836C28F9DA5  b505
    pub unsafe fn get_gps_blip_route_found() -> bool {
        call_native!(bool, 0x869DAACBBE9FA006u64)
    } // 0x869DAACBBE9FA006 0x286F82CC b323
    pub unsafe fn get_road_boundary_using_heading(
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        out_position: *mut Vector3,
    ) -> bool {
        call_native!(bool, 0xA0F8A7517A273C05u64, x, y, z, heading, out_position)
    } // 0xA0F8A7517A273C05 0x5E440AC7 b463
    pub unsafe fn get_position_by_side_of_road(
        x: f32,
        y: f32,
        z: f32,
        p_3: i32,
        out_position: *mut Vector3,
    ) -> bool {
        call_native!(bool, 0x16F46FB18C8009E4u64, x, y, z, p_3, out_position)
    } // 0x16F46FB18C8009E4 0xF6422F9A b323
    pub unsafe fn is_point_on_road(x: f32, y: f32, z: f32, vehicle: Vehicle) -> bool {
        call_native!(bool, 0x125BF4ABFC536B09u64, x, y, z, vehicle)
    } // 0x125BF4ABFC536B09 0xCF198055 b323
    pub unsafe fn get_next_gps_disabled_zone_index() -> i32 {
        call_native!(i32, 0xD3A6A0EF48823A8Cu64)
    } // 0xD3A6A0EF48823A8C 0xBE92551F b323
    pub unsafe fn set_gps_disabled_zone_at_index(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        index: i32,
    ) {
        call_native!(
            Void,
            0xD0BC1C6FB18EE154u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            index
        );
    } // 0xD0BC1C6FB18EE154 0x98BDB311 b323
    pub unsafe fn clear_gps_disabled_zone_at_index(index: i32) {
        call_native!(Void, 0x2801D0012266DF07u64, index);
    } // 0x2801D0012266DF07 0x59090745 b323
    pub unsafe fn add_navmesh_required_region(x: f32, y: f32, radius: f32) {
        call_native!(Void, 0x387EAD7EE42F6685u64, x, y, radius);
    } // 0x387EAD7EE42F6685 0x12B086EA b323
    pub unsafe fn remove_navmesh_required_regions() {
        call_native!(Void, 0x916F0A3CDEC3445Eu64);
    } // 0x916F0A3CDEC3445E 0x637BB680 b323
    pub unsafe fn is_navmesh_required_region_in_use() -> bool {
        call_native!(bool, 0x705A844002B39DC0u64)
    } // 0x705A844002B39DC0  b944
    pub unsafe fn disable_navmesh_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        toggle: bool,
    ) {
        call_native!(
            Void,
            0x4C8872D8CDBE1B8Bu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            toggle
        );
    } // 0x4C8872D8CDBE1B8B 0x6E37F132 b323
    pub unsafe fn are_all_navmesh_regions_loaded() -> bool {
        call_native!(bool, 0x8415D95B194A3AEAu64)
    } // 0x8415D95B194A3AEA 0x34C4E789 b323
    pub unsafe fn is_navmesh_loaded_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0xF813C7E63F9062A5u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0xF813C7E63F9062A5 0x4C2BA99E b323
    pub unsafe fn get_num_navmeshes_existing_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> i32 {
        call_native!(i32, 0x01708E8DD3FF8C65u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x01708E8DD3FF8C65 0x76AFFBB5 b323
    pub unsafe fn add_navmesh_blocking_object(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: bool,
        p_8: Any,
    ) -> i32 {
        call_native!(
            i32,
            0xFCD5C8E06E502F5Au64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        )
    } // 0xFCD5C8E06E502F5A 0x2952BA56 b323
    pub unsafe fn update_navmesh_blocking_object(
        p_0: Any,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: Any,
    ) {
        call_native!(
            Void,
            0x109E99373F290687u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0x109E99373F290687 0x4E9776D0 b323
    pub unsafe fn remove_navmesh_blocking_object(p_0: Any) {
        call_native!(Void, 0x46399A7895957C0Eu64, p_0);
    } // 0x46399A7895957C0E 0x098602B0 b323
    pub unsafe fn does_navmesh_blocking_object_exist(p_0: Any) -> bool {
        call_native!(bool, 0x0EAEB0DB4B132399u64, p_0)
    } // 0x0EAEB0DB4B132399 0x4B67D7EE b323
    pub unsafe fn get_approx_height_for_point(x: f32, y: f32) -> f32 {
        call_native!(f32, 0x29C24BFBED8AB8FBu64, x, y)
    } // 0x29C24BFBED8AB8FB 0x3FE8C5A0 b323
    pub unsafe fn get_approx_height_for_area(x_1: f32, y_1: f32, x_2: f32, y_2: f32) -> f32 {
        call_native!(f32, 0x8ABE8608576D9CE3u64, x_1, y_1, x_2, y_2)
    } // 0x8ABE8608576D9CE3 0x3ED21C90 b323
    pub unsafe fn get_approx_floor_for_point(x: f32, y: f32) -> f32 {
        call_native!(f32, 0x336511A34F2E5185u64, x, y)
    } // 0x336511A34F2E5185 0xA07C5B7D b323
    pub unsafe fn get_approx_floor_for_area(x_1: f32, y_1: f32, x_2: f32, y_2: f32) -> f32 {
        call_native!(f32, 0x3599D741C9AC6310u64, x_1, y_1, x_2, y_2)
    } // 0x3599D741C9AC6310 0x76751DD4 b323
    pub unsafe fn calculate_travel_distance_between_points(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> f32 {
        call_native!(f32, 0xADD95C7005C4A197u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0xADD95C7005C4A197 0xB114489B b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod ped {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn create_ped(
        ped_type: i32,
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        is_network: bool,
        b_script_host_ped: bool,
    ) -> Ped {
        call_native!(
            Ped,
            0xD49F9B0955C367DEu64,
            ped_type,
            model_hash,
            x,
            y,
            z,
            heading,
            is_network,
            b_script_host_ped
        )
    } // 0xD49F9B0955C367DE 0x0389EF71 b323
    pub unsafe fn delete_ped(ped: *mut Ped) {
        call_native!(Void, 0x9614299DCB53E54Bu64, ped);
    } // 0x9614299DCB53E54B 0x13EFB9A0 b323
    pub unsafe fn clone_ped(
        ped: Ped,
        is_network: bool,
        b_script_host_ped: bool,
        copy_head_blend_flag: bool,
    ) -> Ped {
        call_native!(
            Ped,
            0xEF29A16337FACADBu64,
            ped,
            is_network,
            b_script_host_ped,
            copy_head_blend_flag
        )
    } // 0xEF29A16337FACADB 0x8C8A8D6E b323
    pub unsafe fn clone_ped_alt(
        ped: Ped,
        is_network: bool,
        b_script_host_ped: bool,
        copy_head_blend_flag: bool,
        p_4: bool,
    ) -> Ped {
        call_native!(
            Ped,
            0x668FD40BCBA5DE48u64,
            ped,
            is_network,
            b_script_host_ped,
            copy_head_blend_flag,
            p_4
        )
    } // 0x668FD40BCBA5DE48  b463
    pub unsafe fn clone_ped_to_target(ped: Ped, target_ped: Ped) {
        call_native!(Void, 0xE952D6431689AD9Au64, ped, target_ped);
    } // 0xE952D6431689AD9A 0xFC70EEC7 b323
    pub unsafe fn clone_ped_to_target_alt(ped: Ped, target_ped: Ped, p_2: bool) {
        call_native!(Void, 0x148B08C2D2ACB884u64, ped, target_ped, p_2);
    } // 0x148B08C2D2ACB884  b463
    pub unsafe fn is_ped_in_vehicle(ped: Ped, vehicle: Vehicle, at_get_in: bool) -> bool {
        call_native!(bool, 0xA3EE4A07279BB9DBu64, ped, vehicle, at_get_in)
    } // 0xA3EE4A07279BB9DB 0x7DA6BC83 b323
    pub unsafe fn is_ped_in_model(ped: Ped, model_hash: Hash) -> bool {
        call_native!(bool, 0x796D90EFB19AA332u64, ped, model_hash)
    } // 0x796D90EFB19AA332 0xA6438D4B b323
    pub unsafe fn is_ped_in_any_vehicle(ped: Ped, at_get_in: bool) -> bool {
        call_native!(bool, 0x997ABD671D25CA0Bu64, ped, at_get_in)
    } // 0x997ABD671D25CA0B 0x3B0171EE b323
    pub unsafe fn is_cop_ped_in_area_3d(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0x16EC4839969F9F5Eu64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x16EC4839969F9F5E 0xB98DB96B b323
    pub unsafe fn is_ped_injured(ped: Ped) -> bool {
        call_native!(bool, 0x84A2DD9AC37C35C1u64, ped)
    } // 0x84A2DD9AC37C35C1 0x2530A087 b323
    pub unsafe fn is_ped_hurt(ped: Ped) -> bool {
        call_native!(bool, 0x5983BB449D7FDB12u64, ped)
    } // 0x5983BB449D7FDB12 0x69DFA0AF b323
    pub unsafe fn is_ped_fatally_injured(ped: Ped) -> bool {
        call_native!(bool, 0xD839450756ED5A80u64, ped)
    } // 0xD839450756ED5A80 0xBADA0093 b323
    pub unsafe fn is_ped_dead_or_dying(ped: Ped, p_1: bool) -> bool {
        call_native!(bool, 0x3317DEDB88C95038u64, ped, p_1)
    } // 0x3317DEDB88C95038 0xCBDB7739 b323
    pub unsafe fn is_conversation_ped_dead(ped: Ped) -> bool {
        call_native!(bool, 0xE0A0AEC214B1FABAu64, ped)
    } // 0xE0A0AEC214B1FABA 0x1FA39EFE b323
    pub unsafe fn is_ped_aiming_from_cover(ped: Ped) -> bool {
        call_native!(bool, 0x3998B1276A3300E5u64, ped)
    } // 0x3998B1276A3300E5 0xDEBAB2AF b323
    pub unsafe fn is_ped_reloading(ped: Ped) -> bool {
        call_native!(bool, 0x24B100C68C645951u64, ped)
    } // 0x24B100C68C645951 0x961E1745 b323
    pub unsafe fn is_ped_a_player(ped: Ped) -> bool {
        call_native!(bool, 0x12534C348C6CB68Bu64, ped)
    } // 0x12534C348C6CB68B 0x404794CA b323
    pub unsafe fn create_ped_inside_vehicle(
        vehicle: Vehicle,
        ped_type: i32,
        model_hash: Hash,
        seat: i32,
        is_network: bool,
        b_script_host_ped: bool,
    ) -> Ped {
        call_native!(
            Ped,
            0x7DD959874C1FD534u64,
            vehicle,
            ped_type,
            model_hash,
            seat,
            is_network,
            b_script_host_ped
        )
    } // 0x7DD959874C1FD534 0x3000F092 b323
    pub unsafe fn set_ped_desired_heading(ped: Ped, heading: f32) {
        call_native!(Void, 0xAA5A7ECE2AA8FE70u64, ped, heading);
    } // 0xAA5A7ECE2AA8FE70 0x961458F9 b323
    pub unsafe fn force_all_heading_values_to_align(ped: Ped) {
        call_native!(Void, 0xFF287323B0E2C69Au64, ped);
    } // 0xFF287323B0E2C69A 0x290421BE b323
    pub unsafe fn is_ped_facing_ped(ped: Ped, other_ped: Ped, angle: f32) -> bool {
        call_native!(bool, 0xD71649DB0A545AA3u64, ped, other_ped, angle)
    } // 0xD71649DB0A545AA3 0x0B775838 b323
    pub unsafe fn is_ped_in_melee_combat(ped: Ped) -> bool {
        call_native!(bool, 0x4E209B2C1EAD5159u64, ped)
    } // 0x4E209B2C1EAD5159 0xFD7814A5 b323
    pub unsafe fn is_ped_stopped(ped: Ped) -> bool {
        call_native!(bool, 0x530944F6F4B8A214u64, ped)
    } // 0x530944F6F4B8A214 0xA0DC0B87 b323
    pub unsafe fn is_ped_shooting_in_area(
        ped: Ped,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_7: bool,
        p_8: bool,
    ) -> bool {
        call_native!(
            bool,
            0x7E9DFE24AC1E58EFu64,
            ped,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_7,
            p_8
        )
    } // 0x7E9DFE24AC1E58EF 0x741BF04F b323
    pub unsafe fn is_any_ped_shooting_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: bool,
        p_7: bool,
    ) -> bool {
        call_native!(
            bool,
            0xA0D3D71EA1086C55u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6,
            p_7
        )
    } // 0xA0D3D71EA1086C55 0x91833867 b323
    pub unsafe fn is_ped_shooting(ped: Ped) -> bool {
        call_native!(bool, 0x34616828CD07F1A1u64, ped)
    } // 0x34616828CD07F1A1 0xE7C3405E b323
    pub unsafe fn set_ped_accuracy(ped: Ped, accuracy: i32) {
        call_native!(Void, 0x7AEFB85C1D49DEB6u64, ped, accuracy);
    } // 0x7AEFB85C1D49DEB6 0x6C17122E b323
    pub unsafe fn get_ped_accuracy(ped: Ped) -> i32 {
        call_native!(i32, 0x37F4AD56ECBC0CD6u64, ped)
    } // 0x37F4AD56ECBC0CD6 0x0A2A0AA0 b323
    pub unsafe fn set_ambient_law_ped_accuracy_modifier(multiplier: f32) {
        call_native!(Void, 0x87DDEB611B329A9Cu64, multiplier);
    } // 0x87DDEB611B329A9C  b1103
    pub unsafe fn is_ped_model(ped: Ped, model_hash: Hash) -> bool {
        call_native!(bool, 0xC9D55B1A358A5BF7u64, ped, model_hash)
    } // 0xC9D55B1A358A5BF7 0x5F1DDFCB b323
    pub unsafe fn explode_ped_head(ped: Ped, weapon_hash: Hash) {
        call_native!(Void, 0x2D05CED3A38D0F3Au64, ped, weapon_hash);
    } // 0x2D05CED3A38D0F3A 0x05CC1380 b323
    pub unsafe fn remove_ped_elegantly(ped: *mut Ped) {
        call_native!(Void, 0xAC6D445B994DF95Eu64, ped);
    } // 0xAC6D445B994DF95E 0x4FFB8C6C b323
    pub unsafe fn add_armour_to_ped(ped: Ped, amount: i32) {
        call_native!(Void, 0x5BA652A0CD14DF2Fu64, ped, amount);
    } // 0x5BA652A0CD14DF2F 0xF686B26E b323
    pub unsafe fn set_ped_armour(ped: Ped, amount: i32) {
        call_native!(Void, 0xCEA04D83135264CCu64, ped, amount);
    } // 0xCEA04D83135264CC 0x4E3A0CC4 b323
    pub unsafe fn set_ped_into_vehicle(ped: Ped, vehicle: Vehicle, seat_index: i32) {
        call_native!(Void, 0xF75B0D629E1C063Du64, ped, vehicle, seat_index);
    } // 0xF75B0D629E1C063D 0x07500C79 b323
    pub unsafe fn set_ped_allow_vehicles_override(ped: Ped, toggle: bool) {
        call_native!(Void, 0x3C028C636A414ED9u64, ped, toggle);
    } // 0x3C028C636A414ED9 0x58A80BD5 b323
    pub unsafe fn can_create_random_ped(p_0: bool) -> bool {
        call_native!(bool, 0x3E8349C08E4B82E4u64, p_0)
    } // 0x3E8349C08E4B82E4 0xF9ABE88F b323
    pub unsafe fn create_random_ped(pos_x: f32, pos_y: f32, pos_z: f32) -> Ped {
        call_native!(Ped, 0xB4AC7D0CF06BFE8Fu64, pos_x, pos_y, pos_z)
    } // 0xB4AC7D0CF06BFE8F 0x5A949543 b323
    pub unsafe fn create_random_ped_as_driver(vehicle: Vehicle, return_handle: bool) -> Ped {
        call_native!(Ped, 0x9B62392B474F44A0u64, vehicle, return_handle)
    } // 0x9B62392B474F44A0 0xB927CE9A b323
    pub unsafe fn can_create_random_driver() -> bool {
        call_native!(bool, 0xB8EB95E5B4E56978u64)
    } // 0xB8EB95E5B4E56978 0x99861609 b323
    pub unsafe fn can_create_random_bike_rider() -> bool {
        call_native!(bool, 0xEACEEDA81751915Cu64)
    } // 0xEACEEDA81751915C 0x7018BE31 b323
    pub unsafe fn set_ped_move_anims_blend_out(ped: Ped) {
        call_native!(Void, 0x9E8C908F41584ECDu64, ped);
    } // 0x9E8C908F41584ECD 0x20E01957 b323
    pub unsafe fn set_ped_can_be_dragged_out(ped: Ped, toggle: bool) {
        call_native!(Void, 0xC1670E958EEE24E5u64, ped, toggle);
    } // 0xC1670E958EEE24E5 0xAA7F1131 b323
    pub unsafe fn set_ped_allow_hurt_combat_for_all_mission_peds(toggle: bool) {
        call_native!(Void, 0xF2BEBCDFAFDAA19Eu64, toggle);
    } // 0xF2BEBCDFAFDAA19E 0x6CD58238 b323
    pub unsafe fn is_ped_male(ped: Ped) -> bool {
        call_native!(bool, 0x6D9F5FAA7488BA46u64, ped)
    } // 0x6D9F5FAA7488BA46 0x90950455 b323
    pub unsafe fn is_ped_human(ped: Ped) -> bool {
        call_native!(bool, 0xB980061DA992779Du64, ped)
    } // 0xB980061DA992779D 0x194BB7B0 b323
    pub unsafe fn get_vehicle_ped_is_in(ped: Ped, include_entering: bool) -> Vehicle {
        call_native!(Vehicle, 0x9A9112A0FE9A4713u64, ped, include_entering)
    } // 0x9A9112A0FE9A4713 0xAFE92319 b323
    pub unsafe fn reset_ped_last_vehicle(ped: Ped) {
        call_native!(Void, 0xBB8DE8CF6A8DD8BBu64, ped);
    } // 0xBB8DE8CF6A8DD8BB 0x5E3B5942 b323
    pub unsafe fn set_ped_density_multiplier_this_frame(multiplier: f32) {
        call_native!(Void, 0x95E3D6257B166CF2u64, multiplier);
    } // 0x95E3D6257B166CF2 0x039C82BB b323
    pub unsafe fn set_scenario_ped_density_multiplier_this_frame(p_0: f32, p_1: f32) {
        call_native!(Void, 0x7A556143A1C03898u64, p_0, p_1);
    } // 0x7A556143A1C03898 0x2909ABF0 b323
    pub unsafe fn suppress_ambient_ped_aggressive_cleanup_this_frame() {
        call_native!(Void, 0x5A7F62FDA59759BDu64);
    } // 0x5A7F62FDA59759BD 0xB48C0C04 b323
    pub unsafe fn set_scripted_conversion_coord_this_frame(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x5086C7843552CF85u64, x, y, z);
    } // 0x5086C7843552CF85 0x25EA2AA5 b323
    pub unsafe fn set_ped_non_creation_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) {
        call_native!(Void, 0xEE01041D559983EAu64, x_1, y_1, z_1, x_2, y_2, z_2);
    } // 0xEE01041D559983EA 0x7A97283F b323
    pub unsafe fn clear_ped_non_creation_area() {
        call_native!(Void, 0x2E05208086BA0651u64);
    } // 0x2E05208086BA0651 0x6F7043A3 b323
    pub unsafe fn instantly_fill_ped_population() {
        call_native!(Void, 0x4759CC730F947C81u64);
    } // 0x4759CC730F947C81 0x8C555ADD b323
    pub unsafe fn is_ped_on_mount(ped: Ped) -> bool {
        call_native!(bool, 0x460BC76A0E10655Eu64, ped)
    } // 0x460BC76A0E10655E 0x43103006 b323
    pub unsafe fn get_mount(ped: Ped) -> Ped {
        call_native!(Ped, 0xE7E11B8DCBED1058u64, ped)
    } // 0xE7E11B8DCBED1058 0xDD31EC4E b323
    pub unsafe fn is_ped_on_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x67722AEB798E5FABu64, ped)
    } // 0x67722AEB798E5FAB 0xA1AE7CC7 b323
    pub unsafe fn is_ped_on_specific_vehicle(ped: Ped, vehicle: Vehicle) -> bool {
        call_native!(bool, 0xEC5F66E459AF3BB2u64, ped, vehicle)
    } // 0xEC5F66E459AF3BB2 0x63CB4603 b323
    pub unsafe fn set_ped_money(ped: Ped, amount: i32) {
        call_native!(Void, 0xA9C8960E8684C1B5u64, ped, amount);
    } // 0xA9C8960E8684C1B5 0x40D90BF2 b323
    pub unsafe fn get_ped_money(ped: Ped) -> i32 {
        call_native!(i32, 0x3F69145BBA87BAE7u64, ped)
    } // 0x3F69145BBA87BAE7 0xEB3C4C7E b323
    pub unsafe fn set_health_snacks_carried_by_all_new_peds(p_0: f32, p_1: Any) {
        call_native!(Void, 0xFF4803BC019852D9u64, p_0, p_1);
    } // 0xFF4803BC019852D9 0xD41C9AED b323
    pub unsafe fn set_ambient_peds_drop_money(p_0: bool) {
        call_native!(Void, 0x6B0E6172C9A4D902u64, p_0);
    } // 0x6B0E6172C9A4D902 0x30B98369 b323
    pub unsafe fn set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(p_0: bool) {
        call_native!(Void, 0x9911F4A24485F653u64, p_0);
    } // 0x9911F4A24485F653 0x02A080C8 b323
    pub unsafe fn set_ped_suffers_critical_hits(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEBD76F2359F190ACu64, ped, toggle);
    } // 0xEBD76F2359F190AC 0x6F6FC7E6 b323
    pub unsafe fn set_ped_upper_body_damage_only(ped: Ped, toggle: bool) {
        call_native!(Void, 0xAFC976FD0580C7B3u64, ped, toggle);
    } // 0xAFC976FD0580C7B3 0x1572022A b323
    pub unsafe fn is_ped_sitting_in_vehicle(ped: Ped, vehicle: Vehicle) -> bool {
        call_native!(bool, 0xA808AA1D79230FC2u64, ped, vehicle)
    } // 0xA808AA1D79230FC2 0xDDDE26FA b323
    pub unsafe fn is_ped_sitting_in_any_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x826AA586EDB9FEF8u64, ped)
    } // 0x826AA586EDB9FEF8 0x0EA9CA03 b323
    pub unsafe fn is_ped_on_foot(ped: Ped) -> bool {
        call_native!(bool, 0x01FEE67DB37F59B2u64, ped)
    } // 0x01FEE67DB37F59B2 0xC60D0785 b323
    pub unsafe fn is_ped_on_any_bike(ped: Ped) -> bool {
        call_native!(bool, 0x94495889E22C6479u64, ped)
    } // 0x94495889E22C6479 0x4D885B2E b323
    pub unsafe fn is_ped_planting_bomb(ped: Ped) -> bool {
        call_native!(bool, 0xC70B5FAE151982D8u64, ped)
    } // 0xC70B5FAE151982D8 0x0EDAC574 b323
    pub unsafe fn get_dead_ped_pickup_coords(ped: Ped, p_1: f32, p_2: f32) -> Vector3 {
        call_native!(Vector3, 0xCD5003B097200F36u64, ped, p_1, p_2)
    } // 0xCD5003B097200F36 0x129F9DC1 b323
    pub unsafe fn is_ped_in_any_boat(ped: Ped) -> bool {
        call_native!(bool, 0x2E0E1C2B4F6CB339u64, ped)
    } // 0x2E0E1C2B4F6CB339 0x1118A947 b323
    pub unsafe fn is_ped_in_any_sub(ped: Ped) -> bool {
        call_native!(bool, 0xFBFC01CCFB35D99Eu64, ped)
    } // 0xFBFC01CCFB35D99E 0xE65F8059 b323
    pub unsafe fn is_ped_in_any_heli(ped: Ped) -> bool {
        call_native!(bool, 0x298B91AE825E5705u64, ped)
    } // 0x298B91AE825E5705 0x7AB5523B b323
    pub unsafe fn is_ped_in_any_plane(ped: Ped) -> bool {
        call_native!(bool, 0x5FFF4CFC74D8FB80u64, ped)
    } // 0x5FFF4CFC74D8FB80 0x51BBCE7E b323
    pub unsafe fn is_ped_in_flying_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x9134873537FA419Cu64, ped)
    } // 0x9134873537FA419C 0xCA072485 b323
    pub unsafe fn set_ped_dies_in_water(ped: Ped, toggle: bool) {
        call_native!(Void, 0x56CEF0AC79073BDEu64, ped, toggle);
    } // 0x56CEF0AC79073BDE 0x604C872B b323
    pub unsafe fn get_ped_dies_in_water(ped: Ped) -> bool {
        call_native!(bool, 0x65671A4FB8218930u64, ped)
    } // 0x65671A4FB8218930  b2699
    pub unsafe fn set_ped_dies_in_sinking_vehicle(ped: Ped, toggle: bool) {
        call_native!(Void, 0xD718A22995E2B4BCu64, ped, toggle);
    } // 0xD718A22995E2B4BC 0x8D4D9ABB b323
    pub unsafe fn get_ped_armour(ped: Ped) -> i32 {
        call_native!(i32, 0x9483AF821605B1D8u64, ped)
    } // 0x9483AF821605B1D8 0x2CE311A7 b323
    pub unsafe fn set_ped_stay_in_vehicle_when_jacked(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEDF4079F9D54C9A1u64, ped, toggle);
    } // 0xEDF4079F9D54C9A1 0xB014A09C b323
    pub unsafe fn set_ped_can_be_shot_in_vehicle(ped: Ped, toggle: bool) {
        call_native!(Void, 0xC7EF1BA83230BA07u64, ped, toggle);
    } // 0xC7EF1BA83230BA07 0x5DB7B3A9 b323
    pub unsafe fn get_ped_last_damage_bone(ped: Ped, out_bone: *mut i32) -> bool {
        call_native!(bool, 0xD75960F6BD9EA49Cu64, ped, out_bone)
    } // 0xD75960F6BD9EA49C 0xAB933841 b323
    pub unsafe fn clear_ped_last_damage_bone(ped: Ped) {
        call_native!(Void, 0x8EF6B7AC68E2F01Bu64, ped);
    } // 0x8EF6B7AC68E2F01B 0x56CB715E b323
    pub unsafe fn set_ai_weapon_damage_modifier(value: f32) {
        call_native!(Void, 0x1B1E2A40A65B8521u64, value);
    } // 0x1B1E2A40A65B8521 0x516E30EE b323
    pub unsafe fn reset_ai_weapon_damage_modifier() {
        call_native!(Void, 0xEA16670E7BA4743Cu64);
    } // 0xEA16670E7BA4743C 0x6E965420 b323
    pub unsafe fn set_ai_melee_weapon_damage_modifier(modifier: f32) {
        call_native!(Void, 0x66460DEDDD417254u64, modifier);
    } // 0x66460DEDDD417254 0x0F9A401F b323
    pub unsafe fn reset_ai_melee_weapon_damage_modifier() {
        call_native!(Void, 0x46E56A7CD1D63C3Fu64);
    } // 0x46E56A7CD1D63C3F 0x97886238 b323
    pub unsafe fn set_treat_as_ambient_ped_for_driver_lockon(ped: Ped, p_1: bool) {
        call_native!(Void, 0x2F3C3D9F50681DE4u64, ped, p_1);
    } // 0x2F3C3D9F50681DE4 0xCC9D7F1A b323
    pub unsafe fn set_ped_can_be_targetted(ped: Ped, toggle: bool) {
        call_native!(Void, 0x63F58F7C80513AADu64, ped, toggle);
    } // 0x63F58F7C80513AAD 0x75C49F74 b323
    pub unsafe fn set_ped_can_be_targetted_by_team(ped: Ped, team: i32, toggle: bool) {
        call_native!(Void, 0xBF1CA77833E58F2Cu64, ped, team, toggle);
    } // 0xBF1CA77833E58F2C 0xB103A8E1 b323
    pub unsafe fn set_ped_can_be_targetted_by_player(ped: Ped, player: Player, toggle: bool) {
        call_native!(Void, 0x66B57B72E0836A76u64, ped, player, toggle);
    } // 0x66B57B72E0836A76 0xD050F490 b323
    pub unsafe fn set_allow_lockon_to_ped_if_friendly(ped: Ped, toggle: bool) {
        call_native!(Void, 0x061CB768363D6424u64, ped, toggle);
    } // 0x061CB768363D6424 0x7DA12905 b323
    pub unsafe fn set_use_camera_heading_for_desired_direction_lock_on_test(
        ped: Ped,
        toggle: bool,
    ) {
        call_native!(Void, 0xFD325494792302D7u64, ped, toggle);
    } // 0xFD325494792302D7 0x7F67671D b323
    pub unsafe fn is_ped_in_any_police_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x0BD04E29640C9C12u64, ped)
    } // 0x0BD04E29640C9C12 0x84FA790D b323
    pub unsafe fn force_ped_to_open_parachute(ped: Ped) {
        call_native!(Void, 0x16E42E800B472221u64, ped);
    } // 0x16E42E800B472221 0xA819680B b323
    pub unsafe fn is_ped_in_parachute_free_fall(ped: Ped) -> bool {
        call_native!(bool, 0x7DCE8BDA0F1C1200u64, ped)
    } // 0x7DCE8BDA0F1C1200 0xCD71F11B b323
    pub unsafe fn is_ped_falling(ped: Ped) -> bool {
        call_native!(bool, 0xFB92A102F1C4DFA3u64, ped)
    } // 0xFB92A102F1C4DFA3 0xABF77334 b323
    pub unsafe fn is_ped_jumping(ped: Ped) -> bool {
        call_native!(bool, 0xCEDABC5900A0BF97u64, ped)
    } // 0xCEDABC5900A0BF97 0x07E5BC0E b323
    pub unsafe fn is_ped_landing(p_0: Any) -> bool {
        call_native!(bool, 0x412F1364FA066CFBu64, p_0)
    } // 0x412F1364FA066CFB  b573
    pub unsafe fn is_ped_doing_a_beast_jump(p_0: Any) -> bool {
        call_native!(bool, 0x451D05012CCEC234u64, p_0)
    } // 0x451D05012CCEC234  b573
    pub unsafe fn is_ped_climbing(ped: Ped) -> bool {
        call_native!(bool, 0x53E8CB4F48BFE623u64, ped)
    } // 0x53E8CB4F48BFE623 0xBCE03D35 b323
    pub unsafe fn is_ped_vaulting(ped: Ped) -> bool {
        call_native!(bool, 0x117C70D1F5730B5Eu64, ped)
    } // 0x117C70D1F5730B5E 0xC3169BDA b323
    pub unsafe fn is_ped_diving(ped: Ped) -> bool {
        call_native!(bool, 0x5527B8246FEF9B11u64, ped)
    } // 0x5527B8246FEF9B11 0x7BC5BF3C b323
    pub unsafe fn is_ped_jumping_out_of_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x433DDFFE2044B636u64, ped)
    } // 0x433DDFFE2044B636 0xB19215F6 b323
    pub unsafe fn is_ped_opening_door(ped: Ped) -> bool {
        call_native!(bool, 0x26AF0E8E30BD2A2Cu64, ped)
    } // 0x26AF0E8E30BD2A2C  b323
    pub unsafe fn get_ped_parachute_state(ped: Ped) -> i32 {
        call_native!(i32, 0x79CFD9827CC979B6u64, ped)
    } // 0x79CFD9827CC979B6 0x7D4BC475 b323
    pub unsafe fn get_ped_parachute_landing_type(ped: Ped) -> i32 {
        call_native!(i32, 0x8B9F1FC6AE8166C0u64, ped)
    } // 0x8B9F1FC6AE8166C0 0x01F3B035 b323
    pub unsafe fn set_ped_parachute_tint_index(ped: Ped, tint_index: i32) {
        call_native!(Void, 0x333FC8DB079B7186u64, ped, tint_index);
    } // 0x333FC8DB079B7186 0x5AEFEC3A b323
    pub unsafe fn get_ped_parachute_tint_index(ped: Ped, out_tint_index: *mut i32) {
        call_native!(Void, 0xEAF5F7E5AE7C6C9Du64, ped, out_tint_index);
    } // 0xEAF5F7E5AE7C6C9D 0xE9E7FAC5 b323
    pub unsafe fn set_ped_reserve_parachute_tint_index(ped: Ped, p_1: Any) {
        call_native!(Void, 0xE88DA0751C22A2ADu64, ped, p_1);
    } // 0xE88DA0751C22A2AD 0x177EFC79 b323
    pub unsafe fn create_parachute_bag_object(ped: Ped, p_1: bool, p_2: bool) -> Object {
        call_native!(Object, 0x8C4F3BF23B6237DBu64, ped, p_1, p_2)
    } // 0x8C4F3BF23B6237DB 0x19198A16 b323
    pub unsafe fn set_ped_ducking(ped: Ped, toggle: bool) {
        call_native!(Void, 0x030983CA930B692Du64, ped, toggle);
    } // 0x030983CA930B692D 0xB90353D7 b323
    pub unsafe fn is_ped_ducking(ped: Ped) -> bool {
        call_native!(bool, 0xD125AE748725C6BCu64, ped)
    } // 0xD125AE748725C6BC 0x9199C77D b323
    pub unsafe fn is_ped_in_any_taxi(ped: Ped) -> bool {
        call_native!(bool, 0x6E575D6A898AB852u64, ped)
    } // 0x6E575D6A898AB852 0x16FD386C b323
    pub unsafe fn set_ped_id_range(ped: Ped, value: f32) {
        call_native!(Void, 0xF107E836A70DCE05u64, ped, value);
    } // 0xF107E836A70DCE05 0xEF3B4ED9 b323
    pub unsafe fn set_ped_highly_perceptive(ped: Ped, toggle: bool) {
        call_native!(Void, 0x52D59AB61DDC05DDu64, ped, toggle);
    } // 0x52D59AB61DDC05DD 0x9A2180FF b323
    pub unsafe fn set_cop_perception_overrides(
        seeing_range: f32,
        seeing_range_peripheral: f32,
        hearing_range: f32,
        visual_field_min_azimuth_angle: f32,
        visual_field_max_azimuth_angle: f32,
        field_of_gaze_max_angle: f32,
        p_6: f32,
    ) {
        call_native!(
            Void,
            0x2F074C904D85129Eu64,
            seeing_range,
            seeing_range_peripheral,
            hearing_range,
            visual_field_min_azimuth_angle,
            visual_field_max_azimuth_angle,
            field_of_gaze_max_angle,
            p_6
        );
    } // 0x2F074C904D85129E  b393
    pub unsafe fn set_ped_injured_on_ground_behaviour(ped: Ped, p_1: f32) {
        call_native!(Void, 0xEC4B4B3B9908052Au64, ped, p_1);
    } // 0xEC4B4B3B9908052A 0xF30658D2 b323
    pub unsafe fn disable_ped_injured_on_ground_behaviour(ped: Ped) {
        call_native!(Void, 0x733C87D4CE22BEA2u64, ped);
    } // 0x733C87D4CE22BEA2 0x43709044 b323
    pub unsafe fn set_ped_seeing_range(ped: Ped, value: f32) {
        call_native!(Void, 0xF29CF591C4BF6CEEu64, ped, value);
    } // 0xF29CF591C4BF6CEE 0x4BD72FE8 b323
    pub unsafe fn set_ped_hearing_range(ped: Ped, value: f32) {
        call_native!(Void, 0x33A8F7F7D5F7F33Cu64, ped, value);
    } // 0x33A8F7F7D5F7F33C 0xB32087E0 b323
    pub unsafe fn set_ped_visual_field_min_angle(ped: Ped, value: f32) {
        call_native!(Void, 0x2DB492222FB21E26u64, ped, value);
    } // 0x2DB492222FB21E26 0x72E2E18B b323
    pub unsafe fn set_ped_visual_field_max_angle(ped: Ped, value: f32) {
        call_native!(Void, 0x70793BDCA1E854D4u64, ped, value);
    } // 0x70793BDCA1E854D4 0x0CEA0F9A b323
    pub unsafe fn set_ped_visual_field_min_elevation_angle(ped: Ped, angle: f32) {
        call_native!(Void, 0x7A276EB2C224D70Fu64, ped, angle);
    } // 0x7A276EB2C224D70F 0x5CC2F1B8 b323
    pub unsafe fn set_ped_visual_field_max_elevation_angle(ped: Ped, angle: f32) {
        call_native!(Void, 0x78D0B67629D75856u64, ped, angle);
    } // 0x78D0B67629D75856 0x39D9102F b323
    pub unsafe fn set_ped_visual_field_peripheral_range(ped: Ped, range: f32) {
        call_native!(Void, 0x9C74B0BC831B753Au64, ped, range);
    } // 0x9C74B0BC831B753A 0xFDF2F7C2 b323
    pub unsafe fn set_ped_visual_field_center_angle(ped: Ped, angle: f32) {
        call_native!(Void, 0x3B6405E8AB34A907u64, ped, angle);
    } // 0x3B6405E8AB34A907 0xE57202A1 b323
    pub unsafe fn get_ped_visual_field_center_angle(ped: Ped) -> f32 {
        call_native!(f32, 0xEF2C71A32CAD5FBDu64, ped)
    } // 0xEF2C71A32CAD5FBD  b1493
    pub unsafe fn set_ped_stealth_movement(ped: Ped, p_1: bool, action: *const i8) {
        call_native!(Void, 0x88CBB5CEB96B7BD2u64, ped, p_1, action);
    } // 0x88CBB5CEB96B7BD2 0x67E28E1D b323
    pub unsafe fn get_ped_stealth_movement(ped: Ped) -> bool {
        call_native!(bool, 0x7C2AC9CA66575FBFu64, ped)
    } // 0x7C2AC9CA66575FBF 0x40321B83 b323
    pub unsafe fn create_group(unused: i32) -> i32 {
        call_native!(i32, 0x90370EBE0FEE1A3Du64, unused)
    } // 0x90370EBE0FEE1A3D 0x8DC0368D b323
    pub unsafe fn set_ped_as_group_leader(ped: Ped, group_id: i32) {
        call_native!(Void, 0x2A7819605465FBCEu64, ped, group_id);
    } // 0x2A7819605465FBCE 0x7265BEA2 b323
    pub unsafe fn set_ped_as_group_member(ped: Ped, group_id: i32) {
        call_native!(Void, 0x9F3480FE65DB31B5u64, ped, group_id);
    } // 0x9F3480FE65DB31B5 0x0EE13F92 b323
    pub unsafe fn set_ped_can_teleport_to_group_leader(
        ped_handle: Ped,
        group_handle: i32,
        toggle: bool,
    ) {
        call_native!(
            Void,
            0x2E2F4240B3F24647u64,
            ped_handle,
            group_handle,
            toggle
        );
    } // 0x2E2F4240B3F24647 0xD0D8BDBC b323
    pub unsafe fn remove_group(group_id: i32) {
        call_native!(Void, 0x8EB2F69076AF7053u64, group_id);
    } // 0x8EB2F69076AF7053 0x48D72B88 b323
    pub unsafe fn remove_ped_from_group(ped: Ped) {
        call_native!(Void, 0xED74007FFB146BC2u64, ped);
    } // 0xED74007FFB146BC2 0x82697713 b323
    pub unsafe fn is_ped_group_member(ped: Ped, group_id: i32) -> bool {
        call_native!(bool, 0x9BB01E3834671191u64, ped, group_id)
    } // 0x9BB01E3834671191 0x876D5363 b323
    pub unsafe fn is_ped_hanging_on_to_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x1C86D8AEF8254B78u64, ped)
    } // 0x1C86D8AEF8254B78 0x9678D4FF b323
    pub unsafe fn set_group_separation_range(group_handle: i32, separation_range: f32) {
        call_native!(Void, 0x4102C7858CFEE4E4u64, group_handle, separation_range);
    } // 0x4102C7858CFEE4E4 0x7B820CD5 b323
    pub unsafe fn set_ped_min_ground_time_for_stungun(ped: Ped, ms: i32) {
        call_native!(Void, 0xFA0675AB151073FAu64, ped, ms);
    } // 0xFA0675AB151073FA 0x2F0D0973 b323
    pub unsafe fn is_ped_prone(ped: Ped) -> bool {
        call_native!(bool, 0xD6A86331A537A7B9u64, ped)
    } // 0xD6A86331A537A7B9 0x02C2A6C3 b323
    pub unsafe fn is_ped_in_combat(ped: Ped, target: Ped) -> bool {
        call_native!(bool, 0x4859F1FC66A6278Eu64, ped, target)
    } // 0x4859F1FC66A6278E 0xFE027CB5 b323
    pub unsafe fn get_ped_target_from_combat_ped(ped: Ped, p_1: Any) -> Entity {
        call_native!(Entity, 0x32C27A11307B01CCu64, ped, p_1)
    } // 0x32C27A11307B01CC  b2372
    pub unsafe fn can_ped_in_combat_see_target(ped: Ped, target: Ped) -> bool {
        call_native!(bool, 0xEAD42DE3610D0721u64, ped, target)
    } // 0xEAD42DE3610D0721 0xCCD525E1 b323
    pub unsafe fn is_ped_doing_driveby(ped: Ped) -> bool {
        call_native!(bool, 0xB2C086CC1BF8F2BFu64, ped)
    } // 0xB2C086CC1BF8F2BF 0xAC3CEB9C b323
    pub unsafe fn is_ped_jacking(ped: Ped) -> bool {
        call_native!(bool, 0x4AE4FF911DFB61DAu64, ped)
    } // 0x4AE4FF911DFB61DA 0x3B321816 b323
    pub unsafe fn is_ped_being_jacked(ped: Ped) -> bool {
        call_native!(bool, 0x9A497FE2DF198913u64, ped)
    } // 0x9A497FE2DF198913 0xD45D605C b323
    pub unsafe fn is_ped_being_stunned(ped: Ped, p_1: i32) -> bool {
        call_native!(bool, 0x4FBACCE3B4138EE8u64, ped, p_1)
    } // 0x4FBACCE3B4138EE8 0x0A66CE30 b323
    pub unsafe fn get_peds_jacker(ped: Ped) -> Ped {
        call_native!(Ped, 0x9B128DC36C1E04CFu64, ped)
    } // 0x9B128DC36C1E04CF 0xDE1DBB59 b323
    pub unsafe fn get_jack_target(ped: Ped) -> Ped {
        call_native!(Ped, 0x5486A79D9FBD342Du64, ped)
    } // 0x5486A79D9FBD342D 0x1D196361 b323
    pub unsafe fn is_ped_fleeing(ped: Ped) -> bool {
        call_native!(bool, 0xBBCCE00B381F8482u64, ped)
    } // 0xBBCCE00B381F8482 0x85D813C6 b323
    pub unsafe fn is_ped_in_cover(ped: Ped, except_use_weapon: bool) -> bool {
        call_native!(bool, 0x60DFD0691A170B88u64, ped, except_use_weapon)
    } // 0x60DFD0691A170B88 0x972C5A8B b323
    pub unsafe fn is_ped_in_cover_facing_left(ped: Ped) -> bool {
        call_native!(bool, 0x845333B3150583ABu64, ped)
    } // 0x845333B3150583AB 0xB89DBB80 b323
    pub unsafe fn is_ped_in_high_cover(ped: Ped) -> bool {
        call_native!(bool, 0x6A03BF943D767C93u64, ped)
    } // 0x6A03BF943D767C93 0xDD5D08A7 b323
    pub unsafe fn is_ped_going_into_cover(ped: Ped) -> bool {
        call_native!(bool, 0x9F65DBC537E59AD5u64, ped)
    } // 0x9F65DBC537E59AD5 0xA3589628 b323
    pub unsafe fn set_ped_pinned_down(ped: Ped, pinned: bool, i: i32) -> bool {
        call_native!(bool, 0xAAD6D1ACF08F4612u64, ped, pinned, i)
    } // 0xAAD6D1ACF08F4612 0xCC78999D b323
    pub unsafe fn _has_ped_clear_los_to_entity(
        ped: Ped,
        entity: Entity,
        x: f32,
        y: f32,
        z: f32,
        p_5: i32,
        p_6: bool,
        p_7: bool,
    ) -> bool {
        call_native!(
            bool,
            0xA32ABFEB2A03B306u64,
            ped,
            entity,
            x,
            y,
            z,
            p_5,
            p_6,
            p_7
        )
    } // 0xA32ABFEB2A03B306  b3095
    pub unsafe fn get_seat_ped_is_trying_to_enter(ped: Ped) -> i32 {
        call_native!(i32, 0x6F4C85ACD641BCD2u64, ped)
    } // 0x6F4C85ACD641BCD2 0xACF162E0 b323
    pub unsafe fn get_vehicle_ped_is_trying_to_enter(ped: Ped) -> Vehicle {
        call_native!(Vehicle, 0x814FA8BE5449445Du64, ped)
    } // 0x814FA8BE5449445D 0x99968B37 b323
    pub unsafe fn get_ped_source_of_death(ped: Ped) -> Entity {
        call_native!(Entity, 0x93C8B64DEB84728Cu64, ped)
    } // 0x93C8B64DEB84728C 0x84ADF9EB b323
    pub unsafe fn get_ped_cause_of_death(ped: Ped) -> Hash {
        call_native!(Hash, 0x16FFE42AB2D2DC59u64, ped)
    } // 0x16FFE42AB2D2DC59 0x63458C27 b323
    pub unsafe fn get_ped_time_of_death(ped: Ped) -> i32 {
        call_native!(i32, 0x1E98817B311AE98Au64, ped)
    } // 0x1E98817B311AE98A 0xDF6D5D54 b323
    pub unsafe fn count_peds_in_combat_with_target(ped: Ped) -> i32 {
        call_native!(i32, 0x5407B7288D0478B7u64, ped)
    } // 0x5407B7288D0478B7 0xEF0B78E6 b323
    pub unsafe fn count_peds_in_combat_with_target_within_radius(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> i32 {
        call_native!(i32, 0x336B3D200AB007CBu64, ped, x, y, z, radius)
    } // 0x336B3D200AB007CB 0xFB18CB19 b323
    pub unsafe fn set_ped_relationship_group_default_hash(ped: Ped, hash: Hash) {
        call_native!(Void, 0xADB3F206518799E8u64, ped, hash);
    } // 0xADB3F206518799E8 0x423B7BA2 b323
    pub unsafe fn set_ped_relationship_group_hash(ped: Ped, hash: Hash) {
        call_native!(Void, 0xC80A74AC829DDD92u64, ped, hash);
    } // 0xC80A74AC829DDD92 0x79F8C18C b323
    pub unsafe fn set_relationship_between_groups(relationship: i32, group_1: Hash, group_2: Hash) {
        call_native!(Void, 0xBF25EB89375A37ADu64, relationship, group_1, group_2);
    } // 0xBF25EB89375A37AD 0xD4A215BA b323
    pub unsafe fn clear_relationship_between_groups(
        relationship: i32,
        group_1: Hash,
        group_2: Hash,
    ) {
        call_native!(Void, 0x5E29243FB56FC6D4u64, relationship, group_1, group_2);
    } // 0x5E29243FB56FC6D4 0x994B8C2D b323
    pub unsafe fn add_relationship_group(name: *const i8, group_hash: *mut Hash) -> bool {
        call_native!(bool, 0xF372BC22FCB88606u64, name, group_hash)
    } // 0xF372BC22FCB88606 0x8B635546 b323
    pub unsafe fn remove_relationship_group(group_hash: Hash) {
        call_native!(Void, 0xB6BA2444AB393DA2u64, group_hash);
    } // 0xB6BA2444AB393DA2 0x4A1DC59A b323
    pub unsafe fn does_relationship_group_exist(group_hash: Hash) -> bool {
        call_native!(bool, 0xCC6E3B6BB69501F1u64, group_hash)
    } // 0xCC6E3B6BB69501F1  b505
    pub unsafe fn get_relationship_between_peds(ped_1: Ped, ped_2: Ped) -> i32 {
        call_native!(i32, 0xEBA5AD3A0EAF7121u64, ped_1, ped_2)
    } // 0xEBA5AD3A0EAF7121 0xE254C39C b323
    pub unsafe fn get_ped_relationship_group_default_hash(ped: Ped) -> Hash {
        call_native!(Hash, 0x42FDD0F017B1E38Eu64, ped)
    } // 0x42FDD0F017B1E38E 0x714BD6E4 b323
    pub unsafe fn get_ped_relationship_group_hash(ped: Ped) -> Hash {
        call_native!(Hash, 0x7DBDD04862D95F04u64, ped)
    } // 0x7DBDD04862D95F04 0x354F283C b323
    pub unsafe fn get_relationship_between_groups(group_1: Hash, group_2: Hash) -> i32 {
        call_native!(i32, 0x9E6B70061662AE5Cu64, group_1, group_2)
    } // 0x9E6B70061662AE5C 0x4E372FE2 b323
    pub unsafe fn set_relationship_group_affects_wanted_level(group: Hash, p_1: bool) {
        call_native!(Void, 0x5615E0C5EB2BC6E2u64, group, p_1);
    } // 0x5615E0C5EB2BC6E2  b877
    pub unsafe fn tell_group_peds_in_area_to_attack(
        ped: Ped,
        p_1: Any,
        p_2: f32,
        hash: Hash,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0xAD27D957598E49E9u64, ped, p_1, p_2, hash, p_4, p_5);
    } // 0xAD27D957598E49E9  b1290
    pub unsafe fn set_ped_can_be_targeted_without_los(ped: Ped, toggle: bool) {
        call_native!(Void, 0x4328652AE5769C71u64, ped, toggle);
    } // 0x4328652AE5769C71 0x7FDDC0A6 b323
    pub unsafe fn set_ped_to_inform_respected_friends(ped: Ped, radius: f32, max_friends: i32) {
        call_native!(Void, 0x112942C6E708F70Bu64, ped, radius, max_friends);
    } // 0x112942C6E708F70B 0xD78AC46C b323
    pub unsafe fn is_ped_responding_to_event(ped: Ped, event: Any) -> bool {
        call_native!(bool, 0x625B774D75C87068u64, ped, event)
    } // 0x625B774D75C87068 0x7A877554 b323
    pub unsafe fn get_pos_from_fired_event(ped: Ped, event_type: i32, out_data: *mut Any) -> bool {
        call_native!(bool, 0xBA656A3BB01BDEA3u64, ped, event_type, out_data)
    } // 0xBA656A3BB01BDEA3  b2189
    pub unsafe fn set_ped_firing_pattern(ped: Ped, pattern_hash: Hash) {
        call_native!(Void, 0x9AC577F5A12AD8A9u64, ped, pattern_hash);
    } // 0x9AC577F5A12AD8A9 0xB4629D66 b323
    pub unsafe fn set_ped_shoot_rate(ped: Ped, shoot_rate: i32) {
        call_native!(Void, 0x614DA022990752DCu64, ped, shoot_rate);
    } // 0x614DA022990752DC 0xFB301746 b323
    pub unsafe fn set_combat_float(ped: Ped, combat_type: i32, p_2: f32) {
        call_native!(Void, 0xFF41B4B141ED981Cu64, ped, combat_type, p_2);
    } // 0xFF41B4B141ED981C 0xD8B7637C b323
    pub unsafe fn get_combat_float(ped: Ped, p_1: i32) -> f32 {
        call_native!(f32, 0x52DFF8A10508090Au64, ped, p_1)
    } // 0x52DFF8A10508090A 0x511D7EF8 b323
    pub unsafe fn get_group_size(group_i_d: i32, p_1: *mut Any, size_in_members: *mut i32) {
        call_native!(Void, 0x8DE69FE35CA09A45u64, group_i_d, p_1, size_in_members);
    } // 0x8DE69FE35CA09A45 0xF7E1A691 b323
    pub unsafe fn does_group_exist(group_id: i32) -> bool {
        call_native!(bool, 0x7C6B0C22F9F40BBEu64, group_id)
    } // 0x7C6B0C22F9F40BBE 0x935C978D b323
    pub unsafe fn get_ped_group_index(ped: Ped) -> i32 {
        call_native!(i32, 0xF162E133B4E7A675u64, ped)
    } // 0xF162E133B4E7A675 0x134E0785 b323
    pub unsafe fn is_ped_in_group(ped: Ped) -> bool {
        call_native!(bool, 0x5891CAC5D4ACFF74u64, ped)
    } // 0x5891CAC5D4ACFF74 0x836D9795 b323
    pub unsafe fn get_player_ped_is_following(ped: Ped) -> Player {
        call_native!(Player, 0x6A3975DEA89F9A17u64, ped)
    } // 0x6A3975DEA89F9A17 0xDE7442EE b323
    pub unsafe fn set_group_formation(group_id: i32, formation_type: i32) {
        call_native!(Void, 0xCE2F5FC3AF7E8C1Eu64, group_id, formation_type);
    } // 0xCE2F5FC3AF7E8C1E 0x08FAC739 b323
    pub unsafe fn set_group_formation_spacing(group_id: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x1D9D45004C28C916u64, group_id, x, y, z);
    } // 0x1D9D45004C28C916 0xB1E086FF b323
    pub unsafe fn reset_group_formation_default_spacing(group_handle: i32) {
        call_native!(Void, 0x63DAB4CCB3273205u64, group_handle);
    } // 0x63DAB4CCB3273205 0x267FCEAD b323
    pub unsafe fn get_vehicle_ped_is_using(ped: Ped) -> Vehicle {
        call_native!(Vehicle, 0x6094AD011A2EA87Du64, ped)
    } // 0x6094AD011A2EA87D 0x6DE3AADA b323
    pub unsafe fn get_vehicle_ped_is_entering(ped: Ped) -> Vehicle {
        call_native!(Vehicle, 0xF92691AED837A5FCu64, ped)
    } // 0xF92691AED837A5FC 0x56E0C163 b323
    pub unsafe fn set_ped_gravity(ped: Ped, toggle: bool) {
        call_native!(Void, 0x9FF447B6B6AD960Au64, ped, toggle);
    } // 0x9FF447B6B6AD960A 0x3CA16652 b323
    pub unsafe fn apply_damage_to_ped(
        ped: Ped,
        damage_amount: i32,
        p_2: bool,
        p_3: Any,
        weapon_type: Hash,
    ) {
        call_native!(
            Void,
            0x697157CED63F18D4u64,
            ped,
            damage_amount,
            p_2,
            p_3,
            weapon_type
        );
    } // 0x697157CED63F18D4 0x4DC27FCF b323
    pub unsafe fn get_time_ped_damaged_by_weapon(ped: Ped, weapon_hash: Hash) -> i32 {
        call_native!(i32, 0x36B77BB84687C318u64, ped, weapon_hash)
    } // 0x36B77BB84687C318 0x0170C6E1 b323
    pub unsafe fn set_ped_allowed_to_duck(ped: Ped, toggle: bool) {
        call_native!(Void, 0xDA1F1B7BE1A8766Fu64, ped, toggle);
    } // 0xDA1F1B7BE1A8766F 0xC4D122F8 b323
    pub unsafe fn set_ped_never_leaves_group(ped: Ped, toggle: bool) {
        call_native!(Void, 0x3DBFC55D5C9BB447u64, ped, toggle);
    } // 0x3DBFC55D5C9BB447 0x0E038813 b323
    pub unsafe fn get_ped_type(ped: Ped) -> i32 {
        call_native!(i32, 0xFF059E1E4C01E63Cu64, ped)
    } // 0xFF059E1E4C01E63C 0xB1460D43 b323
    pub unsafe fn set_ped_as_cop(ped: Ped, toggle: bool) {
        call_native!(Void, 0xBB03C38DD3FB7FFDu64, ped, toggle);
    } // 0xBB03C38DD3FB7FFD 0x84E7DE9F b323
    pub unsafe fn set_ped_health_pending_last_damage_event_override_flag(toggle: bool) {
        call_native!(Void, 0xB3352E018D6F89DFu64, toggle);
    } // 0xB3352E018D6F89DF  b2699
    pub unsafe fn set_ped_max_health(ped: Ped, value: i32) {
        call_native!(Void, 0xF5F6378C4F3419D3u64, ped, value);
    } // 0xF5F6378C4F3419D3 0x5533F60B b323
    pub unsafe fn get_ped_max_health(ped: Ped) -> i32 {
        call_native!(i32, 0x4700A416E8324EF3u64, ped)
    } // 0x4700A416E8324EF3 0xA45B6C8D b323
    pub unsafe fn set_ped_max_time_in_water(ped: Ped, value: f32) {
        call_native!(Void, 0x43C851690662113Du64, ped, value);
    } // 0x43C851690662113D 0xFE0A106B b323
    pub unsafe fn set_ped_max_time_underwater(ped: Ped, value: f32) {
        call_native!(Void, 0x6BA428C528D9E522u64, ped, value);
    } // 0x6BA428C528D9E522 0x082EF240 b323
    pub unsafe fn set_corpse_ragdoll_friction(ped: Ped, p_1: f32) {
        call_native!(Void, 0x2735233A786B1BEFu64, ped, p_1);
    } // 0x2735233A786B1BEF 0x373CC405 b323
    pub unsafe fn set_ped_vehicle_forced_seat_usage(
        ped: Ped,
        vehicle: Vehicle,
        seat_index: i32,
        flags: i32,
        p_4: Any,
    ) {
        call_native!(
            Void,
            0x952F06BEECD775CCu64,
            ped,
            vehicle,
            seat_index,
            flags,
            p_4
        );
    } // 0x952F06BEECD775CC 0x79CA237B b323
    pub unsafe fn clear_all_ped_vehicle_forced_seat_usage(ped: Ped) {
        call_native!(Void, 0xE6CA85E7259CE16Bu64, ped);
    } // 0xE6CA85E7259CE16B 0xCC1D8F66 b323
    pub unsafe fn set_ped_can_be_knocked_off_bike(p_0: Any, p_1: Any) {
        call_native!(Void, 0xB282749D5E028163u64, p_0, p_1);
    } // 0xB282749D5E028163  b877
    pub unsafe fn set_ped_can_be_knocked_off_vehicle(ped: Ped, state: i32) {
        call_native!(Void, 0x7A6535691B477C48u64, ped, state);
    } // 0x7A6535691B477C48 0x8A251612 b323
    pub unsafe fn can_knock_ped_off_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x51AC07A44D4F5B8Au64, ped)
    } // 0x51AC07A44D4F5B8A 0xC9D098B3 b323
    pub unsafe fn knock_ped_off_vehicle(ped: Ped) {
        call_native!(Void, 0x45BBCBA77C29A841u64, ped);
    } // 0x45BBCBA77C29A841 0xACDD0674 b323
    pub unsafe fn set_ped_coords_no_gang(ped: Ped, pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0x87052FE446E07247u64, ped, pos_x, pos_y, pos_z);
    } // 0x87052FE446E07247 0x9561AD98 b323
    pub unsafe fn get_ped_as_group_member(group_i_d: i32, member_number: i32) -> Ped {
        call_native!(Ped, 0x51455483CF23ED97u64, group_i_d, member_number)
    } // 0x51455483CF23ED97 0x9AA3CC8C b323
    pub unsafe fn get_ped_as_group_leader(group_i_d: i32) -> Ped {
        call_native!(Ped, 0x5CCE68DBD5FE93ECu64, group_i_d)
    } // 0x5CCE68DBD5FE93EC 0x52873C6A b323
    pub unsafe fn set_ped_keep_task(ped: Ped, toggle: bool) {
        call_native!(Void, 0x971D38760FBC02EFu64, ped, toggle);
    } // 0x971D38760FBC02EF 0xA7EC79CE b323
    pub unsafe fn set_ped_allow_minor_reactions_as_mission_ped(ped: Ped, toggle: bool) {
        call_native!(Void, 0x49E50BDB8BA4DAB2u64, ped, toggle);
    } // 0x49E50BDB8BA4DAB2 0x397F06E3 b323
    pub unsafe fn is_ped_swimming(ped: Ped) -> bool {
        call_native!(bool, 0x9DE327631295B4C2u64, ped)
    } // 0x9DE327631295B4C2 0x7AB43DB8 b323
    pub unsafe fn is_ped_swimming_under_water(ped: Ped) -> bool {
        call_native!(bool, 0xC024869A53992F34u64, ped)
    } // 0xC024869A53992F34 0x0E8D524F b323
    pub unsafe fn set_ped_coords_keep_vehicle(ped: Ped, pos_x: f32, pos_y: f32, pos_z: f32) {
        call_native!(Void, 0x9AFEFF481A85AB2Eu64, ped, pos_x, pos_y, pos_z);
    } // 0x9AFEFF481A85AB2E 0xD66AE1D3 b323
    pub unsafe fn set_ped_dies_in_vehicle(ped: Ped, toggle: bool) {
        call_native!(Void, 0x2A30922C90C9B42Cu64, ped, toggle);
    } // 0x2A30922C90C9B42C 0x6FE1E440 b323
    pub unsafe fn set_create_random_cops(toggle: bool) {
        call_native!(Void, 0x102E68B2024D536Du64, toggle);
    } // 0x102E68B2024D536D 0x23441648 b323
    pub unsafe fn set_create_random_cops_not_on_scenarios(toggle: bool) {
        call_native!(Void, 0x8A4986851C4EF6E7u64, toggle);
    } // 0x8A4986851C4EF6E7 0x82E548CC b323
    pub unsafe fn set_create_random_cops_on_scenarios(toggle: bool) {
        call_native!(Void, 0x444CB7D7DBE6973Du64, toggle);
    } // 0x444CB7D7DBE6973D 0xEDC31475 b323
    pub unsafe fn can_create_random_cops() -> bool {
        call_native!(bool, 0x5EE2CAFF7F17770Du64)
    } // 0x5EE2CAFF7F17770D 0xAA73DAD9 b323
    pub unsafe fn set_ped_as_enemy(ped: Ped, toggle: bool) {
        call_native!(Void, 0x02A0C9720B854BFAu64, ped, toggle);
    } // 0x02A0C9720B854BFA 0xAE620A1B b323
    pub unsafe fn set_ped_can_smash_glass(ped: Ped, p_1: bool, p_2: bool) {
        call_native!(Void, 0x1CCE141467FF42A2u64, ped, p_1, p_2);
    } // 0x1CCE141467FF42A2 0x149C60A8 b323
    pub unsafe fn is_ped_in_any_train(ped: Ped) -> bool {
        call_native!(bool, 0x6F972C1AB75A1ED0u64, ped)
    } // 0x6F972C1AB75A1ED0 0x759EF63A b323
    pub unsafe fn is_ped_getting_into_a_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0xBB062B2B5722478Eu64, ped)
    } // 0xBB062B2B5722478E 0x90E805AC b323
    pub unsafe fn is_ped_trying_to_enter_a_locked_vehicle(ped: Ped) -> bool {
        call_native!(bool, 0x44D28D5DDFE5F68Cu64, ped)
    } // 0x44D28D5DDFE5F68C 0x46828B4E b323
    pub unsafe fn set_enable_handcuffs(ped: Ped, toggle: bool) {
        call_native!(Void, 0xDF1AF8B5D56542FAu64, ped, toggle);
    } // 0xDF1AF8B5D56542FA 0xAC9BBA23 b323
    pub unsafe fn set_enable_bound_ankles(ped: Ped, toggle: bool) {
        call_native!(Void, 0xC52E0F855C58FC2Eu64, ped, toggle);
    } // 0xC52E0F855C58FC2E 0x9208D689 b323
    pub unsafe fn set_enable_scuba(ped: Ped, toggle: bool) {
        call_native!(Void, 0xF99F62004024D506u64, ped, toggle);
    } // 0xF99F62004024D506 0x7BF61471 b323
    pub unsafe fn set_can_attack_friendly(ped: Ped, toggle: bool, p_2: bool) {
        call_native!(Void, 0xB3B1CB349FF9C75Du64, ped, toggle, p_2);
    } // 0xB3B1CB349FF9C75D 0x47C60963 b323
    pub unsafe fn get_ped_alertness(ped: Ped) -> i32 {
        call_native!(i32, 0xF6AA118530443FD2u64, ped)
    } // 0xF6AA118530443FD2 0xF83E4DAF b323
    pub unsafe fn set_ped_alertness(ped: Ped, value: i32) {
        call_native!(Void, 0xDBA71115ED9941A6u64, ped, value);
    } // 0xDBA71115ED9941A6 0x2C32D9AE b323
    pub unsafe fn set_ped_get_out_upside_down_vehicle(ped: Ped, toggle: bool) {
        call_native!(Void, 0xBC0ED94165A48BC2u64, ped, toggle);
    } // 0xBC0ED94165A48BC2 0x89AD49FF b323
    pub unsafe fn set_ped_movement_clipset(ped: Ped, clip_set: *const i8, transition_speed: f32) {
        call_native!(Void, 0xAF8A94EDE7712BEFu64, ped, clip_set, transition_speed);
    } // 0xAF8A94EDE7712BEF 0xA817CDEB b323
    pub unsafe fn reset_ped_movement_clipset(ped: Ped, p_1: f32) {
        call_native!(Void, 0xAA74EC0CB0AAEA2Cu64, ped, p_1);
    } // 0xAA74EC0CB0AAEA2C 0xB83CEE93 b323
    pub unsafe fn set_ped_strafe_clipset(ped: Ped, clip_set: *const i8) {
        call_native!(Void, 0x29A28F3F8CF6D854u64, ped, clip_set);
    } // 0x29A28F3F8CF6D854 0x0BACF010 b323
    pub unsafe fn reset_ped_strafe_clipset(ped: Ped) {
        call_native!(Void, 0x20510814175EA477u64, ped);
    } // 0x20510814175EA477 0xF1967A12 b323
    pub unsafe fn set_ped_weapon_movement_clipset(ped: Ped, clip_set: *const i8) {
        call_native!(Void, 0x2622E35B77D3ACA2u64, ped, clip_set);
    } // 0x2622E35B77D3ACA2 0xF8BE54DC b323
    pub unsafe fn reset_ped_weapon_movement_clipset(ped: Ped) {
        call_native!(Void, 0x97B0DB5B4AA74E77u64, ped);
    } // 0x97B0DB5B4AA74E77 0xC60C9ACD b323
    pub unsafe fn set_ped_drive_by_clipset_override(ped: Ped, clipset: *const i8) {
        call_native!(Void, 0xED34AB6C5CB36520u64, ped, clipset);
    } // 0xED34AB6C5CB36520 0xD4C73595 b323
    pub unsafe fn clear_ped_drive_by_clipset_override(ped: Ped) {
        call_native!(Void, 0x4AFE3690D7E0B5ACu64, ped);
    } // 0x4AFE3690D7E0B5AC 0xAEC9163B b323
    pub unsafe fn set_ped_motion_in_cover_clipset_override(ped: Ped, p_1: *const i8) {
        call_native!(Void, 0x9DBA107B4937F809u64, ped, p_1);
    } // 0x9DBA107B4937F809  b323
    pub unsafe fn clear_ped_motion_in_cover_clipset_override(ped: Ped) {
        call_native!(Void, 0xC79196DCB36F6121u64, ped);
    } // 0xC79196DCB36F6121  b323
    pub unsafe fn clear_ped_fall_upper_body_clipset_override(ped: Ped) {
        call_native!(Void, 0x80054D7FCC70EEC6u64, ped);
    } // 0x80054D7FCC70EEC6  b323
    pub unsafe fn set_ped_in_vehicle_context(ped: Ped, context: Hash) {
        call_native!(Void, 0x530071295899A8C6u64, ped, context);
    } // 0x530071295899A8C6 0x27F25C0E b323
    pub unsafe fn reset_ped_in_vehicle_context(ped: Ped) {
        call_native!(Void, 0x22EF8FF8778030EBu64, ped);
    } // 0x22EF8FF8778030EB 0x3C94D88A b323
    pub unsafe fn is_scripted_scenario_ped_using_conditional_anim(
        ped: Ped,
        anim_dict: *const i8,
        anim: *const i8,
    ) -> bool {
        call_native!(bool, 0x6EC47A344923E1EDu64, ped, anim_dict, anim)
    } // 0x6EC47A344923E1ED 0x3C30B447 b323
    pub unsafe fn set_ped_alternate_walk_anim(
        ped: Ped,
        anim_dict: *const i8,
        anim_name: *const i8,
        p_3: f32,
        p_4: bool,
    ) {
        call_native!(
            Void,
            0x6C60394CB4F75E9Au64,
            ped,
            anim_dict,
            anim_name,
            p_3,
            p_4
        );
    } // 0x6C60394CB4F75E9A 0x895E1D67 b323
    pub unsafe fn clear_ped_alternate_walk_anim(ped: Ped, p_1: f32) {
        call_native!(Void, 0x8844BBFCE30AA9E9u64, ped, p_1);
    } // 0x8844BBFCE30AA9E9 0x5736FB23 b323
    pub unsafe fn set_ped_alternate_movement_anim(
        ped: Ped,
        stance: i32,
        anim_dictionary: *const i8,
        animation_name: *const i8,
        p_4: f32,
        p_5: bool,
    ) {
        call_native!(
            Void,
            0x90A43CC281FFAB46u64,
            ped,
            stance,
            anim_dictionary,
            animation_name,
            p_4,
            p_5
        );
    } // 0x90A43CC281FFAB46 0xBA84FD8C b323
    pub unsafe fn clear_ped_alternate_movement_anim(ped: Ped, stance: i32, p_2: f32) {
        call_native!(Void, 0xD8D19675ED5FBDCEu64, ped, stance, p_2);
    } // 0xD8D19675ED5FBDCE 0x7A7F5BC3 b323
    pub unsafe fn set_ped_gesture_group(ped: Ped, anim_group_gesture: *const i8) {
        call_native!(Void, 0xDDF803377F94AAA8u64, ped, anim_group_gesture);
    } // 0xDDF803377F94AAA8 0x170DA109 b323
    pub unsafe fn get_anim_initial_offset_position(
        anim_dict: *const i8,
        anim_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        p_8: f32,
        p_9: i32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0xBE22B26DD764C040u64,
            anim_dict,
            anim_name,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            p_8,
            p_9
        )
    } // 0xBE22B26DD764C040 0xC59D4268 b323
    pub unsafe fn get_anim_initial_offset_rotation(
        anim_dict: *const i8,
        anim_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        p_8: f32,
        p_9: i32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x4B805E6046EE9E47u64,
            anim_dict,
            anim_name,
            x,
            y,
            z,
            x_rot,
            y_rot,
            z_rot,
            p_8,
            p_9
        )
    } // 0x4B805E6046EE9E47 0x5F7789E6 b323
    pub unsafe fn get_ped_drawable_variation(ped: Ped, component_id: i32) -> i32 {
        call_native!(i32, 0x67F3780DD425D4FCu64, ped, component_id)
    } // 0x67F3780DD425D4FC 0x29850FE2 b323
    pub unsafe fn get_number_of_ped_drawable_variations(ped: Ped, component_id: i32) -> i32 {
        call_native!(i32, 0x27561561732A7842u64, ped, component_id)
    } // 0x27561561732A7842 0x9754C27D b323
    pub unsafe fn get_ped_texture_variation(ped: Ped, component_id: i32) -> i32 {
        call_native!(i32, 0x04A355E041E004E6u64, ped, component_id)
    } // 0x04A355E041E004E6 0xC0A8590A b323
    pub unsafe fn get_number_of_ped_texture_variations(
        ped: Ped,
        component_id: i32,
        drawable_id: i32,
    ) -> i32 {
        call_native!(i32, 0x8F7156A3142A6BADu64, ped, component_id, drawable_id)
    } // 0x8F7156A3142A6BAD 0x83D9FBE7 b323
    pub unsafe fn get_number_of_ped_prop_drawable_variations(ped: Ped, prop_id: i32) -> i32 {
        call_native!(i32, 0x5FAF9754E789FB47u64, ped, prop_id)
    } // 0x5FAF9754E789FB47 0xC9780B95 b323
    pub unsafe fn get_number_of_ped_prop_texture_variations(
        ped: Ped,
        prop_id: i32,
        drawable_id: i32,
    ) -> i32 {
        call_native!(i32, 0xA6E7F1CEB523E171u64, ped, prop_id, drawable_id)
    } // 0xA6E7F1CEB523E171 0x4892B882 b323
    pub unsafe fn get_ped_palette_variation(ped: Ped, component_id: i32) -> i32 {
        call_native!(i32, 0xE3DD5F2A84B42281u64, ped, component_id)
    } // 0xE3DD5F2A84B42281 0xEF1BC082 b323
    pub unsafe fn get_mp_outfit_data_from_metadata(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0x9E30E91FB03A2CAFu64, p_0, p_1)
    } // 0x9E30E91FB03A2CAF 0x52559BB6 b323
    pub unsafe fn get_fm_male_shop_ped_apparel_item_index(p_0: i32) -> i32 {
        call_native!(i32, 0x1E77FA7A62EE6C4Cu64, p_0)
    } // 0x1E77FA7A62EE6C4C 0x021F5B36 b323
    pub unsafe fn get_fm_female_shop_ped_apparel_item_index(p_0: i32) -> i32 {
        call_native!(i32, 0xF033419D1B81FAE8u64, p_0)
    } // 0xF033419D1B81FAE8 0x8FDDB5DB b323
    pub unsafe fn is_ped_component_variation_valid(
        ped: Ped,
        component_id: i32,
        drawable_id: i32,
        texture_id: i32,
    ) -> bool {
        call_native!(
            bool,
            0xE825F6B6CEA7671Du64,
            ped,
            component_id,
            drawable_id,
            texture_id
        )
    } // 0xE825F6B6CEA7671D 0x952ABD9A b323
    pub unsafe fn set_ped_component_variation(
        ped: Ped,
        component_id: i32,
        drawable_id: i32,
        texture_id: i32,
        palette_id: i32,
    ) {
        call_native!(
            Void,
            0x262B14F48D29DE80u64,
            ped,
            component_id,
            drawable_id,
            texture_id,
            palette_id
        );
    } // 0x262B14F48D29DE80 0xD4F7B05C b323
    pub unsafe fn set_ped_random_component_variation(ped: Ped, p_1: i32) {
        call_native!(Void, 0xC8A9481A01E63C28u64, ped, p_1);
    } // 0xC8A9481A01E63C28 0x4111BA46 b323
    pub unsafe fn set_ped_random_props(ped: Ped) {
        call_native!(Void, 0xC44AA05345C992C6u64, ped);
    } // 0xC44AA05345C992C6 0xE3318E0E b323
    pub unsafe fn set_ped_default_component_variation(ped: Ped) {
        call_native!(Void, 0x45EEE61580806D63u64, ped);
    } // 0x45EEE61580806D63 0xC866A984 b323
    pub unsafe fn set_ped_blend_from_parents(ped: Ped, p_1: Any, p_2: Any, p_3: f32, p_4: f32) {
        call_native!(Void, 0x137BBD05230DB22Du64, ped, p_1, p_2, p_3, p_4);
    } // 0x137BBD05230DB22D 0x837BD370 b323
    pub unsafe fn set_ped_head_blend_data(
        ped: Ped,
        shape_first_i_d: i32,
        shape_second_i_d: i32,
        shape_third_i_d: i32,
        skin_first_i_d: i32,
        skin_second_i_d: i32,
        skin_third_i_d: i32,
        shape_mix: f32,
        skin_mix: f32,
        third_mix: f32,
        is_parent: bool,
    ) {
        call_native!(
            Void,
            0x9414E18B9434C2FEu64,
            ped,
            shape_first_i_d,
            shape_second_i_d,
            shape_third_i_d,
            skin_first_i_d,
            skin_second_i_d,
            skin_third_i_d,
            shape_mix,
            skin_mix,
            third_mix,
            is_parent
        );
    } // 0x9414E18B9434C2FE 0x60746B88 b323
    pub unsafe fn get_ped_head_blend_data(ped: Ped, head_blend_data: *mut Any) -> bool {
        call_native!(bool, 0x2746BD9D88C5C5D0u64, ped, head_blend_data)
    } // 0x2746BD9D88C5C5D0 0x44E1680C b323
    pub unsafe fn update_ped_head_blend_data(
        ped: Ped,
        shape_mix: f32,
        skin_mix: f32,
        third_mix: f32,
    ) {
        call_native!(
            Void,
            0x723538F61C647C5Au64,
            ped,
            shape_mix,
            skin_mix,
            third_mix
        );
    } // 0x723538F61C647C5A 0x5CB76219 b323
    pub unsafe fn set_head_blend_eye_color(ped: Ped, index: i32) {
        call_native!(Void, 0x50B56988B170AFDFu64, ped, index);
    } // 0x50B56988B170AFDF  b323
    pub unsafe fn get_head_blend_eye_color(ped: Ped) -> i32 {
        call_native!(i32, 0x76BBA2CEE66D47E9u64, ped)
    } // 0x76BBA2CEE66D47E9  b1011
    pub unsafe fn set_ped_head_overlay(ped: Ped, overlay_i_d: i32, index: i32, opacity: f32) {
        call_native!(
            Void,
            0x48F44967FA05CC1Eu64,
            ped,
            overlay_i_d,
            index,
            opacity
        );
    } // 0x48F44967FA05CC1E 0xD28DBA90 b323
    pub unsafe fn get_ped_head_overlay(ped: Ped, overlay_i_d: i32) -> i32 {
        call_native!(i32, 0xA60EF3B6461A4D43u64, ped, overlay_i_d)
    } // 0xA60EF3B6461A4D43  b323
    pub unsafe fn get_ped_head_overlay_num(overlay_i_d: i32) -> i32 {
        call_native!(i32, 0xCF1CE768BB43480Eu64, overlay_i_d)
    } // 0xCF1CE768BB43480E 0xFF43C18D b323
    pub unsafe fn set_ped_head_overlay_tint(
        ped: Ped,
        overlay_i_d: i32,
        color_type: i32,
        color_i_d: i32,
        second_color_i_d: i32,
    ) {
        call_native!(
            Void,
            0x497BF74A7B9CB952u64,
            ped,
            overlay_i_d,
            color_type,
            color_i_d,
            second_color_i_d
        );
    } // 0x497BF74A7B9CB952  b323
    pub unsafe fn set_ped_hair_tint(ped: Ped, color_i_d: i32, highlight_color_i_d: i32) {
        call_native!(
            Void,
            0x4CFFC65454C93A49u64,
            ped,
            color_i_d,
            highlight_color_i_d
        );
    } // 0x4CFFC65454C93A49  b323
    pub unsafe fn get_num_ped_hair_tints() -> i32 {
        call_native!(i32, 0xE5C0CF872C2AD150u64)
    } // 0xE5C0CF872C2AD150  b323
    pub unsafe fn get_num_ped_makeup_tints() -> i32 {
        call_native!(i32, 0xD1F7CA1535D22818u64)
    } // 0xD1F7CA1535D22818  b323
    pub unsafe fn get_ped_hair_tint_color(
        hair_color_index: i32,
        out_r: *mut i32,
        out_g: *mut i32,
        out_b: *mut i32,
    ) {
        call_native!(
            Void,
            0x4852FC386E2E1BB5u64,
            hair_color_index,
            out_r,
            out_g,
            out_b
        );
    } // 0x4852FC386E2E1BB5  b323
    pub unsafe fn get_ped_makeup_tint_color(
        makeup_color_index: i32,
        out_r: *mut i32,
        out_g: *mut i32,
        out_b: *mut i32,
    ) {
        call_native!(
            Void,
            0x013E5CFC38CD5387u64,
            makeup_color_index,
            out_r,
            out_g,
            out_b
        );
    } // 0x013E5CFC38CD5387  b323
    pub unsafe fn is_ped_hair_tint_for_creator(color_id: i32) -> bool {
        call_native!(bool, 0xED6D8E27A43B8CDEu64, color_id)
    } // 0xED6D8E27A43B8CDE  b323
    pub unsafe fn get_default_secondary_tint_for_creator(color_id: i32) -> i32 {
        call_native!(i32, 0xEA9960D07DADCF10u64, color_id)
    } // 0xEA9960D07DADCF10  b323
    pub unsafe fn is_ped_lipstick_tint_for_creator(color_id: i32) -> bool {
        call_native!(bool, 0x3E802F11FBE27674u64, color_id)
    } // 0x3E802F11FBE27674  b323
    pub unsafe fn is_ped_blush_tint_for_creator(color_id: i32) -> bool {
        call_native!(bool, 0xF41B5D290C99A3D6u64, color_id)
    } // 0xF41B5D290C99A3D6  b323
    pub unsafe fn is_ped_hair_tint_for_barber(color_i_d: i32) -> bool {
        call_native!(bool, 0xE0D36E5D9E99CC21u64, color_i_d)
    } // 0xE0D36E5D9E99CC21  b323
    pub unsafe fn get_default_secondary_tint_for_barber(color_i_d: i32) -> i32 {
        call_native!(i32, 0xAAA6A3698A69E048u64, color_i_d)
    } // 0xAAA6A3698A69E048  b323
    pub unsafe fn is_ped_lipstick_tint_for_barber(color_i_d: i32) -> bool {
        call_native!(bool, 0x0525A2C2562F3CD4u64, color_i_d)
    } // 0x0525A2C2562F3CD4  b323
    pub unsafe fn is_ped_blush_tint_for_barber(color_i_d: i32) -> bool {
        call_native!(bool, 0x604E810189EE3A59u64, color_i_d)
    } // 0x604E810189EE3A59  b323
    pub unsafe fn is_ped_blush_facepaint_tint_for_barber(color_id: i32) -> bool {
        call_native!(bool, 0x09E7ECA981D9B210u64, color_id)
    } // 0x09E7ECA981D9B210  b1290
    pub unsafe fn get_tint_index_for_last_gen_hair_texture(
        model_hash: Hash,
        drawable_id: i32,
        texture_id: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xC56FBF2F228E1DACu64,
            model_hash,
            drawable_id,
            texture_id
        )
    } // 0xC56FBF2F228E1DAC  b323
    pub unsafe fn set_ped_micro_morph(ped: Ped, index: i32, scale: f32) {
        call_native!(Void, 0x71A5C1DBA060049Eu64, ped, index, scale);
    } // 0x71A5C1DBA060049E  b323
    pub unsafe fn has_ped_head_blend_finished(ped: Ped) -> bool {
        call_native!(bool, 0x654CD0A825161131u64, ped)
    } // 0x654CD0A825161131 0x2B1BD9C5 b323
    pub unsafe fn finalize_head_blend(ped: Ped) {
        call_native!(Void, 0x4668D80430D6C299u64, ped);
    } // 0x4668D80430D6C299 0x894314A4 b323
    pub unsafe fn set_head_blend_palette_color(ped: Ped, r: i32, g: i32, b: i32, id: i32) {
        call_native!(Void, 0xCC9682B8951C5229u64, ped, r, g, b, id);
    } // 0xCC9682B8951C5229 0x57E5B3F9 b323
    pub unsafe fn disable_head_blend_palette_color(ped: Ped) {
        call_native!(Void, 0xA21C118553BBDF02u64, ped);
    } // 0xA21C118553BBDF02 0xC6F36292 b323
    pub unsafe fn get_ped_head_blend_first_index(_type: i32) -> i32 {
        call_native!(i32, 0x68D353AB88B97E0Cu64, _type)
    } // 0x68D353AB88B97E0C 0x211DEFEC b323
    pub unsafe fn get_ped_head_blend_num_heads(_type: i32) -> i32 {
        call_native!(i32, 0x5EF37013A6539C9Du64, _type)
    } // 0x5EF37013A6539C9D 0x095D3BD8 b323
    pub unsafe fn set_ped_preload_variation_data(
        ped: Ped,
        slot: i32,
        drawable_id: i32,
        texture_id: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x39D55A620FCB6A3Au64,
            ped,
            slot,
            drawable_id,
            texture_id
        )
    } // 0x39D55A620FCB6A3A 0x45F3BDFB b323
    pub unsafe fn has_ped_preload_variation_data_finished(ped: Ped) -> bool {
        call_native!(bool, 0x66680A92700F43DFu64, ped)
    } // 0x66680A92700F43DF 0xC6517D52 b323
    pub unsafe fn release_ped_preload_variation_data(ped: Ped) {
        call_native!(Void, 0x5AAB586FFEC0FD96u64, ped);
    } // 0x5AAB586FFEC0FD96 0x6435F67F b323
    pub unsafe fn set_ped_preload_prop_data(
        ped: Ped,
        component_id: i32,
        drawable_id: i32,
        _texture_id: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x2B16A3BFF1FBCE49u64,
            ped,
            component_id,
            drawable_id,
            _texture_id
        )
    } // 0x2B16A3BFF1FBCE49 0xC0E23671 b323
    pub unsafe fn has_ped_preload_prop_data_finished(ped: Ped) -> bool {
        call_native!(bool, 0x784002A632822099u64, ped)
    } // 0x784002A632822099 0x3B0CA391 b323
    pub unsafe fn release_ped_preload_prop_data(ped: Ped) {
        call_native!(Void, 0xF79F9DEF0AADE61Au64, ped);
    } // 0xF79F9DEF0AADE61A 0xFD103BA7 b323
    pub unsafe fn get_ped_prop_index(ped: Ped, component_id: i32, p_2: Any) -> i32 {
        call_native!(i32, 0x898CC20EA75BACD8u64, ped, component_id, p_2)
    } // 0x898CC20EA75BACD8 0x746DDAC0 b323
    pub unsafe fn set_ped_prop_index(
        ped: Ped,
        component_id: i32,
        drawable_id: i32,
        _texture_id: i32,
        attach: bool,
        p_5: Any,
    ) {
        call_native!(
            Void,
            0x93376B65A266EB5Fu64,
            ped,
            component_id,
            drawable_id,
            _texture_id,
            attach,
            p_5
        );
    } // 0x93376B65A266EB5F 0x0829F2E2 b323
    pub unsafe fn knock_off_ped_prop(ped: Ped, p_1: bool, p_2: bool, p_3: bool, p_4: bool) {
        call_native!(Void, 0x6FD7816A36615F48u64, ped, p_1, p_2, p_3, p_4);
    } // 0x6FD7816A36615F48 0x08D8B180 b323
    pub unsafe fn clear_ped_prop(ped: Ped, prop_id: i32, p_2: Any) {
        call_native!(Void, 0x0943E5B8E078E76Eu64, ped, prop_id, p_2);
    } // 0x0943E5B8E078E76E 0x2D23D743 b323
    pub unsafe fn clear_all_ped_props(ped: Ped, p_1: Any) {
        call_native!(Void, 0xCD8A7537A9B52F06u64, ped, p_1);
    } // 0xCD8A7537A9B52F06 0x81DF8B43 b323
    pub unsafe fn drop_ambient_prop(ped: Ped) {
        call_native!(Void, 0xAFF4710E2A0A6C12u64, ped);
    } // 0xAFF4710E2A0A6C12 0x728D3D53 b323
    pub unsafe fn get_ped_prop_texture_index(ped: Ped, component_id: i32) -> i32 {
        call_native!(i32, 0xE131A28626F81AB2u64, ped, component_id)
    } // 0xE131A28626F81AB2 0x922A6653 b323
    pub unsafe fn clear_ped_parachute_pack_variation(ped: Ped) {
        call_native!(Void, 0x1280804F7CFD2D6Cu64, ped);
    } // 0x1280804F7CFD2D6C 0x7BCD8991 b323
    pub unsafe fn set_ped_scuba_gear_variation(ped: Ped) {
        call_native!(Void, 0x36C6984C3ED0C911u64, ped);
    } // 0x36C6984C3ED0C911  b323
    pub unsafe fn clear_ped_scuba_gear_variation(ped: Ped) {
        call_native!(Void, 0xB50EB4CCB29704ACu64, ped);
    } // 0xB50EB4CCB29704AC 0x080275EE b323
    pub unsafe fn is_using_ped_scuba_gear_variation(p_0: Any) -> bool {
        call_native!(bool, 0xFEC9A3B1820F3331u64, p_0)
    } // 0xFEC9A3B1820F3331  b323
    pub unsafe fn set_blocking_of_non_temporary_events(ped: Ped, toggle: bool) {
        call_native!(Void, 0x9F8AA94D6D97DBF4u64, ped, toggle);
    } // 0x9F8AA94D6D97DBF4 0xDFE34E4A b323
    pub unsafe fn set_ped_bounds_orientation(ped: Ped, p_1: f32, p_2: f32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x4F5F651ACCC9C4CFu64, ped, p_1, p_2, x, y, z);
    } // 0x4F5F651ACCC9C4CF 0xCFA20D68 b323
    pub unsafe fn register_target(ped: Ped, target: Ped) {
        call_native!(Void, 0x2F25D9AEFA34FBA2u64, ped, target);
    } // 0x2F25D9AEFA34FBA2 0x50A95442 b323
    pub unsafe fn register_hated_targets_around_ped(ped: Ped, radius: f32) {
        call_native!(Void, 0x9222F300BF8354FEu64, ped, radius);
    } // 0x9222F300BF8354FE 0x7F87559E b323
    pub unsafe fn get_random_ped_at_coord(
        x: f32,
        y: f32,
        z: f32,
        x_radius: f32,
        y_radius: f32,
        z_radius: f32,
        ped_type: i32,
    ) -> Ped {
        call_native!(
            Ped,
            0x876046A8E3A4B71Cu64,
            x,
            y,
            z,
            x_radius,
            y_radius,
            z_radius,
            ped_type
        )
    } // 0x876046A8E3A4B71C 0xDC8239EB b323
    pub unsafe fn get_closest_ped(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: bool,
        p_5: bool,
        out_ped: *mut Ped,
        p_7: bool,
        p_8: bool,
        ped_type: i32,
    ) -> bool {
        call_native!(
            bool,
            0xC33AB876A77F8164u64,
            x,
            y,
            z,
            radius,
            p_4,
            p_5,
            out_ped,
            p_7,
            p_8,
            ped_type
        )
    } // 0xC33AB876A77F8164 0x8F6C1F55 b323
    pub unsafe fn set_scenario_peds_to_be_returned_by_next_command(value: bool) {
        call_native!(Void, 0x14F19A8782C8071Eu64, value);
    } // 0x14F19A8782C8071E 0x85615FD0 b323
    pub unsafe fn get_can_ped_be_grabbed_by_script(
        ped: Ped,
        p_1: bool,
        p_2: bool,
        p_3: bool,
        p_4: bool,
        p_5: bool,
        p_6: bool,
        p_7: bool,
        p_8: Any,
    ) -> bool {
        call_native!(
            bool,
            0x03EA03AF85A85CB7u64,
            ped,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        )
    } // 0x03EA03AF85A85CB7 0x18DD76A1 b323
    pub unsafe fn set_driver_racing_modifier(driver: Ped, modifier: f32) {
        call_native!(Void, 0xDED5AF5A0EA4B297u64, driver, modifier);
    } // 0xDED5AF5A0EA4B297 0x6D55B3B3 b323
    pub unsafe fn set_driver_ability(driver: Ped, ability: f32) {
        call_native!(Void, 0xB195FFA8042FC5C3u64, driver, ability);
    } // 0xB195FFA8042FC5C3 0xAAD4012C b323
    pub unsafe fn set_driver_aggressiveness(driver: Ped, aggressiveness: f32) {
        call_native!(Void, 0xA731F608CA104E3Cu64, driver, aggressiveness);
    } // 0xA731F608CA104E3C 0x8B02A8FB b323
    pub unsafe fn can_ped_ragdoll(ped: Ped) -> bool {
        call_native!(bool, 0x128F79EDCECE4FD5u64, ped)
    } // 0x128F79EDCECE4FD5 0xC0EFB7A3 b323
    pub unsafe fn set_ped_to_ragdoll(
        ped: Ped,
        time_1: i32,
        time_2: i32,
        ragdoll_type: i32,
        p_4: bool,
        p_5: bool,
        p_6: bool,
    ) -> bool {
        call_native!(
            bool,
            0xAE99FB955581844Au64,
            ped,
            time_1,
            time_2,
            ragdoll_type,
            p_4,
            p_5,
            p_6
        )
    } // 0xAE99FB955581844A 0x83CB5052 b323
    pub unsafe fn set_ped_to_ragdoll_with_fall(
        ped: Ped,
        time: i32,
        p_2: i32,
        ragdoll_type: i32,
        x: f32,
        y: f32,
        z: f32,
        velocity: f32,
        p_8: f32,
        p_9: f32,
        p_1_0: f32,
        p_1_1: f32,
        p_1_2: f32,
        p_1_3: f32,
    ) -> bool {
        call_native!(
            bool,
            0xD76632D99E4966C8u64,
            ped,
            time,
            p_2,
            ragdoll_type,
            x,
            y,
            z,
            velocity,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3
        )
    } // 0xD76632D99E4966C8 0xFA12E286 b323
    pub unsafe fn set_ped_ragdoll_on_collision(ped: Ped, toggle: bool) {
        call_native!(Void, 0xF0A4F1BBF4FA7497u64, ped, toggle);
    } // 0xF0A4F1BBF4FA7497 0x2654A0F4 b323
    pub unsafe fn is_ped_ragdoll(ped: Ped) -> bool {
        call_native!(bool, 0x47E4E977581C5B55u64, ped)
    } // 0x47E4E977581C5B55 0xC833BBE1 b323
    pub unsafe fn is_ped_running_ragdoll_task(ped: Ped) -> bool {
        call_native!(bool, 0xE3B6097CC25AA69Eu64, ped)
    } // 0xE3B6097CC25AA69E 0x44A153F2 b323
    pub unsafe fn set_ped_ragdoll_force_fall(ped: Ped) {
        call_native!(Void, 0x01F6594B923B9251u64, ped);
    } // 0x01F6594B923B9251 0x20A5BDE0 b323
    pub unsafe fn reset_ped_ragdoll_timer(ped: Ped) {
        call_native!(Void, 0x9FA4664CF62E47E8u64, ped);
    } // 0x9FA4664CF62E47E8 0xF2865370 b323
    pub unsafe fn set_ped_can_ragdoll(ped: Ped, toggle: bool) {
        call_native!(Void, 0xB128377056A54E2Au64, ped, toggle);
    } // 0xB128377056A54E2A 0xCF1384C4 b323
    pub unsafe fn is_ped_running_melee_task(ped: Ped) -> bool {
        call_native!(bool, 0xD1871251F3B5ACD7u64, ped)
    } // 0xD1871251F3B5ACD7 0xBD4236F6 b323
    pub unsafe fn is_ped_running_mobile_phone_task(ped: Ped) -> bool {
        call_native!(bool, 0x2AFE52F782F25775u64, ped)
    } // 0x2AFE52F782F25775 0xFB2AFED1 b323
    pub unsafe fn is_mobile_phone_to_ped_ear(ped: Ped) -> bool {
        call_native!(bool, 0xA3F3564A5B3646C0u64, ped)
    } // 0xA3F3564A5B3646C0 0x97353375 b323
    pub unsafe fn set_ragdoll_blocking_flags(ped: Ped, blocking_flag: i32) {
        call_native!(Void, 0x26695EC767728D84u64, ped, blocking_flag);
    } // 0x26695EC767728D84 0x9C8F830D b323
    pub unsafe fn clear_ragdoll_blocking_flags(ped: Ped, blocking_flag: i32) {
        call_native!(Void, 0xD86D101FCFD00A4Bu64, ped, blocking_flag);
    } // 0xD86D101FCFD00A4B 0x77CBA290 b323
    pub unsafe fn set_ped_angled_defensive_area(
        ped: Ped,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: bool,
        p_9: bool,
    ) {
        call_native!(
            Void,
            0xC7F76DF27A5045A1u64,
            ped,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0xC7F76DF27A5045A1 0x3EFBDD9B b323
    pub unsafe fn set_ped_sphere_defensive_area(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_5: bool,
        p_6: bool,
    ) {
        call_native!(Void, 0x9D3151A373974804u64, ped, x, y, z, radius, p_5, p_6);
    } // 0x9D3151A373974804 0xBD96D8E8 b323
    pub unsafe fn set_ped_defensive_sphere_attached_to_ped(
        ped: Ped,
        target: Ped,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        radius: f32,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0xF9B8F91AAD3B953Eu64,
            ped,
            target,
            x_offset,
            y_offset,
            z_offset,
            radius,
            p_6
        );
    } // 0xF9B8F91AAD3B953E 0x40638BDC b323
    pub unsafe fn set_ped_defensive_sphere_attached_to_vehicle(
        ped: Ped,
        target: Vehicle,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        radius: f32,
        p_6: bool,
    ) {
        call_native!(
            Void,
            0xE4723DB6E736CCFFu64,
            ped,
            target,
            x_offset,
            y_offset,
            z_offset,
            radius,
            p_6
        );
    } // 0xE4723DB6E736CCFF 0x4763B2C6 b323
    pub unsafe fn set_ped_defensive_area_attached_to_ped(
        ped: Ped,
        attach_ped: Ped,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: bool,
        p_1_0: bool,
    ) {
        call_native!(
            Void,
            0x4EF47FE21698A8B6u64,
            ped,
            attach_ped,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0x4EF47FE21698A8B6 0x74BDA7CE b323
    pub unsafe fn set_ped_defensive_area_direction(
        ped: Ped,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: bool,
    ) {
        call_native!(Void, 0x413C6C763A4AFFADu64, ped, p_1, p_2, p_3, p_4);
    } // 0x413C6C763A4AFFAD 0xB66B0C9A b323
    pub unsafe fn remove_ped_defensive_area(ped: Ped, toggle: bool) {
        call_native!(Void, 0x74D4E028107450A9u64, ped, toggle);
    } // 0x74D4E028107450A9 0x34AAAFA5 b323
    pub unsafe fn get_ped_defensive_area_position(ped: Ped, p_1: bool) -> Vector3 {
        call_native!(Vector3, 0x3C06B8786DD94CD1u64, ped, p_1)
    } // 0x3C06B8786DD94CD1 0xCB65198D b323
    pub unsafe fn is_ped_defensive_area_active(ped: Ped, p_1: bool) -> bool {
        call_native!(bool, 0xBA63D9FE45412247u64, ped, p_1)
    } // 0xBA63D9FE45412247 0x6D88BCD3 b323
    pub unsafe fn set_ped_preferred_cover_set(ped: Ped, item_set: Any) {
        call_native!(Void, 0x8421EB4DA7E391B9u64, ped, item_set);
    } // 0x8421EB4DA7E391B9 0xF3B7EFBF b323
    pub unsafe fn remove_ped_preferred_cover_set(ped: Ped) {
        call_native!(Void, 0xFDDB234CF74073D9u64, ped);
    } // 0xFDDB234CF74073D9 0xA0134498 b323
    pub unsafe fn revive_injured_ped(ped: Ped) {
        call_native!(Void, 0x8D8ACD8388CD99CEu64, ped);
    } // 0x8D8ACD8388CD99CE 0x14D3E6E3 b323
    pub unsafe fn resurrect_ped(ped: Ped) {
        call_native!(Void, 0x71BC8E838B9C6035u64, ped);
    } // 0x71BC8E838B9C6035 0xA4B82097 b323
    pub unsafe fn set_ped_name_debug(ped: Ped, name: *const i8) {
        call_native!(Void, 0x98EFA132A4117BE1u64, ped, name);
    } // 0x98EFA132A4117BE1 0x20D6273E b323
    pub unsafe fn get_ped_extracted_displacement(ped: Ped, world_space: bool) -> Vector3 {
        call_native!(Vector3, 0xE0AF41401ADF87E3u64, ped, world_space)
    } // 0xE0AF41401ADF87E3 0x5231F901 b323
    pub unsafe fn set_ped_dies_when_injured(ped: Ped, toggle: bool) {
        call_native!(Void, 0x5BA7919BED300023u64, ped, toggle);
    } // 0x5BA7919BED300023 0xE94E24D4 b323
    pub unsafe fn set_ped_enable_weapon_blocking(ped: Ped, toggle: bool) {
        call_native!(Void, 0x97A790315D3831FDu64, ped, toggle);
    } // 0x97A790315D3831FD 0x4CAD1A4A b323
    pub unsafe fn special_function_do_not_use(ped: Ped, p_1: bool) {
        call_native!(Void, 0xF9ACF4A08098EA25u64, ped, p_1);
    } // 0xF9ACF4A08098EA25 0x141CC936 b323
    pub unsafe fn reset_ped_visible_damage(ped: Ped) {
        call_native!(Void, 0x3AC1F7B898F30C05u64, ped);
    } // 0x3AC1F7B898F30C05 0xC4BC4841 b323
    pub unsafe fn apply_ped_blood_damage_by_zone(ped: Ped, p_1: Any, p_2: f32, p_3: f32, p_4: Any) {
        call_native!(Void, 0x816F6981C60BF53Bu64, ped, p_1, p_2, p_3, p_4);
    } // 0x816F6981C60BF53B 0x1E54DB12 b323
    pub unsafe fn apply_ped_blood(
        ped: Ped,
        bone_index: i32,
        x_rot: f32,
        y_rot: f32,
        z_rot: f32,
        wound_type: *const i8,
    ) {
        call_native!(
            Void,
            0x83F7E01C7B769A26u64,
            ped,
            bone_index,
            x_rot,
            y_rot,
            z_rot,
            wound_type
        );
    } // 0x83F7E01C7B769A26 0x376CE3C0 b323
    pub unsafe fn apply_ped_blood_by_zone(ped: Ped, p_1: i32, p_2: f32, p_3: f32, p_4: *const i8) {
        call_native!(Void, 0x3311E47B91EDCBBCu64, ped, p_1, p_2, p_3, p_4);
    } // 0x3311E47B91EDCBBC 0x8F3F3A9C b323
    pub unsafe fn apply_ped_blood_specific(
        ped: Ped,
        p_1: i32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: i32,
        p_7: f32,
        p_8: *const i8,
    ) {
        call_native!(
            Void,
            0xEF0D582CBF2D9B0Fu64,
            ped,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        );
    } // 0xEF0D582CBF2D9B0F 0xFC13CE80 b323
    pub unsafe fn apply_ped_damage_decal(
        ped: Ped,
        damage_zone: i32,
        x_offset: f32,
        y_offset: f32,
        heading: f32,
        scale: f32,
        alpha: f32,
        variation: i32,
        fade_in: bool,
        decal_name: *const i8,
    ) {
        call_native!(
            Void,
            0x397C38AA7B4A5F83u64,
            ped,
            damage_zone,
            x_offset,
            y_offset,
            heading,
            scale,
            alpha,
            variation,
            fade_in,
            decal_name
        );
    } // 0x397C38AA7B4A5F83 0x8A13A41F b323
    pub unsafe fn apply_ped_damage_pack(ped: Ped, damage_pack: *const i8, damage: f32, mult: f32) {
        call_native!(Void, 0x46DF918788CB093Fu64, ped, damage_pack, damage, mult);
    } // 0x46DF918788CB093F 0x208D0CB8 b323
    pub unsafe fn clear_ped_blood_damage(ped: Ped) {
        call_native!(Void, 0x8FE22675A5A45817u64, ped);
    } // 0x8FE22675A5A45817 0xF7ADC960 b323
    pub unsafe fn clear_ped_blood_damage_by_zone(ped: Ped, p_1: i32) {
        call_native!(Void, 0x56E3B78C5408D9F4u64, ped, p_1);
    } // 0x56E3B78C5408D9F4 0xF210BE69 b323
    pub unsafe fn hide_ped_blood_damage_by_zone(ped: Ped, p_1: Any, p_2: bool) {
        call_native!(Void, 0x62AB793144DE75DCu64, ped, p_1, p_2);
    } // 0x62AB793144DE75DC 0x0CB6C4ED b323
    pub unsafe fn clear_ped_damage_decal_by_zone(ped: Ped, p_1: i32, p_2: *const i8) {
        call_native!(Void, 0x523C79AEEFCC4A2Au64, ped, p_1, p_2);
    } // 0x523C79AEEFCC4A2A 0x70AA5B7D b323
    pub unsafe fn get_ped_decorations_state(ped: Ped) -> i32 {
        call_native!(i32, 0x71EAB450D86954A1u64, ped)
    } // 0x71EAB450D86954A1 0x47187F7F b323
    pub unsafe fn mark_ped_decorations_as_cloned_from_local_player(ped: Ped, p_1: bool) {
        call_native!(Void, 0x2B694AFCF64E6994u64, ped, p_1);
    } // 0x2B694AFCF64E6994  b323
    pub unsafe fn clear_ped_wetness(ped: Ped) {
        call_native!(Void, 0x9C720776DAA43E7Eu64, ped);
    } // 0x9C720776DAA43E7E 0x629F15BD b323
    pub unsafe fn set_ped_wetness_height(ped: Ped, height: f32) {
        call_native!(Void, 0x44CB6447D2571AA0u64, ped, height);
    } // 0x44CB6447D2571AA0 0x7B33289A b323
    pub unsafe fn set_ped_wetness_enabled_this_frame(ped: Ped) {
        call_native!(Void, 0xB5485E4907B53019u64, ped);
    } // 0xB5485E4907B53019 0xBDE749F7 b323
    pub unsafe fn set_ped_wetness(ped: Ped, wet_level: f32) {
        call_native!(Void, 0xAC0BB4D87777CAE2u64, ped, wet_level);
    } // 0xAC0BB4D87777CAE2  b2802
    pub unsafe fn clear_ped_env_dirt(ped: Ped) {
        call_native!(Void, 0x6585D955A68452A5u64, ped);
    } // 0x6585D955A68452A5 0xA993915F b323
    pub unsafe fn set_ped_sweat(ped: Ped, sweat: f32) {
        call_native!(Void, 0x27B0405F59637D1Fu64, ped, sweat);
    } // 0x27B0405F59637D1F 0x76A1DB9F b323
    pub unsafe fn add_ped_decoration_from_hashes(ped: Ped, collection: Hash, overlay: Hash) {
        call_native!(Void, 0x5F5D1665E352A839u64, ped, collection, overlay);
    } // 0x5F5D1665E352A839 0x70559AC7 b323
    pub unsafe fn add_ped_decoration_from_hashes_in_corona(
        ped: Ped,
        collection: Hash,
        overlay: Hash,
    ) {
        call_native!(Void, 0x5619BFA07CFD7833u64, ped, collection, overlay);
    } // 0x5619BFA07CFD7833 0x8CD3E487 b323
    pub unsafe fn get_ped_decoration_zone_from_hashes(collection: Hash, overlay: Hash) -> i32 {
        call_native!(i32, 0x9FD452BFBE7A7A8Bu64, collection, overlay)
    } // 0x9FD452BFBE7A7A8B 0x3543019E b323
    pub unsafe fn clear_ped_decorations(ped: Ped) {
        call_native!(Void, 0x0E5173C163976E38u64, ped);
    } // 0x0E5173C163976E38 0xD4496BF3 b323
    pub unsafe fn clear_ped_decorations_leave_scars(ped: Ped) {
        call_native!(Void, 0xE3B27E70CEAB9F0Cu64, ped);
    } // 0xE3B27E70CEAB9F0C 0xEFD58EB9 b323
    pub unsafe fn was_ped_skeleton_updated(ped: Ped) -> bool {
        call_native!(bool, 0x11B499C1E0FF8559u64, ped)
    } // 0x11B499C1E0FF8559 0xF7E2FBAD b323
    pub unsafe fn get_ped_bone_coords(
        ped: Ped,
        bone_id: i32,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x17C07FC640E86B4Eu64,
            ped,
            bone_id,
            offset_x,
            offset_y,
            offset_z
        )
    } // 0x17C07FC640E86B4E 0x4579CAB1 b323
    pub unsafe fn create_nm_message(start_immediately: bool, message_id: i32) {
        call_native!(Void, 0x418EF2A1BCE56685u64, start_immediately, message_id);
    } // 0x418EF2A1BCE56685 0x1CFBFD4B b323
    pub unsafe fn give_ped_nm_message(ped: Ped) {
        call_native!(Void, 0xB158DFCCC56E5C5Bu64, ped);
    } // 0xB158DFCCC56E5C5B 0x737C3689 b323
    pub unsafe fn add_scenario_blocking_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: bool,
        p_7: bool,
        p_8: bool,
        p_9: bool,
        p_1_0: Any,
    ) -> i32 {
        call_native!(
            i32,
            0x1B5C85C612E5256Eu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        )
    } // 0x1B5C85C612E5256E 0xA38C0234 b323
    pub unsafe fn remove_scenario_blocking_areas() {
        call_native!(Void, 0xD37401D78A929A49u64);
    } // 0xD37401D78A929A49 0x4DDF845F b323
    pub unsafe fn remove_scenario_blocking_area(p_0: Any, p_1: bool) {
        call_native!(Void, 0x31D16B74C6E29D66u64, p_0, p_1);
    } // 0x31D16B74C6E29D66 0x4483EF06 b323
    pub unsafe fn set_scenario_peds_spawn_in_sphere_area(
        x: f32,
        y: f32,
        z: f32,
        range: f32,
        p_4: i32,
    ) {
        call_native!(Void, 0x28157D43CF600981u64, x, y, z, range, p_4);
    } // 0x28157D43CF600981 0x80EAD297 b323
    pub unsafe fn does_scenario_blocking_area_exists(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0x8A24B067D175A7BDu64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0x8A24B067D175A7BD  b678
    pub unsafe fn is_ped_using_scenario(ped: Ped, scenario: *const i8) -> bool {
        call_native!(bool, 0x1BF094736DD62C2Eu64, ped, scenario)
    } // 0x1BF094736DD62C2E 0x0F65B0D4 b323
    pub unsafe fn is_ped_using_any_scenario(ped: Ped) -> bool {
        call_native!(bool, 0x57AB4A3080F85143u64, ped)
    } // 0x57AB4A3080F85143 0x195EF5B7 b323
    pub unsafe fn set_ped_panic_exit_scenario(p_0: Any, p_1: Any, p_2: Any, p_3: Any) -> bool {
        call_native!(bool, 0xFE07FF6495D52E2Au64, p_0, p_1, p_2, p_3)
    } // 0xFE07FF6495D52E2A 0x59DE73AC b323
    pub unsafe fn toggle_scenario_ped_cower_in_place(ped: Ped, toggle: bool) {
        call_native!(Void, 0x9A77DFD295E29B09u64, ped, toggle);
    } // 0x9A77DFD295E29B09 0xC08FE5F6 b323
    pub unsafe fn trigger_ped_scenario_panicexittoflee(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) -> bool {
        call_native!(bool, 0x25361A96E0F7E419u64, p_0, p_1, p_2, p_3)
    } // 0x25361A96E0F7E419 0x58C0F6CF b323
    pub unsafe fn set_ped_should_play_directed_normal_scenario_exit(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) -> bool {
        call_native!(bool, 0xEC6935EBE0847B90u64, p_0, p_1, p_2, p_3)
    } // 0xEC6935EBE0847B90  b323
    pub unsafe fn set_ped_should_play_normal_scenario_exit(ped: Ped) {
        call_native!(Void, 0xA3A9299C4F2ADB98u64, ped);
    } // 0xA3A9299C4F2ADB98 0x033F43FA b323
    pub unsafe fn set_ped_should_play_immediate_scenario_exit(ped: Ped) {
        call_native!(Void, 0xF1C03A5352243A30u64, ped);
    } // 0xF1C03A5352243A30 0x4C684C81 b323
    pub unsafe fn set_ped_should_play_flee_scenario_exit(
        ped: Ped,
        p_1: Any,
        p_2: Any,
        p_3: Any,
    ) -> bool {
        call_native!(bool, 0xEEED8FAFEC331A70u64, ped, p_1, p_2, p_3)
    } // 0xEEED8FAFEC331A70 0x7B4C3E6F b323
    pub unsafe fn set_ped_should_ignore_scenario_exit_collision_checks(ped: Ped, p_1: bool) {
        call_native!(Void, 0x425AECF167663F48u64, ped, p_1);
    } // 0x425AECF167663F48 0x5BC276AE b323
    pub unsafe fn set_ped_should_ignore_scenario_nav_checks(p_0: Any, p_1: bool) {
        call_native!(Void, 0x5B6010B3CBC29095u64, p_0, p_1);
    } // 0x5B6010B3CBC29095  b323
    pub unsafe fn set_ped_should_probe_for_scenario_exits_in_one_frame(p_0: Any, p_1: bool) {
        call_native!(Void, 0xCEDA60A74219D064u64, p_0, p_1);
    } // 0xCEDA60A74219D064  b323
    pub unsafe fn is_ped_gesturing(p_0: Any) -> bool {
        call_native!(bool, 0xC30BDAEE47256C13u64, p_0)
    } // 0xC30BDAEE47256C13  b1868
    pub unsafe fn reset_facial_idle_anim(ped: Ped) {
        call_native!(Void, 0x007FDE5A7897E426u64, ped);
    } // 0x007FDE5A7897E426  b2802
    pub unsafe fn play_facial_anim(ped: Ped, anim_name: *const i8, anim_dict: *const i8) {
        call_native!(Void, 0xE1E65CA8AC9C00EDu64, ped, anim_name, anim_dict);
    } // 0xE1E65CA8AC9C00ED 0x1F6CCDDE b323
    pub unsafe fn set_facial_clipset(ped: Ped, anim_dict: *const i8) {
        call_native!(Void, 0x5687C7F05B39E401u64, ped, anim_dict);
    } // 0x5687C7F05B39E401  b1493
    pub unsafe fn set_facial_idle_anim_override(
        ped: Ped,
        anim_name: *const i8,
        anim_dict: *const i8,
    ) {
        call_native!(Void, 0xFFC24B988B938B38u64, ped, anim_name, anim_dict);
    } // 0xFFC24B988B938B38 0x9BA19C13 b323
    pub unsafe fn clear_facial_idle_anim_override(ped: Ped) {
        call_native!(Void, 0x726256CC1EEB182Fu64, ped);
    } // 0x726256CC1EEB182F 0x5244F4E2 b323
    pub unsafe fn set_ped_can_play_gesture_anims(ped: Ped, toggle: bool) {
        call_native!(Void, 0xBAF20C5432058024u64, ped, toggle);
    } // 0xBAF20C5432058024 0xE131E3B3 b323
    pub unsafe fn set_ped_can_play_viseme_anims(ped: Ped, toggle: bool, p_2: bool) {
        call_native!(Void, 0xF833DDBA3B104D43u64, ped, toggle, p_2);
    } // 0xF833DDBA3B104D43 0xA2FDAF27 b323
    pub unsafe fn set_ped_is_ignored_by_auto_open_doors(ped: Ped, p_1: bool) {
        call_native!(Void, 0x33A60D8BDD6E508Cu64, ped, p_1);
    } // 0x33A60D8BDD6E508C 0xADB2511A b323
    pub unsafe fn set_ped_can_play_ambient_anims(ped: Ped, toggle: bool) {
        call_native!(Void, 0x6373D1349925A70Eu64, ped, toggle);
    } // 0x6373D1349925A70E 0xF8053081 b323
    pub unsafe fn set_ped_can_play_ambient_base_anims(ped: Ped, toggle: bool) {
        call_native!(Void, 0x0EB0585D15254740u64, ped, toggle);
    } // 0x0EB0585D15254740 0x5720A5DD b323
    pub unsafe fn trigger_idle_animation_on_ped(ped: Ped) {
        call_native!(Void, 0xC2EE020F5FB4DB53u64, ped);
    } // 0xC2EE020F5FB4DB53 0xB7CD0A49 b323
    pub unsafe fn set_ped_can_arm_ik(ped: Ped, toggle: bool) {
        call_native!(Void, 0x6C3B4D6D13B4C841u64, ped, toggle);
    } // 0x6C3B4D6D13B4C841 0x343B4DE0 b323
    pub unsafe fn set_ped_can_head_ik(ped: Ped, toggle: bool) {
        call_native!(Void, 0xC11C18092C5530DCu64, ped, toggle);
    } // 0xC11C18092C5530DC 0xD3B04476 b323
    pub unsafe fn set_ped_can_leg_ik(ped: Ped, toggle: bool) {
        call_native!(Void, 0x73518ECE2485412Bu64, ped, toggle);
    } // 0x73518ECE2485412B 0x9955BC6F b323
    pub unsafe fn set_ped_can_torso_ik(ped: Ped, toggle: bool) {
        call_native!(Void, 0xF2B7106D37947CE0u64, ped, toggle);
    } // 0xF2B7106D37947CE0 0x8E5D4EAB b323
    pub unsafe fn set_ped_can_torso_react_ik(ped: Ped, p_1: bool) {
        call_native!(Void, 0xF5846EDB26A98A24u64, ped, p_1);
    } // 0xF5846EDB26A98A24 0x7B0040A8 b323
    pub unsafe fn set_ped_can_torso_vehicle_ik(ped: Ped, p_1: bool) {
        call_native!(Void, 0x6647C5F6F5792496u64, ped, p_1);
    } // 0x6647C5F6F5792496 0x0FDA62DE b323
    pub unsafe fn set_ped_can_use_auto_conversation_lookat(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEC4686EC06434678u64, ped, toggle);
    } // 0xEC4686EC06434678 0x584C5178 b323
    pub unsafe fn is_ped_headtracking_ped(ped_1: Ped, ped_2: Ped) -> bool {
        call_native!(bool, 0x5CD3CB88A7F8850Du64, ped_1, ped_2)
    } // 0x5CD3CB88A7F8850D 0x2A5DF721 b323
    pub unsafe fn is_ped_headtracking_entity(ped: Ped, entity: Entity) -> bool {
        call_native!(bool, 0x813A0A7C9D2E831Fu64, ped, entity)
    } // 0x813A0A7C9D2E831F 0x233C9ACF b323
    pub unsafe fn set_ped_primary_lookat(ped: Ped, look_at: Ped) {
        call_native!(Void, 0xCD17B554996A8D9Eu64, ped, look_at);
    } // 0xCD17B554996A8D9E 0x6DEF6F1C b323
    pub unsafe fn set_ped_cloth_pin_frames(p_0: Any, p_1: Any) {
        call_native!(Void, 0x78C4E9961DB3EB5Bu64, p_0, p_1);
    } // 0x78C4E9961DB3EB5B  b323
    pub unsafe fn set_ped_cloth_package_index(p_0: Any, p_1: Any) {
        call_native!(Void, 0x82A3D6D9CC2CB8E3u64, p_0, p_1);
    } // 0x82A3D6D9CC2CB8E3  b323
    pub unsafe fn set_ped_cloth_prone(p_0: Any, p_1: bool) {
        call_native!(Void, 0xA660FAF550EB37E5u64, p_0, p_1);
    } // 0xA660FAF550EB37E5  b323
    pub unsafe fn set_ped_config_flag(ped: Ped, flag_id: i32, value: bool) {
        call_native!(Void, 0x1913FE4CBF41C463u64, ped, flag_id, value);
    } // 0x1913FE4CBF41C463 0x9CFBE10D b323
    pub unsafe fn set_ped_reset_flag(ped: Ped, flag_id: i32, do_reset: bool) {
        call_native!(Void, 0xC1E8A365BF3B29F2u64, ped, flag_id, do_reset);
    } // 0xC1E8A365BF3B29F2 0xCFF6FF66 b323
    pub unsafe fn get_ped_config_flag(ped: Ped, flag_id: i32, p_2: bool) -> bool {
        call_native!(bool, 0x7EE53118C892B513u64, ped, flag_id, p_2)
    } // 0x7EE53118C892B513 0xABE98267 b323
    pub unsafe fn get_ped_reset_flag(ped: Ped, flag_id: i32) -> bool {
        call_native!(bool, 0xAF9E59B1B1FBF2A0u64, ped, flag_id)
    } // 0xAF9E59B1B1FBF2A0 0x2FC10D11 b323
    pub unsafe fn set_ped_group_member_passenger_index(ped: Ped, index: i32) {
        call_native!(Void, 0x0BDDB8D9EC6BCF3Cu64, ped, index);
    } // 0x0BDDB8D9EC6BCF3C 0x2AB3670B b323
    pub unsafe fn set_ped_can_evasive_dive(ped: Ped, toggle: bool) {
        call_native!(Void, 0x6B7A646C242A7059u64, ped, toggle);
    } // 0x6B7A646C242A7059 0x542FEB4D b323
    pub unsafe fn is_ped_evasive_diving(ped: Ped, evading_entity: *mut Entity) -> bool {
        call_native!(bool, 0x414641C26E105898u64, ped, evading_entity)
    } // 0x414641C26E105898 0xD82829DC b323
    pub unsafe fn set_ped_shoots_at_coord(ped: Ped, x: f32, y: f32, z: f32, toggle: bool) {
        call_native!(Void, 0x96A05E4FB321B1BAu64, ped, x, y, z, toggle);
    } // 0x96A05E4FB321B1BA 0xFD64EAE5 b323
    pub unsafe fn set_ped_model_is_suppressed(model_hash: Hash, toggle: bool) {
        call_native!(Void, 0xE163A4BCE4DE6F11u64, model_hash, toggle);
    } // 0xE163A4BCE4DE6F11 0x7820CA43 b323
    pub unsafe fn stop_any_ped_model_being_suppressed() {
        call_native!(Void, 0xB47BD05FA66B40CFu64);
    } // 0xB47BD05FA66B40CF 0x5AD7DC55 b323
    pub unsafe fn set_ped_can_be_targeted_when_injured(ped: Ped, toggle: bool) {
        call_native!(Void, 0x638C03B0F9878F57u64, ped, toggle);
    } // 0x638C03B0F9878F57 0x6FD9A7CD b323
    pub unsafe fn set_ped_generates_dead_body_events(ped: Ped, toggle: bool) {
        call_native!(Void, 0x7FB17BA2E7DECA5Bu64, ped, toggle);
    } // 0x7FB17BA2E7DECA5B 0xE9B97A2B b323
    pub unsafe fn block_ped_from_generating_dead_body_events_when_dead(ped: Ped, toggle: bool) {
        call_native!(Void, 0xE43A13C9E4CCCBCFu64, ped, toggle);
    } // 0xE43A13C9E4CCCBCF 0xFF1F6AEB b323
    pub unsafe fn set_ped_will_only_attack_wanted_player(p_0: Any, p_1: Any) {
        call_native!(Void, 0x3E9679C1DFCF422Cu64, p_0, p_1);
    } // 0x3E9679C1DFCF422C  b877
    pub unsafe fn set_ped_can_ragdoll_from_player_impact(ped: Ped, toggle: bool) {
        call_native!(Void, 0xDF993EE5E90ABA25u64, ped, toggle);
    } // 0xDF993EE5E90ABA25 0xE9BD733A b323
    pub unsafe fn give_ped_helmet(
        ped: Ped,
        cannot_remove: bool,
        helmet_flag: i32,
        texture_index: i32,
    ) {
        call_native!(
            Void,
            0x54C7C4A94367717Eu64,
            ped,
            cannot_remove,
            helmet_flag,
            texture_index
        );
    } // 0x54C7C4A94367717E 0x1862A461 b323
    pub unsafe fn remove_ped_helmet(ped: Ped, instantly: bool) {
        call_native!(Void, 0xA7B2458D0AD6DED8u64, ped, instantly);
    } // 0xA7B2458D0AD6DED8 0x2086B1F0 b323
    pub unsafe fn is_ped_taking_off_helmet(ped: Ped) -> bool {
        call_native!(bool, 0x14590DDBEDB1EC85u64, ped)
    } // 0x14590DDBEDB1EC85 0xA1008E0E b323
    pub unsafe fn set_ped_helmet(ped: Ped, can_wear_helmet: bool) {
        call_native!(Void, 0x560A43136EB58105u64, ped, can_wear_helmet);
    } // 0x560A43136EB58105 0xED366E53 b323
    pub unsafe fn set_ped_helmet_flag(ped: Ped, helmet_flag: i32) {
        call_native!(Void, 0xC0E78D5C2CE3EB25u64, ped, helmet_flag);
    } // 0xC0E78D5C2CE3EB25 0x12677780 b323
    pub unsafe fn set_ped_helmet_prop_index(ped: Ped, prop_index: i32, p_2: bool) {
        call_native!(Void, 0x26D83693ED99291Cu64, ped, prop_index, p_2);
    } // 0x26D83693ED99291C 0xA316D13F b323
    pub unsafe fn set_ped_helmet_visor_prop_indices(ped: Ped, p_1: bool, p_2: i32, p_3: i32) {
        call_native!(Void, 0x3F7325574E41B44Du64, ped, p_1, p_2, p_3);
    } // 0x3F7325574E41B44D  b791
    pub unsafe fn is_ped_helmet_visor_up(ped: Ped) -> bool {
        call_native!(bool, 0xB9496CE47546DB2Cu64, ped)
    } // 0xB9496CE47546DB2C  b791
    pub unsafe fn set_ped_helmet_texture_index(ped: Ped, texture_index: i32) {
        call_native!(Void, 0xF1550C4BD22582E2u64, ped, texture_index);
    } // 0xF1550C4BD22582E2 0x5F6C3328 b323
    pub unsafe fn is_ped_wearing_helmet(ped: Ped) -> bool {
        call_native!(bool, 0xF33BDFE19B309B19u64, ped)
    } // 0xF33BDFE19B309B19 0x0D680D49 b323
    pub unsafe fn clear_ped_stored_hat_prop(ped: Ped) {
        call_native!(Void, 0x687C0B594907D2E8u64, ped);
    } // 0x687C0B594907D2E8 0x24A1284E b323
    pub unsafe fn get_ped_helmet_stored_hat_prop_index(ped: Ped) -> i32 {
        call_native!(i32, 0x451294E859ECC018u64, ped)
    } // 0x451294E859ECC018 0x8A3A3116 b323
    pub unsafe fn get_ped_helmet_stored_hat_tex_index(ped: Ped) -> i32 {
        call_native!(i32, 0x9D728C1E12BF5518u64, ped)
    } // 0x9D728C1E12BF5518 0x74EB662D b323
    pub unsafe fn is_current_head_prop_a_helmet(p_0: Any) -> bool {
        call_native!(bool, 0xF2385935BFFD4D92u64, p_0)
    } // 0xF2385935BFFD4D92 0xFFF149FE b323
    pub unsafe fn set_ped_to_load_cover(ped: Ped, toggle: bool) {
        call_native!(Void, 0x332B562EEDA62399u64, ped, toggle);
    } // 0x332B562EEDA62399 0xCF94BA97 b323
    pub unsafe fn set_ped_can_cower_in_cover(ped: Ped, toggle: bool) {
        call_native!(Void, 0xCB7553CDCEF4A735u64, ped, toggle);
    } // 0xCB7553CDCEF4A735 0x5194658B b323
    pub unsafe fn set_ped_can_peek_in_cover(ped: Ped, toggle: bool) {
        call_native!(Void, 0xC514825C507E3736u64, ped, toggle);
    } // 0xC514825C507E3736 0xC1DAE216 b323
    pub unsafe fn set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(ped: Ped, toggle: bool) {
        call_native!(Void, 0x94D94BF1A75AED3Du64, ped, toggle);
    } // 0x94D94BF1A75AED3D 0x7C563CD2 b323
    pub unsafe fn set_ped_leg_ik_mode(ped: Ped, mode: i32) {
        call_native!(Void, 0xC396F5B86FF9FEBDu64, ped, mode);
    } // 0xC396F5B86FF9FEBD 0xFDDB042E b323
    pub unsafe fn set_ped_motion_blur(ped: Ped, toggle: bool) {
        call_native!(Void, 0x0A986918B102B448u64, ped, toggle);
    } // 0x0A986918B102B448 0xA211A128 b323
    pub unsafe fn set_ped_can_switch_weapon(ped: Ped, toggle: bool) {
        call_native!(Void, 0xED7F7EFE9FABF340u64, ped, toggle);
    } // 0xED7F7EFE9FABF340 0xB5F8BA28 b323
    pub unsafe fn set_ped_dies_instantly_in_water(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEEB64139BA29A7CFu64, ped, toggle);
    } // 0xEEB64139BA29A7CF 0xFE2554FC b323
    pub unsafe fn set_ladder_climb_input_state(ped: Ped, p_1: i32) {
        call_native!(Void, 0x1A330D297AAC6BC1u64, ped, p_1);
    } // 0x1A330D297AAC6BC1 0x77BB7CB8 b323
    pub unsafe fn stop_ped_weapon_firing_when_dropped(ped: Ped) {
        call_native!(Void, 0xC158D28142A34608u64, ped);
    } // 0xC158D28142A34608 0x4AC3421E b323
    pub unsafe fn set_scripted_anim_seat_offset(ped: Ped, p_1: f32) {
        call_native!(Void, 0x5917BBA32D06C230u64, ped, p_1);
    } // 0x5917BBA32D06C230 0x7CEFFA45 b323
    pub unsafe fn set_ped_combat_movement(ped: Ped, combat_movement: i32) {
        call_native!(Void, 0x4D9CA1009AFBD057u64, ped, combat_movement);
    } // 0x4D9CA1009AFBD057 0x12E62F9E b323
    pub unsafe fn get_ped_combat_movement(ped: Ped) -> i32 {
        call_native!(i32, 0xDEA92412FCAEB3F5u64, ped)
    } // 0xDEA92412FCAEB3F5 0xF3E7730E b323
    pub unsafe fn set_ped_combat_ability(ped: Ped, ability_level: i32) {
        call_native!(Void, 0xC7622C0D36B2FDA8u64, ped, ability_level);
    } // 0xC7622C0D36B2FDA8 0x6C23D329 b323
    pub unsafe fn set_ped_combat_range(ped: Ped, combat_range: i32) {
        call_native!(Void, 0x3C606747B23E497Bu64, ped, combat_range);
    } // 0x3C606747B23E497B 0x8818A959 b323
    pub unsafe fn get_ped_combat_range(ped: Ped) -> i32 {
        call_native!(i32, 0xF9D9F7F2DB8E2FA0u64, ped)
    } // 0xF9D9F7F2DB8E2FA0 0x9B9B7163 b323
    pub unsafe fn set_ped_combat_attributes(ped: Ped, attribute_id: i32, enabled: bool) {
        call_native!(Void, 0x9F7794730795E019u64, ped, attribute_id, enabled);
    } // 0x9F7794730795E019 0x81D64248 b323
    pub unsafe fn set_ped_target_loss_response(ped: Ped, response_type: i32) {
        call_native!(Void, 0x0703B9079823DA4Au64, ped, response_type);
    } // 0x0703B9079823DA4A 0xCFA613FF b323
    pub unsafe fn is_ped_performing_melee_action(ped: Ped) -> bool {
        call_native!(bool, 0xDCCA191DF9980FD7u64, ped)
    } // 0xDCCA191DF9980FD7 0x139C0875 b323
    pub unsafe fn is_ped_performing_stealth_kill(ped: Ped) -> bool {
        call_native!(bool, 0xFD4CCDBCC59941B7u64, ped)
    } // 0xFD4CCDBCC59941B7 0x9ADD7B21 b323
    pub unsafe fn is_ped_performing_a_counter_attack(ped: Ped) -> bool {
        call_native!(bool, 0xEBD0EDBA5BE957CFu64, ped)
    } // 0xEBD0EDBA5BE957CF 0x9BE7C860 b323
    pub unsafe fn is_ped_being_stealth_killed(ped: Ped) -> bool {
        call_native!(bool, 0x863B23EFDE9C5DF2u64, ped)
    } // 0x863B23EFDE9C5DF2 0xD044C8AF b323
    pub unsafe fn get_melee_target_for_ped(ped: Ped) -> Ped {
        call_native!(Ped, 0x18A3E9EE1297FD39u64, ped)
    } // 0x18A3E9EE1297FD39 0xAFEC26A4 b323
    pub unsafe fn was_ped_killed_by_stealth(ped: Ped) -> bool {
        call_native!(bool, 0xF9800AA1A771B000u64, ped)
    } // 0xF9800AA1A771B000 0x2EA4B54E b323
    pub unsafe fn was_ped_killed_by_takedown(ped: Ped) -> bool {
        call_native!(bool, 0x7F08E26039C7347Cu64, ped)
    } // 0x7F08E26039C7347C 0xBDD3CE69 b323
    pub unsafe fn was_ped_knocked_out(ped: Ped) -> bool {
        call_native!(bool, 0x61767F73EACEED21u64, ped)
    } // 0x61767F73EACEED21 0x3993092B b323
    pub unsafe fn set_ped_flee_attributes(ped: Ped, attribute_flags: i32, enable: bool) {
        call_native!(Void, 0x70A2D1137C8ED7C9u64, ped, attribute_flags, enable);
    } // 0x70A2D1137C8ED7C9 0xA717A875 b323
    pub unsafe fn set_ped_cower_hash(ped: Ped, p_1: *const i8) {
        call_native!(Void, 0xA549131166868ED3u64, ped, p_1);
    } // 0xA549131166868ED3 0x16F30DF4 b323
    pub unsafe fn set_ped_steers_around_dead_bodies(ped: Ped, toggle: bool) {
        call_native!(Void, 0x2016C603D6B8987Cu64, ped, toggle);
    } // 0x2016C603D6B8987C 0xA6F2C057 b323
    pub unsafe fn set_ped_steers_around_peds(ped: Ped, toggle: bool) {
        call_native!(Void, 0x46F2193B3AD1D891u64, ped, toggle);
    } // 0x46F2193B3AD1D891 0x797CAE4F b323
    pub unsafe fn set_ped_steers_around_objects(ped: Ped, toggle: bool) {
        call_native!(Void, 0x1509C089ADC208BFu64, ped, toggle);
    } // 0x1509C089ADC208BF 0x3BD9B0A6 b323
    pub unsafe fn set_ped_steers_around_vehicles(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEB6FB9D48DDE23ECu64, ped, toggle);
    } // 0xEB6FB9D48DDE23EC 0x533C0651 b323
    pub unsafe fn set_ped_is_avoided_by_others(p_0: Any, p_1: bool) {
        call_native!(Void, 0xA9B61A329BFDCBEAu64, p_0, p_1);
    } // 0xA9B61A329BFDCBEA 0x2276DE0D b323
    pub unsafe fn set_ped_increased_avoidance_radius(ped: Ped) {
        call_native!(Void, 0x570389D1C3DE3C6Bu64, ped);
    } // 0x570389D1C3DE3C6B 0x59C52BE6 b323
    pub unsafe fn set_ped_blocks_pathing_when_dead(ped: Ped, toggle: bool) {
        call_native!(Void, 0x576594E8D64375E2u64, ped, toggle);
    } // 0x576594E8D64375E2 0x1D87DDC1 b323
    pub unsafe fn set_ped_no_time_delay_before_shot(p_0: Any) {
        call_native!(Void, 0xA52D5247A4227E14u64, p_0);
    } // 0xA52D5247A4227E14 0xB52BA5F5 b323
    pub unsafe fn is_any_ped_near_point(x: f32, y: f32, z: f32, radius: f32) -> bool {
        call_native!(bool, 0x083961498679DC9Fu64, x, y, z, radius)
    } // 0x083961498679DC9F 0xFBD9B050 b323
    pub unsafe fn force_ped_ai_and_animation_update(ped: Ped, p_1: bool, p_2: bool) {
        call_native!(Void, 0x2208438012482A1Au64, ped, p_1, p_2);
    } // 0x2208438012482A1A 0x187B9070 b323
    pub unsafe fn is_ped_heading_towards_position(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        p_4: f32,
    ) -> bool {
        call_native!(bool, 0xFCF37A457CB96DC0u64, ped, x, y, z, p_4)
    } // 0xFCF37A457CB96DC0 0x45037B9B b323
    pub unsafe fn request_ped_visibility_tracking(ped: Ped) {
        call_native!(Void, 0x7D7A2E43E74E2EB8u64, ped);
    } // 0x7D7A2E43E74E2EB8 0x840D24D3 b323
    pub unsafe fn request_ped_vehicle_visibility_tracking(ped: Ped, p_1: bool) {
        call_native!(Void, 0x2BC338A7B21F4608u64, ped, p_1);
    } // 0x2BC338A7B21F4608 0x31C31DAA b323
    pub unsafe fn request_ped_restricted_vehicle_visibility_tracking(ped: Ped, p_1: bool) {
        call_native!(Void, 0xCD018C591F94CB43u64, ped, p_1);
    } // 0xCD018C591F94CB43  b323
    pub unsafe fn request_ped_use_small_bbox_visibility_tracking(ped: Ped, p_1: bool) {
        call_native!(Void, 0x75BA1CB3B7D40CAFu64, ped, p_1);
    } // 0x75BA1CB3B7D40CAF 0x9194DB71 b323
    pub unsafe fn is_tracked_ped_visible(ped: Ped) -> bool {
        call_native!(bool, 0x91C8E617F64188ACu64, ped)
    } // 0x91C8E617F64188AC 0x33248CC1 b323
    pub unsafe fn get_tracked_ped_pixelcount(ped: Ped) -> i32 {
        call_native!(i32, 0x511F1A683387C7E2u64, ped)
    } // 0x511F1A683387C7E2 0x5B1B70AA b323
    pub unsafe fn is_ped_tracked(ped: Ped) -> bool {
        call_native!(bool, 0x4C5E1F087CD10BB7u64, ped)
    } // 0x4C5E1F087CD10BB7 0x7EB613D9 b323
    pub unsafe fn has_ped_received_event(ped: Ped, event_id: i32) -> bool {
        call_native!(bool, 0x8507BCB710FA6DC0u64, ped, event_id)
    } // 0x8507BCB710FA6DC0 0xECD73DB0 b323
    pub unsafe fn can_ped_see_hated_ped(ped_1: Ped, ped_2: Ped) -> bool {
        call_native!(bool, 0x6CD5A433374D4CFBu64, ped_1, ped_2)
    } // 0x6CD5A433374D4CFB 0x74A0F291 b323
    pub unsafe fn can_ped_shuffle_to_or_from_turret_seat(ped: Ped, p_1: *mut i32) -> bool {
        call_native!(bool, 0x9C6A6C19B6C0C496u64, ped, p_1)
    } // 0x9C6A6C19B6C0C496  b323
    pub unsafe fn can_ped_shuffle_to_or_from_extra_seat(ped: Ped, p_1: *mut i32) -> bool {
        call_native!(bool, 0x2DFC81C9B9608549u64, ped, p_1)
    } // 0x2DFC81C9B9608549  b944
    pub unsafe fn get_ped_bone_index(ped: Ped, bone_id: i32) -> i32 {
        call_native!(i32, 0x3F428D08BE5AAE31u64, ped, bone_id)
    } // 0x3F428D08BE5AAE31 0x259C6BA2 b323
    pub unsafe fn get_ped_ragdoll_bone_index(ped: Ped, bone: i32) -> i32 {
        call_native!(i32, 0x2057EF813397A772u64, ped, bone)
    } // 0x2057EF813397A772 0x849F0716 b323
    pub unsafe fn set_ped_enveff_scale(ped: Ped, value: f32) {
        call_native!(Void, 0xBF29516833893561u64, ped, value);
    } // 0xBF29516833893561 0xFC1CFC27 b323
    pub unsafe fn get_ped_enveff_scale(ped: Ped) -> f32 {
        call_native!(f32, 0x9C14D30395A51A3Cu64, ped)
    } // 0x9C14D30395A51A3C 0xA3421E39 b323
    pub unsafe fn set_enable_ped_enveff_scale(ped: Ped, toggle: bool) {
        call_native!(Void, 0xD2C5AA0C0E8D0F1Eu64, ped, toggle);
    } // 0xD2C5AA0C0E8D0F1E 0xC70F4A84 b323
    pub unsafe fn set_ped_enveff_cpv_add(ped: Ped, p_1: f32) {
        call_native!(Void, 0x110F526AB784111Fu64, ped, p_1);
    } // 0x110F526AB784111F 0x3B882533 b323
    pub unsafe fn set_ped_enveff_color_modulator(ped: Ped, p_1: i32, p_2: i32, p_3: i32) {
        call_native!(Void, 0xD69411AA0CEBF9E9u64, ped, p_1, p_2, p_3);
    } // 0xD69411AA0CEBF9E9 0x87A0C174 b323
    pub unsafe fn set_ped_emissive_scale(ped: Ped, intensity: f32) {
        call_native!(Void, 0x4E90D746056E273Du64, ped, intensity);
    } // 0x4E90D746056E273D  b944
    pub unsafe fn get_ped_emissive_scale(ped: Ped) -> f32 {
        call_native!(f32, 0x1461B28A06717D68u64, ped)
    } // 0x1461B28A06717D68  b944
    pub unsafe fn is_ped_shader_ready(ped: Ped) -> bool {
        call_native!(bool, 0x81AA517FBBA05D39u64, ped)
    } // 0x81AA517FBBA05D39  b944
    pub unsafe fn set_ped_enable_crew_emblem(ped: Ped, toggle: bool) {
        call_native!(Void, 0xE906EC930F5FE7C8u64, ped, toggle);
    } // 0xE906EC930F5FE7C8  b791
    pub unsafe fn request_ragdoll_bounds_update(p_0: Any, p_1: Any) {
        call_native!(Void, 0x1216E0BFA72CC703u64, p_0, p_1);
    } // 0x1216E0BFA72CC703 0x7BD26837 b323
    pub unsafe fn set_ped_ao_blob_rendering(ped: Ped, toggle: bool) {
        call_native!(Void, 0x2B5AA717A181FB4Cu64, ped, toggle);
    } // 0x2B5AA717A181FB4C 0x98E29ED0 b323
    pub unsafe fn is_ped_sheltered(ped: Ped) -> bool {
        call_native!(bool, 0xB8B52E498014F5B0u64, ped)
    } // 0xB8B52E498014F5B0  b323
    pub unsafe fn create_synchronized_scene(
        x: f32,
        y: f32,
        z: f32,
        roll: f32,
        pitch: f32,
        yaw: f32,
        p_6: i32,
    ) -> i32 {
        call_native!(i32, 0x8C18E0F9080ADD73u64, x, y, z, roll, pitch, yaw, p_6)
    } // 0x8C18E0F9080ADD73 0xFFDDF8FA b323
    pub unsafe fn create_synchronized_scene_at_map_object(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        object: Hash,
    ) -> i32 {
        call_native!(i32, 0x62EC273D00187DCAu64, x, y, z, radius, object)
    } // 0x62EC273D00187DCA 0xF3876894 b323
    pub unsafe fn is_synchronized_scene_running(scene_id: i32) -> bool {
        call_native!(bool, 0x25D39B935A038A26u64, scene_id)
    } // 0x25D39B935A038A26 0x57A282F1 b323
    pub unsafe fn set_synchronized_scene_origin(
        scene_i_d: i32,
        x: f32,
        y: f32,
        z: f32,
        roll: f32,
        pitch: f32,
        yaw: f32,
        p_7: bool,
    ) {
        call_native!(
            Void,
            0x6ACF6B7225801CD7u64,
            scene_i_d,
            x,
            y,
            z,
            roll,
            pitch,
            yaw,
            p_7
        );
    } // 0x6ACF6B7225801CD7 0x2EC2A0B2 b323
    pub unsafe fn set_synchronized_scene_phase(scene_i_d: i32, phase: f32) {
        call_native!(Void, 0x734292F4F0ABF6D0u64, scene_i_d, phase);
    } // 0x734292F4F0ABF6D0 0xF5AB0D98 b323
    pub unsafe fn get_synchronized_scene_phase(scene_i_d: i32) -> f32 {
        call_native!(f32, 0xE4A310B1D7FA73CCu64, scene_i_d)
    } // 0xE4A310B1D7FA73CC 0xB0B2C852 b323
    pub unsafe fn set_synchronized_scene_rate(scene_i_d: i32, rate: f32) {
        call_native!(Void, 0xB6C49F8A5E295A5Du64, scene_i_d, rate);
    } // 0xB6C49F8A5E295A5D 0xF10112FD b323
    pub unsafe fn get_synchronized_scene_rate(scene_i_d: i32) -> f32 {
        call_native!(f32, 0xD80932D577274D40u64, scene_i_d)
    } // 0xD80932D577274D40 0x89365F0D b323
    pub unsafe fn set_synchronized_scene_looped(scene_i_d: i32, toggle: bool) {
        call_native!(Void, 0xD9A897A4C6C2974Fu64, scene_i_d, toggle);
    } // 0xD9A897A4C6C2974F 0x32ED9F82 b323
    pub unsafe fn is_synchronized_scene_looped(scene_i_d: i32) -> bool {
        call_native!(bool, 0x62522002E0C391BAu64, scene_i_d)
    } // 0x62522002E0C391BA 0x47D87A84 b323
    pub unsafe fn set_synchronized_scene_hold_last_frame(scene_i_d: i32, toggle: bool) {
        call_native!(Void, 0x394B9CD12435C981u64, scene_i_d, toggle);
    } // 0x394B9CD12435C981 0x2DE48DA1 b323
    pub unsafe fn is_synchronized_scene_hold_last_frame(scene_i_d: i32) -> bool {
        call_native!(bool, 0x7F2F4F13AC5257EFu64, scene_i_d)
    } // 0x7F2F4F13AC5257EF 0x72CF2514 b323
    pub unsafe fn attach_synchronized_scene_to_entity(
        scene_i_d: i32,
        entity: Entity,
        bone_index: i32,
    ) {
        call_native!(Void, 0x272E4723B56A3B96u64, scene_i_d, entity, bone_index);
    } // 0x272E4723B56A3B96 0xE9BA6189 b323
    pub unsafe fn detach_synchronized_scene(scene_i_d: i32) {
        call_native!(Void, 0x6D38F1F04CBB37EAu64, scene_i_d);
    } // 0x6D38F1F04CBB37EA 0x52A1CAB2 b323
    pub unsafe fn take_ownership_of_synchronized_scene(scene: i32) {
        call_native!(Void, 0xCD9CC7E200A52A6Fu64, scene);
    } // 0xCD9CC7E200A52A6F 0xBF7F9035 b323
    pub unsafe fn force_ped_motion_state(
        ped: Ped,
        motion_state_hash: Hash,
        p_2: bool,
        p_3: i32,
        p_4: bool,
    ) -> bool {
        call_native!(
            bool,
            0xF28965D04F570DCAu64,
            ped,
            motion_state_hash,
            p_2,
            p_3,
            p_4
        )
    } // 0xF28965D04F570DCA 0x164DDEFF b323
    pub unsafe fn get_ped_current_move_blend_ratio(
        ped: Ped,
        speed_x: *mut f32,
        speed_y: *mut f32,
    ) -> bool {
        call_native!(bool, 0xF60165E1D2C5370Bu64, ped, speed_x, speed_y)
    } // 0xF60165E1D2C5370B  b323
    pub unsafe fn set_ped_max_move_blend_ratio(ped: Ped, value: f32) {
        call_native!(Void, 0x433083750C5E064Au64, ped, value);
    } // 0x433083750C5E064A 0xEAD0269A b323
    pub unsafe fn set_ped_min_move_blend_ratio(ped: Ped, value: f32) {
        call_native!(Void, 0x01A898D26E2333DDu64, ped, value);
    } // 0x01A898D26E2333DD 0x383EC364 b323
    pub unsafe fn set_ped_move_rate_override(ped: Ped, value: f32) {
        call_native!(Void, 0x085BF80FA50A39D1u64, ped, value);
    } // 0x085BF80FA50A39D1 0x900008C6 b323
    pub unsafe fn set_ped_move_rate_in_water_override(ped: Ped, p_1: f32) {
        call_native!(Void, 0x0B3E35AC043707D9u64, ped, p_1);
    } // 0x0B3E35AC043707D9  b573
    pub unsafe fn ped_has_sexiness_flag_set(ped: Ped, sexiness_flag: i32) -> bool {
        call_native!(bool, 0x46B05BCAE43856B0u64, ped, sexiness_flag)
    } // 0x46B05BCAE43856B0 0x79543043 b323
    pub unsafe fn get_ped_nearby_vehicles(ped: Ped, size_and_vehs: *mut Any) -> i32 {
        call_native!(i32, 0xCFF869CBFA210D82u64, ped, size_and_vehs)
    } // 0xCFF869CBFA210D82 0xCB716F68 b323
    pub unsafe fn get_ped_nearby_peds(ped: Ped, size_and_peds: *mut Any, ignore: i32) -> i32 {
        call_native!(i32, 0x23F8F5FC7E8C4A6Bu64, ped, size_and_peds, ignore)
    } // 0x23F8F5FC7E8C4A6B 0x4D3325F4 b323
    pub unsafe fn have_all_streaming_requests_completed(ped: Ped) -> bool {
        call_native!(bool, 0x7350823473013C02u64, ped)
    } // 0x7350823473013C02 0xF9FB4B71 b323
    pub unsafe fn is_ped_using_action_mode(ped: Ped) -> bool {
        call_native!(bool, 0x00E73468D085F745u64, ped)
    } // 0x00E73468D085F745 0x5AE7EDA2 b323
    pub unsafe fn set_ped_using_action_mode(ped: Ped, p_1: bool, p_2: i32, action: *const i8) {
        call_native!(Void, 0xD75ACCF5E0FB5367u64, ped, p_1, p_2, action);
    } // 0xD75ACCF5E0FB5367 0x8802F696 b323
    pub unsafe fn set_movement_mode_override(ped: Ped, name: *const i8) {
        call_native!(Void, 0x781DE8FA214E87D2u64, ped, name);
    } // 0x781DE8FA214E87D2 0x83BAE814 b323
    pub unsafe fn set_ped_capsule(ped: Ped, value: f32) {
        call_native!(Void, 0x364DF566EC833DE2u64, ped, value);
    } // 0x364DF566EC833DE2 0xB153E1B9 b323
    pub unsafe fn register_pedheadshot(ped: Ped) -> i32 {
        call_native!(i32, 0x4462658788425076u64, ped)
    } // 0x4462658788425076 0xFFE2667B b323
    pub unsafe fn register_pedheadshot_hires(ped: Ped) -> i32 {
        call_native!(i32, 0xBA8805A1108A2515u64, ped)
    } // 0xBA8805A1108A2515  b877
    pub unsafe fn register_pedheadshot_transparent(ped: Ped) -> i32 {
        call_native!(i32, 0x953563CE563143AFu64, ped)
    } // 0x953563CE563143AF 0x4DD03628 b323
    pub unsafe fn unregister_pedheadshot(id: i32) {
        call_native!(Void, 0x96B1361D9B24C2FFu64, id);
    } // 0x96B1361D9B24C2FF 0x0879AE45 b323
    pub unsafe fn is_pedheadshot_valid(id: i32) -> bool {
        call_native!(bool, 0xA0A9668F158129A2u64, id)
    } // 0xA0A9668F158129A2 0x0B1080C4 b323
    pub unsafe fn is_pedheadshot_ready(id: i32) -> bool {
        call_native!(bool, 0x7085228842B13A67u64, id)
    } // 0x7085228842B13A67 0x761CD02E b323
    pub unsafe fn get_pedheadshot_txd_string(id: i32) -> *const i8 {
        call_native!(*const i8, 0xDB4EACD4AD0A5D6Bu64, id)
    } // 0xDB4EACD4AD0A5D6B 0x76D28E96 b323
    pub unsafe fn request_pedheadshot_img_upload(id: i32) -> bool {
        call_native!(bool, 0xF0DAEF2F545BEE25u64, id)
    } // 0xF0DAEF2F545BEE25 0x10F2C023 b323
    pub unsafe fn release_pedheadshot_img_upload(id: i32) {
        call_native!(Void, 0x5D517B27CF6ECD04u64, id);
    } // 0x5D517B27CF6ECD04 0x0DBB2FA7 b323
    pub unsafe fn is_pedheadshot_img_upload_available() -> bool {
        call_native!(bool, 0xEBB376779A760AA8u64)
    } // 0xEBB376779A760AA8 0x810158F8 b323
    pub unsafe fn has_pedheadshot_img_upload_failed() -> bool {
        call_native!(bool, 0x876928DDDFCCC9CDu64)
    } // 0x876928DDDFCCC9CD 0x05023F8F b323
    pub unsafe fn has_pedheadshot_img_upload_succeeded() -> bool {
        call_native!(bool, 0xE8A169E666CBC541u64)
    } // 0xE8A169E666CBC541 0xAA39FD6C b323
    pub unsafe fn set_ped_heatscale_override(ped: Ped, heat_scale: f32) {
        call_native!(Void, 0xC1F6EBF9A3D55538u64, ped, heat_scale);
    } // 0xC1F6EBF9A3D55538 0xEF9142DB b323
    pub unsafe fn disable_ped_heatscale_override(ped: Ped) {
        call_native!(Void, 0x600048C60D5C2C51u64, ped);
    } // 0x600048C60D5C2C51 0x0688DE64 b323
    pub unsafe fn spawnpoints_start_search(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        interior_flags: i32,
        scale: f32,
        duration: i32,
    ) {
        call_native!(
            Void,
            0x2DF9038C90AD5264u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            interior_flags,
            scale,
            duration
        );
    } // 0x2DF9038C90AD5264 0x909A1D76 b323
    pub unsafe fn spawnpoints_start_search_in_angled_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        width: f32,
        interior_flags: i32,
        scale: f32,
        duration: i32,
    ) {
        call_native!(
            Void,
            0xB2AFF10216DEFA2Fu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            width,
            interior_flags,
            scale,
            duration
        );
    } // 0xB2AFF10216DEFA2F 0x4AAD0ECB b323
    pub unsafe fn spawnpoints_cancel_search() {
        call_native!(Void, 0xFEE4A5459472A9F8u64);
    } // 0xFEE4A5459472A9F8 0x492C9E46 b323
    pub unsafe fn spawnpoints_is_search_active() -> bool {
        call_native!(bool, 0x3C67506996001F5Eu64)
    } // 0x3C67506996001F5E 0x814A28F4 b323
    pub unsafe fn spawnpoints_is_search_complete() -> bool {
        call_native!(bool, 0xA586FBEB32A53DBBu64)
    } // 0xA586FBEB32A53DBB 0x0B60D2BA b323
    pub unsafe fn spawnpoints_is_search_failed() -> bool {
        call_native!(bool, 0xF445DE8DA80A1792u64)
    } // 0xF445DE8DA80A1792 0x6B83ABDF b323
    pub unsafe fn spawnpoints_get_num_search_results() -> i32 {
        call_native!(i32, 0xA635C11B8C44AFC2u64)
    } // 0xA635C11B8C44AFC2 0xF46B4DC8 b323
    pub unsafe fn spawnpoints_get_search_result(
        random_int: i32,
        x: *mut f32,
        y: *mut f32,
        z: *mut f32,
    ) {
        call_native!(Void, 0x280C7E3AC7F56E90u64, random_int, x, y, z);
    } // 0x280C7E3AC7F56E90 0x36A4AC65 b323
    pub unsafe fn spawnpoints_get_search_result_flags(p_0: i32, p_1: *mut i32) {
        call_native!(Void, 0xB782F8238512BAD5u64, p_0, p_1);
    } // 0xB782F8238512BAD5 0xBA699DDF b323
    pub unsafe fn set_ik_target(
        ped: Ped,
        ik_index: i32,
        entity_look_at: Entity,
        bone_look_at: i32,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        p_7: Any,
        blend_in_duration: i32,
        blend_out_duration: i32,
    ) {
        call_native!(
            Void,
            0xC32779C16FCEECD9u64,
            ped,
            ik_index,
            entity_look_at,
            bone_look_at,
            offset_x,
            offset_y,
            offset_z,
            p_7,
            blend_in_duration,
            blend_out_duration
        );
    } // 0xC32779C16FCEECD9 0x6FE5218C b323
    pub unsafe fn force_instant_leg_ik_setup(ped: Ped) {
        call_native!(Void, 0xED3C76ADFA6D07C4u64, ped);
    } // 0xED3C76ADFA6D07C4 0xFB4000DC b323
    pub unsafe fn request_action_mode_asset(asset: *const i8) {
        call_native!(Void, 0x290E2780BB7AA598u64, asset);
    } // 0x290E2780BB7AA598 0x572BA553 b323
    pub unsafe fn has_action_mode_asset_loaded(asset: *const i8) -> bool {
        call_native!(bool, 0xE4B5F4BF2CB24E65u64, asset)
    } // 0xE4B5F4BF2CB24E65 0xF7EB2BF1 b323
    pub unsafe fn remove_action_mode_asset(asset: *const i8) {
        call_native!(Void, 0x13E940F88470FA51u64, asset);
    } // 0x13E940F88470FA51 0x3F480F92 b323
    pub unsafe fn request_stealth_mode_asset(asset: *const i8) {
        call_native!(Void, 0x2A0A62FCDEE16D4Fu64, asset);
    } // 0x2A0A62FCDEE16D4F 0x280A004A b323
    pub unsafe fn has_stealth_mode_asset_loaded(asset: *const i8) -> bool {
        call_native!(bool, 0xE977FC5B08AF3441u64, asset)
    } // 0xE977FC5B08AF3441 0x39245667 b323
    pub unsafe fn remove_stealth_mode_asset(asset: *const i8) {
        call_native!(Void, 0x9219857D21F0E842u64, asset);
    } // 0x9219857D21F0E842 0x8C0B243A b323
    pub unsafe fn set_ped_lod_multiplier(ped: Ped, multiplier: f32) {
        call_native!(Void, 0xDC2C5C242AAC342Bu64, ped, multiplier);
    } // 0xDC2C5C242AAC342B 0x1D2B5C70 b323
    pub unsafe fn set_ped_can_lose_props_on_damage(ped: Ped, toggle: bool, p_2: i32) {
        call_native!(Void, 0xE861D0B05C7662B8u64, ped, toggle, p_2);
    } // 0xE861D0B05C7662B8 0x2F9550C2 b323
    pub unsafe fn set_force_footstep_update(ped: Ped, toggle: bool) {
        call_native!(Void, 0x129466ED55140F8Du64, ped, toggle);
    } // 0x129466ED55140F8D 0x37DBC2AD b323
    pub unsafe fn set_force_step_type(ped: Ped, p_1: bool, _type: i32, p_3: i32) {
        call_native!(Void, 0xCB968B53FC7F916Du64, ped, p_1, _type, p_3);
    } // 0xCB968B53FC7F916D 0xC0F1BC91 b323
    pub unsafe fn is_any_hostile_ped_near_point(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
    ) -> bool {
        call_native!(bool, 0x68772DB2B2526F9Fu64, ped, x, y, z, radius)
    } // 0x68772DB2B2526F9F 0x1A464167 b323
    pub unsafe fn set_ped_can_play_in_car_idles(ped: Ped, toggle: bool) {
        call_native!(Void, 0x820E9892A77E97CDu64, ped, toggle);
    } // 0x820E9892A77E97CD  b877
    pub unsafe fn is_target_ped_in_perception_area(
        ped: Ped,
        target_ped: Ped,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
    ) -> bool {
        call_native!(
            bool,
            0x06087579E7AA85A9u64,
            ped,
            target_ped,
            p_2,
            p_3,
            p_4,
            p_5
        )
    } // 0x06087579E7AA85A9 0xD0567D41 b323
    pub unsafe fn set_pop_control_sphere_this_frame(x: f32, y: f32, z: f32, min: f32, max: f32) {
        call_native!(Void, 0xD8C3BE3EE94CAF2Du64, x, y, z, min, max);
    } // 0xD8C3BE3EE94CAF2D 0x4BBE5E2C b323
    pub unsafe fn force_zero_mass_in_collisions(ped: Ped) {
        call_native!(Void, 0xD33DAA36272177C4u64, ped);
    } // 0xD33DAA36272177C4 0xA89A53F2 b323
    pub unsafe fn set_disable_high_fall_death(ped: Ped, toggle: bool) {
        call_native!(Void, 0x711794453CFD692Bu64, ped, toggle);
    } // 0x711794453CFD692B  b463
    pub unsafe fn set_ped_phone_palette_idx(p_0: Any, p_1: Any) {
        call_native!(Void, 0x83A169EABCDB10A2u64, p_0, p_1);
    } // 0x83A169EABCDB10A2  b323
    pub unsafe fn set_ped_steer_bias(ped: Ped, value: f32) {
        call_native!(Void, 0x288DF530C92DAD6Fu64, ped, value);
    } // 0x288DF530C92DAD6F  b323
    pub unsafe fn is_ped_switching_weapon(_ped: Ped) -> bool {
        call_native!(bool, 0x3795688A307E1EB6u64, _ped)
    } // 0x3795688A307E1EB6  b505
    pub unsafe fn set_ped_treated_as_friendly(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x0F62619393661D6Eu64, p_0, p_1, p_2);
    } // 0x0F62619393661D6E  b877
    pub unsafe fn set_disable_ped_map_collision(ped: Ped) {
        call_native!(Void, 0xDFE68C4B787E1BFBu64, ped);
    } // 0xDFE68C4B787E1BFB  b1180
    pub unsafe fn enable_mp_light(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEE2476B9EE4A094Fu64, ped, toggle);
    } // 0xEE2476B9EE4A094F  b1493
    pub unsafe fn get_mp_light_enabled(ped: Ped) -> bool {
        call_native!(bool, 0x88274C11CF0D866Du64, ped)
    } // 0x88274C11CF0D866D  b1493
    pub unsafe fn clear_cover_point_for_ped(ped: Ped) {
        call_native!(Void, 0x637822DC2AFEEBF8u64, ped);
    } // 0x637822DC2AFEEBF8  b1493
    pub unsafe fn set_allow_stunt_jump_camera(ped: Ped, toggle: bool) {
        call_native!(Void, 0xFAB944D4D481ACCBu64, ped, toggle);
    } // 0xFAB944D4D481ACCB  b1734
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod physics {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn add_rope(
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        length: f32,
        rope_type: i32,
        max_length: f32,
        min_length: f32,
        winding_speed: f32,
        p_1_1: bool,
        p_1_2: bool,
        rigid: bool,
        p_1_4: f32,
        break_when_shot: bool,
        unk_ptr: *mut Any,
    ) -> i32 {
        call_native!(
            i32,
            0xE832D760399EB220u64,
            x,
            y,
            z,
            rot_x,
            rot_y,
            rot_z,
            length,
            rope_type,
            max_length,
            min_length,
            winding_speed,
            p_1_1,
            p_1_2,
            rigid,
            p_1_4,
            break_when_shot,
            unk_ptr
        )
    } // 0xE832D760399EB220 0xA592EC74 b323
    pub unsafe fn delete_rope(rope_id: *mut i32) {
        call_native!(Void, 0x52B4829281364649u64, rope_id);
    } // 0x52B4829281364649 0x748D72AF b323
    pub unsafe fn delete_child_rope(rope_id: i32) {
        call_native!(Void, 0xAA5D6B1888E4DB20u64, rope_id);
    } // 0xAA5D6B1888E4DB20 0xB19B4706 b323
    pub unsafe fn does_rope_exist(rope_id: *mut i32) -> bool {
        call_native!(bool, 0xFD5448BE3111ED96u64, rope_id)
    } // 0xFD5448BE3111ED96 0x66E4A3AC b323
    pub unsafe fn rope_draw_enabled(rope_id: *mut i32, p_1: bool) {
        call_native!(Void, 0xA1AE736541B0FCA3u64, rope_id, p_1);
    } // 0xA1AE736541B0FCA3  b1868
    pub unsafe fn rope_draw_shadow_enabled(rope_id: *mut i32, toggle: bool) {
        call_native!(Void, 0xF159A63806BB5BA8u64, rope_id, toggle);
    } // 0xF159A63806BB5BA8 0x51523B8C b323
    pub unsafe fn load_rope_data(rope_id: i32, rope_preset: *const i8) {
        call_native!(Void, 0xCBB203C04D1ABD27u64, rope_id, rope_preset);
    } // 0xCBB203C04D1ABD27 0x9E8F1644 b323
    pub unsafe fn pin_rope_vertex(rope_id: i32, vertex: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x2B320CF14146B69Au64, rope_id, vertex, x, y, z);
    } // 0x2B320CF14146B69A 0xAE1D101B b323
    pub unsafe fn unpin_rope_vertex(rope_id: i32, vertex: i32) {
        call_native!(Void, 0x4B5AE2EEE4A8F180u64, rope_id, vertex);
    } // 0x4B5AE2EEE4A8F180 0xB30B552F b323
    pub unsafe fn get_rope_vertex_count(rope_id: i32) -> i32 {
        call_native!(i32, 0x3655F544CD30F0B5u64, rope_id)
    } // 0x3655F544CD30F0B5 0x5131CD2C b323
    pub unsafe fn attach_entities_to_rope(
        rope_id: i32,
        ent_1: Entity,
        ent_2: Entity,
        ent_1_x: f32,
        ent_1_y: f32,
        ent_1_z: f32,
        ent_2_x: f32,
        ent_2_y: f32,
        ent_2_z: f32,
        length: f32,
        p_1_0: bool,
        p_1_1: bool,
        p_1_2: *mut Any,
        p_1_3: *mut Any,
    ) {
        call_native!(
            Void,
            0x3D95EC8B6D940AC3u64,
            rope_id,
            ent_1,
            ent_2,
            ent_1_x,
            ent_1_y,
            ent_1_z,
            ent_2_x,
            ent_2_y,
            ent_2_z,
            length,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3
        );
    } // 0x3D95EC8B6D940AC3 0x7508668F b323
    pub unsafe fn attach_rope_to_entity(
        rope_id: i32,
        entity: Entity,
        x: f32,
        y: f32,
        z: f32,
        p_5: bool,
    ) {
        call_native!(Void, 0x4B490A6832559A65u64, rope_id, entity, x, y, z, p_5);
    } // 0x4B490A6832559A65 0xB25D9536 b323
    pub unsafe fn detach_rope_from_entity(rope_id: i32, entity: Entity) {
        call_native!(Void, 0xBCF3026912A8647Du64, rope_id, entity);
    } // 0xBCF3026912A8647D 0x3E720BEE b323
    pub unsafe fn rope_set_update_pinverts(rope_id: i32) {
        call_native!(Void, 0xC8D667EE52114ABAu64, rope_id);
    } // 0xC8D667EE52114ABA 0xEAF291A0 b323
    pub unsafe fn rope_set_update_order(rope_id: i32, p_1: Any) {
        call_native!(Void, 0xDC57A637A20006EDu64, rope_id, p_1);
    } // 0xDC57A637A20006ED 0x80DB77A7 b323
    pub unsafe fn rope_set_smooth_reelin(rope_id: i32, p_1: bool) {
        call_native!(Void, 0x36CCB9BE67B970FDu64, rope_id, p_1);
    } // 0x36CCB9BE67B970FD 0xC67D5CF6 b323
    pub unsafe fn is_rope_attached_at_both_ends(rope_id: *mut i32) -> bool {
        call_native!(bool, 0x84DE3B5FB3E666F0u64, rope_id)
    } // 0x84DE3B5FB3E666F0 0x7A18BB9C b323
    pub unsafe fn get_rope_last_vertex_coord(rope_id: i32) -> Vector3 {
        call_native!(Vector3, 0x21BB0FBD3E217C2Du64, rope_id)
    } // 0x21BB0FBD3E217C2D 0x91F6848B b323
    pub unsafe fn get_rope_vertex_coord(rope_id: i32, vertex: i32) -> Vector3 {
        call_native!(Vector3, 0xEA61CA8E80F09E4Du64, rope_id, vertex)
    } // 0xEA61CA8E80F09E4D 0x84374452 b323
    pub unsafe fn start_rope_winding(rope_id: i32) {
        call_native!(Void, 0x1461C72C889E343Eu64, rope_id);
    } // 0x1461C72C889E343E 0x5187BED3 b323
    pub unsafe fn stop_rope_winding(rope_id: i32) {
        call_native!(Void, 0xCB2D4AB84A19AA7Cu64, rope_id);
    } // 0xCB2D4AB84A19AA7C 0x46826B53 b323
    pub unsafe fn start_rope_unwinding_front(rope_id: i32) {
        call_native!(Void, 0x538D1179EC1AA9A9u64, rope_id);
    } // 0x538D1179EC1AA9A9 0xFC0DB4C3 b323
    pub unsafe fn stop_rope_unwinding_front(rope_id: i32) {
        call_native!(Void, 0xFFF3A50779EFBBB3u64, rope_id);
    } // 0xFFF3A50779EFBBB3 0x2EEDB18F b323
    pub unsafe fn rope_convert_to_simple(rope_id: i32) {
        call_native!(Void, 0x5389D48EFA2F079Au64, rope_id);
    } // 0x5389D48EFA2F079A 0x43E92628 b323
    pub unsafe fn rope_load_textures() {
        call_native!(Void, 0x9B9039DBF2D258C1u64);
    } // 0x9B9039DBF2D258C1 0xBA97CE91 b323
    pub unsafe fn rope_are_textures_loaded() -> bool {
        call_native!(bool, 0xF2D0E6A75CC05597u64)
    } // 0xF2D0E6A75CC05597 0x5FDC1047 b323
    pub unsafe fn rope_unload_textures() {
        call_native!(Void, 0x6CE36C35C1AC8163u64);
    } // 0x6CE36C35C1AC8163 0x584463E0 b323
    pub unsafe fn does_script_own_rope(rope_id: i32) -> bool {
        call_native!(bool, 0x271C9D3ACA5D6409u64, rope_id)
    } // 0x271C9D3ACA5D6409  b323
    pub unsafe fn rope_attach_virtual_bound_geom(
        rope_id: i32,
        p_1: i32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: f32,
        p_1_0: f32,
        p_1_1: f32,
        p_1_2: f32,
        p_1_3: f32,
    ) {
        call_native!(
            Void,
            0xBC0CE682D4D05650u64,
            rope_id,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3
        );
    } // 0xBC0CE682D4D05650 0x106BA127 b323
    pub unsafe fn rope_change_script_owner(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0xB1B6216CA2E7B55Eu64, p_0, p_1, p_2);
    } // 0xB1B6216CA2E7B55E 0x7C6F7668 b323
    pub unsafe fn rope_set_refframevelocity_colliderorder(rope_id: i32, p_1: i32) {
        call_native!(Void, 0xB743F735C03D7810u64, rope_id, p_1);
    } // 0xB743F735C03D7810 0x686672DD b323
    pub unsafe fn rope_get_distance_between_ends(rope_id: i32) -> f32 {
        call_native!(f32, 0x73040398DFF9A4A6u64, rope_id)
    } // 0x73040398DFF9A4A6 0xFD309DC8 b323
    pub unsafe fn rope_force_length(rope_id: i32, length: f32) {
        call_native!(Void, 0xD009F759A723DB1Bu64, rope_id, length);
    } // 0xD009F759A723DB1B 0xABF3130F b323
    pub unsafe fn rope_reset_length(rope_id: i32, length: f32) {
        call_native!(Void, 0xC16DE94D9BEA14A0u64, rope_id, length);
    } // 0xC16DE94D9BEA14A0 0xC8A423A3 b323
    pub unsafe fn apply_impulse_to_cloth(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        vec_x: f32,
        vec_y: f32,
        vec_z: f32,
        impulse: f32,
    ) {
        call_native!(
            Void,
            0xE37F721824571784u64,
            pos_x,
            pos_y,
            pos_z,
            vec_x,
            vec_y,
            vec_z,
            impulse
        );
    } // 0xE37F721824571784 0xA2A5C9FE b323
    pub unsafe fn set_damping(entity: Entity, vertex: i32, value: f32) {
        call_native!(Void, 0xEEA3B200A6FEB65Bu64, entity, vertex, value);
    } // 0xEEA3B200A6FEB65B 0xCFB37773 b323
    pub unsafe fn activate_physics(entity: Entity) {
        call_native!(Void, 0x710311ADF0E20730u64, entity);
    } // 0x710311ADF0E20730 0x031711B8 b323
    pub unsafe fn set_cgoffset(entity: Entity, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xD8FA3908D7B86904u64, entity, x, y, z);
    } // 0xD8FA3908D7B86904 0x59910AB2 b323
    pub unsafe fn get_cgoffset(entity: Entity) -> Vector3 {
        call_native!(Vector3, 0x8214A4B5A7A33612u64, entity)
    } // 0x8214A4B5A7A33612 0x49A11F0D b323
    pub unsafe fn set_cg_at_boundcenter(entity: Entity) {
        call_native!(Void, 0xBE520D9761FF811Fu64, entity);
    } // 0xBE520D9761FF811F 0xA5B55421 b323
    pub unsafe fn break_entity_glass(
        entity: Entity,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        p_9: Any,
        p_1_0: bool,
    ) {
        call_native!(
            Void,
            0x2E648D16F6E308F3u64,
            entity,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0x2E648D16F6E308F3 0xD0E0402F b323
    pub unsafe fn get_is_entity_a_frag(object: Object) -> bool {
        call_native!(bool, 0x0C112765300C7E1Eu64, object)
    } // 0x0C112765300C7E1E  b505
    pub unsafe fn set_disable_breaking(object: Object, toggle: bool) {
        call_native!(Void, 0x5CEC1A84620E7D5Bu64, object, toggle);
    } // 0x5CEC1A84620E7D5B 0xEE77C326 b323
    pub unsafe fn reset_disable_breaking(object: Object) {
        call_native!(Void, 0xCC6E963682533882u64, object);
    } // 0xCC6E963682533882  b323
    pub unsafe fn set_disable_frag_damage(object: Object, toggle: bool) {
        call_native!(Void, 0x01BA3AED21C16CFBu64, object, toggle);
    } // 0x01BA3AED21C16CFB 0x97269DC8 b323
    pub unsafe fn set_use_kinematic_physics(entity: Entity, toggle: bool) {
        call_native!(Void, 0x15F944730C832252u64, entity, toggle);
    } // 0x15F944730C832252  b463
    pub unsafe fn set_in_stunt_mode(p_0: bool) {
        call_native!(Void, 0x9EBD751E5787BAF2u64, p_0);
    } // 0x9EBD751E5787BAF2  b791
    pub unsafe fn set_in_arena_mode(toggle: bool) {
        call_native!(Void, 0xAA6A6098851C396Fu64, toggle);
    } // 0xAA6A6098851C396F  b1604
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod player {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_player_ped(player: Player) -> Ped {
        call_native!(Ped, 0x43A66C31C68491C0u64, player)
    } // 0x43A66C31C68491C0 0x6E31E993 b323
    pub unsafe fn get_player_ped_script_index(player: Player) -> Ped {
        call_native!(Ped, 0x50FAC3A3E030A6E1u64, player)
    } // 0x50FAC3A3E030A6E1 0x6AC64990 b323
    pub unsafe fn set_player_model(player: Player, model: Hash) {
        call_native!(Void, 0x00A1CADD00108836u64, player, model);
    } // 0x00A1CADD00108836 0x774A4C54 b323
    pub unsafe fn change_player_ped(player: Player, ped: Ped, p_2: bool, reset_damage: bool) {
        call_native!(Void, 0x048189FAC643DEEEu64, player, ped, p_2, reset_damage);
    } // 0x048189FAC643DEEE 0xBE515485 b323
    pub unsafe fn get_player_rgb_colour(player: Player, r: *mut i32, g: *mut i32, b: *mut i32) {
        call_native!(Void, 0xE902EF951DCE178Fu64, player, r, g, b);
    } // 0xE902EF951DCE178F 0x6EF43BBB b323
    pub unsafe fn get_number_of_players() -> i32 {
        call_native!(i32, 0x407C7F91DDB46C16u64)
    } // 0x407C7F91DDB46C16 0x4C1B8867 b323
    pub unsafe fn get_player_team(player: Player) -> i32 {
        call_native!(i32, 0x37039302F4E0A008u64, player)
    } // 0x37039302F4E0A008 0x9873E404 b323
    pub unsafe fn set_player_team(player: Player, team: i32) {
        call_native!(Void, 0x0299FA38396A4940u64, player, team);
    } // 0x0299FA38396A4940 0x725ADCF2 b323
    pub unsafe fn get_number_of_players_in_team(team: i32) -> i32 {
        call_native!(i32, 0x1FC200409F10E6F1u64, team)
    } // 0x1FC200409F10E6F1  b1180
    pub unsafe fn get_player_name(player: Player) -> *const i8 {
        call_native!(*const i8, 0x6D0DE6A7B5DA71F8u64, player)
    } // 0x6D0DE6A7B5DA71F8 0x406B4B20 b323
    pub unsafe fn get_wanted_level_radius(player: Player) -> f32 {
        call_native!(f32, 0x085DEB493BE80812u64, player)
    } // 0x085DEB493BE80812 0x1CF7D7DA b323
    pub unsafe fn get_player_wanted_centre_position(player: Player) -> Vector3 {
        call_native!(Vector3, 0x0C92BA89F1AF26F8u64, player)
    } // 0x0C92BA89F1AF26F8 0x821F2D2C b323
    pub unsafe fn set_player_wanted_centre_position(
        player: Player,
        position: *mut Vector3,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0x520E541A97A13354u64, player, position, p_2, p_3);
    } // 0x520E541A97A13354 0xF261633A b323
    pub unsafe fn get_wanted_level_threshold(wanted_level: i32) -> i32 {
        call_native!(i32, 0xFDD179EAF45B556Cu64, wanted_level)
    } // 0xFDD179EAF45B556C 0xD9783F6B b323
    pub unsafe fn set_player_wanted_level(
        player: Player,
        wanted_level: i32,
        disable_no_mission: bool,
    ) {
        call_native!(
            Void,
            0x39FF19C64EF7DA5Bu64,
            player,
            wanted_level,
            disable_no_mission
        );
    } // 0x39FF19C64EF7DA5B 0xB7A0914B b323
    pub unsafe fn set_player_wanted_level_no_drop(player: Player, wanted_level: i32, p_2: bool) {
        call_native!(Void, 0x340E61DE7F471565u64, player, wanted_level, p_2);
    } // 0x340E61DE7F471565 0xED6F44F5 b323
    pub unsafe fn set_player_wanted_level_now(player: Player, p_1: bool) {
        call_native!(Void, 0xE0A7D1E497FFCD6Fu64, player, p_1);
    } // 0xE0A7D1E497FFCD6F 0xAF3AFD83 b323
    pub unsafe fn are_player_flashing_stars_about_to_drop(player: Player) -> bool {
        call_native!(bool, 0xAFAF86043E5874E9u64, player)
    } // 0xAFAF86043E5874E9 0xE13A71C7 b323
    pub unsafe fn are_player_stars_greyed_out(player: Player) -> bool {
        call_native!(bool, 0x0A6EB355EE14A2DBu64, player)
    } // 0x0A6EB355EE14A2DB 0x5E72AB72 b323
    pub unsafe fn is_wanted_and_has_been_seen_by_cops(player: Player) -> bool {
        call_native!(bool, 0x7E07C78925D5FD96u64, player)
    } // 0x7E07C78925D5FD96  b372
    pub unsafe fn set_dispatch_cops_for_player(player: Player, toggle: bool) {
        call_native!(Void, 0xDB172424876553F4u64, player, toggle);
    } // 0xDB172424876553F4 0x48A18913 b323
    pub unsafe fn is_player_wanted_level_greater(player: Player, wanted_level: i32) -> bool {
        call_native!(bool, 0x238DB2A2C23EE9EFu64, player, wanted_level)
    } // 0x238DB2A2C23EE9EF 0x589A2661 b323
    pub unsafe fn clear_player_wanted_level(player: Player) {
        call_native!(Void, 0xB302540597885499u64, player);
    } // 0xB302540597885499 0x54EA5BCC b323
    pub unsafe fn is_player_dead(player: Player) -> bool {
        call_native!(bool, 0x424D4687FA1E5652u64, player)
    } // 0x424D4687FA1E5652 0x140CA5A8 b323
    pub unsafe fn is_player_pressing_horn(player: Player) -> bool {
        call_native!(bool, 0xFA1E2BF8B10598F9u64, player)
    } // 0xFA1E2BF8B10598F9 0xED1D1662 b323
    pub unsafe fn set_player_control(player: Player, b_has_control: bool, flags: i32) {
        call_native!(Void, 0x8D32347D6D4C40A2u64, player, b_has_control, flags);
    } // 0x8D32347D6D4C40A2 0xD17AFCD8 b323
    pub unsafe fn get_player_wanted_level(player: Player) -> i32 {
        call_native!(i32, 0xE28E54788CE8F12Du64, player)
    } // 0xE28E54788CE8F12D 0xBDCDD163 b323
    pub unsafe fn set_max_wanted_level(max_wanted_level: i32) {
        call_native!(Void, 0xAA5F02DB48D704B9u64, max_wanted_level);
    } // 0xAA5F02DB48D704B9 0x665A06F5 b323
    pub unsafe fn set_police_radar_blips(toggle: bool) {
        call_native!(Void, 0x43286D561B72B8BFu64, toggle);
    } // 0x43286D561B72B8BF 0x8E114B10 b323
    pub unsafe fn set_police_ignore_player(player: Player, toggle: bool) {
        call_native!(Void, 0x32C62AA929C2DA6Au64, player, toggle);
    } // 0x32C62AA929C2DA6A 0xE6DE71B7 b323
    pub unsafe fn is_player_playing(player: Player) -> bool {
        call_native!(bool, 0x5E9564D8246B909Au64, player)
    } // 0x5E9564D8246B909A 0xE15D777F b323
    pub unsafe fn set_everyone_ignore_player(player: Player, toggle: bool) {
        call_native!(Void, 0x8EEDA153AD141BA4u64, player, toggle);
    } // 0x8EEDA153AD141BA4 0xC915285E b323
    pub unsafe fn set_all_random_peds_flee(player: Player, toggle: bool) {
        call_native!(Void, 0x056E0FE8534C2949u64, player, toggle);
    } // 0x056E0FE8534C2949 0x49EAE968 b323
    pub unsafe fn set_all_random_peds_flee_this_frame(player: Player) {
        call_native!(Void, 0x471D2FF42A94B4F2u64, player);
    } // 0x471D2FF42A94B4F2 0xBF974891 b323
    pub unsafe fn set_all_neutral_random_peds_flee(player: Player, toggle: bool) {
        call_native!(Void, 0xDE45D1A1EF45EE61u64, player, toggle);
    } // 0xDE45D1A1EF45EE61 0x274631FE b323
    pub unsafe fn set_all_neutral_random_peds_flee_this_frame(player: Player) {
        call_native!(Void, 0xC3376F42B1FACCC6u64, player);
    } // 0xC3376F42B1FACCC6 0x02DF7AF4 b323
    pub unsafe fn set_law_peds_can_attack_non_wanted_player_this_frame(player: Player) {
        call_native!(Void, 0xFAC75988A7D078D3u64, player);
    } // 0xFAC75988A7D078D3  b463
    pub unsafe fn set_ignore_low_priority_shocking_events(player: Player, toggle: bool) {
        call_native!(Void, 0x596976B02B6B5700u64, player, toggle);
    } // 0x596976B02B6B5700 0xA3D675ED b323
    pub unsafe fn set_wanted_level_multiplier(multiplier: f32) {
        call_native!(Void, 0x020E5F00CDA207BAu64, multiplier);
    } // 0x020E5F00CDA207BA 0x1359292F b323
    pub unsafe fn set_wanted_level_difficulty(player: Player, difficulty: f32) {
        call_native!(Void, 0x9B0BB33B04405E7Au64, player, difficulty);
    } // 0x9B0BB33B04405E7A 0xB552626C b323
    pub unsafe fn reset_wanted_level_difficulty(player: Player) {
        call_native!(Void, 0xB9D0DD990DC141DDu64, player);
    } // 0xB9D0DD990DC141DD 0xA64C378D b323
    pub unsafe fn get_wanted_level_time_to_escape() -> i32 {
        call_native!(i32, 0xA72200F51875FEA4u64)
    } // 0xA72200F51875FEA4  b2372
    pub unsafe fn set_wanted_level_hidden_escape_time(
        player: Player,
        wanted_level: i32,
        loss_time: i32,
    ) {
        call_native!(Void, 0x49B856B1360C47C7u64, player, wanted_level, loss_time);
    } // 0x49B856B1360C47C7  b2060
    pub unsafe fn reset_wanted_level_hidden_escape_time(player: Player) {
        call_native!(Void, 0x823EC8E82BA45986u64, player);
    } // 0x823EC8E82BA45986  b2060
    pub unsafe fn start_firing_amnesty(duration: i32) {
        call_native!(Void, 0xBF9BD71691857E48u64, duration);
    } // 0xBF9BD71691857E48 0x5F8A22A6 b323
    pub unsafe fn report_crime(player: Player, crime_type: i32, wanted_lvl_thresh: i32) {
        call_native!(
            Void,
            0xE9B09589827545E7u64,
            player,
            crime_type,
            wanted_lvl_thresh
        );
    } // 0xE9B09589827545E7 0xD8EB3A44 b323
    pub unsafe fn suppress_crime_this_frame(player: Player, crime_type: i32) {
        call_native!(Void, 0x9A987297ED8BD838u64, player, crime_type);
    } // 0x9A987297ED8BD838 0x59B5C2A2 b323
    pub unsafe fn update_wanted_position_this_frame(player: Player) {
        call_native!(Void, 0xBC9490CA15AEA8FBu64, player);
    } // 0xBC9490CA15AEA8FB 0x6B34A160 b323
    pub unsafe fn suppress_losing_wanted_level_if_hidden_this_frame(player: Player) {
        call_native!(Void, 0x4669B3ED80F24B4Eu64, player);
    } // 0x4669B3ED80F24B4E 0xB9FB142F b323
    pub unsafe fn allow_evasion_hud_if_disabling_hidden_evasion_this_frame(
        player: Player,
        p_1: Any,
    ) {
        call_native!(Void, 0x2F41A3BAE005E5FAu64, player, p_1);
    } // 0x2F41A3BAE005E5FA  b372
    pub unsafe fn force_start_hidden_evasion(player: Player) {
        call_native!(Void, 0xAD73CE5A09E42D12u64, player);
    } // 0xAD73CE5A09E42D12 0x85725848 b323
    pub unsafe fn suppress_witnesses_calling_police_this_frame(player: Player) {
        call_native!(Void, 0x36F1B38855F2A8DFu64, player);
    } // 0x36F1B38855F2A8DF 0x3A7E5FB6 b323
    pub unsafe fn report_police_spotted_player(player: Player) {
        call_native!(Void, 0xDC64D2C53493ED12u64, player);
    } // 0xDC64D2C53493ED12 0xD15C4B1C b323
    pub unsafe fn set_law_response_delay_override(p_0: f32) {
        call_native!(Void, 0xB45EFF719D8427A6u64, p_0);
    } // 0xB45EFF719D8427A6 0xBF6993C7 b323
    pub unsafe fn reset_law_response_delay_override() {
        call_native!(Void, 0x0032A6DBA562C518u64);
    } // 0x0032A6DBA562C518 0x47CAB814 b323
    pub unsafe fn can_player_start_mission(player: Player) -> bool {
        call_native!(bool, 0xDE7465A27D403C06u64, player)
    } // 0xDE7465A27D403C06 0x39E3CB3F b323
    pub unsafe fn is_player_ready_for_cutscene(player: Player) -> bool {
        call_native!(bool, 0x908CBECC2CAA3690u64, player)
    } // 0x908CBECC2CAA3690 0xBB77E9CD b323
    pub unsafe fn is_player_targetting_entity(player: Player, entity: Entity) -> bool {
        call_native!(bool, 0x7912F7FC4F6264B6u64, player, entity)
    } // 0x7912F7FC4F6264B6 0xF3240B77 b323
    pub unsafe fn get_player_target_entity(player: Player, entity: *mut Entity) -> bool {
        call_native!(bool, 0x13EDE1A5DBF797C9u64, player, entity)
    } // 0x13EDE1A5DBF797C9 0xF6AAA2D7 b323
    pub unsafe fn is_player_free_aiming(player: Player) -> bool {
        call_native!(bool, 0x2E397FD2ECD37C87u64, player)
    } // 0x2E397FD2ECD37C87 0x1DEC67B7 b323
    pub unsafe fn is_player_free_aiming_at_entity(player: Player, entity: Entity) -> bool {
        call_native!(bool, 0x3C06B5C839B38F7Bu64, player, entity)
    } // 0x3C06B5C839B38F7B 0x7D80EEAA b323
    pub unsafe fn get_entity_player_is_free_aiming_at(player: Player, entity: *mut Entity) -> bool {
        call_native!(bool, 0x2975C866E6713290u64, player, entity)
    } // 0x2975C866E6713290 0x8866D9D0 b323
    pub unsafe fn set_player_lockon_range_override(player: Player, range: f32) {
        call_native!(Void, 0x29961D490E5814FDu64, player, range);
    } // 0x29961D490E5814FD 0x74D42C03 b323
    pub unsafe fn set_player_can_do_drive_by(player: Player, toggle: bool) {
        call_native!(Void, 0x6E8834B52EC20C77u64, player, toggle);
    } // 0x6E8834B52EC20C77 0xF4D99685 b323
    pub unsafe fn set_player_can_be_hassled_by_gangs(player: Player, toggle: bool) {
        call_native!(Void, 0xD5E460AD7020A246u64, player, toggle);
    } // 0xD5E460AD7020A246 0x71B305BB b323
    pub unsafe fn set_player_can_use_cover(player: Player, toggle: bool) {
        call_native!(Void, 0xD465A8599DFF6814u64, player, toggle);
    } // 0xD465A8599DFF6814 0x13CAFAFA b323
    pub unsafe fn get_max_wanted_level() -> i32 {
        call_native!(i32, 0x462E0DB9B137DC5Fu64)
    } // 0x462E0DB9B137DC5F 0x457F1E44 b323
    pub unsafe fn is_player_targetting_anything(player: Player) -> bool {
        call_native!(bool, 0x78CFE51896B6B8A4u64, player)
    } // 0x78CFE51896B6B8A4 0x456DB50D b323
    pub unsafe fn set_player_sprint(player: Player, toggle: bool) {
        call_native!(Void, 0xA01B8075D8B92DF4u64, player, toggle);
    } // 0xA01B8075D8B92DF4 0x7DD7900C b323
    pub unsafe fn reset_player_stamina(player: Player) {
        call_native!(Void, 0xA6F312FCCE9C1DFEu64, player);
    } // 0xA6F312FCCE9C1DFE 0xC0445A9C b323
    pub unsafe fn restore_player_stamina(player: Player, p_1: f32) {
        call_native!(Void, 0xA352C1B864CAFD33u64, player, p_1);
    } // 0xA352C1B864CAFD33 0x62A93608 b323
    pub unsafe fn get_player_sprint_stamina_remaining(player: Player) -> f32 {
        call_native!(f32, 0x3F9F16F8E65A7ED7u64, player)
    } // 0x3F9F16F8E65A7ED7 0x47017C90 b323
    pub unsafe fn get_player_sprint_time_remaining(player: Player) -> f32 {
        call_native!(f32, 0x1885BC9B108B4C99u64, player)
    } // 0x1885BC9B108B4C99 0x40E80543 b323
    pub unsafe fn get_player_underwater_time_remaining(player: Player) -> f32 {
        call_native!(f32, 0xA1FCF8E6AF40B731u64, player)
    } // 0xA1FCF8E6AF40B731 0x1317125A b323
    pub unsafe fn set_player_underwater_breath_percent_remaining(player: Player, time: f32) -> f32 {
        call_native!(f32, 0xA0D3E4F7AAFB7E78u64, player, time)
    } // 0xA0D3E4F7AAFB7E78  b757
    pub unsafe fn get_player_group(player: Player) -> i32 {
        call_native!(i32, 0x0D127585F77030AFu64, player)
    } // 0x0D127585F77030AF 0xA5EDCDE8 b323
    pub unsafe fn get_player_max_armour(player: Player) -> i32 {
        call_native!(i32, 0x92659B4CE1863CB3u64, player)
    } // 0x92659B4CE1863CB3 0x02A50657 b323
    pub unsafe fn is_player_control_on(player: Player) -> bool {
        call_native!(bool, 0x49C32D60007AFA47u64, player)
    } // 0x49C32D60007AFA47 0x618857F2 b323
    pub unsafe fn get_are_camera_controls_disabled() -> bool {
        call_native!(bool, 0x7C814D2FB49F40C0u64)
    } // 0x7C814D2FB49F40C0  b323
    pub unsafe fn is_player_script_control_on(player: Player) -> bool {
        call_native!(bool, 0x8A876A65283DD7D7u64, player)
    } // 0x8A876A65283DD7D7 0x61B00A84 b323
    pub unsafe fn is_player_climbing(player: Player) -> bool {
        call_native!(bool, 0x95E8F73DC65EFB9Cu64, player)
    } // 0x95E8F73DC65EFB9C 0x4A9E9AE0 b323
    pub unsafe fn is_player_being_arrested(player: Player, at_arresting: bool) -> bool {
        call_native!(bool, 0x388A47C51ABDAC8Eu64, player, at_arresting)
    } // 0x388A47C51ABDAC8E 0x7F6A60D3 b323
    pub unsafe fn reset_player_arrest_state(player: Player) {
        call_native!(Void, 0x2D03E13C460760D6u64, player);
    } // 0x2D03E13C460760D6 0x453C7CAB b323
    pub unsafe fn get_players_last_vehicle() -> Vehicle {
        call_native!(Vehicle, 0xB6997A7EB3F5C8C0u64)
    } // 0xB6997A7EB3F5C8C0 0xE2757AC1 b323
    pub unsafe fn get_player_index() -> Player {
        call_native!(Player, 0xA5EDC40EF369B48Du64)
    } // 0xA5EDC40EF369B48D 0x309BBDC1 b323
    pub unsafe fn int_to_playerindex(value: i32) -> Player {
        call_native!(Player, 0x41BD2A6B006AF756u64, value)
    } // 0x41BD2A6B006AF756 0x98DD98F1 b323
    pub unsafe fn int_to_participantindex(value: i32) -> i32 {
        call_native!(i32, 0x9EC6603812C24710u64, value)
    } // 0x9EC6603812C24710 0x98F3B274 b323
    pub unsafe fn get_time_since_player_hit_vehicle(player: Player) -> i32 {
        call_native!(i32, 0x5D35ECF3A81A0EE0u64, player)
    } // 0x5D35ECF3A81A0EE0 0x6E9B8B9E b323
    pub unsafe fn get_time_since_player_hit_ped(player: Player) -> i32 {
        call_native!(i32, 0xE36A25322DC35F42u64, player)
    } // 0xE36A25322DC35F42 0xB6209195 b323
    pub unsafe fn get_time_since_player_drove_on_pavement(player: Player) -> i32 {
        call_native!(i32, 0xD559D2BE9E37853Bu64, player)
    } // 0xD559D2BE9E37853B 0x8836E732 b323
    pub unsafe fn get_time_since_player_drove_against_traffic(player: Player) -> i32 {
        call_native!(i32, 0xDB89591E290D9182u64, player)
    } // 0xDB89591E290D9182 0x9F27D00E b323
    pub unsafe fn is_player_free_for_ambient_task(player: Player) -> bool {
        call_native!(bool, 0xDCCFD3F106C36AB4u64, player)
    } // 0xDCCFD3F106C36AB4 0x85C7E232 b323
    pub unsafe fn player_id() -> Player {
        call_native!(Player, 0x4F8644AF03D0E0D6u64)
    } // 0x4F8644AF03D0E0D6 0x8AEA886C b323
    pub unsafe fn player_ped_id() -> Ped {
        call_native!(Ped, 0xD80958FC74E988A6u64)
    } // 0xD80958FC74E988A6 0xFA92E226 b323
    pub unsafe fn network_player_id_to_int() -> i32 {
        call_native!(i32, 0xEE68096F9F37341Eu64)
    } // 0xEE68096F9F37341E 0x8DD5B838 b323
    pub unsafe fn has_force_cleanup_occurred(cleanup_flags: i32) -> bool {
        call_native!(bool, 0xC968670BFACE42D9u64, cleanup_flags)
    } // 0xC968670BFACE42D9 0x4B37333C b323
    pub unsafe fn force_cleanup(cleanup_flags: i32) {
        call_native!(Void, 0xBC8983F38F78ED51u64, cleanup_flags);
    } // 0xBC8983F38F78ED51 0xFDAAEA2B b323
    pub unsafe fn force_cleanup_for_all_threads_with_this_name(
        name: *const i8,
        cleanup_flags: i32,
    ) {
        call_native!(Void, 0x4C68DDDDF0097317u64, name, cleanup_flags);
    } // 0x4C68DDDDF0097317 0x04256C73 b323
    pub unsafe fn force_cleanup_for_thread_with_this_id(id: i32, cleanup_flags: i32) {
        call_native!(Void, 0xF745B37630DF176Bu64, id, cleanup_flags);
    } // 0xF745B37630DF176B 0x882D3EB3 b323
    pub unsafe fn get_cause_of_most_recent_force_cleanup() -> i32 {
        call_native!(i32, 0x9A41CF4674A12272u64)
    } // 0x9A41CF4674A12272 0x39AA9FC8 b323
    pub unsafe fn set_player_may_only_enter_this_vehicle(player: Player, vehicle: Vehicle) {
        call_native!(Void, 0x8026FF78F208978Au64, player, vehicle);
    } // 0x8026FF78F208978A 0xA454DD29 b323
    pub unsafe fn set_player_may_not_enter_any_vehicle(player: Player) {
        call_native!(Void, 0x1DE37BBF9E9CC14Au64, player);
    } // 0x1DE37BBF9E9CC14A 0xAF7AFCC4 b323
    pub unsafe fn give_achievement_to_player(achievement_id: i32) -> bool {
        call_native!(bool, 0xBEC7076D64130195u64, achievement_id)
    } // 0xBEC7076D64130195 0x822BC992 b323
    pub unsafe fn set_achievement_progress(achievement_id: i32, progress: i32) -> bool {
        call_native!(bool, 0xC2AFFFDABBDC2C5Cu64, achievement_id, progress)
    } // 0xC2AFFFDABBDC2C5C  b323
    pub unsafe fn get_achievement_progress(achievement_id: i32) -> i32 {
        call_native!(i32, 0x1C186837D0619335u64, achievement_id)
    } // 0x1C186837D0619335  b323
    pub unsafe fn has_achievement_been_passed(achievement_id: i32) -> bool {
        call_native!(bool, 0x867365E111A3B6EBu64, achievement_id)
    } // 0x867365E111A3B6EB 0x136A5BE9 b323
    pub unsafe fn is_player_online() -> bool {
        call_native!(bool, 0xF25D331DC2627BBCu64)
    } // 0xF25D331DC2627BBC 0x9FAB6729 b323
    pub unsafe fn is_player_logging_in_np() -> bool {
        call_native!(bool, 0x74556E1420867ECAu64)
    } // 0x74556E1420867ECA 0x8F72FAD0 b323
    pub unsafe fn display_system_signin_ui(p_0: bool) {
        call_native!(Void, 0x94DD7888C10A979Eu64, p_0);
    } // 0x94DD7888C10A979E 0x4264CED2 b323
    pub unsafe fn is_system_ui_being_displayed() -> bool {
        call_native!(bool, 0x5D511E3867C87139u64)
    } // 0x5D511E3867C87139 0xE495B6DA b323
    pub unsafe fn set_player_invincible(player: Player, toggle: bool) {
        call_native!(Void, 0x239528EACDC3E7DEu64, player, toggle);
    } // 0x239528EACDC3E7DE 0xDFB9A2A2 b323
    pub unsafe fn get_player_invincible(player: Player) -> bool {
        call_native!(bool, 0xB721981B2B939E07u64, player)
    } // 0xB721981B2B939E07 0x680C90EE b323
    pub unsafe fn get_player_debug_invincible(player: Player) -> bool {
        call_native!(bool, 0xDCC07526B8EC45AFu64, player)
    } // 0xDCC07526B8EC45AF  b1868
    pub unsafe fn set_player_invincible_but_has_reactions(player: Player, toggle: bool) {
        call_native!(Void, 0x6BC97F4F4BB3C04Bu64, player, toggle);
    } // 0x6BC97F4F4BB3C04B  b463
    pub unsafe fn set_player_can_collect_dropped_money(player: Player, p_1: bool) {
        call_native!(Void, 0xCAC57395B151135Fu64, player, p_1);
    } // 0xCAC57395B151135F 0x00563E0D b323
    pub unsafe fn remove_player_helmet(player: Player, p_2: bool) {
        call_native!(Void, 0xF3AC26D3CC576528u64, player, p_2);
    } // 0xF3AC26D3CC576528 0x6255F3B4 b323
    pub unsafe fn give_player_ragdoll_control(player: Player, toggle: bool) {
        call_native!(Void, 0x3C49C870E66F0A28u64, player, toggle);
    } // 0x3C49C870E66F0A28 0xC7B4D7AC b323
    pub unsafe fn set_player_lockon(player: Player, toggle: bool) {
        call_native!(Void, 0x5C8B2F450EE4328Eu64, player, toggle);
    } // 0x5C8B2F450EE4328E 0x0B270E0F b323
    pub unsafe fn set_player_targeting_mode(target_mode: i32) {
        call_native!(Void, 0xB1906895227793F3u64, target_mode);
    } // 0xB1906895227793F3 0x61CAE253 b323
    pub unsafe fn get_player_targeting_mode() -> i32 {
        call_native!(i32, 0x875BDD898B99C8CEu64)
    } // 0x875BDD898B99C8CE  b3095
    pub unsafe fn set_player_target_level(target_level: i32) {
        call_native!(Void, 0x5702B917B99DB1CDu64, target_level);
    } // 0x5702B917B99DB1CD 0x772DA539 b323
    pub unsafe fn get_is_using_fps_third_person_cover() -> bool {
        call_native!(bool, 0xB9CF1F793A9F1BF1u64)
    } // 0xB9CF1F793A9F1BF1  b323
    pub unsafe fn get_is_using_hood_camera() -> bool {
        call_native!(bool, 0xCB645E85E97EA48Bu64)
    } // 0xCB645E85E97EA48B  b372
    pub unsafe fn clear_player_has_damaged_at_least_one_ped(player: Player) {
        call_native!(Void, 0xF0B67A4DE6AB5F98u64, player);
    } // 0xF0B67A4DE6AB5F98 0x1D31CBBD b323
    pub unsafe fn has_player_damaged_at_least_one_ped(player: Player) -> bool {
        call_native!(bool, 0x20CE80B0C2BF4ACCu64, player)
    } // 0x20CE80B0C2BF4ACC 0x14F52453 b323
    pub unsafe fn clear_player_has_damaged_at_least_one_non_animal_ped(player: Player) {
        call_native!(Void, 0x4AACB96203D11A31u64, player);
    } // 0x4AACB96203D11A31 0x7E3BFBC5 b323
    pub unsafe fn has_player_damaged_at_least_one_non_animal_ped(player: Player) -> bool {
        call_native!(bool, 0xE4B90F367BD81752u64, player)
    } // 0xE4B90F367BD81752 0xA3707DFC b323
    pub unsafe fn set_air_drag_multiplier_for_players_vehicle(player: Player, multiplier: f32) {
        call_native!(Void, 0xCA7DC8329F0A1E9Eu64, player, multiplier);
    } // 0xCA7DC8329F0A1E9E 0xF20F72E5 b323
    pub unsafe fn set_swim_multiplier_for_player(player: Player, multiplier: f32) {
        call_native!(Void, 0xA91C6F0FF7D16A13u64, player, multiplier);
    } // 0xA91C6F0FF7D16A13 0xB986FF47 b323
    pub unsafe fn set_run_sprint_multiplier_for_player(player: Player, multiplier: f32) {
        call_native!(Void, 0x6DB47AA77FD94E09u64, player, multiplier);
    } // 0x6DB47AA77FD94E09 0x825423C2 b323
    pub unsafe fn get_time_since_last_arrest() -> i32 {
        call_native!(i32, 0x5063F92F07C2A316u64)
    } // 0x5063F92F07C2A316 0x62824EF4 b323
    pub unsafe fn get_time_since_last_death() -> i32 {
        call_native!(i32, 0xC7034807558DDFCAu64)
    } // 0xC7034807558DDFCA 0x24BC5AC0 b323
    pub unsafe fn assisted_movement_close_route() {
        call_native!(Void, 0xAEBF081FFC0A0E5Eu64);
    } // 0xAEBF081FFC0A0E5E 0xF23277F3 b323
    pub unsafe fn assisted_movement_flush_route() {
        call_native!(Void, 0x8621390F0CDCFE1Fu64);
    } // 0x8621390F0CDCFE1F 0xD04568B9 b323
    pub unsafe fn set_player_forced_aim(player: Player, toggle: bool) {
        call_native!(Void, 0x0FEE4F80AC44A726u64, player, toggle);
    } // 0x0FEE4F80AC44A726 0x94E42E2E b323
    pub unsafe fn set_player_forced_zoom(player: Player, toggle: bool) {
        call_native!(Void, 0x75E7D505F2B15902u64, player, toggle);
    } // 0x75E7D505F2B15902 0xB0C576CB b323
    pub unsafe fn set_player_force_skip_aim_intro(player: Player, toggle: bool) {
        call_native!(Void, 0x7651BC64AE59E128u64, player, toggle);
    } // 0x7651BC64AE59E128 0x374F42F0 b323
    pub unsafe fn disable_player_firing(player: Player, toggle: bool) {
        call_native!(Void, 0x5E6CC07646BBEAB8u64, player, toggle);
    } // 0x5E6CC07646BBEAB8 0x30CB28CB b323
    pub unsafe fn disable_player_throw_grenade_while_using_gun() {
        call_native!(Void, 0xB885852C39CC265Du64);
    } // 0xB885852C39CC265D  b323
    pub unsafe fn set_disable_ambient_melee_move(player: Player, toggle: bool) {
        call_native!(Void, 0x2E8AABFA40A84F8Cu64, player, toggle);
    } // 0x2E8AABFA40A84F8C 0xCCD937E7 b323
    pub unsafe fn set_player_max_armour(player: Player, value: i32) {
        call_native!(Void, 0x77DFCCF5948B8C71u64, player, value);
    } // 0x77DFCCF5948B8C71 0xC6C3C53B b323
    pub unsafe fn special_ability_activate(player: Player, p_1: i32) {
        call_native!(Void, 0x821FDC827D6F4090u64, player, p_1);
    } // 0x821FDC827D6F4090  b678
    pub unsafe fn set_special_ability_mp(player: Player, p_1: i32, p_2: Any) {
        call_native!(Void, 0xB214D570EAD7F81Au64, player, p_1, p_2);
    } // 0xB214D570EAD7F81A  b678
    pub unsafe fn special_ability_deactivate_mp(player: Player, p_1: i32) {
        call_native!(Void, 0x17F7471EACA78290u64, player, p_1);
    } // 0x17F7471EACA78290  b678
    pub unsafe fn special_ability_deactivate(player: Player, p_1: Any) {
        call_native!(Void, 0xD6A953C6D1492057u64, player, p_1);
    } // 0xD6A953C6D1492057 0x80C2AB09 b323
    pub unsafe fn special_ability_deactivate_fast(player: Player, p_1: Any) {
        call_native!(Void, 0x9CB5CE07A3968D5Au64, player, p_1);
    } // 0x9CB5CE07A3968D5A 0x0751908A b323
    pub unsafe fn special_ability_reset(player: Player, p_1: Any) {
        call_native!(Void, 0x375F0E738F861A94u64, player, p_1);
    } // 0x375F0E738F861A94 0xA7D8BCD3 b323
    pub unsafe fn special_ability_charge_on_mission_failed(player: Player, p_1: Any) {
        call_native!(Void, 0xC9A763D8FE87436Au64, player, p_1);
    } // 0xC9A763D8FE87436A 0x4136829A b323
    pub unsafe fn special_ability_charge_small(player: Player, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0x2E7B9B683481687Du64, player, p_1, p_2, p_3);
    } // 0x2E7B9B683481687D 0x6F463F56 b323
    pub unsafe fn special_ability_charge_medium(player: Player, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xF113E3AA9BC54613u64, player, p_1, p_2, p_3);
    } // 0xF113E3AA9BC54613 0xAB55D8F3 b323
    pub unsafe fn special_ability_charge_large(player: Player, p_1: bool, p_2: bool, p_3: Any) {
        call_native!(Void, 0xF733F45FA4497D93u64, player, p_1, p_2, p_3);
    } // 0xF733F45FA4497D93 0xF440C04D b323
    pub unsafe fn special_ability_charge_continuous(player: Player, p_1: Ped, p_2: Any) {
        call_native!(Void, 0xED481732DFF7E997u64, player, p_1, p_2);
    } // 0xED481732DFF7E997 0x5FEE98A2 b323
    pub unsafe fn special_ability_charge_absolute(player: Player, p_1: i32, p_2: bool, p_3: Any) {
        call_native!(Void, 0xB7B0870EB531D08Du64, player, p_1, p_2, p_3);
    } // 0xB7B0870EB531D08D 0x72429998 b323
    pub unsafe fn special_ability_charge_normalized(
        player: Player,
        normalized_value: f32,
        p_2: bool,
        p_3: Any,
    ) {
        call_native!(
            Void,
            0xA0696A65F009EE18u64,
            player,
            normalized_value,
            p_2,
            p_3
        );
    } // 0xA0696A65F009EE18 0x8C7E68C1 b323
    pub unsafe fn special_ability_fill_meter(player: Player, p_1: bool, p_2: Any) {
        call_native!(Void, 0x3DACA8DDC6FD4980u64, player, p_1, p_2);
    } // 0x3DACA8DDC6FD4980 0xB71589DA b323
    pub unsafe fn special_ability_deplete_meter(player: Player, p_1: bool, p_2: Any) {
        call_native!(Void, 0x1D506DBBBC51E64Bu64, player, p_1, p_2);
    } // 0x1D506DBBBC51E64B 0x9F80F6DF b323
    pub unsafe fn special_ability_lock(player_model: Hash, p_1: Any) {
        call_native!(Void, 0x6A09D0D590A47D13u64, player_model, p_1);
    } // 0x6A09D0D590A47D13 0x1B7BB388 b323
    pub unsafe fn special_ability_unlock(player_model: Hash, p_1: Any) {
        call_native!(Void, 0xF145F3BE2EFA9A3Bu64, player_model, p_1);
    } // 0xF145F3BE2EFA9A3B 0x1FDB2919 b323
    pub unsafe fn is_special_ability_unlocked(player_model: Hash) -> bool {
        call_native!(bool, 0xC6017F6A6CDFA694u64, player_model)
    } // 0xC6017F6A6CDFA694 0xC9C75E82 b323
    pub unsafe fn is_special_ability_active(player: Player, p_1: Any) -> bool {
        call_native!(bool, 0x3E5F7FC85D854E15u64, player, p_1)
    } // 0x3E5F7FC85D854E15 0x1B17E334 b323
    pub unsafe fn is_special_ability_meter_full(player: Player, p_1: Any) -> bool {
        call_native!(bool, 0x05A1FE504B7F2587u64, player, p_1)
    } // 0x05A1FE504B7F2587 0x2E19D7F6 b323
    pub unsafe fn enable_special_ability(player: Player, toggle: bool, p_2: Any) {
        call_native!(Void, 0x181EC197DAEFE121u64, player, toggle, p_2);
    } // 0x181EC197DAEFE121 0xC86C1B4E b323
    pub unsafe fn is_special_ability_enabled(player: Player, p_1: Any) -> bool {
        call_native!(bool, 0xB1D200FE26AEF3CBu64, player, p_1)
    } // 0xB1D200FE26AEF3CB 0xC01238CC b323
    pub unsafe fn set_special_ability_multiplier(multiplier: f32) {
        call_native!(Void, 0xA49C426ED0CA4AB7u64, multiplier);
    } // 0xA49C426ED0CA4AB7 0xFF1BC556 b323
    pub unsafe fn update_special_ability_from_stat(player: Player, p_1: Any) {
        call_native!(Void, 0xFFEE8FA29AB9A18Eu64, player, p_1);
    } // 0xFFEE8FA29AB9A18E 0x5D0FE25B b323
    pub unsafe fn get_is_player_driving_on_highway(player: Player) -> bool {
        call_native!(bool, 0x5FC472C501CCADB3u64, player)
    } // 0x5FC472C501CCADB3 0x46E7E31D b323
    pub unsafe fn get_is_player_driving_wreckless(player: Player, p_1: i32) -> bool {
        call_native!(bool, 0xF10B44FD479D69F3u64, player, p_1)
    } // 0xF10B44FD479D69F3 0x1E359CC8 b323
    pub unsafe fn get_is_mopping_area_free_in_front_of_player(player: Player, p_1: f32) -> bool {
        call_native!(bool, 0xDD2620B7B9D16FF1u64, player, p_1)
    } // 0xDD2620B7B9D16FF1 0x8CB53C9F b323
    pub unsafe fn start_player_teleport(
        player: Player,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        p_5: bool,
        find_collision_land: bool,
        p_7: bool,
    ) {
        call_native!(
            Void,
            0xAD15F075A4DA0FDEu64,
            player,
            x,
            y,
            z,
            heading,
            p_5,
            find_collision_land,
            p_7
        );
    } // 0xAD15F075A4DA0FDE 0xC552E06C b323
    pub unsafe fn update_player_teleport(player: Player) -> bool {
        call_native!(bool, 0xE23D5873C2394C61u64, player)
    } // 0xE23D5873C2394C61  b323
    pub unsafe fn stop_player_teleport() {
        call_native!(Void, 0xC449EDED9D73009Cu64);
    } // 0xC449EDED9D73009C 0x86AB8DBB b323
    pub unsafe fn is_player_teleport_active() -> bool {
        call_native!(bool, 0x02B15662D7F8886Fu64)
    } // 0x02B15662D7F8886F 0x3A11D118 b323
    pub unsafe fn get_player_current_stealth_noise(player: Player) -> f32 {
        call_native!(f32, 0x2F395D61F3A1F877u64, player)
    } // 0x2F395D61F3A1F877 0xC3B02362 b323
    pub unsafe fn set_player_health_recharge_multiplier(player: Player, regen_rate: f32) {
        call_native!(Void, 0x5DB660B38DD98A31u64, player, regen_rate);
    } // 0x5DB660B38DD98A31 0x45514731 b323
    pub unsafe fn get_player_health_recharge_max_percent(player: Player) -> f32 {
        call_native!(f32, 0x8BC515BAE4AAF8FFu64, player)
    } // 0x8BC515BAE4AAF8FF  b617
    pub unsafe fn set_player_health_recharge_max_percent(player: Player, limit: f32) {
        call_native!(Void, 0xC388A0F065F5BC34u64, player, limit);
    } // 0xC388A0F065F5BC34  b573
    pub unsafe fn disable_player_health_recharge(player: Player) {
        call_native!(Void, 0xBCB06442F7E52666u64, player);
    } // 0xBCB06442F7E52666  b2802
    pub unsafe fn set_player_fall_distance_to_trigger_ragdoll_override(player: Player, p_1: f32) {
        call_native!(Void, 0xEFD79FA81DFBA9CBu64, player, p_1);
    } // 0xEFD79FA81DFBA9CB  b573
    pub unsafe fn set_player_weapon_damage_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0xCE07B9F7817AADA3u64, player, modifier);
    } // 0xCE07B9F7817AADA3 0xB02C2F39 b323
    pub unsafe fn set_player_weapon_defense_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0x2D83BC011CA14A3Cu64, player, modifier);
    } // 0x2D83BC011CA14A3C 0xAE446344 b323
    pub unsafe fn set_player_weapon_minigun_defense_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0xBCFDE9EDE4CF27DCu64, player, modifier);
    } // 0xBCFDE9EDE4CF27DC  b944
    pub unsafe fn set_player_melee_weapon_damage_modifier(
        player: Player,
        modifier: f32,
        p_2: bool,
    ) {
        call_native!(Void, 0x4A3DC7ECCC321032u64, player, modifier, p_2);
    } // 0x4A3DC7ECCC321032 0x362E69AD b323
    pub unsafe fn set_player_melee_weapon_defense_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0xAE540335B4ABC4E2u64, player, modifier);
    } // 0xAE540335B4ABC4E2 0x9F3D577F b323
    pub unsafe fn set_player_vehicle_damage_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0xA50E117CDDF82F0Cu64, player, modifier);
    } // 0xA50E117CDDF82F0C 0x823ECA63 b323
    pub unsafe fn set_player_vehicle_defense_modifier(player: Player, modifier: f32) {
        call_native!(Void, 0x4C60E6EFDAFF2462u64, player, modifier);
    } // 0x4C60E6EFDAFF2462 0xA16626C7 b323
    pub unsafe fn set_player_max_explosive_damage(player: Player, p_1: f32) {
        call_native!(Void, 0x8D768602ADEF2245u64, player, p_1);
    } // 0x8D768602ADEF2245  b463
    pub unsafe fn set_player_explosive_damage_modifier(player: Player, p_1: Any) {
        call_native!(Void, 0xD821056B9ACF8052u64, player, p_1);
    } // 0xD821056B9ACF8052  b1011
    pub unsafe fn set_player_weapon_takedown_defense_modifier(player: Player, p_1: f32) {
        call_native!(Void, 0x31E90B8873A4CD3Bu64, player, p_1);
    } // 0x31E90B8873A4CD3B  b617
    pub unsafe fn set_player_parachute_tint_index(player: Player, tint_index: i32) {
        call_native!(Void, 0xA3D0E54541D9A5E5u64, player, tint_index);
    } // 0xA3D0E54541D9A5E5 0x8EA12EDB b323
    pub unsafe fn get_player_parachute_tint_index(player: Player, tint_index: *mut i32) {
        call_native!(Void, 0x75D3F7A1B0D9B145u64, player, tint_index);
    } // 0x75D3F7A1B0D9B145 0x432B0509 b323
    pub unsafe fn set_player_reserve_parachute_tint_index(player: Player, index: i32) {
        call_native!(Void, 0xAF04C87F5DC1DF38u64, player, index);
    } // 0xAF04C87F5DC1DF38 0x70689638 b323
    pub unsafe fn get_player_reserve_parachute_tint_index(player: Player, index: *mut i32) {
        call_native!(Void, 0xD5A016BC3C09CF40u64, player, index);
    } // 0xD5A016BC3C09CF40 0x77B8EF01 b323
    pub unsafe fn set_player_parachute_pack_tint_index(player: Player, tint_index: i32) {
        call_native!(Void, 0x93B0FB27C9A04060u64, player, tint_index);
    } // 0x93B0FB27C9A04060 0xD79D5D1B b323
    pub unsafe fn get_player_parachute_pack_tint_index(player: Player, tint_index: *mut i32) {
        call_native!(Void, 0x6E9C742F340CE5A2u64, player, tint_index);
    } // 0x6E9C742F340CE5A2 0x4E418E13 b323
    pub unsafe fn set_player_has_reserve_parachute(player: Player) {
        call_native!(Void, 0x7DDAB28D31FAC363u64, player);
    } // 0x7DDAB28D31FAC363 0xA3E4798E b323
    pub unsafe fn get_player_has_reserve_parachute(player: Player) -> bool {
        call_native!(bool, 0x5DDFE2FF727F3CA3u64, player)
    } // 0x5DDFE2FF727F3CA3 0x30DA1DA1 b323
    pub unsafe fn set_player_can_leave_parachute_smoke_trail(player: Player, enabled: bool) {
        call_native!(Void, 0xF401B182DBA8AF53u64, player, enabled);
    } // 0xF401B182DBA8AF53 0x832DEB7A b323
    pub unsafe fn set_player_parachute_smoke_trail_color(player: Player, r: i32, g: i32, b: i32) {
        call_native!(Void, 0x8217FD371A4625CFu64, player, r, g, b);
    } // 0x8217FD371A4625CF 0x14FE9264 b323
    pub unsafe fn get_player_parachute_smoke_trail_color(
        player: Player,
        r: *mut i32,
        g: *mut i32,
        b: *mut i32,
    ) {
        call_native!(Void, 0xEF56DBABD3CD4887u64, player, r, g, b);
    } // 0xEF56DBABD3CD4887 0xF66E5CDD b323
    pub unsafe fn set_player_phone_palette_idx(player: Player, flags: i32) {
        call_native!(Void, 0x11D5F725F0E780E0u64, player, flags);
    } // 0x11D5F725F0E780E0  b323
    pub unsafe fn set_player_noise_multiplier(player: Player, multiplier: f32) {
        call_native!(Void, 0xDB89EF50FF25FCE9u64, player, multiplier);
    } // 0xDB89EF50FF25FCE9 0x15786DD1 b323
    pub unsafe fn set_player_sneaking_noise_multiplier(player: Player, multiplier: f32) {
        call_native!(Void, 0xB2C1A29588A9F47Cu64, player, multiplier);
    } // 0xB2C1A29588A9F47C 0x8D2D89C4 b323
    pub unsafe fn can_ped_hear_player(player: Player, ped: Ped) -> bool {
        call_native!(bool, 0xF297383AA91DCA29u64, player, ped)
    } // 0xF297383AA91DCA29 0x1C70B2EB b323
    pub unsafe fn simulate_player_input_gait(
        player: Player,
        amount: f32,
        gait_type: i32,
        speed: f32,
        p_4: bool,
        p_5: bool,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x477D5D63E63ECA5Du64,
            player,
            amount,
            gait_type,
            speed,
            p_4,
            p_5,
            p_6
        );
    } // 0x477D5D63E63ECA5D 0x0D77CC34 b323
    pub unsafe fn reset_player_input_gait(player: Player) {
        call_native!(Void, 0x19531C47A2ABD691u64, player);
    } // 0x19531C47A2ABD691 0x4A701EE1 b323
    pub unsafe fn set_auto_give_parachute_when_enter_plane(player: Player, toggle: bool) {
        call_native!(Void, 0x9F343285A00B4BB6u64, player, toggle);
    } // 0x9F343285A00B4BB6 0xA97C2059 b323
    pub unsafe fn set_auto_give_scuba_gear_when_exit_vehicle(player: Player, toggle: bool) {
        call_native!(Void, 0xD2B315B6689D537Du64, player, toggle);
    } // 0xD2B315B6689D537D 0xA25D767E b323
    pub unsafe fn set_player_stealth_perception_modifier(player: Player, value: f32) {
        call_native!(Void, 0x4E9021C1FCDD507Au64, player, value);
    } // 0x4E9021C1FCDD507A 0x3D26105F b323
    pub unsafe fn is_remote_player_in_non_cloned_vehicle(player: Player) -> bool {
        call_native!(bool, 0x690A61A6D13583F6u64, player)
    } // 0x690A61A6D13583F6 0x1D371529 b323
    pub unsafe fn increase_player_jump_suppression_range(player: Player) {
        call_native!(Void, 0x9EDD76E87D5D51BAu64, player);
    } // 0x9EDD76E87D5D51BA 0xE30A64DC b323
    pub unsafe fn set_player_simulate_aiming(player: Player, toggle: bool) {
        call_native!(Void, 0xC54C95DA968EC5B5u64, player, toggle);
    } // 0xC54C95DA968EC5B5 0xF1E0CAFC b323
    pub unsafe fn set_player_cloth_pin_frames(player: Player, p_1: i32) {
        call_native!(Void, 0x749FADDF97DFE930u64, player, p_1);
    } // 0x749FADDF97DFE930 0xF7A0F00F b323
    pub unsafe fn set_player_cloth_package_index(index: i32) {
        call_native!(Void, 0x9F7BBA2EA6372500u64, index);
    } // 0x9F7BBA2EA6372500 0xB8209F16 b323
    pub unsafe fn set_player_cloth_lock_counter(value: i32) {
        call_native!(Void, 0x14D913B777DFF5DAu64, value);
    } // 0x14D913B777DFF5DA 0x8D9FD4D1 b323
    pub unsafe fn player_attach_virtual_bound(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
    ) {
        call_native!(
            Void,
            0xED51733DC73AED51u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0xED51733DC73AED51 0xECD12E60 b323
    pub unsafe fn player_detach_virtual_bound() {
        call_native!(Void, 0x1DD5897E2FA6E7C9u64);
    } // 0x1DD5897E2FA6E7C9 0x96100EA4 b323
    pub unsafe fn has_player_been_spotted_in_stolen_vehicle(player: Player) -> bool {
        call_native!(bool, 0xD705740BB0A1CF4Cu64, player)
    } // 0xD705740BB0A1CF4C 0x4A01B76A b323
    pub unsafe fn is_player_battle_aware(player: Player) -> bool {
        call_native!(bool, 0x38D28DA81E4E9BF9u64, player)
    } // 0x38D28DA81E4E9BF9 0x013B4F72 b323
    pub unsafe fn get_player_received_battle_event_recently(
        player: Player,
        p_1: i32,
        p_2: bool,
    ) -> bool {
        call_native!(bool, 0xBC0753C9CA14B506u64, player, p_1, p_2)
    } // 0xBC0753C9CA14B506 0x9DF75B2A b323
    pub unsafe fn extend_world_boundary_for_player(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x5006D96C995A5827u64, x, y, z);
    } // 0x5006D96C995A5827 0x64DDB07D b323
    pub unsafe fn reset_world_boundary_for_player() {
        call_native!(Void, 0xDA1DF03D5A315F4Eu64);
    } // 0xDA1DF03D5A315F4E 0xA97C2F6C b323
    pub unsafe fn is_player_riding_train(player: Player) -> bool {
        call_native!(bool, 0x4EC12697209F2196u64, player)
    } // 0x4EC12697209F2196 0x9765E71D b323
    pub unsafe fn has_player_left_the_world(player: Player) -> bool {
        call_native!(bool, 0xD55DDFB47991A294u64, player)
    } // 0xD55DDFB47991A294 0xFEA40B6C b323
    pub unsafe fn set_player_leave_ped_behind(player: Player, toggle: bool) {
        call_native!(Void, 0xFF300C7649724A0Bu64, player, toggle);
    } // 0xFF300C7649724A0B 0xAD8383FA b323
    pub unsafe fn set_player_parachute_variation_override(
        player: Player,
        p_1: i32,
        p_2: Any,
        p_3: Any,
        p_4: bool,
    ) {
        call_native!(Void, 0xD9284A8C0D48352Cu64, player, p_1, p_2, p_3, p_4);
    } // 0xD9284A8C0D48352C 0x9254249D b323
    pub unsafe fn clear_player_parachute_variation_override(player: Player) {
        call_native!(Void, 0x0F4CC924CF8C7B21u64, player);
    } // 0x0F4CC924CF8C7B21 0xFD60F5AB b323
    pub unsafe fn set_player_parachute_model_override(player: Player, model: Hash) {
        call_native!(Void, 0x977DB4641F6FC3DBu64, player, model);
    } // 0x977DB4641F6FC3DB 0x5D382498 b323
    pub unsafe fn set_player_reserve_parachute_model_override(player: Player, model: Hash) {
        call_native!(Void, 0x0764486AEDE748DBu64, player, model);
    } // 0x0764486AEDE748DB  b2372
    pub unsafe fn get_player_parachute_model_override(player: Player) -> Hash {
        call_native!(Hash, 0xC219887CA3E65C41u64, player)
    } // 0xC219887CA3E65C41  b2372
    pub unsafe fn get_player_reserve_parachute_model_override(player: Player) -> Hash {
        call_native!(Hash, 0x37FAAA68DCA9D08Du64, player)
    } // 0x37FAAA68DCA9D08D  b2372
    pub unsafe fn clear_player_parachute_model_override(player: Player) {
        call_native!(Void, 0x8753997EB5F6EE3Fu64, player);
    } // 0x8753997EB5F6EE3F 0x6FF034BB b323
    pub unsafe fn clear_player_reserve_parachute_model_override(player: Player) {
        call_native!(Void, 0x290D248E25815AE8u64, player);
    } // 0x290D248E25815AE8  b2372
    pub unsafe fn set_player_parachute_pack_model_override(player: Player, model: Hash) {
        call_native!(Void, 0xDC80A4C2F18A2B64u64, player, model);
    } // 0xDC80A4C2F18A2B64 0xA877FF5E b323
    pub unsafe fn clear_player_parachute_pack_model_override(player: Player) {
        call_native!(Void, 0x10C54E4389C12B42u64, player);
    } // 0x10C54E4389C12B42 0xBB62AAC5 b323
    pub unsafe fn disable_player_vehicle_rewards(player: Player) {
        call_native!(Void, 0xC142BE3BB9CE125Fu64, player);
    } // 0xC142BE3BB9CE125F 0x8C6E611D b323
    pub unsafe fn set_player_spectated_vehicle_radio_override(p_0: bool) {
        call_native!(Void, 0x2F7CEB6520288061u64, p_0);
    } // 0x2F7CEB6520288061 0x2849D4B2 b323
    pub unsafe fn set_player_bluetooth_state(player: Player, state: bool) {
        call_native!(Void, 0x5DC40A8869C22141u64, player, state);
    } // 0x5DC40A8869C22141 0x7A6B0EF8 b323
    pub unsafe fn is_player_bluetooth_enable(player: Player) -> bool {
        call_native!(bool, 0x65FAEE425DE637B0u64, player)
    } // 0x65FAEE425DE637B0 0xEA01BD4A b323
    pub unsafe fn disable_camera_view_mode_cycle(player: Player) {
        call_native!(Void, 0x5501B7A5CDB79D37u64, player);
    } // 0x5501B7A5CDB79D37  b323
    pub unsafe fn get_player_fake_wanted_level(player: Player) -> i32 {
        call_native!(i32, 0x56105E599CAB0EFAu64, player)
    } // 0x56105E599CAB0EFA 0x0098D244 b323
    pub unsafe fn set_player_can_damage_player(player_1: Player, player_2: Player, toggle: bool) {
        call_native!(Void, 0x55FCC0C390620314u64, player_1, player_2, toggle);
    } // 0x55FCC0C390620314  b573
    pub unsafe fn set_apply_waypoint_of_player(player: Player, hud_color: i32) {
        call_native!(Void, 0x2382AB11450AE7BAu64, player, hud_color);
    } // 0x2382AB11450AE7BA  b877
    pub unsafe fn is_player_vehicle_weapon_toggled_to_non_homing(p_0: Any) -> bool {
        call_native!(bool, 0x6E4361FF3E8CD7CAu64, p_0)
    } // 0x6E4361FF3E8CD7CA  b1011
    pub unsafe fn set_player_vehicle_weapon_to_non_homing(p_0: Any) {
        call_native!(Void, 0x237440E46D918649u64, p_0);
    } // 0x237440E46D918649  b1290
    pub unsafe fn set_player_homing_disabled_for_all_vehicle_weapons(p_0: Any, p_1: Any) {
        call_native!(Void, 0xEE4EBDD2593BA844u64, p_0, p_1);
    } // 0xEE4EBDD2593BA844  b1180
    pub unsafe fn add_player_targetable_entity(player: Player, entity: Entity) {
        call_native!(Void, 0x9097EB6D4BB9A12Au64, player, entity);
    } // 0x9097EB6D4BB9A12A  b1868
    pub unsafe fn remove_player_targetable_entity(player: Player, entity: Entity) {
        call_native!(Void, 0x9F260BFB59ADBCA3u64, player, entity);
    } // 0x9F260BFB59ADBCA3  b1868
    pub unsafe fn set_player_previous_variation_data(
        player: Player,
        p_1: i32,
        p_2: i32,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x7BAE68775557AE0Bu64, player, p_1, p_2, p_3, p_4, p_5);
    } // 0x7BAE68775557AE0B  b1290
    pub unsafe fn remove_script_fire_position() {
        call_native!(Void, 0x7148E0F43D11F0D9u64);
    } // 0x7148E0F43D11F0D9  b1604
    pub unsafe fn set_script_fire_position(coord_x: f32, coord_y: f32, coord_z: f32) {
        call_native!(Void, 0x70A382ADEC069DD3u64, coord_x, coord_y, coord_z);
    } // 0x70A382ADEC069DD3  b1604
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod recording {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn replay_start_event(p_0: i32) {
        call_native!(Void, 0x48621C9FCA3EBD28u64, p_0);
    } // 0x48621C9FCA3EBD28  b323
    pub unsafe fn replay_stop_event() {
        call_native!(Void, 0x81CBAE94390F9F89u64);
    } // 0x81CBAE94390F9F89  b323
    pub unsafe fn replay_cancel_event() {
        call_native!(Void, 0x13B350B8AD0EEE10u64);
    } // 0x13B350B8AD0EEE10  b323
    pub unsafe fn replay_record_back_for_time(p_0: f32, p_1: f32, p_2: i32) {
        call_native!(Void, 0x293220DA1B46CEBCu64, p_0, p_1, p_2);
    } // 0x293220DA1B46CEBC  b323
    pub unsafe fn replay_check_for_event_this_frame(mission_name_label: *const i8, p_1: Any) {
        call_native!(Void, 0x208784099002BC30u64, mission_name_label, p_1);
    } // 0x208784099002BC30  b323
    pub unsafe fn replay_prevent_recording_this_frame() {
        call_native!(Void, 0xEB2D525B57F42B40u64);
    } // 0xEB2D525B57F42B40  b323
    pub unsafe fn replay_reset_event_info() {
        call_native!(Void, 0xF854439EFBB3B583u64);
    } // 0xF854439EFBB3B583  b323
    pub unsafe fn replay_disable_camera_movement_this_frame() {
        call_native!(Void, 0xAF66DCEE6609B148u64);
    } // 0xAF66DCEE6609B148  b323
    pub unsafe fn record_greatest_moment(p_0: i32, p_1: i32, p_2: i32) {
        call_native!(Void, 0x66972397E0757E7Au64, p_0, p_1, p_2);
    } // 0x66972397E0757E7A  b323
    pub unsafe fn start_replay_recording(mode: i32) {
        call_native!(Void, 0xC3AC2FFF9612AC81u64, mode);
    } // 0xC3AC2FFF9612AC81  b323
    pub unsafe fn stop_replay_recording() {
        call_native!(Void, 0x071A5197D6AFC8B3u64);
    } // 0x071A5197D6AFC8B3  b323
    pub unsafe fn cancel_replay_recording() {
        call_native!(Void, 0x88BB3507ED41A240u64);
    } // 0x88BB3507ED41A240  b323
    pub unsafe fn save_replay_recording() -> bool {
        call_native!(bool, 0x644546EC5287471Bu64)
    } // 0x644546EC5287471B  b323
    pub unsafe fn is_replay_recording() -> bool {
        call_native!(bool, 0x1897CA71995A90B4u64)
    } // 0x1897CA71995A90B4  b323
    pub unsafe fn is_replay_initialized() -> bool {
        call_native!(bool, 0xDF4B952F7D381B95u64)
    } // 0xDF4B952F7D381B95  b323
    pub unsafe fn is_replay_available() -> bool {
        call_native!(bool, 0x4282E08174868BE3u64)
    } // 0x4282E08174868BE3  b323
    pub unsafe fn is_replay_record_space_available(p_0: bool) -> bool {
        call_native!(bool, 0x33D47E85B476ABCDu64, p_0)
    } // 0x33D47E85B476ABCD  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod replay {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn register_effect_for_replay_editor(p_0: *const i8, p_1: bool) {
        call_native!(Void, 0x7E2BD3EF6C205F09u64, p_0, p_1);
    } // 0x7E2BD3EF6C205F09  b323
    pub unsafe fn replay_system_has_requested_a_script_cleanup() -> bool {
        call_native!(bool, 0x95AB8B5C992C7B58u64)
    } // 0x95AB8B5C992C7B58  b323
    pub unsafe fn set_scripts_have_cleaned_up_for_replay_system() {
        call_native!(Void, 0x5AD3932DAEB1E5D3u64);
    } // 0x5AD3932DAEB1E5D3  b323
    pub unsafe fn set_replay_system_paused_for_save(p_0: bool) {
        call_native!(Void, 0xE058175F8EAFE79Au64, p_0);
    } // 0xE058175F8EAFE79A  b323
    pub unsafe fn replay_control_shutdown() {
        call_native!(Void, 0x3353D13F09307691u64);
    } // 0x3353D13F09307691  b323
    pub unsafe fn activate_rockstar_editor(p_0: i32) {
        call_native!(Void, 0x49DA8145672B2725u64, p_0);
    } // 0x49DA8145672B2725  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod savemigration {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn savemigration_is_mp_enabled() -> bool {
        call_native!(bool, 0x84B418E93894AC1Cu64)
    } // 0x84B418E93894AC1C  b2372
    pub unsafe fn savemigration_mp_request_accounts() -> bool {
        call_native!(bool, 0x85F41F9225D08C72u64)
    } // 0x85F41F9225D08C72  b2612
    pub unsafe fn savemigration_mp_get_accounts_status() -> i32 {
        call_native!(i32, 0xC8CB5999919EA2CAu64)
    } // 0xC8CB5999919EA2CA  b2612
    pub unsafe fn savemigration_mp_num_accounts() -> i32 {
        call_native!(i32, 0x77A16200E18E0C55u64)
    } // 0x77A16200E18E0C55  b2612
    pub unsafe fn savemigration_mp_get_account(p_0: i32, p_1: *mut Any) -> bool {
        call_native!(bool, 0xFCE2747EEF1D05FCu64, p_0, p_1)
    } // 0xFCE2747EEF1D05FC  b2612
    pub unsafe fn savemigration_mp_request_status() -> bool {
        call_native!(bool, 0xE5E9746A66359F9Du64)
    } // 0xE5E9746A66359F9D  b2372
    pub unsafe fn savemigration_mp_get_status() -> i32 {
        call_native!(i32, 0x690B76BD2763E068u64)
    } // 0x690B76BD2763E068  b2372
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod script {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn request_script(script_name: *const i8) {
        call_native!(Void, 0x6EB5F71AA68F2E8Eu64, script_name);
    } // 0x6EB5F71AA68F2E8E 0xE26B2666 b323
    pub unsafe fn set_script_as_no_longer_needed(script_name: *const i8) {
        call_native!(Void, 0xC90D2DCACD56184Cu64, script_name);
    } // 0xC90D2DCACD56184C 0x6FCB7795 b323
    pub unsafe fn has_script_loaded(script_name: *const i8) -> bool {
        call_native!(bool, 0xE6CC9F3BA0FB9EF1u64, script_name)
    } // 0xE6CC9F3BA0FB9EF1 0x5D67F751 b323
    pub unsafe fn does_script_exist(script_name: *const i8) -> bool {
        call_native!(bool, 0xFC04745FBE67C19Au64, script_name)
    } // 0xFC04745FBE67C19A 0xDEAB87AB b323
    pub unsafe fn request_script_with_name_hash(script_hash: Hash) {
        call_native!(Void, 0xD62A67D26D9653E6u64, script_hash);
    } // 0xD62A67D26D9653E6 0x1C68D9DC b323
    pub unsafe fn set_script_with_name_hash_as_no_longer_needed(script_hash: Hash) {
        call_native!(Void, 0xC5BC038960E9DB27u64, script_hash);
    } // 0xC5BC038960E9DB27 0x96C26F66 b323
    pub unsafe fn has_script_with_name_hash_loaded(script_hash: Hash) -> bool {
        call_native!(bool, 0x5F0F0C783EB16C04u64, script_hash)
    } // 0x5F0F0C783EB16C04 0x06674818 b323
    pub unsafe fn does_script_with_name_hash_exist(script_hash: Hash) -> bool {
        call_native!(bool, 0xF86AA3C56BA31381u64, script_hash)
    } // 0xF86AA3C56BA31381 0x19EAE282 b323
    pub unsafe fn terminate_thread(thread_id: i32) {
        call_native!(Void, 0xC8B189ED9138BCD4u64, thread_id);
    } // 0xC8B189ED9138BCD4 0x253FD520 b323
    pub unsafe fn is_thread_active(thread_id: i32) -> bool {
        call_native!(bool, 0x46E9AE36D8FA6417u64, thread_id)
    } // 0x46E9AE36D8FA6417 0x78D7A5A0 b323
    pub unsafe fn get_name_of_script_with_this_id(thread_id: i32) -> *const i8 {
        call_native!(*const i8, 0x05A42BA9FC8DA96Bu64, thread_id)
    } // 0x05A42BA9FC8DA96B 0xBE7ACD89 b323
    pub unsafe fn script_thread_iterator_reset() {
        call_native!(Void, 0xDADFADA5A20143A8u64);
    } // 0xDADFADA5A20143A8 0xBB4E2F66 b323
    pub unsafe fn script_thread_iterator_get_next_thread_id() -> i32 {
        call_native!(i32, 0x30B4FA1C82DD4B9Fu64)
    } // 0x30B4FA1C82DD4B9F 0x1E28B28F b323
    pub unsafe fn get_id_of_this_thread() -> i32 {
        call_native!(i32, 0xC30338E8088E2E21u64)
    } // 0xC30338E8088E2E21 0xDE524830 b323
    pub unsafe fn terminate_this_thread() {
        call_native!(Void, 0x1090044AD1DA76FAu64);
    } // 0x1090044AD1DA76FA 0x3CD9CBB7 b323
    pub unsafe fn get_number_of_threads_running_the_script_with_this_hash(
        script_hash: Hash,
    ) -> i32 {
        call_native!(i32, 0x2C83A9DA6BFFC4F9u64, script_hash)
    } // 0x2C83A9DA6BFFC4F9 0x029D3841 b323
    pub unsafe fn get_this_script_name() -> *const i8 {
        call_native!(*const i8, 0x442E0A7EDE4A738Au64)
    } // 0x442E0A7EDE4A738A 0xA40FD5D9 b323
    pub unsafe fn get_hash_of_this_script_name() -> Hash {
        call_native!(Hash, 0x8A1C8B1738FFE87Eu64)
    } // 0x8A1C8B1738FFE87E 0x2BEE1F45 b323
    pub unsafe fn get_number_of_events(event_group: i32) -> i32 {
        call_native!(i32, 0x5F92A689A06620AAu64, event_group)
    } // 0x5F92A689A06620AA 0xA3525D60 b323
    pub unsafe fn get_event_exists(event_group: i32, event_index: i32) -> bool {
        call_native!(bool, 0x936E6168A9BCEDB5u64, event_group, event_index)
    } // 0x936E6168A9BCEDB5 0xA1B447B5 b323
    pub unsafe fn get_event_at_index(event_group: i32, event_index: i32) -> i32 {
        call_native!(i32, 0xD8F66A3A60C62153u64, event_group, event_index)
    } // 0xD8F66A3A60C62153 0xB49C1442 b323
    pub unsafe fn get_event_data(
        event_group: i32,
        event_index: i32,
        event_data: *mut Any,
        event_data_size: i32,
    ) -> bool {
        call_native!(
            bool,
            0x2902843FCD2B2D79u64,
            event_group,
            event_index,
            event_data,
            event_data_size
        )
    } // 0x2902843FCD2B2D79 0x4280F92F b323
    pub unsafe fn trigger_script_event(
        event_group: i32,
        event_data: *mut Any,
        event_data_size: i32,
        player_bits: i32,
    ) {
        call_native!(
            Void,
            0x5AE99C571D5BBE5Du64,
            event_group,
            event_data,
            event_data_size,
            player_bits
        );
    } // 0x5AE99C571D5BBE5D 0x54763B35 b323
    pub unsafe fn shutdown_loading_screen() {
        call_native!(Void, 0x078EBE9809CCD637u64);
    } // 0x078EBE9809CCD637 0xA2826D17 b323
    pub unsafe fn set_no_loading_screen(toggle: bool) {
        call_native!(Void, 0x5262CC1995D07E09u64, toggle);
    } // 0x5262CC1995D07E09 0xC8055034 b323
    pub unsafe fn get_no_loading_screen() -> bool {
        call_native!(bool, 0x18C1270EA7F199BCu64)
    } // 0x18C1270EA7F199BC 0x27512BA0 b323
    pub unsafe fn commit_to_loadingscreen_selction() {
        call_native!(Void, 0xB1577667C3708F9Bu64);
    } // 0xB1577667C3708F9B 0xB03BCCDF b323
    pub unsafe fn bg_is_exitflag_set() -> bool {
        call_native!(bool, 0x836B62713E0534CAu64)
    } // 0x836B62713E0534CA 0x22B9F132 b323
    pub unsafe fn bg_set_exitflag_response() {
        call_native!(Void, 0x760910B49D2B98EAu64);
    } // 0x760910B49D2B98EA 0x5C95B670 b323
    pub unsafe fn bg_start_context_hash(context_hash: Hash) {
        call_native!(Void, 0x75B18E49607874C7u64, context_hash);
    } // 0x75B18E49607874C7 0x67B23E17 b323
    pub unsafe fn bg_end_context_hash(context_hash: Hash) {
        call_native!(Void, 0x107E5CC7CA942BC1u64, context_hash);
    } // 0x107E5CC7CA942BC1 0x3D981EBF b323
    pub unsafe fn bg_start_context(context_name: *const i8) {
        call_native!(Void, 0x9D5A25BADB742ACDu64, context_name);
    } // 0x9D5A25BADB742ACD 0xF3F1D953 b323
    pub unsafe fn bg_end_context(context_name: *const i8) {
        call_native!(Void, 0xDC2BACD920D0A0DDu64, context_name);
    } // 0xDC2BACD920D0A0DD 0x11F38FB3 b323
    pub unsafe fn bg_does_launch_param_exist(script_index: i32, p_1: *const i8) -> bool {
        call_native!(bool, 0x0F6F1EBBC4E1D5E6u64, script_index, p_1)
    } // 0x0F6F1EBBC4E1D5E6 0xF8E5F73A b323
    pub unsafe fn bg_get_launch_param_value(script_index: i32, p_1: *const i8) -> i32 {
        call_native!(i32, 0x22E21FBCFC88C149u64, script_index, p_1)
    } // 0x22E21FBCFC88C149 0x682CB7E1 b323
    pub unsafe fn bg_get_script_id_from_name_hash(p_0: Hash) -> i32 {
        call_native!(i32, 0x829CD22E043A2577u64, p_0)
    } // 0x829CD22E043A2577 0xC515E735 b323
    pub unsafe fn _send_tu_script_event_new(
        event_group: i32,
        event_data: *mut Any,
        event_data_size: i32,
        player_bits: i32,
        event_type: Hash,
    ) {
        call_native!(
            Void,
            0x71A6F836422FDD2Bu64,
            event_group,
            event_data,
            event_data_size,
            player_bits,
            event_type
        );
    } // 0x71A6F836422FDD2B  b3095
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod security {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn register_script_variable(variable: *mut Any) {
        call_native!(Void, 0x40EB1EFD921822BCu64, variable);
    } // 0x40EB1EFD921822BC  b2545
    pub unsafe fn unregister_script_variable(variable: *mut Any) {
        call_native!(Void, 0x340A36A700E99699u64, variable);
    } // 0x340A36A700E99699  b2545
    pub unsafe fn force_check_script_variables() {
        call_native!(Void, 0x8E580AB902917360u64);
    } // 0x8E580AB902917360  b2545
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod shapetest {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn start_shape_test_los_probe(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        flags: i32,
        entity: Entity,
        p_8: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x7EE9F5D83DD4F90Eu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            flags,
            entity,
            p_8
        )
    } // 0x7EE9F5D83DD4F90E 0xEFAF4BA6 b323
    pub unsafe fn start_expensive_synchronous_shape_test_los_probe(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        flags: i32,
        entity: Entity,
        p_8: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x377906D8A31E5586u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            flags,
            entity,
            p_8
        )
    } // 0x377906D8A31E5586 0x8251485D b323
    pub unsafe fn start_shape_test_bounding_box(entity: Entity, flags_1: i32, flags_2: i32) -> i32 {
        call_native!(i32, 0x052837721A854EC7u64, entity, flags_1, flags_2)
    } // 0x052837721A854EC7 0xCEEAD94B b323
    pub unsafe fn start_shape_test_box(
        x: f32,
        y: f32,
        z: f32,
        dim_x: f32,
        dim_y: f32,
        dim_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        p_9: Any,
        flags: i32,
        entity: Entity,
        p_1_2: Any,
    ) -> i32 {
        call_native!(
            i32,
            0xFE466162C4401D18u64,
            x,
            y,
            z,
            dim_x,
            dim_y,
            dim_z,
            rot_x,
            rot_y,
            rot_z,
            p_9,
            flags,
            entity,
            p_1_2
        )
    } // 0xFE466162C4401D18 0x249BC876 b323
    pub unsafe fn start_shape_test_bound(entity: Entity, flags_1: i32, flags_2: i32) -> i32 {
        call_native!(i32, 0x37181417CE7C8900u64, entity, flags_1, flags_2)
    } // 0x37181417CE7C8900 0x13BC46C0 b323
    pub unsafe fn start_shape_test_capsule(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        radius: f32,
        flags: i32,
        entity: Entity,
        p_9: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x28579D1B8F8AAC80u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            radius,
            flags,
            entity,
            p_9
        )
    } // 0x28579D1B8F8AAC80 0x591EA833 b323
    pub unsafe fn start_shape_test_swept_sphere(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        radius: f32,
        flags: i32,
        entity: Entity,
        p_9: Any,
    ) -> i32 {
        call_native!(
            i32,
            0xE6AC6C45FBE83004u64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            radius,
            flags,
            entity,
            p_9
        )
    } // 0xE6AC6C45FBE83004 0x4559460A b323
    pub unsafe fn start_shape_test_mouse_cursor_los_probe(
        p_vec_1: *mut Vector3,
        p_vec_2: *mut Vector3,
        flag: i32,
        entity: Entity,
        flag_2: i32,
    ) -> i32 {
        call_native!(
            i32,
            0xFF6BE494C7987F34u64,
            p_vec_1,
            p_vec_2,
            flag,
            entity,
            flag_2
        )
    } // 0xFF6BE494C7987F34  b323
    pub unsafe fn get_shape_test_result(
        shape_test_handle: i32,
        hit: *mut Bool,
        end_coords: *mut Vector3,
        surface_normal: *mut Vector3,
        entity_hit: *mut Entity,
    ) -> i32 {
        call_native!(
            i32,
            0x3D87450E15D98694u64,
            shape_test_handle,
            hit,
            end_coords,
            surface_normal,
            entity_hit
        )
    } // 0x3D87450E15D98694 0xF3C2875A b323
    pub unsafe fn get_shape_test_result_including_material(
        shape_test_handle: i32,
        hit: *mut Bool,
        end_coords: *mut Vector3,
        surface_normal: *mut Vector3,
        material_hash: *mut Hash,
        entity_hit: *mut Entity,
    ) -> i32 {
        call_native!(
            i32,
            0x65287525D951F6BEu64,
            shape_test_handle,
            hit,
            end_coords,
            surface_normal,
            material_hash,
            entity_hit
        )
    } // 0x65287525D951F6BE 0x4301E10C b323
    pub unsafe fn release_script_guid_from_entity(entity_hit: Entity) {
        call_native!(Void, 0x2B3334BCA57CD799u64, entity_hit);
    } // 0x2B3334BCA57CD799 0xEC2AAF06 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod socialclub {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn sc_inbox_get_total_num_messages() -> i32 {
        call_native!(i32, 0x03A93FF1A2CA0864u64)
    } // 0x03A93FF1A2CA0864 0x6BE5DF29 b323
    pub unsafe fn sc_inbox_get_message_type_at_index(msg_index: i32) -> Hash {
        call_native!(Hash, 0xBB8EA16ECBC976C4u64, msg_index)
    } // 0xBB8EA16ECBC976C4 0x5ECF955D b323
    pub unsafe fn sc_inbox_get_message_is_read_at_index(msg_index: i32) -> bool {
        call_native!(bool, 0x93028F1DB42BFD08u64, msg_index)
    } // 0x93028F1DB42BFD08 0xD1ED1D48 b323
    pub unsafe fn sc_inbox_set_message_as_read_at_index(msg_index: i32) -> bool {
        call_native!(bool, 0x2C015348CF19CA1Du64, msg_index)
    } // 0x2C015348CF19CA1D 0x19EE0CCB b323
    pub unsafe fn sc_inbox_message_get_data_int(
        p_0: i32,
        context: *const i8,
        out: *mut i32,
    ) -> bool {
        call_native!(bool, 0xA00EFE4082C4056Eu64, p_0, context, out)
    } // 0xA00EFE4082C4056E 0x88068C7C b323
    pub unsafe fn sc_inbox_message_get_data_bool(p_0: i32, p_1: *const i8) -> bool {
        call_native!(bool, 0xFFE5C16F402D851Du64, p_0, p_1)
    } // 0xFFE5C16F402D851D  b323
    pub unsafe fn sc_inbox_message_get_data_string(
        p_0: i32,
        context: *const i8,
        out: *mut i8,
    ) -> bool {
        call_native!(bool, 0x7572EF42FC6A9B6Du64, p_0, context, out)
    } // 0x7572EF42FC6A9B6D 0x15607620 b323
    pub unsafe fn sc_inbox_message_do_apply(p_0: i32) -> bool {
        call_native!(bool, 0x9A2C8064B6C1E41Au64, p_0)
    } // 0x9A2C8064B6C1E41A 0xEBE420A4 b323
    pub unsafe fn sc_inbox_message_get_raw_type_at_index(p_0: i32) -> *const i8 {
        call_native!(*const i8, 0xF3E31D16CBDCB304u64, p_0)
    } // 0xF3E31D16CBDCB304 0x2C959AF9 b323
    pub unsafe fn sc_inbox_message_push_gamer_t0_recip_list(gamer_handle: *mut Any) {
        call_native!(Void, 0xDA024BDBD600F44Au64, gamer_handle);
    } // 0xDA024BDBD600F44A 0x0B9A3512 b323
    pub unsafe fn sc_inbox_send_ugcstatupdate_to_recip_list(data: *mut Any) {
        call_native!(Void, 0xA68D3D229F4F3B06u64, data);
    } // 0xA68D3D229F4F3B06 0x75324674 b323
    pub unsafe fn sc_inbox_message_get_ugcdata(p_0: i32, p_1: *mut Any) -> bool {
        call_native!(bool, 0x69D82604A1A5A254u64, p_0, p_1)
    } // 0x69D82604A1A5A254 0x88CA3BFC b323
    pub unsafe fn sc_inbox_get_bounty_data_at_index(index: i32, out_data: *mut Any) -> bool {
        call_native!(bool, 0x87E0052F08BD64E6u64, index, out_data)
    } // 0x87E0052F08BD64E6 0xAB3346B5 b323
    pub unsafe fn sc_email_retrieve_emails(offset: i32, limit: i32) {
        call_native!(Void, 0x040ADDCBAFA1018Au64, offset, limit);
    } // 0x040ADDCBAFA1018A  b323
    pub unsafe fn sc_email_get_retrieval_status() -> i32 {
        call_native!(i32, 0x16DA8172459434AAu64)
    } // 0x16DA8172459434AA  b323
    pub unsafe fn sc_email_get_num_retrieved_emails() -> i32 {
        call_native!(i32, 0x7DB18CA8CAD5B098u64)
    } // 0x7DB18CA8CAD5B098  b505
    pub unsafe fn sc_email_get_email_at_index(p_0: i32, p_1: *mut Any) -> bool {
        call_native!(bool, 0x4737980E8A283806u64, p_0, p_1)
    } // 0x4737980E8A283806  b323
    pub unsafe fn sc_email_delete_emails(p_0: *mut Any, p_1: Any) {
        call_native!(Void, 0x44ACA259D67651DBu64, p_0, p_1);
    } // 0x44ACA259D67651DB  b323
    pub unsafe fn sc_email_message_push_gamer_to_recip_list(gamer_handle: *mut Any) {
        call_native!(Void, 0x2330C12A7A605D16u64, gamer_handle);
    } // 0x2330C12A7A605D16 0x9A703A2B b323
    pub unsafe fn sc_email_message_clear_recip_list() {
        call_native!(Void, 0x55DF6DB45179236Eu64);
    } // 0x55DF6DB45179236E 0xD094F11A b323
    pub unsafe fn sc_email_send_email(p_0: *const i8) {
        call_native!(Void, 0x116FB94DC4B79F17u64, p_0);
    } // 0x116FB94DC4B79F17 0xAF3C081B b323
    pub unsafe fn sc_email_set_current_email_tag(p_0: Any) -> bool {
        call_native!(bool, 0x07DBD622D9533857u64, p_0)
    } // 0x07DBD622D9533857  b505
    pub unsafe fn sc_cache_new_rockstar_msgs(toggle: bool) {
        call_native!(Void, 0xBFA0A56A817C6C7Du64, toggle);
    } // 0xBFA0A56A817C6C7D 0x2FB9F53C b323
    pub unsafe fn sc_has_new_rockstar_msg() -> bool {
        call_native!(bool, 0xBC1CC91205EC8D6Eu64)
    } // 0xBC1CC91205EC8D6E 0x6C5738AB b323
    pub unsafe fn sc_get_new_rockstar_msg() -> *const i8 {
        call_native!(*const i8, 0xDF649C4E9AFDD788u64)
    } // 0xDF649C4E9AFDD788 0x468668F0 b323
    pub unsafe fn sc_presence_attr_set_int(attr_hash: Hash, value: i32) -> bool {
        call_native!(bool, 0x1F1E9682483697C7u64, attr_hash, value)
    } // 0x1F1E9682483697C7 0x90C74343 b323
    pub unsafe fn sc_presence_attr_set_float(attr_hash: Hash, value: f32) -> bool {
        call_native!(bool, 0xC4C4575F62534A24u64, attr_hash, value)
    } // 0xC4C4575F62534A24 0x94BF0D35 b323
    pub unsafe fn sc_presence_attr_set_string(attr_hash: Hash, value: *const i8) -> bool {
        call_native!(bool, 0x287F1F75D2803595u64, attr_hash, value)
    } // 0x287F1F75D2803595 0x3ACE6D6B b323
    pub unsafe fn sc_presence_set_activity_rating(p_0: Any, p_1: f32) -> bool {
        call_native!(bool, 0x487912FD248EFDDFu64, p_0, p_1)
    } // 0x487912FD248EFDDF 0x579B4510 b323
    pub unsafe fn sc_gamerdata_get_int(name: *const i8, value: *mut i32) -> bool {
        call_native!(bool, 0xC85A7127E7AD02AAu64, name, value)
    } // 0xC85A7127E7AD02AA 0xF8BDA989 b323
    pub unsafe fn sc_gamerdata_get_float(name: *const i8, value: *mut f32) -> bool {
        call_native!(bool, 0xA770C8EEC6FB2AC5u64, name, value)
    } // 0xA770C8EEC6FB2AC5 0x515AF67C b323
    pub unsafe fn sc_gamerdata_get_bool(name: *const i8) -> bool {
        call_native!(bool, 0x8416FE4E4629D7D7u64, name)
    } // 0x8416FE4E4629D7D7 0xDF45B2A7 b323
    pub unsafe fn sc_gamerdata_get_string(name: *const i8, value: *mut i8) -> bool {
        call_native!(bool, 0x7FFCBFEE44ECFABFu64, name, value)
    } // 0x7FFCBFEE44ECFABF 0x2AE35169 b323
    pub unsafe fn sc_gamerdata_get_active_xp_bonus(value: *mut f32) -> bool {
        call_native!(bool, 0x2D874D4AE612A65Fu64, value)
    } // 0x2D874D4AE612A65F  b323
    pub unsafe fn sc_profanity_check_string(string: *const i8, token: *mut i32) -> bool {
        call_native!(bool, 0x75632C5ECD7ED843u64, string, token)
    } // 0x75632C5ECD7ED843 0xDF084A6B b323
    pub unsafe fn sc_profanity_check_string_ugc(string: *const i8, token: *mut i32) -> bool {
        call_native!(bool, 0xEB2BF817463DFA28u64, string, token)
    } // 0xEB2BF817463DFA28  b678
    pub unsafe fn sc_profanity_get_check_is_valid(token: i32) -> bool {
        call_native!(bool, 0x1753344C770358AEu64, token)
    } // 0x1753344C770358AE 0xFFED3676 b323
    pub unsafe fn sc_profanity_get_check_is_pending(token: i32) -> bool {
        call_native!(bool, 0x82E4A58BABC15AE7u64, token)
    } // 0x82E4A58BABC15AE7 0xA796D7A7 b323
    pub unsafe fn sc_profanity_get_string_passed(token: i32) -> bool {
        call_native!(bool, 0x85535ACF97FC0969u64, token)
    } // 0x85535ACF97FC0969 0x09497F31 b323
    pub unsafe fn sc_profanity_get_string_status(token: i32) -> i32 {
        call_native!(i32, 0x930DE22F07B1CCE3u64, token)
    } // 0x930DE22F07B1CCE3 0x4D8A6521 b323
    pub unsafe fn sc_licenseplate_check_string(p_0: *const i8, p_1: *mut i32) -> bool {
        call_native!(bool, 0xF6BAAAF762E1BF40u64, p_0, p_1)
    } // 0xF6BAAAF762E1BF40 0x7AA36406 b323
    pub unsafe fn sc_licenseplate_get_check_is_valid(p_0: Any) -> bool {
        call_native!(bool, 0xF22CA0FD74B80E7Au64, p_0)
    } // 0xF22CA0FD74B80E7A 0xF379DCE4 b323
    pub unsafe fn sc_licenseplate_get_check_is_pending(p_0: Any) -> bool {
        call_native!(bool, 0x9237E334F6E43156u64, p_0)
    } // 0x9237E334F6E43156 0x65D84665 b323
    pub unsafe fn sc_licenseplate_get_count(token: i32) -> i32 {
        call_native!(i32, 0x700569DBA175A77Cu64, token)
    } // 0x700569DBA175A77C 0x159FE39C b323
    pub unsafe fn sc_licenseplate_get_plate(token: i32, plate_index: i32) -> *const i8 {
        call_native!(*const i8, 0x1D4446A62D35B0D0u64, token, plate_index)
    } // 0x1D4446A62D35B0D0 0x4CE9BAA7 b323
    pub unsafe fn sc_licenseplate_get_plate_data(token: i32, plate_index: i32) -> *const i8 {
        call_native!(*const i8, 0x2E89990DDFF670C3u64, token, plate_index)
    } // 0x2E89990DDFF670C3 0x05303FC8 b323
    pub unsafe fn sc_licenseplate_set_plate_data(
        old_plate_text: *const i8,
        new_plate_text: *const i8,
        plate_data: *mut Any,
    ) -> bool {
        call_native!(
            bool,
            0xD0EE05FE193646EAu64,
            old_plate_text,
            new_plate_text,
            plate_data
        )
    } // 0xD0EE05FE193646EA 0x9F98FA5C b323
    pub unsafe fn sc_licenseplate_add(
        plate_text: *const i8,
        plate_data: *mut Any,
        token: *mut i32,
    ) -> bool {
        call_native!(bool, 0x1989C6E6F67E76A8u64, plate_text, plate_data, token)
    } // 0x1989C6E6F67E76A8 0xEEDE7FAB b323
    pub unsafe fn sc_licenseplate_get_add_is_pending(token: i32) -> bool {
        call_native!(bool, 0x07C61676E5BB52CDu64, token)
    } // 0x07C61676E5BB52CD 0xE190E45A b323
    pub unsafe fn sc_licenseplate_get_add_status(token: i32) -> i32 {
        call_native!(i32, 0x8147FFF6A718E1ADu64, token)
    } // 0x8147FFF6A718E1AD 0x930B3AE5 b323
    pub unsafe fn sc_licenseplate_isvalid(plate_text: *const i8, token: *mut i32) -> bool {
        call_native!(bool, 0x0F73393BAC7E6730u64, plate_text, token)
    } // 0x0F73393BAC7E6730 0x5298F472 b323
    pub unsafe fn sc_licenseplate_get_isvalid_is_pending(token: i32) -> bool {
        call_native!(bool, 0xD302E99EDF0449CFu64, token)
    } // 0xD302E99EDF0449CF 0x86DAE6D6 b323
    pub unsafe fn sc_licenseplate_get_isvalid_status(token: i32) -> i32 {
        call_native!(i32, 0x5C4EBFFA98BDB41Cu64, token)
    } // 0x5C4EBFFA98BDB41C 0x9AA2BA3F b323
    pub unsafe fn sc_community_event_is_active() -> bool {
        call_native!(bool, 0xFF8F3A92B75ED67Au64)
    } // 0xFF8F3A92B75ED67A 0xC96456BA b323
    pub unsafe fn sc_community_event_get_event_id() -> i32 {
        call_native!(i32, 0x4ED9C8D6DA297639u64)
    } // 0x4ED9C8D6DA297639 0xC5E08B66 b323
    pub unsafe fn sc_community_event_get_extra_data_int(p_0: *const i8, p_1: *mut i32) -> bool {
        call_native!(bool, 0x710BCDA8071EDED1u64, p_0, p_1)
    } // 0x710BCDA8071EDED1 0x04EE74A3 b323
    pub unsafe fn sc_community_event_get_extra_data_float(p_0: *const i8, p_1: *mut f32) -> bool {
        call_native!(bool, 0x50A8A36201DBF83Eu64, p_0, p_1)
    } // 0x50A8A36201DBF83E 0x8DA93C3D b323
    pub unsafe fn sc_community_event_get_extra_data_string(p_0: *const i8, p_1: *mut i8) -> bool {
        call_native!(bool, 0x9DE5D2F723575ED0u64, p_0, p_1)
    } // 0x9DE5D2F723575ED0 0x37DD48B5 b323
    pub unsafe fn sc_community_event_get_display_name(p_0: *mut i8) -> bool {
        call_native!(bool, 0xC2C97EA97711D1AEu64, p_0)
    } // 0xC2C97EA97711D1AE 0xF929F61D b323
    pub unsafe fn sc_community_event_is_active_for_type(p_0: *const i8) -> bool {
        call_native!(bool, 0x450819D8CF90C416u64, p_0)
    } // 0x450819D8CF90C416 0x0572EB5E b323
    pub unsafe fn sc_community_event_get_event_id_for_type(p_0: *const i8) -> i32 {
        call_native!(i32, 0x4A7D6E727F941747u64, p_0)
    } // 0x4A7D6E727F941747 0x8E7AEEB7 b323
    pub unsafe fn sc_community_event_get_extra_data_int_for_type(
        p_0: *const i8,
        p_1: *mut i32,
        p_2: *const i8,
    ) -> bool {
        call_native!(bool, 0xE75A4A2E5E316D86u64, p_0, p_1, p_2)
    } // 0xE75A4A2E5E316D86 0x28C57FA0 b323
    pub unsafe fn sc_community_event_get_extra_data_float_for_type(
        p_0: *const i8,
        p_1: *mut f32,
        p_2: *const i8,
    ) -> bool {
        call_native!(bool, 0x2570E26BE63964E3u64, p_0, p_1, p_2)
    } // 0x2570E26BE63964E3 0x59394583 b323
    pub unsafe fn sc_community_event_get_extra_data_string_for_type(
        p_0: *const i8,
        p_1: *mut i8,
        p_2: *const i8,
    ) -> bool {
        call_native!(bool, 0x1D12A56FC95BE92Eu64, p_0, p_1, p_2)
    } // 0x1D12A56FC95BE92E 0x92452C0E b323
    pub unsafe fn sc_community_event_get_display_name_for_type(
        p_0: *mut i8,
        p_1: *const i8,
    ) -> bool {
        call_native!(bool, 0x33DF47CC0642061Bu64, p_0, p_1)
    } // 0x33DF47CC0642061B 0xBBA8D34D b323
    pub unsafe fn sc_community_event_is_active_by_id(p_0: i32) -> bool {
        call_native!(bool, 0xA468E0BE12B12C70u64, p_0)
    } // 0xA468E0BE12B12C70 0xB21288FA b323
    pub unsafe fn sc_community_event_get_extra_data_int_by_id(
        p_0: i32,
        p_1: *const i8,
        p_2: *mut i32,
    ) -> bool {
        call_native!(bool, 0x8CC469AB4D349B7Cu64, p_0, p_1, p_2)
    } // 0x8CC469AB4D349B7C 0xE778B2A7 b323
    pub unsafe fn sc_community_event_get_extra_data_float_by_id(
        p_0: i32,
        p_1: *const i8,
        p_2: *mut f32,
    ) -> bool {
        call_native!(bool, 0xC5A35C73B68F3C49u64, p_0, p_1, p_2)
    } // 0xC5A35C73B68F3C49 0x7E24BD6E b323
    pub unsafe fn sc_community_event_get_extra_data_string_by_id(
        p_0: i32,
        p_1: *const i8,
        p_2: *mut i8,
    ) -> bool {
        call_native!(bool, 0x699E4A5C8C893A18u64, p_0, p_1, p_2)
    } // 0x699E4A5C8C893A18 0xCE7D50A8 b323
    pub unsafe fn sc_community_event_get_display_name_by_id(p_0: i32, p_1: *mut i8) -> bool {
        call_native!(bool, 0x19853B5B17D77BCAu64, p_0, p_1)
    } // 0x19853B5B17D77BCA 0xD26CCA46 b323
    pub unsafe fn sc_transition_news_show(p_0: Any) -> bool {
        call_native!(bool, 0x6BFB12CE158E3DD4u64, p_0)
    } // 0x6BFB12CE158E3DD4 0x24D84334 b323
    pub unsafe fn sc_transition_news_show_timed(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0xFE4C1D0D3B9CC17Eu64, p_0, p_1)
    } // 0xFE4C1D0D3B9CC17E 0x8A023024 b323
    pub unsafe fn sc_transition_news_show_next_item() -> bool {
        call_native!(bool, 0xD8122C407663B995u64)
    } // 0xD8122C407663B995 0x1C65B038 b323
    pub unsafe fn sc_transition_news_has_extra_data_tu() -> bool {
        call_native!(bool, 0x3001BEF2FECA3680u64)
    } // 0x3001BEF2FECA3680 0x4D4C37B3 b323
    pub unsafe fn sc_transition_news_get_extra_data_int_tu(p_0: *const i8, p_1: *mut i32) -> bool {
        call_native!(bool, 0x92DA6E70EF249BD1u64, p_0, p_1)
    } // 0x92DA6E70EF249BD1 0xAED95A6F b323
    pub unsafe fn sc_transition_news_end() {
        call_native!(Void, 0x675721C9F644D161u64);
    } // 0x675721C9F644D161 0x486867E6 b323
    pub unsafe fn sc_pause_news_init_starter_pack(p_0: Any) -> bool {
        call_native!(bool, 0xE4F6E8D07A2F0F51u64, p_0)
    } // 0xE4F6E8D07A2F0F51  b1290
    pub unsafe fn sc_pause_news_get_pending_story(p_0: Any) -> bool {
        call_native!(bool, 0x8A4416C0DB05FA66u64, p_0)
    } // 0x8A4416C0DB05FA66  b1290
    pub unsafe fn sc_pause_news_shutdown() {
        call_native!(Void, 0xEA95C0853A27888Eu64);
    } // 0xEA95C0853A27888E  b1290
    pub unsafe fn sc_account_info_get_nickname() -> *const i8 {
        call_native!(*const i8, 0x198D161F458ECC7Fu64)
    } // 0x198D161F458ECC7F  b323
    pub unsafe fn sc_achievement_info_status(p_0: *mut i32) -> bool {
        call_native!(bool, 0x225798743970412Bu64, p_0)
    } // 0x225798743970412B  b323
    pub unsafe fn sc_has_achievement_been_passed(achievement_id: i32) -> bool {
        call_native!(bool, 0x418DC16FAE452C1Cu64, achievement_id)
    } // 0x418DC16FAE452C1C  b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod stats {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn stat_clear_slot_for_reload(stat_slot: i32) -> bool {
        call_native!(bool, 0xEB0A72181D4AA4ADu64, stat_slot)
    } // 0xEB0A72181D4AA4AD 0x84BDD475 b323
    pub unsafe fn stat_load(stat_slot: i32) -> bool {
        call_native!(bool, 0xA651443F437B1CE6u64, stat_slot)
    } // 0xA651443F437B1CE6 0x9E5629F4 b323
    pub unsafe fn stat_save(p_0: i32, p_1: bool, p_2: i32, p_3: bool) -> bool {
        call_native!(bool, 0xE07BCA305B82D2FDu64, p_0, p_1, p_2, p_3)
    } // 0xE07BCA305B82D2FD 0xE10A7CA4 b323
    pub unsafe fn stat_set_open_savetype_in_job(p_0: i32) {
        call_native!(Void, 0x5688585E6D563CD8u64, p_0);
    } // 0x5688585E6D563CD8 0xC62406A6 b323
    pub unsafe fn stat_load_pending(stat_slot: i32) -> bool {
        call_native!(bool, 0xA1750FFAFA181661u64, stat_slot)
    } // 0xA1750FFAFA181661 0x4E9AC983 b323
    pub unsafe fn stat_save_pending() -> bool {
        call_native!(bool, 0x7D3A583856F2C5ACu64)
    } // 0x7D3A583856F2C5AC 0xC3FD3822 b323
    pub unsafe fn stat_save_pending_or_requested() -> bool {
        call_native!(bool, 0xBBB6AD006F1BBEA3u64)
    } // 0xBBB6AD006F1BBEA3 0xA3407CA3 b323
    pub unsafe fn stat_delete_slot(p_0: i32) -> bool {
        call_native!(bool, 0x49A49BED12794D70u64, p_0)
    } // 0x49A49BED12794D70 0x2F171B94 b323
    pub unsafe fn stat_slot_is_loaded(stat_slot: i32) -> bool {
        call_native!(bool, 0x0D0A9F0E7BD91E3Cu64, stat_slot)
    } // 0x0D0A9F0E7BD91E3C 0x7A299C13 b323
    pub unsafe fn stat_cloud_slot_load_failed(p_0: i32) -> bool {
        call_native!(bool, 0x7F2C4CDF2E82DF4Cu64, p_0)
    } // 0x7F2C4CDF2E82DF4C 0x0BF0F4B2 b323
    pub unsafe fn stat_cloud_slot_load_failed_code(p_0: Any) -> i32 {
        call_native!(i32, 0xE496A53BA5F50A56u64, p_0)
    } // 0xE496A53BA5F50A56 0xCE6B62B5 b323
    pub unsafe fn stat_set_block_saves(toggle: bool) {
        call_native!(Void, 0xF434A10BA01C37D0u64, toggle);
    } // 0xF434A10BA01C37D0 0xCE7A2411 b323
    pub unsafe fn stat_get_block_saves() -> bool {
        call_native!(bool, 0x6A7F19756F1A9016u64)
    } // 0x6A7F19756F1A9016  b2060
    pub unsafe fn stat_cloud_slot_save_failed(p_0: Any) -> bool {
        call_native!(bool, 0x7E6946F68A38B74Fu64, p_0)
    } // 0x7E6946F68A38B74F 0x22804C20 b323
    pub unsafe fn stat_clear_pending_saves(p_0: Any) {
        call_native!(Void, 0xA8733668D1047B51u64, p_0);
    } // 0xA8733668D1047B51 0x395D18B1 b323
    pub unsafe fn stat_load_dirty_read_detected() -> bool {
        call_native!(bool, 0xECB41AC6AB754401u64)
    } // 0xECB41AC6AB754401 0xED7000C8 b323
    pub unsafe fn stat_clear_dirty_read_detected() {
        call_native!(Void, 0x9B4BD21D69B1E609u64);
    } // 0x9B4BD21D69B1E609  b323
    pub unsafe fn stat_get_load_safe_to_progress_to_mp_from_sp() -> bool {
        call_native!(bool, 0xC0E0D686DDFC6EAEu64)
    } // 0xC0E0D686DDFC6EAE 0x099FCC86 b323
    pub unsafe fn _get_stat_hash_for_character_stat(
        data_type: i32,
        stat_index: i32,
        char_slot: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0xD69CE161FE614531u64,
            data_type,
            stat_index,
            char_slot
        )
    } // 0xD69CE161FE614531  b2944
    pub unsafe fn stat_set_int(stat_name: Hash, value: i32, save: bool) -> bool {
        call_native!(bool, 0xB3271D7AB655B441u64, stat_name, value, save)
    } // 0xB3271D7AB655B441 0xC9CC1C5C b323
    pub unsafe fn stat_set_float(stat_name: Hash, value: f32, save: bool) -> bool {
        call_native!(bool, 0x4851997F37FE9B3Cu64, stat_name, value, save)
    } // 0x4851997F37FE9B3C 0x6CEA96F2 b323
    pub unsafe fn stat_set_bool(stat_name: Hash, value: bool, save: bool) -> bool {
        call_native!(bool, 0x4B33C4243DE0C432u64, stat_name, value, save)
    } // 0x4B33C4243DE0C432 0x55D79DFB b323
    pub unsafe fn stat_set_gxt_label(stat_name: Hash, value: *const i8, save: bool) -> bool {
        call_native!(bool, 0x17695002FD8B2AE0u64, stat_name, value, save)
    } // 0x17695002FD8B2AE0 0xC1224AA7 b323
    pub unsafe fn stat_set_date(
        stat_name: Hash,
        value: *mut Any,
        num_fields: i32,
        save: bool,
    ) -> bool {
        call_native!(
            bool,
            0x2C29BFB64F4FCBE4u64,
            stat_name,
            value,
            num_fields,
            save
        )
    } // 0x2C29BFB64F4FCBE4 0x36BE807B b323
    pub unsafe fn stat_set_string(stat_name: Hash, value: *const i8, save: bool) -> bool {
        call_native!(bool, 0xA87B2335D12531D7u64, stat_name, value, save)
    } // 0xA87B2335D12531D7 0xB1EF2E21 b323
    pub unsafe fn stat_set_pos(stat_name: Hash, x: f32, y: f32, z: f32, save: bool) -> bool {
        call_native!(bool, 0xDB283FDE680FE72Eu64, stat_name, x, y, z, save)
    } // 0xDB283FDE680FE72E 0x1192C9A3 b323
    pub unsafe fn stat_set_masked_int(
        stat_name: Hash,
        p_1: i32,
        p_2: i32,
        p_3: i32,
        save: bool,
    ) -> bool {
        call_native!(bool, 0x7BBB1B54583ED410u64, stat_name, p_1, p_2, p_3, save)
    } // 0x7BBB1B54583ED410 0x2CBAA739 b323
    pub unsafe fn stat_set_user_id(stat_name: Hash, value: *const i8, save: bool) -> bool {
        call_native!(bool, 0x8CDDF1E452BABE11u64, stat_name, value, save)
    } // 0x8CDDF1E452BABE11 0xDBE78ED7 b323
    pub unsafe fn stat_set_current_posix_time(stat_name: Hash, p_1: bool) -> bool {
        call_native!(bool, 0xC2F84B7F9C4D0C61u64, stat_name, p_1)
    } // 0xC2F84B7F9C4D0C61 0xA286F015 b323
    pub unsafe fn stat_get_int(stat_hash: Hash, out_value: *mut i32, p_2: i32) -> bool {
        call_native!(bool, 0x767FBC2AC802EF3Du64, stat_hash, out_value, p_2)
    } // 0x767FBC2AC802EF3D 0x1C6FE43E b323
    pub unsafe fn stat_get_float(stat_hash: Hash, out_value: *mut f32, p_2: Any) -> bool {
        call_native!(bool, 0xD7AE6C9C9C6AC54Cu64, stat_hash, out_value, p_2)
    } // 0xD7AE6C9C9C6AC54C 0xFCBDA612 b323
    pub unsafe fn stat_get_bool(stat_hash: Hash, out_value: *mut Bool, p_2: Any) -> bool {
        call_native!(bool, 0x11B5E6D2AE73F48Eu64, stat_hash, out_value, p_2)
    } // 0x11B5E6D2AE73F48E 0x28A3DD2B b323
    pub unsafe fn stat_get_date(
        stat_hash: Hash,
        out_value: *mut Any,
        num_fields: i32,
        p_3: Any,
    ) -> bool {
        call_native!(
            bool,
            0x8B0FACEFC36C824Bu64,
            stat_hash,
            out_value,
            num_fields,
            p_3
        )
    } // 0x8B0FACEFC36C824B 0xD762D16C b323
    pub unsafe fn stat_get_string(stat_hash: Hash, p_1: i32) -> *const i8 {
        call_native!(*const i8, 0xE50384ACC2C3DB74u64, stat_hash, p_1)
    } // 0xE50384ACC2C3DB74 0x10CE4BDE b323
    pub unsafe fn stat_get_pos(
        stat_name: Hash,
        out_x: *mut f32,
        out_y: *mut f32,
        out_z: *mut f32,
        p_4: Any,
    ) -> bool {
        call_native!(
            bool,
            0x350F82CCB186AA1Bu64,
            stat_name,
            out_x,
            out_y,
            out_z,
            p_4
        )
    } // 0x350F82CCB186AA1B 0xC846ECCE b323
    pub unsafe fn stat_get_masked_int(
        stat_hash: Hash,
        out_value: *mut i32,
        p_2: i32,
        p_3: i32,
        p_4: Any,
    ) -> bool {
        call_native!(
            bool,
            0x655185A06D9EEAABu64,
            stat_hash,
            out_value,
            p_2,
            p_3,
            p_4
        )
    } // 0x655185A06D9EEAAB 0xE9D9B70F b323
    pub unsafe fn stat_get_user_id(stat_hash: Hash) -> *const i8 {
        call_native!(*const i8, 0x2365C388E393BBE2u64, stat_hash)
    } // 0x2365C388E393BBE2 0xE2E8B6BA b323
    pub unsafe fn stat_get_license_plate(stat_name: Hash) -> *const i8 {
        call_native!(*const i8, 0x5473D4195058B2E4u64, stat_name)
    } // 0x5473D4195058B2E4 0x1544B29F b323
    pub unsafe fn stat_set_license_plate(stat_name: Hash, str: *const i8) -> bool {
        call_native!(bool, 0x69FF13266D7296DAu64, stat_name, str)
    } // 0x69FF13266D7296DA 0x3507D253 b323
    pub unsafe fn stat_increment(stat_name: Hash, value: f32) {
        call_native!(Void, 0x9B5A68C6489E9909u64, stat_name, value);
    } // 0x9B5A68C6489E9909 0xDFC5F71E b323
    pub unsafe fn stat_community_start_synch() -> bool {
        call_native!(bool, 0x5A556B229A169402u64)
    } // 0x5A556B229A169402 0x46F21343 b323
    pub unsafe fn stat_community_synch_is_pending() -> bool {
        call_native!(bool, 0xB1D2BB1E1631F5B1u64)
    } // 0xB1D2BB1E1631F5B1 0x02F283CE b323
    pub unsafe fn stat_community_get_history(
        stat_name: Hash,
        p_1: i32,
        out_value: *mut f32,
    ) -> bool {
        call_native!(bool, 0xBED9F5693F34ED17u64, stat_name, p_1, out_value)
    } // 0xBED9F5693F34ED17 0xC4110917 b323
    pub unsafe fn stat_reset_all_online_character_stats(p_0: i32) {
        call_native!(Void, 0x26D7399B9587FE89u64, p_0);
    } // 0x26D7399B9587FE89 0x343B27E2 b323
    pub unsafe fn stat_local_reset_all_online_character_stats(p_0: i32) {
        call_native!(Void, 0xA78B8FA58200DA56u64, p_0);
    } // 0xA78B8FA58200DA56 0xE3247582 b323
    pub unsafe fn stat_get_number_of_days(stat_name: Hash) -> i32 {
        call_native!(i32, 0xE0E854F5280FB769u64, stat_name)
    } // 0xE0E854F5280FB769 0xFD66A429 b323
    pub unsafe fn stat_get_number_of_hours(stat_name: Hash) -> i32 {
        call_native!(i32, 0xF2D4B2FE415AAFC3u64, stat_name)
    } // 0xF2D4B2FE415AAFC3 0x9B431236 b323
    pub unsafe fn stat_get_number_of_minutes(stat_name: Hash) -> i32 {
        call_native!(i32, 0x7583B4BE4C5A41B5u64, stat_name)
    } // 0x7583B4BE4C5A41B5 0x347B4436 b323
    pub unsafe fn stat_get_number_of_seconds(stat_name: Hash) -> i32 {
        call_native!(i32, 0x2CE056FF3723F00Bu64, stat_name)
    } // 0x2CE056FF3723F00B 0x2C1D6C31 b323
    pub unsafe fn stat_set_profile_setting_value(profile_setting: i32, value: i32) {
        call_native!(Void, 0x68F01422BE1D838Fu64, profile_setting, value);
    } // 0x68F01422BE1D838F 0x24DD4929 b323
    pub unsafe fn stats_completed_character_creation(p_0: Any) {
        call_native!(Void, 0xC01D2470F22CDE5Au64, p_0);
    } // 0xC01D2470F22CDE5A  b2372
    pub unsafe fn packed_stat_get_int_stat_index(p_0: i32) -> i32 {
        call_native!(i32, 0x94F12ABF9C79E339u64, p_0)
    } // 0x94F12ABF9C79E339 0xCA160BCC b323
    pub unsafe fn get_packed_int_stat_key(
        index: i32,
        sp_stat: bool,
        char_stat: bool,
        character: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0x61E111E323419E07u64,
            index,
            sp_stat,
            char_stat,
            character
        )
    } // 0x61E111E323419E07 0x1F938864 b323
    pub unsafe fn get_packed_tu_int_stat_key(
        index: i32,
        sp_stat: bool,
        char_stat: bool,
        character: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0xD16C2AD6B8E32854u64,
            index,
            sp_stat,
            char_stat,
            character
        )
    } // 0xD16C2AD6B8E32854 0xFB93C5A2 b323
    pub unsafe fn get_packed_ng_int_stat_key(
        index: i32,
        sp_stat: bool,
        char_stat: bool,
        character: i32,
        section: *const i8,
    ) -> Hash {
        call_native!(
            Hash,
            0x2B4CDCA6F07FF3DAu64,
            index,
            sp_stat,
            char_stat,
            character,
            section
        )
    } // 0x2B4CDCA6F07FF3DA  b323
    pub unsafe fn get_packed_stat_bool_code(index: i32, character_slot: i32) -> bool {
        call_native!(bool, 0xDA7EBFC49AE3F1B0u64, index, character_slot)
    } // 0xDA7EBFC49AE3F1B0  b2545
    pub unsafe fn get_packed_stat_int_code(index: i32, character_slot: i32) -> i32 {
        call_native!(i32, 0x0BC900A6FE73770Cu64, index, character_slot)
    } // 0x0BC900A6FE73770C  b2545
    pub unsafe fn set_packed_stat_bool_code(index: i32, value: bool, character_slot: i32) {
        call_native!(Void, 0xDB8A58AEAA67CD07u64, index, value, character_slot);
    } // 0xDB8A58AEAA67CD07  b2545
    pub unsafe fn set_packed_stat_int_code(index: i32, value: i32, character_slot: i32) {
        call_native!(Void, 0x1581503AE529CD2Eu64, index, value, character_slot);
    } // 0x1581503AE529CD2E  b2545
    pub unsafe fn playstats_background_script_action(action: *const i8, value: i32) {
        call_native!(Void, 0x5009DFD741329729u64, action, value);
    } // 0x5009DFD741329729 0x61ECC465 b323
    pub unsafe fn _playstats_flow_low(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        p_3: *const i8,
        p_4: Any,
        amount: i32,
    ) {
        call_native!(
            Void,
            0xE6A27CDA42887F93u64,
            pos_x,
            pos_y,
            pos_z,
            p_3,
            p_4,
            amount
        );
    } // 0xE6A27CDA42887F93  b2944
    pub unsafe fn _playstats_flow_medium(
        x: f32,
        y: f32,
        z: f32,
        interior_action: *const i8,
        p_4: i32,
        p_5: Hash,
    ) {
        call_native!(
            Void,
            0xC4493521BAA12CCEu64,
            x,
            y,
            z,
            interior_action,
            p_4,
            p_5
        );
    } // 0xC4493521BAA12CCE  b3095
    pub unsafe fn playstats_npc_invite(p_0: *const i8) {
        call_native!(Void, 0x93054C88E6AA7C44u64, p_0);
    } // 0x93054C88E6AA7C44 0x598C06F3 b323
    pub unsafe fn playstats_award_xp(amount: i32, _type: Hash, category: Hash) {
        call_native!(Void, 0x46F917F6B4128FE4u64, amount, _type, category);
    } // 0x46F917F6B4128FE4 0x8770017B b323
    pub unsafe fn playstats_rank_up(rank: i32) {
        call_native!(Void, 0xC7F2DE41D102BFB4u64, rank);
    } // 0xC7F2DE41D102BFB4 0x56AFB9F5 b323
    pub unsafe fn playstats_started_session_in_offlinemode() {
        call_native!(Void, 0x098760C7461724CDu64);
    } // 0x098760C7461724CD 0x896CDF8D b323
    pub unsafe fn playstats_activity_done(p_0: i32, activity_id: i32, p_2: Any) {
        call_native!(Void, 0xA071E0ED98F91286u64, p_0, activity_id, p_2);
    } // 0xA071E0ED98F91286 0x1A66945F b323
    pub unsafe fn playstats_leave_job_chain(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xC5BE134EC7BA96A0u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xC5BE134EC7BA96A0 0xC960E161 b323
    pub unsafe fn playstats_mission_started(p_0: *const i8, p_1: Any, p_2: Any, p_3: bool) {
        call_native!(Void, 0xC19A2925C34D2231u64, p_0, p_1, p_2, p_3);
    } // 0xC19A2925C34D2231 0x3AAB699C b323
    pub unsafe fn playstats_mission_over(
        p_0: *const i8,
        p_1: Any,
        p_2: Any,
        p_3: bool,
        p_4: bool,
        p_5: bool,
    ) {
        call_native!(Void, 0x7C4BB33A8CED7324u64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x7C4BB33A8CED7324 0x5B90B5FF b323
    pub unsafe fn playstats_mission_checkpoint(p_0: *const i8, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xC900596A63978C1Du64, p_0, p_1, p_2, p_3);
    } // 0xC900596A63978C1D 0xCDC52280 b323
    pub unsafe fn playstats_random_mission_done(name: *const i8, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x71862B1D855F32E1u64, name, p_1, p_2, p_3);
    } // 0x71862B1D855F32E1 0xAC2C7C63 b323
    pub unsafe fn playstats_ros_bet(amount: i32, act: i32, player: Player, cm: f32) {
        call_native!(Void, 0x121FB4DDDC2D5291u64, amount, act, player, cm);
    } // 0x121FB4DDDC2D5291 0x413539BC b323
    pub unsafe fn playstats_race_checkpoint(p_0: Vehicle, p_1: Any, p_2: i32, p_3: i32, p_4: Any) {
        call_native!(Void, 0x9C375C315099DDE4u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x9C375C315099DDE4 0x580D5508 b323
    pub unsafe fn playstats_create_match_history_id_2(
        player_account_id: *mut i32,
        posix_time: *mut i32,
    ) -> bool {
        call_native!(bool, 0x6DEE77AFF8C21BD1u64, player_account_id, posix_time)
    } // 0x6DEE77AFF8C21BD1 0x489E27E7 b323
    pub unsafe fn playstats_match_started(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xBC80E22DED931E3Du64, p_0, p_1, p_2);
    } // 0xBC80E22DED931E3D 0x2BDE85C1 b323
    pub unsafe fn playstats_shop_item(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x176852ACAAC173D1u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x176852ACAAC173D1 0xA4746384 b323
    pub unsafe fn playstats_crate_drop_mission_done(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0x1CAE5D2E3F9A07F0u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0x1CAE5D2E3F9A07F0 0x6602CED6 b323
    pub unsafe fn playstats_crate_created(p_0: f32, p_1: f32, p_2: f32) {
        call_native!(Void, 0xAFC7E5E075A96F46u64, p_0, p_1, p_2);
    } // 0xAFC7E5E075A96F46 0xD003E648 b323
    pub unsafe fn playstats_hold_up_mission_done(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xCB00196B31C39EB1u64, p_0, p_1, p_2, p_3);
    } // 0xCB00196B31C39EB1 0x759E0EC9 b323
    pub unsafe fn playstats_import_export_mission_done(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x2B69F5074C894811u64, p_0, p_1, p_2, p_3);
    } // 0x2B69F5074C894811 0x62073DF7 b323
    pub unsafe fn playstats_race_to_point_mission_done(p_0: i32, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xADDD1C754E2E2914u64, p_0, p_1, p_2, p_3);
    } // 0xADDD1C754E2E2914 0x06CE3692 b323
    pub unsafe fn playstats_acquired_hidden_package(p_0: Any) {
        call_native!(Void, 0x79AB33F0FBFAC40Cu64, p_0);
    } // 0x79AB33F0FBFAC40C 0x8D5C7B37 b323
    pub unsafe fn playstats_website_visited(scaleform_hash: Hash, p_1: i32) {
        call_native!(Void, 0xDDF24D535060F811u64, scaleform_hash, p_1);
    } // 0xDDF24D535060F811 0x37D152BB b323
    pub unsafe fn playstats_friend_activity(p_0: i32, p_1: bool) {
        call_native!(Void, 0x0F71DE29AB2258F1u64, p_0, p_1);
    } // 0x0F71DE29AB2258F1 0xD1FA1BDB b323
    pub unsafe fn playstats_oddjob_done(total_time_ms: i32, p_1: i32, p_2: bool) {
        call_native!(Void, 0x69DEA3E9DB727B4Cu64, total_time_ms, p_1, p_2);
    } // 0x69DEA3E9DB727B4C 0xFE14A8EA b323
    pub unsafe fn playstats_prop_change(p_0: Ped, p_1: i32, p_2: i32, p_3: i32) {
        call_native!(Void, 0xBA739D6D5A05D6E7u64, p_0, p_1, p_2, p_3);
    } // 0xBA739D6D5A05D6E7 0x25740A1D b323
    pub unsafe fn playstats_cloth_change(p_0: Ped, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x34B973047A2268B9u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x34B973047A2268B9 0x3AFF9E58 b323
    pub unsafe fn playstats_weapon_mode_change(
        weapon_hash: Hash,
        component_hash_to: Hash,
        component_hash_from: Hash,
    ) {
        call_native!(
            Void,
            0xE95C8A1875A02CA4u64,
            weapon_hash,
            component_hash_to,
            component_hash_from
        );
    } // 0xE95C8A1875A02CA4 0x79716890 b323
    pub unsafe fn playstats_cheat_applied(cheat: *const i8) {
        call_native!(Void, 0x6058665D72302D3Fu64, cheat);
    } // 0x6058665D72302D3F 0x345166F3 b323
    pub unsafe fn playstats_job_activity_end(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) {
        call_native!(Void, 0xF8C54A461C3E11DCu64, p_0, p_1, p_2, p_3);
    } // 0xF8C54A461C3E11DC 0x04181752 b323
    pub unsafe fn playstats_job_bend(p_0: *mut Any, p_1: *mut Any, p_2: *mut Any, p_3: *mut Any) {
        call_native!(Void, 0xF5BB8DAC426A52C0u64, p_0, p_1, p_2, p_3);
    } // 0xF5BB8DAC426A52C0 0x40520E70 b323
    pub unsafe fn playstats_job_lts_end(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) {
        call_native!(Void, 0xA736CF7FB7C5BFF4u64, p_0, p_1, p_2, p_3);
    } // 0xA736CF7FB7C5BFF4 0x31002201 b323
    pub unsafe fn playstats_job_lts_round_end(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: *mut Any,
        p_3: *mut Any,
    ) {
        call_native!(Void, 0x14E0B2D1AD1044E0u64, p_0, p_1, p_2, p_3);
    } // 0x14E0B2D1AD1044E0 0xDDD1F1F3 b323
    pub unsafe fn playstats_quickfix_tool(element: i32, item: *const i8) {
        call_native!(Void, 0x90D0622866E80445u64, element, item);
    } // 0x90D0622866E80445 0x66FEB701 b323
    pub unsafe fn playstats_idle_kick(ms_stood_idle: i32) {
        call_native!(Void, 0x5DA3A8DE8CB6226Fu64, ms_stood_idle);
    } // 0x5DA3A8DE8CB6226F 0x9E2B9522 b323
    pub unsafe fn playstats_set_join_type(join_type: i32) {
        call_native!(Void, 0xD1032E482629049Eu64, join_type);
    } // 0xD1032E482629049E 0x1AC97138 b323
    pub unsafe fn playstats_heist_save_cheat(hash: Hash, p_1: i32) {
        call_native!(Void, 0xF4FF020A08BC8863u64, hash, p_1);
    } // 0xF4FF020A08BC8863 0xB731DF54 b323
    pub unsafe fn playstats_append_director_metric(p_0: *mut Any) {
        call_native!(Void, 0x46326E13DA4E0546u64, p_0);
    } // 0x46326E13DA4E0546  b323
    pub unsafe fn playstats_award_bad_sport(id: i32) {
        call_native!(Void, 0x47B32F5611E6E483u64, id);
    } // 0x47B32F5611E6E483  b463
    pub unsafe fn playstats_pegasus_as_personal_aircraft(model_hash: Hash) {
        call_native!(Void, 0x9572BD4DD6B72122u64, model_hash);
    } // 0x9572BD4DD6B72122  b1180
    pub unsafe fn _playstats_shopmenu_nav(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xF96E9EA876D9DC92u64, p_0, p_1, p_2, p_3);
    } // 0xF96E9EA876D9DC92  b2802
    pub unsafe fn playstats_fm_event_challenges(p_0: Any) {
        call_native!(Void, 0x6A60E43998228229u64, p_0);
    } // 0x6A60E43998228229  b463
    pub unsafe fn playstats_fm_event_vehicletarget(p_0: Any) {
        call_native!(Void, 0xBFAFDB5FAAA5C5ABu64, p_0);
    } // 0xBFAFDB5FAAA5C5AB  b463
    pub unsafe fn playstats_fm_event_urbanwarfare(p_0: Any) {
        call_native!(Void, 0x8C9D11605E59D955u64, p_0);
    } // 0x8C9D11605E59D955  b463
    pub unsafe fn playstats_fm_event_checkpointcollection(p_0: Any) {
        call_native!(Void, 0x3DE3AA516FB126A4u64, p_0);
    } // 0x3DE3AA516FB126A4  b463
    pub unsafe fn playstats_fm_event_atob(p_0: Any) {
        call_native!(Void, 0xBAA2F0490E146BE8u64, p_0);
    } // 0xBAA2F0490E146BE8  b463
    pub unsafe fn playstats_fm_event_pennedin(p_0: Any) {
        call_native!(Void, 0x1A7CE7CD3E653485u64, p_0);
    } // 0x1A7CE7CD3E653485  b463
    pub unsafe fn playstats_fm_event_passtheparcel(p_0: Any) {
        call_native!(Void, 0x419615486BBF1956u64, p_0);
    } // 0x419615486BBF1956  b463
    pub unsafe fn playstats_fm_event_hotproperty(p_0: Any) {
        call_native!(Void, 0x84DFC579C2FC214Cu64, p_0);
    } // 0x84DFC579C2FC214C  b463
    pub unsafe fn playstats_fm_event_deaddrop(p_0: Any) {
        call_native!(Void, 0x0A9C7F36E5D7B683u64, p_0);
    } // 0x0A9C7F36E5D7B683  b463
    pub unsafe fn playstats_fm_event_kingofthecastle(p_0: Any) {
        call_native!(Void, 0x164C5FF663790845u64, p_0);
    } // 0x164C5FF663790845  b463
    pub unsafe fn playstats_fm_event_criminaldamage(p_0: Any) {
        call_native!(Void, 0xEDBF6C9B0D2C65C8u64, p_0);
    } // 0xEDBF6C9B0D2C65C8  b463
    pub unsafe fn playstats_fm_event_competitiveurbanwarfare(p_0: Any) {
        call_native!(Void, 0x6551B1F7F6CD46EAu64, p_0);
    } // 0x6551B1F7F6CD46EA  b463
    pub unsafe fn playstats_fm_event_huntbeast(p_0: Any) {
        call_native!(Void, 0x2CD90358F67D0AA8u64, p_0);
    } // 0x2CD90358F67D0AA8  b463
    pub unsafe fn playstats_pimenu_hide_options(data: *mut Any) {
        call_native!(Void, 0x203B381133817079u64, data);
    } // 0x203B381133817079  b393
    pub unsafe fn leaderboards_get_number_of_columns(p_0: i32, p_1: Any) -> i32 {
        call_native!(i32, 0x117B45156D7EFF2Eu64, p_0, p_1)
    } // 0x117B45156D7EFF2E 0x0A56EE34 b323
    pub unsafe fn leaderboards_get_column_id(p_0: i32, p_1: i32, p_2: i32) -> i32 {
        call_native!(i32, 0xC4B5467A1886EA7Eu64, p_0, p_1, p_2)
    } // 0xC4B5467A1886EA7E 0x3821A334 b323
    pub unsafe fn leaderboards_get_column_type(p_0: i32, p_1: Any, p_2: Any) -> i32 {
        call_native!(i32, 0xBF4FEF46DB7894D3u64, p_0, p_1, p_2)
    } // 0xBF4FEF46DB7894D3 0x6F2820F4 b323
    pub unsafe fn leaderboards_read_clear_all() -> i32 {
        call_native!(i32, 0xA34CB6E6F0DF4A0Bu64)
    } // 0xA34CB6E6F0DF4A0B 0x233E058A b323
    pub unsafe fn leaderboards_read_clear(p_0: Any, p_1: Any, p_2: Any) -> i32 {
        call_native!(i32, 0x7CCE5C737A665701u64, p_0, p_1, p_2)
    } // 0x7CCE5C737A665701 0x7090012F b323
    pub unsafe fn leaderboards_read_pending(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0xAC392C8483342AC2u64, p_0, p_1, p_2)
    } // 0xAC392C8483342AC2 0xEEB8BF5C b323
    pub unsafe fn leaderboards_read_any_pending() -> bool {
        call_native!(bool, 0xA31FD15197B192BDu64)
    } // 0xA31FD15197B192BD 0x1789437B b323
    pub unsafe fn leaderboards_read_successful(p_0: Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x2FB19228983E832Cu64, p_0, p_1, p_2)
    } // 0x2FB19228983E832C 0x3AC5B2F1 b323
    pub unsafe fn leaderboards2_read_friends_by_row(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: Any,
        p_3: bool,
        p_4: Any,
        p_5: Any,
    ) -> bool {
        call_native!(bool, 0x918B101666F9CB83u64, p_0, p_1, p_2, p_3, p_4, p_5)
    } // 0x918B101666F9CB83 0xBD91B136 b323
    pub unsafe fn leaderboards2_read_by_handle(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xC30713A383BFBF0Eu64, p_0, p_1)
    } // 0xC30713A383BFBF0E 0x6B553408 b323
    pub unsafe fn leaderboards2_read_by_rank(p_0: *mut Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0xBA2C7DB0C129449Au64, p_0, p_1, p_2)
    } // 0xBA2C7DB0C129449A 0x1B03F59F b323
    pub unsafe fn leaderboards2_read_by_radius(p_0: *mut Any, p_1: Any, p_2: *mut Any) -> bool {
        call_native!(bool, 0x5CE587FB5A42C8C4u64, p_0, p_1, p_2)
    } // 0x5CE587FB5A42C8C4 0xC5B7E685 b323
    pub unsafe fn leaderboards2_read_by_score_int(p_0: *mut Any, p_1: Any, p_2: Any) -> bool {
        call_native!(bool, 0x7EEC7E4F6984A16Au64, p_0, p_1, p_2)
    } // 0x7EEC7E4F6984A16A 0xAC020C18 b323
    pub unsafe fn leaderboards2_read_by_score_float(p_0: *mut Any, p_1: f32, p_2: Any) -> bool {
        call_native!(bool, 0xE662C8B759D08F3Cu64, p_0, p_1, p_2)
    } // 0xE662C8B759D08F3C 0xC678B29F b323
    pub unsafe fn leaderboards2_read_rank_prediction(
        p_0: *mut Any,
        p_1: *mut Any,
        p_2: *mut Any,
    ) -> bool {
        call_native!(bool, 0xC38DC1E90D22547Cu64, p_0, p_1, p_2)
    } // 0xC38DC1E90D22547C 0x9BEC3401 b323
    pub unsafe fn leaderboards2_read_by_plaform(
        p_0: *mut Any,
        gamer_handle_csv: *const i8,
        platform_name: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0xF1AE5DCDBFCA2721u64,
            p_0,
            gamer_handle_csv,
            platform_name
        )
    } // 0xF1AE5DCDBFCA2721  b323
    pub unsafe fn leaderboards2_read_get_row_data_start(p_0: *mut Any) -> bool {
        call_native!(bool, 0xA0F93D5465B3094Du64, p_0)
    } // 0xA0F93D5465B3094D 0xC977D6E2 b323
    pub unsafe fn leaderboards2_read_get_row_data_end() {
        call_native!(Void, 0x71B008056E5692D6u64);
    } // 0x71B008056E5692D6 0xF2DB6A82 b323
    pub unsafe fn leaderboards2_read_get_row_data_info(p_0: Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0x34770B9CE0E03B91u64, p_0, p_1)
    } // 0x34770B9CE0E03B91 0x766A74FE b323
    pub unsafe fn leaderboards2_read_get_row_data_int(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x88578F6EC36B4A3Au64, p_0, p_1)
    } // 0x88578F6EC36B4A3A 0x6B90E730 b323
    pub unsafe fn leaderboards2_read_get_row_data_float(p_0: Any, p_1: Any) -> f32 {
        call_native!(f32, 0x38491439B6BA7F7Du64, p_0, p_1)
    } // 0x38491439B6BA7F7D 0x509A286F b323
    pub unsafe fn leaderboards2_write_data(p_0: *mut Any) -> bool {
        call_native!(bool, 0xAE2206545888AE49u64, p_0)
    } // 0xAE2206545888AE49 0x5F9DF634 b323
    pub unsafe fn leaderboards_write_add_column(p_0: Any, p_1: Any, p_2: f32) {
        call_native!(Void, 0x0BCA1D2C47B0D269u64, p_0, p_1, p_2);
    } // 0x0BCA1D2C47B0D269 0x7524E27B b323
    pub unsafe fn leaderboards_write_add_column_long(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x2E65248609523599u64, p_0, p_1, p_2);
    } // 0x2E65248609523599 0x1C5CCC3A b323
    pub unsafe fn leaderboards_cache_data_row(p_0: *mut Any) -> bool {
        call_native!(bool, 0xB9BB18E2C40142EDu64, p_0)
    } // 0xB9BB18E2C40142ED 0x44F7D82B b323
    pub unsafe fn leaderboards_clear_cache_data() {
        call_native!(Void, 0xD4B02A6B476E1FDCu64);
    } // 0xD4B02A6B476E1FDC 0x87F498C1 b323
    pub unsafe fn leaderboards_clear_cache_data_id(p_0: Any) {
        call_native!(Void, 0x8EC74CEB042E7CFFu64, p_0);
    } // 0x8EC74CEB042E7CFF 0x88AE9667 b323
    pub unsafe fn leaderboards_get_cache_exists(p_0: Any) -> bool {
        call_native!(bool, 0x9C51349BE6CDFE2Cu64, p_0)
    } // 0x9C51349BE6CDFE2C 0xFC8A71F3 b323
    pub unsafe fn leaderboards_get_cache_time(p_0: Any) -> i32 {
        call_native!(i32, 0xF04C1C27DA35F6C8u64, p_0)
    } // 0xF04C1C27DA35F6C8 0xEDF02302 b323
    pub unsafe fn leaderboards_get_cache_number_of_rows(p_0: Any) -> i32 {
        call_native!(i32, 0x58A651CD201D89ADu64, p_0)
    } // 0x58A651CD201D89AD 0xCE7CB520 b323
    pub unsafe fn leaderboards_get_cache_data_row(p_0: Any, p_1: Any, p_2: *mut Any) -> bool {
        call_native!(bool, 0x9120E8DBA3D69273u64, p_0, p_1, p_2)
    } // 0x9120E8DBA3D69273 0xA11289EC b323
    pub unsafe fn presence_event_updatestat_int(stat_hash: Hash, value: i32, p_2: i32) {
        call_native!(Void, 0x11FF1C80276097EDu64, stat_hash, value, p_2);
    } // 0x11FF1C80276097ED 0x4AC39C6C b323
    pub unsafe fn presence_event_updatestat_float(stat_hash: Hash, value: f32, p_2: i32) {
        call_native!(Void, 0x30A6614C1F7799B8u64, stat_hash, value, p_2);
    } // 0x30A6614C1F7799B8 0x3E69E7C3 b323
    pub unsafe fn presence_event_updatestat_int_with_string(
        stat_hash: Hash,
        value: i32,
        p_2: i32,
        string: *const i8,
    ) {
        call_native!(Void, 0x6483C25849031C4Fu64, stat_hash, value, p_2, string);
    } // 0x6483C25849031C4F 0x2FFD2FA5 b323
    pub unsafe fn get_player_has_driven_all_vehicles() -> bool {
        call_native!(bool, 0x5EAD2BF6484852E4u64)
    } // 0x5EAD2BF6484852E4 0x23D70C39 b323
    pub unsafe fn set_has_posted_all_vehicles_driven() {
        call_native!(Void, 0xC141B8917E0017ECu64);
    } // 0xC141B8917E0017EC 0x0AD43306 b323
    pub unsafe fn set_profile_setting_prologue_complete() {
        call_native!(Void, 0xB475F27C6A994D65u64);
    } // 0xB475F27C6A994D65 0xC7DE5C30 b323
    pub unsafe fn set_profile_setting_sp_chop_mission_complete() {
        call_native!(Void, 0xC67E2DA1CBE759E2u64);
    } // 0xC67E2DA1CBE759E2  b1734
    pub unsafe fn set_profile_setting_creator_races_done(value: i32) {
        call_native!(Void, 0xF1A1803D3476F215u64, value);
    } // 0xF1A1803D3476F215 0xA3DAC790 b323
    pub unsafe fn set_profile_setting_creator_dm_done(value: i32) {
        call_native!(Void, 0x38BAAA5DD4C9D19Fu64, value);
    } // 0x38BAAA5DD4C9D19F 0x726FAE66 b323
    pub unsafe fn set_profile_setting_creator_ctf_done(value: i32) {
        call_native!(Void, 0x55384438FC55AD8Eu64, value);
    } // 0x55384438FC55AD8E 0xF03895A4 b323
    pub unsafe fn set_job_activity_id_started(p_0: Any, character_slot: i32) {
        call_native!(Void, 0x723C1CE13FBFDB67u64, p_0, character_slot);
    } // 0x723C1CE13FBFDB67 0x4C39CF10 b323
    pub unsafe fn set_freemode_prologue_done(p_0: Any, character_slot: i32) {
        call_native!(Void, 0x0D01D20616FC73FBu64, p_0, character_slot);
    } // 0x0D01D20616FC73FB 0x2180AE13 b323
    pub unsafe fn set_freemode_strand_progression_status(profile_setting: i32, setting_value: i32) {
        call_native!(Void, 0x79D310A861697CC9u64, profile_setting, setting_value);
    } // 0x79D310A861697CC9  b2699
    pub unsafe fn stat_network_increment_on_suicide(p_0: Any, p_1: f32) {
        call_native!(Void, 0x428EAF89E24F6C36u64, p_0, p_1);
    } // 0x428EAF89E24F6C36 0xEE292B91 b323
    pub unsafe fn stat_set_cheat_is_active() {
        call_native!(Void, 0x047CBED6F6F8B63Cu64);
    } // 0x047CBED6F6F8B63C 0xA063CABD b323
    pub unsafe fn leaderboards2_write_data_for_event_type(p_0: *mut Any, p_1: *mut Any) -> bool {
        call_native!(bool, 0xC980E62E33DF1D5Cu64, p_0, p_1)
    } // 0xC980E62E33DF1D5C 0x62C19A3D b323
    pub unsafe fn force_cloud_mp_stats_download_and_overwrite_local_save() {
        call_native!(Void, 0x6F361B8889A792A3u64);
    } // 0x6F361B8889A792A3 0x3B4EF322 b323
    pub unsafe fn stat_migrate_clear_for_restart() {
        call_native!(Void, 0xC847B43F369AC0B5u64);
    } // 0xC847B43F369AC0B5  b323
    pub unsafe fn stat_migrate_savegame_start(platform_name: *const i8) -> bool {
        call_native!(bool, 0xA5C80D8E768A9E66u64, platform_name)
    } // 0xA5C80D8E768A9E66  b323
    pub unsafe fn stat_migrate_savegame_get_status() -> i32 {
        call_native!(i32, 0x9A62EC95AE10E011u64)
    } // 0x9A62EC95AE10E011  b323
    pub unsafe fn stat_migrate_check_already_done() -> bool {
        call_native!(bool, 0x4C89FE2BDEB3F169u64)
    } // 0x4C89FE2BDEB3F169  b323
    pub unsafe fn stat_migrate_check_start() -> bool {
        call_native!(bool, 0xC6E0E2616A7576BBu64)
    } // 0xC6E0E2616A7576BB  b323
    pub unsafe fn stat_migrate_check_get_is_platform_available(p_0: i32) -> i32 {
        call_native!(i32, 0x5BD5F255321C4AAFu64, p_0)
    } // 0x5BD5F255321C4AAF  b323
    pub unsafe fn stat_migrate_check_get_platform_status(p_0: i32, p_1: *mut Any) -> i32 {
        call_native!(i32, 0xDEAAF77EB3687E97u64, p_0, p_1)
    } // 0xDEAAF77EB3687E97  b323
    pub unsafe fn stat_get_save_migration_status(data: *mut Any) -> i32 {
        call_native!(i32, 0x886913BBEACA68C1u64, data)
    } // 0x886913BBEACA68C1 0xE3F0D62D b323
    pub unsafe fn stat_save_migration_cancel_pending_operation() -> bool {
        call_native!(bool, 0x4FEF53183C3C6414u64)
    } // 0x4FEF53183C3C6414  b323
    pub unsafe fn stat_get_cancel_save_migration_status() -> i32 {
        call_native!(i32, 0x567384DFA67029E6u64)
    } // 0x567384DFA67029E6  b323
    pub unsafe fn stat_save_migration_consume_content(
        content_id: Hash,
        src_platform: *const i8,
        src_gamer_handle: *const i8,
    ) -> bool {
        call_native!(
            bool,
            0x3270F67EED31FBC1u64,
            content_id,
            src_platform,
            src_gamer_handle
        )
    } // 0x3270F67EED31FBC1  b323
    pub unsafe fn stat_get_save_migration_consume_content_status(p_0: *mut i32) -> i32 {
        call_native!(i32, 0xCE5AA445ABA8DEE0u64, p_0)
    } // 0xCE5AA445ABA8DEE0  b323
    pub unsafe fn stat_enable_stats_tracking() {
        call_native!(Void, 0x98E2BC1CA26287C3u64);
    } // 0x98E2BC1CA26287C3  b323
    pub unsafe fn stat_disable_stats_tracking() {
        call_native!(Void, 0x629526ABA383BCAAu64);
    } // 0x629526ABA383BCAA  b323
    pub unsafe fn stat_is_stats_tracking_enabled() -> bool {
        call_native!(bool, 0xBE3DB208333D9844u64)
    } // 0xBE3DB208333D9844  b463
    pub unsafe fn stat_start_record_stat(stat_type: i32, value_type: i32) -> bool {
        call_native!(bool, 0x33D72899E24C3365u64, stat_type, value_type)
    } // 0x33D72899E24C3365  b463
    pub unsafe fn stat_stop_record_stat() -> bool {
        call_native!(bool, 0xA761D4AC6115623Du64)
    } // 0xA761D4AC6115623D  b463
    pub unsafe fn stat_get_recorded_value(value: *mut f32) -> bool {
        call_native!(bool, 0xF11F01D98113536Au64, value)
    } // 0xF11F01D98113536A  b463
    pub unsafe fn stat_is_recording_stat() -> bool {
        call_native!(bool, 0x8B9CDBD6C566C38Cu64)
    } // 0x8B9CDBD6C566C38C  b944
    pub unsafe fn stat_get_current_near_miss_nocrash_precise() -> i32 {
        call_native!(i32, 0xE8853FBCE7D8D0D6u64)
    } // 0xE8853FBCE7D8D0D6  b463
    pub unsafe fn stat_get_current_rear_wheel_distance() -> f32 {
        call_native!(f32, 0xA943FD1722E11EFDu64)
    } // 0xA943FD1722E11EFD  b463
    pub unsafe fn stat_get_current_front_wheel_distance() -> f32 {
        call_native!(f32, 0x84A810B375E69C0Eu64)
    } // 0x84A810B375E69C0E  b463
    pub unsafe fn stat_get_current_jump_distance() -> f32 {
        call_native!(f32, 0x9EC8858184CD253Au64)
    } // 0x9EC8858184CD253A  b463
    pub unsafe fn stat_get_current_drive_nocrash_distance() -> f32 {
        call_native!(f32, 0xBA9749CC94C1FD85u64)
    } // 0xBA9749CC94C1FD85  b463
    pub unsafe fn stat_get_current_speed() -> f32 {
        call_native!(f32, 0x55A8BECAF28A4EB7u64)
    } // 0x55A8BECAF28A4EB7  b463
    pub unsafe fn stat_get_current_driving_reverse_distance() -> f32 {
        call_native!(f32, 0x32CAC93C9DE73D32u64)
    } // 0x32CAC93C9DE73D32  b463
    pub unsafe fn stat_get_current_skydiving_distance() -> f32 {
        call_native!(f32, 0xAFF47709F1D5DCCEu64)
    } // 0xAFF47709F1D5DCCE  b463
    pub unsafe fn stat_get_challenge_flying_dist() -> f32 {
        call_native!(f32, 0x6E0A5253375C4584u64)
    } // 0x6E0A5253375C4584  b463
    pub unsafe fn stat_get_flying_altitude(out_value: *mut f32) -> bool {
        call_native!(bool, 0x1A8EA222F9C67DBBu64, out_value)
    } // 0x1A8EA222F9C67DBB  b463
    pub unsafe fn stat_is_player_vehicle_above_ocean() -> bool {
        call_native!(bool, 0xF9F2922717B819ECu64)
    } // 0xF9F2922717B819EC  b505
    pub unsafe fn stat_get_vehicle_bail_distance() -> f32 {
        call_native!(f32, 0x0B8B7F74BF061C6Du64)
    } // 0x0B8B7F74BF061C6D  b463
    pub unsafe fn stat_rollback_save_migration() -> bool {
        call_native!(bool, 0xB3DA2606774A8E2Du64)
    } // 0xB3DA2606774A8E2D  b323
    pub unsafe fn set_has_specialedition_content(value: i32) {
        call_native!(Void, 0xDAC073C7901F9E15u64, value);
    } // 0xDAC073C7901F9E15  b323
    pub unsafe fn set_save_migration_transaction_id_warning(transaction_id: i32) {
        call_native!(Void, 0xF6792800AC95350Du64, transaction_id);
    } // 0xF6792800AC95350D  b323
    pub unsafe fn get_boss_goon_uuid(character_slot: i32, p_1: Any, p_2: Any) {
        call_native!(Void, 0x6BC0ACD0673ACEBEu64, character_slot, p_1, p_2);
    } // 0x6BC0ACD0673ACEBE  b573
    pub unsafe fn playstats_bw_bossonbossdeathmatch(p_0: Any) {
        call_native!(Void, 0x8D8ADB562F09A245u64, p_0);
    } // 0x8D8ADB562F09A245  b573
    pub unsafe fn playstats_bw_yatchattack(p_0: Any) {
        call_native!(Void, 0xD1A1EE3B4FA8E760u64, p_0);
    } // 0xD1A1EE3B4FA8E760  b573
    pub unsafe fn playstats_bw_hunt_the_boss(p_0: Any) {
        call_native!(Void, 0x88087EE1F28024AEu64, p_0);
    } // 0x88087EE1F28024AE  b573
    pub unsafe fn playstats_bw_sightseer(p_0: Any) {
        call_native!(Void, 0xFCC228E07217FCACu64, p_0);
    } // 0xFCC228E07217FCAC  b573
    pub unsafe fn playstats_bw_assault(p_0: Any) {
        call_native!(Void, 0x678F86D8FC040BDBu64, p_0);
    } // 0x678F86D8FC040BDB  b573
    pub unsafe fn playstats_bw_belly_of_the_beast(p_0: Any) {
        call_native!(Void, 0xA6F54BB2FFCA35EAu64, p_0);
    } // 0xA6F54BB2FFCA35EA  b573
    pub unsafe fn playstats_bw_head_hunter(p_0: Any) {
        call_native!(Void, 0x5FF2C33B13A02A11u64, p_0);
    } // 0x5FF2C33B13A02A11  b757
    pub unsafe fn playstats_bw_fragile_goods(p_0: Any) {
        call_native!(Void, 0x282B6739644F4347u64, p_0);
    } // 0x282B6739644F4347  b757
    pub unsafe fn playstats_bw_air_freight(p_0: Any) {
        call_native!(Void, 0xF06A6F41CB445443u64, p_0);
    } // 0xF06A6F41CB445443  b757
    pub unsafe fn playstats_bc_car_jacking(p_0: Any) {
        call_native!(Void, 0x7B18DA61F6BAE9D5u64, p_0);
    } // 0x7B18DA61F6BAE9D5  b573
    pub unsafe fn playstats_bc_smash_and_grab(p_0: Any) {
        call_native!(Void, 0x06EAF70AE066441Eu64, p_0);
    } // 0x06EAF70AE066441E  b573
    pub unsafe fn playstats_bc_protection_racket(p_0: Any) {
        call_native!(Void, 0x14EDA9EE27BD1626u64, p_0);
    } // 0x14EDA9EE27BD1626  b573
    pub unsafe fn playstats_bc_most_wanted(p_0: Any) {
        call_native!(Void, 0x930F504203F561C9u64, p_0);
    } // 0x930F504203F561C9  b573
    pub unsafe fn playstats_bc_finders_keepers(p_0: Any) {
        call_native!(Void, 0xE3261D791EB44ACBu64, p_0);
    } // 0xE3261D791EB44ACB  b573
    pub unsafe fn playstats_bc_point_to_point(p_0: Any) {
        call_native!(Void, 0x73001E34F85137F8u64, p_0);
    } // 0x73001E34F85137F8  b573
    pub unsafe fn playstats_bc_cashing(p_0: Any) {
        call_native!(Void, 0x53CAE13E9B426993u64, p_0);
    } // 0x53CAE13E9B426993  b757
    pub unsafe fn playstats_bc_salvage(p_0: Any) {
        call_native!(Void, 0x7D36291161859389u64, p_0);
    } // 0x7D36291161859389  b757
    pub unsafe fn playstats_spent_pi_custom_loadout(amount: i32) {
        call_native!(Void, 0xBE509B0A3693DE8Bu64, amount);
    } // 0xBE509B0A3693DE8B  b757
    pub unsafe fn playstats_buy_contraband_mission(data: *mut Any) {
        call_native!(Void, 0xD6781E42755531F7u64, data);
    } // 0xD6781E42755531F7  b757
    pub unsafe fn playstats_sell_contraband_mission(data: *mut Any) {
        call_native!(Void, 0xC729991A9065376Eu64, data);
    } // 0xC729991A9065376E  b757
    pub unsafe fn playstats_defend_contraband_mission(data: *mut Any) {
        call_native!(Void, 0x2605663BD4F23B5Du64, data);
    } // 0x2605663BD4F23B5D  b757
    pub unsafe fn playstats_recover_contraband_mission(data: *mut Any) {
        call_native!(Void, 0x04D90BA8207ADA2Du64, data);
    } // 0x04D90BA8207ADA2D  b757
    pub unsafe fn playstats_hit_contraband_destroy_limit(p_0: Any) {
        call_native!(Void, 0x60EEDC12AF66E846u64, p_0);
    } // 0x60EEDC12AF66E846  b757
    pub unsafe fn start_being_boss(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x3EBEAC6C3F81F6BDu64, p_0, p_1, p_2);
    } // 0x3EBEAC6C3F81F6BD  b573
    pub unsafe fn start_being_goon(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x96E6D5150DBF1C09u64, p_0, p_1, p_2);
    } // 0x96E6D5150DBF1C09  b573
    pub unsafe fn end_being_boss(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xA3C53804BDB68ED2u64, p_0, p_1, p_2);
    } // 0xA3C53804BDB68ED2  b573
    pub unsafe fn end_being_goon(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x6BCCF9948492FD85u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x6BCCF9948492FD85  b573
    pub unsafe fn hired_limo(p_0: Any, p_1: Any) {
        call_native!(Void, 0x792271AB35C356A4u64, p_0, p_1);
    } // 0x792271AB35C356A4  b573
    pub unsafe fn order_boss_vehicle(p_0: Any, p_1: Any, vehicle_hash: Hash) {
        call_native!(Void, 0xCEA553E35C2246E1u64, p_0, p_1, vehicle_hash);
    } // 0xCEA553E35C2246E1  b573
    pub unsafe fn change_uniform(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xD1C9B92BDD3F151Du64, p_0, p_1, p_2);
    } // 0xD1C9B92BDD3F151D  b573
    pub unsafe fn change_goon_looking_for_work(p_0: Any) {
        call_native!(Void, 0x44919CC079BB60BFu64, p_0);
    } // 0x44919CC079BB60BF  b573
    pub unsafe fn send_metric_ghosting_to_player(p_0: Any) {
        call_native!(Void, 0x7033EEFD9B28088Eu64, p_0);
    } // 0x7033EEFD9B28088E  b678
    pub unsafe fn send_metric_vip_poach(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xAA525DFF66BB82F5u64, p_0, p_1, p_2);
    } // 0xAA525DFF66BB82F5  b757
    pub unsafe fn send_metric_punish_bodyguard(p_0: Any) {
        call_native!(Void, 0x015B03EE1C43E6ECu64, p_0);
    } // 0x015B03EE1C43E6EC  b757
    pub unsafe fn playstats_start_tracking_stunts() {
        call_native!(Void, 0x928DBFB892638EF3u64);
    } // 0x928DBFB892638EF3  b791
    pub unsafe fn playstats_stop_tracking_stunts() {
        call_native!(Void, 0x8A800DACCC0DA55Du64);
    } // 0x8A800DACCC0DA55D  b791
    pub unsafe fn playstats_mission_ended(p_0: Any) {
        call_native!(Void, 0xBF371CD2B64212FDu64, p_0);
    } // 0xBF371CD2B64212FD  b877
    pub unsafe fn playstats_impexp_mission_ended(p_0: Any) {
        call_native!(Void, 0x7D8BA05688AD64C7u64, p_0);
    } // 0x7D8BA05688AD64C7  b944
    pub unsafe fn playstats_change_mc_role(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        role: i32,
        p_5: i32,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x0B565B0AAE56A0E8u64,
            p_0,
            p_1,
            p_2,
            p_3,
            role,
            p_5,
            p_6
        );
    } // 0x0B565B0AAE56A0E8  b877
    pub unsafe fn playstats_change_mc_outfit(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x28ECB8AC2F607DB2u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x28ECB8AC2F607DB2  b877
    pub unsafe fn playstats_switch_mc_emblem(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x0A50D2604E05CB94u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x0A50D2604E05CB94  b877
    pub unsafe fn playstats_mc_request_bike(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xCC25A4553DFBF9EAu64, p_0, p_1, p_2, p_3, p_4);
    } // 0xCC25A4553DFBF9EA  b877
    pub unsafe fn playstats_mc_killed_rival_mc_member(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0xF534D94DFA2EAD26u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xF534D94DFA2EAD26  b877
    pub unsafe fn playstats_abandoned_mc(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0xD558BEC0BBA7E8D2u64, p_0, p_1, p_2, p_3, p_4);
    } // 0xD558BEC0BBA7E8D2  b877
    pub unsafe fn playstats_earned_mc_points(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x501478855A6074CEu64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x501478855A6074CE  b877
    pub unsafe fn playstats_mc_formation_ends(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x03C2EEBB04B3FB72u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0x03C2EEBB04B3FB72  b877
    pub unsafe fn playstats_mc_clubhouse_activity(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0x8989CBD7B4E82534u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7
        );
    } // 0x8989CBD7B4E82534  b877
    pub unsafe fn playstats_rival_behavior(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
    ) {
        call_native!(
            Void,
            0x27AA1C973CACFE63u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0x27AA1C973CACFE63  b944
    pub unsafe fn playstats_copy_rank_into_new_slot(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0xB7257BA2550EA10Au64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0xB7257BA2550EA10A  b877
    pub unsafe fn playstats_dupe_detected(data: *mut Any) {
        call_native!(Void, 0x848B66100EE33B05u64, data);
    } // 0x848B66100EE33B05  b1011
    pub unsafe fn playstats_ban_alert(p_0: i32) {
        call_native!(Void, 0x516FC96EB88EEFE5u64, p_0);
    } // 0x516FC96EB88EEFE5  b1011
    pub unsafe fn playstats_gunrunning_mission_ended(data: *mut Any) {
        call_native!(Void, 0x0EACDF8487D5155Au64, data);
    } // 0x0EACDF8487D5155A  b1103
    pub unsafe fn playstats_gunrunning_rnd(p_0: Any) {
        call_native!(Void, 0xDAF80797FC534BECu64, p_0);
    } // 0xDAF80797FC534BEC  b1103
    pub unsafe fn playstats_business_battle_ended(p_0: Any) {
        call_native!(Void, 0x316DB59CD14C1774u64, p_0);
    } // 0x316DB59CD14C1774  b1493
    pub unsafe fn playstats_warehouse_mission_ended(p_0: Any) {
        call_native!(Void, 0x2D7A9B577E72385Eu64, p_0);
    } // 0x2D7A9B577E72385E  b1493
    pub unsafe fn playstats_nightclub_mission_ended(p_0: Any) {
        call_native!(Void, 0x830C3A44EB3F2CF9u64, p_0);
    } // 0x830C3A44EB3F2CF9  b1493
    pub unsafe fn playstats_dj_usage(p_0: Any, p_1: Any) {
        call_native!(Void, 0xB26F670685631727u64, p_0, p_1);
    } // 0xB26F670685631727  b1493
    pub unsafe fn playstats_minigame_usage(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xC14BD9F5337219B2u64, p_0, p_1, p_2);
    } // 0xC14BD9F5337219B2  b1493
    pub unsafe fn playstats_stone_hatchet_ended(data: *mut Any) {
        call_native!(Void, 0x35E39E5570358630u64, data);
    } // 0x35E39E5570358630  b1493
    pub unsafe fn playstats_smuggler_mission_ended(data: *mut Any) {
        call_native!(Void, 0x320C35147D5B5DDDu64, data);
    } // 0x320C35147D5B5DDD  b1180
    pub unsafe fn playstats_fm_heist_prep_ended(data: *mut Any) {
        call_native!(Void, 0xD8AFB345A9C5CCBBu64, data);
    } // 0xD8AFB345A9C5CCBB  b1290
    pub unsafe fn playstats_instanced_heist_ended(data: *mut Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x1E1497D0D2108115u64, data, p_1, p_2, p_3);
    } // 0x1E1497D0D2108115  b1290
    pub unsafe fn playstats_dar_checkpoint(data: *mut Any) {
        call_native!(Void, 0x0BC254FF3A911501u64, data);
    } // 0x0BC254FF3A911501  b1290
    pub unsafe fn playstats_enter_session_pack(data: *mut Any) {
        call_native!(Void, 0x878FF156D36E9956u64, data);
    } // 0x878FF156D36E9956  b1290
    pub unsafe fn playstats_drone_usage(p_0: i32, p_1: i32, p_2: i32) {
        call_native!(Void, 0x66C7BB2416ED3FCEu64, p_0, p_1, p_2);
    } // 0x66C7BB2416ED3FCE  b1493
    pub unsafe fn playstats_spin_wheel(p_0: i32, p_1: i32, p_2: i32, p_3: i32) {
        call_native!(Void, 0x6731DE84A38BFAD0u64, p_0, p_1, p_2, p_3);
    } // 0x6731DE84A38BFAD0  b1604
    pub unsafe fn playstats_arena_wars_spectator(p_0: i32, p_1: i32, p_2: i32, p_3: i32, p_4: i32) {
        call_native!(Void, 0x6F4F599753F8200Au64, p_0, p_1, p_2, p_3, p_4);
    } // 0x6F4F599753F8200A  b1604
    pub unsafe fn playstats_arena_wars_ended(data: *mut Any) {
        call_native!(Void, 0xB479D9F0D48A1BC5u64, data);
    } // 0xB479D9F0D48A1BC5  b1604
    pub unsafe fn playstats_switch_passive_mode(p_0: bool, p_1: i32, p_2: i32, p_3: i32) {
        call_native!(Void, 0x35EEC6C2BC821A71u64, p_0, p_1, p_2, p_3);
    } // 0x35EEC6C2BC821A71  b1734
    pub unsafe fn playstats_collectible_picked_up(
        p_0: i32,
        object_hash: Hash,
        p_2: Any,
        p_3: Any,
        money_amount: i32,
        rp_amount: i32,
        chips_amount: i32,
        p_7: Any,
        p_8: i32,
        p_9: Any,
        p_1_0: Any,
    ) {
        call_native!(
            Void,
            0xCD0A8A9338681CF2u64,
            p_0,
            object_hash,
            p_2,
            p_3,
            money_amount,
            rp_amount,
            chips_amount,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0xCD0A8A9338681CF2  b1734
    pub unsafe fn playstats_casino_story_mission_ended(p_0: Any, p_1: Any) {
        call_native!(Void, 0xFCCCAC2BD3C1F180u64, p_0, p_1);
    } // 0xFCCCAC2BD3C1F180  b1734
    pub unsafe fn playstats_casino_chip(p_0: Any) {
        call_native!(Void, 0x0999F3F090EC5012u64, p_0);
    } // 0x0999F3F090EC5012  b1734
    pub unsafe fn playstats_casino_roulette(p_0: Any) {
        call_native!(Void, 0x95101C443A84E7F1u64, p_0);
    } // 0x95101C443A84E7F1  b1734
    pub unsafe fn playstats_casino_blackjack(p_0: Any) {
        call_native!(Void, 0x3EAE97309727E7ADu64, p_0);
    } // 0x3EAE97309727E7AD  b1734
    pub unsafe fn playstats_casino_three_card_poker(p_0: Any) {
        call_native!(Void, 0xF740FB339D471C35u64, p_0);
    } // 0xF740FB339D471C35  b1734
    pub unsafe fn playstats_casino_slot_machine(p_0: Any) {
        call_native!(Void, 0xEF5EC67D392B830Au64, p_0);
    } // 0xEF5EC67D392B830A  b1734
    pub unsafe fn playstats_casino_inside_track(p_0: Any) {
        call_native!(Void, 0x049F059625058A86u64, p_0);
    } // 0x049F059625058A86  b1734
    pub unsafe fn playstats_casino_lucky_seven(p_0: Any) {
        call_native!(Void, 0x0C432C1435F5E4FAu64, p_0);
    } // 0x0C432C1435F5E4FA  b1734
    pub unsafe fn playstats_casino_roulette_light(p_0: Any) {
        call_native!(Void, 0x6572ABA3DE1197FCu64, p_0);
    } // 0x6572ABA3DE1197FC  b1734
    pub unsafe fn playstats_casino_blackjack_light(p_0: Any) {
        call_native!(Void, 0xD5451C7BF151EB6Fu64, p_0);
    } // 0xD5451C7BF151EB6F  b1734
    pub unsafe fn playstats_casino_three_card_poker_light(p_0: Any) {
        call_native!(Void, 0xC9001364B4388F22u64, p_0);
    } // 0xC9001364B4388F22  b1734
    pub unsafe fn playstats_casino_slot_machine_light(p_0: Any) {
        call_native!(Void, 0xE60054A0FAE8227Fu64, p_0);
    } // 0xE60054A0FAE8227F  b1734
    pub unsafe fn playstats_casino_inside_track_light(p_0: Any) {
        call_native!(Void, 0x23A3CBCD50D54E47u64, p_0);
    } // 0x23A3CBCD50D54E47  b1734
    pub unsafe fn playstats_arcade_game(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x533A7D1EA58DF958u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0x533A7D1EA58DF958  b1734
    pub unsafe fn playstats_arcade_love_match(p_0: Any, p_1: Any) {
        call_native!(Void, 0x4FCDBD3F0A813C25u64, p_0, p_1);
    } // 0x4FCDBD3F0A813C25  b1868
    pub unsafe fn playstats_freemode_casino_mission_ended(data: *mut Any) {
        call_native!(Void, 0x1A0D4A6C336B7BC5u64, data);
    } // 0x1A0D4A6C336B7BC5  b1734
    pub unsafe fn playstats_heist3_drone(p_0: Any) {
        call_native!(Void, 0xDFBD93BF2943E29Bu64, p_0);
    } // 0xDFBD93BF2943E29B  b1868
    pub unsafe fn playstats_heist3_hack(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0x92FC0EEDFAC04A14u64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0x92FC0EEDFAC04A14  b1868
    pub unsafe fn playstats_npc_phone(p_0: *mut Any) {
        call_native!(Void, 0x0077F15613D36993u64, p_0);
    } // 0x0077F15613D36993  b1868
    pub unsafe fn playstats_arcade_cabinet(p_0: Any) {
        call_native!(Void, 0xF9096193DF1F99D4u64, p_0);
    } // 0xF9096193DF1F99D4  b1868
    pub unsafe fn playstats_heist3_finale(p_0: Any) {
        call_native!(Void, 0x2E0259BABC27A327u64, p_0);
    } // 0x2E0259BABC27A327  b1868
    pub unsafe fn playstats_heist3_prep(p_0: Any) {
        call_native!(Void, 0x53C31853EC9531FFu64, p_0);
    } // 0x53C31853EC9531FF  b1868
    pub unsafe fn playstats_master_control(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x810B5FCC52EC7FF0u64, p_0, p_1, p_2, p_3);
    } // 0x810B5FCC52EC7FF0  b1868
    pub unsafe fn playstats_quit_mode(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x5BF29846C6527C54u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x5BF29846C6527C54  b1868
    pub unsafe fn playstats_mission_vote(p_0: Any) {
        call_native!(Void, 0xC03FAB2C2F92289Bu64, p_0);
    } // 0xC03FAB2C2F92289B  b1868
    pub unsafe fn playstats_njvs_vote(p_0: Any) {
        call_native!(Void, 0x5CDAED54B34B0ED0u64, p_0);
    } // 0x5CDAED54B34B0ED0  b1868
    pub unsafe fn playstats_kill_yourself() {
        call_native!(Void, 0x4AFF7E02E485E92Bu64);
    } // 0x4AFF7E02E485E92B  b1868
    pub unsafe fn playstats_fm_mission_end(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x46A70777BE6CEAB9u64, p_0, p_1, p_2, p_3);
    } // 0x46A70777BE6CEAB9  b2545
    pub unsafe fn playstats_heist4_prep(p_0: Any) {
        call_native!(Void, 0xDFCDB14317A9B361u64, p_0);
    } // 0xDFCDB14317A9B361  b2189
    pub unsafe fn playstats_heist4_finale(p_0: Any) {
        call_native!(Void, 0xC1E963C58664B556u64, p_0);
    } // 0xC1E963C58664B556  b2189
    pub unsafe fn playstats_heist4_hack(p_0: Any, p_1: Any, p_2: Any, p_3: Any, p_4: Any) {
        call_native!(Void, 0x2FA3173480008493u64, p_0, p_1, p_2, p_3, p_4);
    } // 0x2FA3173480008493  b2189
    pub unsafe fn playstats_sub_weap(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xD4367D310F079DB0u64, p_0, p_1, p_2, p_3);
    } // 0xD4367D310F079DB0  b2189
    pub unsafe fn playstats_fast_trvl(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
        p_9: Any,
        p_1_0: Any,
    ) {
        call_native!(
            Void,
            0x4DC416F246A41FC8u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9,
            p_1_0
        );
    } // 0x4DC416F246A41FC8  b2189
    pub unsafe fn playstats_hub_entry(p_0: Any) {
        call_native!(Void, 0x2818FF6638CB09DEu64, p_0);
    } // 0x2818FF6638CB09DE  b2189
    pub unsafe fn playstats_dj_mission_ended(p_0: Any) {
        call_native!(Void, 0xD6CA58B3B53A0F22u64, p_0);
    } // 0xD6CA58B3B53A0F22  b2189
    pub unsafe fn playstats_robbery_prep(p_0: Any) {
        call_native!(Void, 0x1A67DFBF1F5C3835u64, p_0);
    } // 0x1A67DFBF1F5C3835  b2372
    pub unsafe fn playstats_robbery_finale(p_0: Any) {
        call_native!(Void, 0xBBA55BE9AAAABF44u64, p_0);
    } // 0xBBA55BE9AAAABF44  b2372
    pub unsafe fn playstats_extra_event(p_0: Any) {
        call_native!(Void, 0xFA5B74BAB8A7EF99u64, p_0);
    } // 0xFA5B74BAB8A7EF99  b2372
    pub unsafe fn playstats_carclub_points(p_0: Any) {
        call_native!(Void, 0xFF14D6FEEC507BBEu64, p_0);
    } // 0xFF14D6FEEC507BBE  b2372
    pub unsafe fn playstats_carclub_challenge(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x1187CB58D7F3BED7u64, p_0, p_1, p_2, p_3);
    } // 0x1187CB58D7F3BED7  b2372
    pub unsafe fn playstats_carclub_prize(p_0: i32, vehicle_model: Hash) {
        call_native!(Void, 0x69C922B677621428u64, p_0, vehicle_model);
    } // 0x69C922B677621428  b2372
    pub unsafe fn playstats_award_nav(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0x70F52471E758EBAEu64, p_0, p_1, p_2, p_3);
    } // 0x70F52471E758EBAE  b2545
    pub unsafe fn playstats_inst_mission_end(p_0: Any) {
        call_native!(Void, 0xFEA3F7E83C0610FAu64, p_0);
    } // 0xFEA3F7E83C0610FA  b2545
    pub unsafe fn playstats_hub_exit(p_0: Any) {
        call_native!(Void, 0x5A46ACE5C4661132u64, p_0);
    } // 0x5A46ACE5C4661132  b2545
    pub unsafe fn playstats_veh_del(
        boss_id_1: i32,
        boss_id_2: i32,
        boss_type: i32,
        vehicle_i_d: i32,
        reason: i32,
    ) {
        call_native!(
            Void,
            0x10A691F5756416D0u64,
            boss_id_1,
            boss_id_2,
            boss_type,
            vehicle_i_d,
            reason
        );
    } // 0x10A691F5756416D0  b2944
    pub unsafe fn playstats_inventory(p_0: Any) {
        call_native!(Void, 0x887DAD63CF5B7908u64, p_0);
    } // 0x887DAD63CF5B7908  b2699
    pub unsafe fn _playstats_acid_mission_end(p_0: Any) {
        call_native!(Void, 0x8A23D1324F6B2BACu64, p_0);
    } // 0x8A23D1324F6B2BAC  b2802
    pub unsafe fn _playstats_acid_rnd(p_0: Any) {
        call_native!(Void, 0xCEACCF0550FDC5BAu64, p_0);
    } // 0xCEACCF0550FDC5BA  b2802
    pub unsafe fn _playstats_idle(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0xEC9553A178E8F1D1u64, p_0, p_1, p_2);
    } // 0xEC9553A178E8F1D1  b2802
    pub unsafe fn _playstats_player_style(p_0: Any) {
        call_native!(Void, 0x48FAC5DC7AC6EA99u64, p_0);
    } // 0x48FAC5DC7AC6EA99  b2802
    pub unsafe fn _playstats_random_event(p_0: Any) {
        call_native!(Void, 0x7EA06F970F999394u64, p_0);
    } // 0x7EA06F970F999394  b2944
    pub unsafe fn _playstats_alert(data: *mut Any) {
        call_native!(Void, 0x5649CA22AF74E019u64, data);
    } // 0x5649CA22AF74E019  b3095
    pub unsafe fn _playstats_attrition_stage_end(p_0: Any) {
        call_native!(Void, 0xBD642335A732F1A8u64, p_0);
    } // 0xBD642335A732F1A8  b2944
    pub unsafe fn _playstats_showroom_nav(p_0: Any, p_1: Any, entity: Hash) {
        call_native!(Void, 0x961D4157B9B428DBu64, p_0, p_1, entity);
    } // 0x961D4157B9B428DB  b2944
    pub unsafe fn _playstats_showroom_overview(data: *mut Any) {
        call_native!(Void, 0x151D6C04C9E2742Fu64, data);
    } // 0x151D6C04C9E2742F  b2944
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod streaming {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn load_all_objects_now() {
        call_native!(Void, 0xBD6E84632DD4CB3Fu64);
    } // 0xBD6E84632DD4CB3F 0xC9DBDA90 b323
    pub unsafe fn load_scene(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x4448EB75B4904BDBu64, x, y, z);
    } // 0x4448EB75B4904BDB 0xB72403F5 b323
    pub unsafe fn network_update_load_scene() -> bool {
        call_native!(bool, 0xC4582015556D1C46u64)
    } // 0xC4582015556D1C46 0xC76E023C b323
    pub unsafe fn is_network_loading_scene() -> bool {
        call_native!(bool, 0x41CA5A33160EA4ABu64)
    } // 0x41CA5A33160EA4AB 0x6DCFC021 b323
    pub unsafe fn set_interior_active(interior_i_d: i32, toggle: bool) {
        call_native!(Void, 0xE37B76C387BE28EDu64, interior_i_d, toggle);
    } // 0xE37B76C387BE28ED 0xE1013910 b323
    pub unsafe fn request_model(model: Hash) {
        call_native!(Void, 0x963D27A58DF860ACu64, model);
    } // 0x963D27A58DF860AC 0xFFF1B500 b323
    pub unsafe fn request_menu_ped_model(model: Hash) {
        call_native!(Void, 0xA0261AEF7ACFC51Eu64, model);
    } // 0xA0261AEF7ACFC51E 0x48CEB6B4 b323
    pub unsafe fn has_model_loaded(model: Hash) -> bool {
        call_native!(bool, 0x98A4EB5D89A0C952u64, model)
    } // 0x98A4EB5D89A0C952 0x62BFDB37 b323
    pub unsafe fn request_models_in_room(interior: Interior, room_name: *const i8) {
        call_native!(Void, 0x8A7A40100EDFEC58u64, interior, room_name);
    } // 0x8A7A40100EDFEC58 0x939243FB b323
    pub unsafe fn set_model_as_no_longer_needed(model: Hash) {
        call_native!(Void, 0xE532F5D78798DAABu64, model);
    } // 0xE532F5D78798DAAB 0xAE0F069E b323
    pub unsafe fn is_model_in_cdimage(model: Hash) -> bool {
        call_native!(bool, 0x35B9E0803292B641u64, model)
    } // 0x35B9E0803292B641 0x1094782F b323
    pub unsafe fn is_model_valid(model: Hash) -> bool {
        call_native!(bool, 0xC0296A2EDF545E92u64, model)
    } // 0xC0296A2EDF545E92 0xAF8F8E9D b323
    pub unsafe fn is_model_a_ped(model: Hash) -> bool {
        call_native!(bool, 0x75816577FEA6DAD5u64, model)
    } // 0x75816577FEA6DAD5  b1103
    pub unsafe fn is_model_a_vehicle(model: Hash) -> bool {
        call_native!(bool, 0x19AAC8F07BFEC53Eu64, model)
    } // 0x19AAC8F07BFEC53E 0xFFFC85D4 b323
    pub unsafe fn request_collision_at_coord(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x07503F7948F491A7u64, x, y, z);
    } // 0x07503F7948F491A7 0xCD9805E7 b323
    pub unsafe fn request_collision_for_model(model: Hash) {
        call_native!(Void, 0x923CB32A3B874FCBu64, model);
    } // 0x923CB32A3B874FCB 0x3930C042 b323
    pub unsafe fn has_collision_for_model_loaded(model: Hash) -> bool {
        call_native!(bool, 0x22CCA434E368F03Au64, model)
    } // 0x22CCA434E368F03A 0x41A094F8 b323
    pub unsafe fn request_additional_collision_at_coord(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xC9156DC11411A9EAu64, x, y, z);
    } // 0xC9156DC11411A9EA 0xC2CC1DF2 b323
    pub unsafe fn does_anim_dict_exist(anim_dict: *const i8) -> bool {
        call_native!(bool, 0x2DA49C3B79856961u64, anim_dict)
    } // 0x2DA49C3B79856961 0xCD31C872 b323
    pub unsafe fn request_anim_dict(anim_dict: *const i8) {
        call_native!(Void, 0xD3BD40951412FEF6u64, anim_dict);
    } // 0xD3BD40951412FEF6 0xDCA96950 b323
    pub unsafe fn has_anim_dict_loaded(anim_dict: *const i8) -> bool {
        call_native!(bool, 0xD031A9162D01088Cu64, anim_dict)
    } // 0xD031A9162D01088C 0x05E6763C b323
    pub unsafe fn remove_anim_dict(anim_dict: *const i8) {
        call_native!(Void, 0xF66A602F829E2A06u64, anim_dict);
    } // 0xF66A602F829E2A06 0x0AE050B5 b323
    pub unsafe fn request_anim_set(anim_set: *const i8) {
        call_native!(Void, 0x6EA47DAE7FAD0EEDu64, anim_set);
    } // 0x6EA47DAE7FAD0EED 0x2988B3FC b323
    pub unsafe fn has_anim_set_loaded(anim_set: *const i8) -> bool {
        call_native!(bool, 0xC4EA073D86FB29B0u64, anim_set)
    } // 0xC4EA073D86FB29B0 0x4FFF397D b323
    pub unsafe fn remove_anim_set(anim_set: *const i8) {
        call_native!(Void, 0x16350528F93024B3u64, anim_set);
    } // 0x16350528F93024B3 0xD04A817A b323
    pub unsafe fn request_clip_set(clip_set: *const i8) {
        call_native!(Void, 0xD2A71E1A77418A49u64, clip_set);
    } // 0xD2A71E1A77418A49 0x546C627A b323
    pub unsafe fn has_clip_set_loaded(clip_set: *const i8) -> bool {
        call_native!(bool, 0x318234F4F3738AF3u64, clip_set)
    } // 0x318234F4F3738AF3 0x230D5455 b323
    pub unsafe fn remove_clip_set(clip_set: *const i8) {
        call_native!(Void, 0x01F73A131C18CD94u64, clip_set);
    } // 0x01F73A131C18CD94 0x1E21F7AA b323
    pub unsafe fn request_ipl(ipl_name: *const i8) {
        call_native!(Void, 0x41B4893843BBDB74u64, ipl_name);
    } // 0x41B4893843BBDB74 0x3B70D1DB b323
    pub unsafe fn remove_ipl(ipl_name: *const i8) {
        call_native!(Void, 0xEE6C5AD3ECE0A82Du64, ipl_name);
    } // 0xEE6C5AD3ECE0A82D 0xDF7CBD36 b323
    pub unsafe fn is_ipl_active(ipl_name: *const i8) -> bool {
        call_native!(bool, 0x88A741E44A2B3495u64, ipl_name)
    } // 0x88A741E44A2B3495 0xB2C33714 b323
    pub unsafe fn set_streaming(toggle: bool) {
        call_native!(Void, 0x6E0C692677008888u64, toggle);
    } // 0x6E0C692677008888 0x27EF6CB2 b323
    pub unsafe fn load_global_water_file(water_type: i32) {
        call_native!(Void, 0x7E3F55ED251B76D3u64, water_type);
    } // 0x7E3F55ED251B76D3  b2189
    pub unsafe fn get_global_water_file() -> i32 {
        call_native!(i32, 0xF741BD853611592Du64)
    } // 0xF741BD853611592D  b2189
    pub unsafe fn set_game_pauses_for_streaming(toggle: bool) {
        call_native!(Void, 0x717CD6E6FAEBBEDCu64, toggle);
    } // 0x717CD6E6FAEBBEDC 0x9211A28A b323
    pub unsafe fn set_reduce_ped_model_budget(toggle: bool) {
        call_native!(Void, 0x77B5F9A36BF96710u64, toggle);
    } // 0x77B5F9A36BF96710 0xAFCB2B86 b323
    pub unsafe fn set_reduce_vehicle_model_budget(toggle: bool) {
        call_native!(Void, 0x80C527893080CCF3u64, toggle);
    } // 0x80C527893080CCF3 0xCDB4FB7E b323
    pub unsafe fn set_ditch_police_models(toggle: bool) {
        call_native!(Void, 0x42CBE54462D92634u64, toggle);
    } // 0x42CBE54462D92634 0x3EA7FCE4 b323
    pub unsafe fn get_number_of_streaming_requests() -> i32 {
        call_native!(i32, 0x4060057271CEBC89u64)
    } // 0x4060057271CEBC89 0xC2EE9A02 b323
    pub unsafe fn request_ptfx_asset() {
        call_native!(Void, 0x944955FB2A3935C8u64);
    } // 0x944955FB2A3935C8 0x2C649263 b323
    pub unsafe fn has_ptfx_asset_loaded() -> bool {
        call_native!(bool, 0xCA7D9B86ECA7481Bu64)
    } // 0xCA7D9B86ECA7481B 0x3EFF96BE b323
    pub unsafe fn remove_ptfx_asset() {
        call_native!(Void, 0x88C6814073DD4A73u64);
    } // 0x88C6814073DD4A73 0xC10F178C b323
    pub unsafe fn request_named_ptfx_asset(fx_name: *const i8) {
        call_native!(Void, 0xB80D8756B4668AB6u64, fx_name);
    } // 0xB80D8756B4668AB6 0xCFEA19A9 b323
    pub unsafe fn has_named_ptfx_asset_loaded(fx_name: *const i8) -> bool {
        call_native!(bool, 0x8702416E512EC454u64, fx_name)
    } // 0x8702416E512EC454 0x9ACC6446 b323
    pub unsafe fn remove_named_ptfx_asset(fx_name: *const i8) {
        call_native!(Void, 0x5F61EBBE1A00F96Du64, fx_name);
    } // 0x5F61EBBE1A00F96D 0xC44762A1 b323
    pub unsafe fn set_vehicle_population_budget(p_0: i32) {
        call_native!(Void, 0xCB9E1EB3BE2AF4E9u64, p_0);
    } // 0xCB9E1EB3BE2AF4E9 0x1D56993C b323
    pub unsafe fn set_ped_population_budget(p_0: i32) {
        call_native!(Void, 0x8C95333CFC3340F3u64, p_0);
    } // 0x8C95333CFC3340F3 0xD2D026CD b323
    pub unsafe fn clear_focus() {
        call_native!(Void, 0x31B73D1EA9F01DA2u64);
    } // 0x31B73D1EA9F01DA2 0x34D91E7A b323
    pub unsafe fn set_focus_pos_and_vel(
        x: f32,
        y: f32,
        z: f32,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
    ) {
        call_native!(
            Void,
            0xBB7454BAFF08FE25u64,
            x,
            y,
            z,
            offset_x,
            offset_y,
            offset_z
        );
    } // 0xBB7454BAFF08FE25 0x14680A60 b323
    pub unsafe fn set_focus_entity(entity: Entity) {
        call_native!(Void, 0x198F77705FA0931Du64, entity);
    } // 0x198F77705FA0931D 0x18DB04AC b323
    pub unsafe fn is_entity_focus(entity: Entity) -> bool {
        call_native!(bool, 0x2DDFF3FB9075D747u64, entity)
    } // 0x2DDFF3FB9075D747 0xB456D707 b323
    pub unsafe fn set_restore_focus_entity(p_0: Entity) {
        call_native!(Void, 0x0811381EF5062FECu64, p_0);
    } // 0x0811381EF5062FEC  b323
    pub unsafe fn set_mapdatacullbox_enabled(name: *const i8, toggle: bool) {
        call_native!(Void, 0xAF12610C644A35C9u64, name, toggle);
    } // 0xAF12610C644A35C9 0x403CD434 b323
    pub unsafe fn set_all_mapdata_culled(p_0: Any) {
        call_native!(Void, 0x4E52E752C76E7E7Au64, p_0);
    } // 0x4E52E752C76E7E7A 0xA07BAEB9 b323
    pub unsafe fn streamvol_create_sphere(
        x: f32,
        y: f32,
        z: f32,
        rad: f32,
        p_4: Any,
        p_5: Any,
    ) -> i32 {
        call_native!(i32, 0x219C7B8D53E429FDu64, x, y, z, rad, p_4, p_5)
    } // 0x219C7B8D53E429FD 0x10B6AB36 b323
    pub unsafe fn streamvol_create_frustum(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: Any,
        p_8: Any,
    ) -> i32 {
        call_native!(
            i32,
            0x1F3F018BC3AFA77Cu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        )
    } // 0x1F3F018BC3AFA77C 0x72344191 b323
    pub unsafe fn streamvol_create_line(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: Any,
    ) -> i32 {
        call_native!(
            i32,
            0x0AD9710CEE2F590Fu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0x0AD9710CEE2F590F 0xC0157255 b323
    pub unsafe fn streamvol_delete(unused: Any) {
        call_native!(Void, 0x1EE7D8DF4425F053u64, unused);
    } // 0x1EE7D8DF4425F053 0xE80F8ABE b323
    pub unsafe fn streamvol_has_loaded(unused: Any) -> bool {
        call_native!(bool, 0x7D41E9D2D17C5B2Du64, unused)
    } // 0x7D41E9D2D17C5B2D 0x1B3521F4 b323
    pub unsafe fn streamvol_is_valid(unused: Any) -> bool {
        call_native!(bool, 0x07C313F94746702Cu64, unused)
    } // 0x07C313F94746702C 0x42CFE9C0 b323
    pub unsafe fn is_streamvol_active() -> bool {
        call_native!(bool, 0xBC9823AB80A3DCACu64)
    } // 0xBC9823AB80A3DCAC 0x56253356 b323
    pub unsafe fn new_load_scene_start(
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        radius: f32,
        p_7: i32,
    ) -> bool {
        call_native!(
            bool,
            0x212A8D0D2BABFAC2u64,
            pos_x,
            pos_y,
            pos_z,
            offset_x,
            offset_y,
            offset_z,
            radius,
            p_7
        )
    } // 0x212A8D0D2BABFAC2 0xDF9C38B6 b323
    pub unsafe fn new_load_scene_start_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: Any,
    ) -> bool {
        call_native!(bool, 0xACCFB4ACF53551B0u64, x, y, z, radius, p_4)
    } // 0xACCFB4ACF53551B0 0xFA037FEB b323
    pub unsafe fn new_load_scene_stop() {
        call_native!(Void, 0xC197616D221FF4A4u64);
    } // 0xC197616D221FF4A4 0x7C05B1F6 b323
    pub unsafe fn is_new_load_scene_active() -> bool {
        call_native!(bool, 0xA41A05B6CB741B85u64)
    } // 0xA41A05B6CB741B85 0xAD234B7F b323
    pub unsafe fn is_new_load_scene_loaded() -> bool {
        call_native!(bool, 0x01B8247A7A8B9AD1u64)
    } // 0x01B8247A7A8B9AD1 0x3ECD839F b323
    pub unsafe fn is_safe_to_start_player_switch() -> bool {
        call_native!(bool, 0x71E7B2E657449AADu64)
    } // 0x71E7B2E657449AAD 0xEAA51103 b323
    pub unsafe fn start_player_switch(from: Ped, to: Ped, flags: i32, switch_type: i32) {
        call_native!(Void, 0xFAA23F2CBA159D67u64, from, to, flags, switch_type);
    } // 0xFAA23F2CBA159D67 0x0829E975 b323
    pub unsafe fn stop_player_switch() {
        call_native!(Void, 0x95C0A5BBDC189AA1u64);
    } // 0x95C0A5BBDC189AA1 0x2832C010 b323
    pub unsafe fn is_player_switch_in_progress() -> bool {
        call_native!(bool, 0xD9D2CFFF49FAB35Fu64)
    } // 0xD9D2CFFF49FAB35F 0x56135ACC b323
    pub unsafe fn get_player_switch_type() -> i32 {
        call_native!(i32, 0xB3C94A90D9FC9E62u64)
    } // 0xB3C94A90D9FC9E62 0x280DC015 b323
    pub unsafe fn get_ideal_player_switch_type(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
    ) -> i32 {
        call_native!(i32, 0xB5D7B26B45720E05u64, x_1, y_1, z_1, x_2, y_2, z_2)
    } // 0xB5D7B26B45720E05 0xD5A450F1 b323
    pub unsafe fn get_player_switch_state() -> i32 {
        call_native!(i32, 0x470555300D10B2A5u64)
    } // 0x470555300D10B2A5 0x39A0E1F2 b323
    pub unsafe fn get_player_short_switch_state() -> i32 {
        call_native!(i32, 0x20F898A5D9782800u64)
    } // 0x20F898A5D9782800 0x9B7BA38F b323
    pub unsafe fn set_player_short_switch_style(p_0: i32) {
        call_native!(Void, 0x5F2013F8BC24EE69u64, p_0);
    } // 0x5F2013F8BC24EE69 0xF0BD420D b323
    pub unsafe fn get_player_switch_jump_cut_index() -> i32 {
        call_native!(i32, 0x78C0D93253149435u64)
    } // 0x78C0D93253149435 0x02BA7AC2 b323
    pub unsafe fn set_player_switch_outro(
        camera_coord_x: f32,
        camera_coord_y: f32,
        camera_coord_z: f32,
        cam_rotation_x: f32,
        cam_rotation_y: f32,
        cam_rotation_z: f32,
        cam_fov: f32,
        cam_far_clip: f32,
        rotation_order: i32,
    ) {
        call_native!(
            Void,
            0xC208B673CE446B61u64,
            camera_coord_x,
            camera_coord_y,
            camera_coord_z,
            cam_rotation_x,
            cam_rotation_y,
            cam_rotation_z,
            cam_fov,
            cam_far_clip,
            rotation_order
        );
    } // 0xC208B673CE446B61 0x47352E14 b323
    pub unsafe fn set_player_switch_establishing_shot(name: *const i8) {
        call_native!(Void, 0x0FDE9DBFC0A6BC65u64, name);
    } // 0x0FDE9DBFC0A6BC65 0x279077B0 b323
    pub unsafe fn allow_player_switch_pan() {
        call_native!(Void, 0x43D1680C6D19A8E9u64);
    } // 0x43D1680C6D19A8E9 0x55CB21F9 b323
    pub unsafe fn allow_player_switch_outro() {
        call_native!(Void, 0x74DE2E8739086740u64);
    } // 0x74DE2E8739086740 0x1084F2F4 b323
    pub unsafe fn allow_player_switch_ascent() {
        call_native!(Void, 0x8E2A065ABDAE6994u64);
    } // 0x8E2A065ABDAE6994 0x5B1E995D b323
    pub unsafe fn allow_player_switch_descent() {
        call_native!(Void, 0xAD5FDF34B81BFE79u64);
    } // 0xAD5FDF34B81BFE79 0x4B4B9A13 b323
    pub unsafe fn is_switch_ready_for_descent() -> bool {
        call_native!(bool, 0xDFA80CB25D0A19B3u64)
    } // 0xDFA80CB25D0A19B3 0x408F7148 b323
    pub unsafe fn enable_switch_pause_before_descent() {
        call_native!(Void, 0xD4793DFF3AF2ABCDu64);
    } // 0xD4793DFF3AF2ABCD 0x4062FF73 b323
    pub unsafe fn disable_switch_outro_fx() {
        call_native!(Void, 0xBD605B8E0E18B3BBu64);
    } // 0xBD605B8E0E18B3BB 0x59CC312D b323
    pub unsafe fn switch_to_multi_firstpart(ped: Ped, flags: i32, switch_type: i32) {
        call_native!(Void, 0xAAB3200ED59016BCu64, ped, flags, switch_type);
    } // 0xAAB3200ED59016BC 0xFB4D062D b323
    pub unsafe fn switch_to_multi_secondpart(ped: Ped) {
        call_native!(Void, 0xD8295AF639FD9CB8u64, ped);
    } // 0xD8295AF639FD9CB8 0x2349373B b323
    pub unsafe fn is_switch_to_multi_firstpart_finished() -> bool {
        call_native!(bool, 0x933BBEEB8C61B5F4u64)
    } // 0x933BBEEB8C61B5F4 0x74C16879 b323
    pub unsafe fn get_player_switch_interp_out_duration() -> i32 {
        call_native!(i32, 0x08C2D6C52A3104BBu64)
    } // 0x08C2D6C52A3104BB 0x569847E3 b323
    pub unsafe fn get_player_switch_interp_out_current_time() -> i32 {
        call_native!(i32, 0x5B48A06DD0E792A5u64)
    } // 0x5B48A06DD0E792A5 0xC7A3D279 b323
    pub unsafe fn is_switch_skipping_descent() -> bool {
        call_native!(bool, 0x5B74EA8CFD5E3E7Eu64)
    } // 0x5B74EA8CFD5E3E7E 0x90F64284 b323
    pub unsafe fn set_scene_streaming_tracks_cam_pos_this_frame() {
        call_native!(Void, 0x1E9057A74FD73E23u64);
    } // 0x1E9057A74FD73E23  b323
    pub unsafe fn get_lodscale() -> f32 {
        call_native!(f32, 0x0C15B0E443B2349Du64)
    } // 0x0C15B0E443B2349D 0x7154B6FD b323
    pub unsafe fn override_lodscale_this_frame(scaling: f32) {
        call_native!(Void, 0xA76359FC80B2438Eu64, scaling);
    } // 0xA76359FC80B2438E 0xE5612C1A b323
    pub unsafe fn remap_lodscale_range_this_frame(p_0: f32, p_1: f32, p_2: f32, p_3: f32) {
        call_native!(Void, 0xBED8CA5FF5E04113u64, p_0, p_1, p_2, p_3);
    } // 0xBED8CA5FF5E04113 0x9CD6A451 b323
    pub unsafe fn suppress_hd_map_streaming_this_frame() {
        call_native!(Void, 0x472397322E92A856u64);
    } // 0x472397322E92A856 0x4267DA87 b323
    pub unsafe fn set_render_hd_only(toggle: bool) {
        call_native!(Void, 0x40AEFD1A244741F2u64, toggle);
    } // 0x40AEFD1A244741F2 0x9FA4AF99 b323
    pub unsafe fn force_allow_time_based_fading_this_frame() {
        call_native!(Void, 0x03F1A106BDA7DD3Eu64);
    } // 0x03F1A106BDA7DD3E  b323
    pub unsafe fn ipl_group_swap_start(ipl_name_1: *const i8, ipl_name_2: *const i8) {
        call_native!(Void, 0x95A7DABDDBB78AE7u64, ipl_name_1, ipl_name_2);
    } // 0x95A7DABDDBB78AE7 0x9EF0A9CF b323
    pub unsafe fn ipl_group_swap_cancel() {
        call_native!(Void, 0x63EB2B972A218CACu64);
    } // 0x63EB2B972A218CAC 0xF2CDD6A8 b323
    pub unsafe fn ipl_group_swap_is_ready() -> bool {
        call_native!(bool, 0xFB199266061F820Au64)
    } // 0xFB199266061F820A 0x17B0A1CD b323
    pub unsafe fn ipl_group_swap_finish() {
        call_native!(Void, 0xF4A0DADB70F57FA6u64);
    } // 0xF4A0DADB70F57FA6 0x3DA7AA5D b323
    pub unsafe fn ipl_group_swap_is_active() -> bool {
        call_native!(bool, 0x5068F488DDB54DD8u64)
    } // 0x5068F488DDB54DD8 0xDAB4BAC0 b323
    pub unsafe fn prefetch_srl(srl: *const i8) {
        call_native!(Void, 0x3D245789CE12982Cu64, srl);
    } // 0x3D245789CE12982C 0x37BE2FBB b323
    pub unsafe fn is_srl_loaded() -> bool {
        call_native!(bool, 0xD0263801A4C5B0BBu64)
    } // 0xD0263801A4C5B0BB 0x670FA2A6 b323
    pub unsafe fn begin_srl() {
        call_native!(Void, 0x9BADDC94EF83B823u64);
    } // 0x9BADDC94EF83B823 0x24F49427 b323
    pub unsafe fn end_srl() {
        call_native!(Void, 0x0A41540E63C9EE17u64);
    } // 0x0A41540E63C9EE17 0x1977C56A b323
    pub unsafe fn set_srl_time(p_0: f32) {
        call_native!(Void, 0xA74A541C6884E7B8u64, p_0);
    } // 0xA74A541C6884E7B8 0x30F8A487 b323
    pub unsafe fn set_srl_post_cutscene_camera(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0xEF39EE20C537E98Cu64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0xEF39EE20C537E98C 0x814D0752 b323
    pub unsafe fn set_srl_readahead_times(p_0: Any, p_1: Any, p_2: Any, p_3: Any) {
        call_native!(Void, 0xBEB2D9A1D9A8F55Au64, p_0, p_1, p_2, p_3);
    } // 0xBEB2D9A1D9A8F55A 0x62F02485 b323
    pub unsafe fn set_srl_long_jump_mode(p_0: bool) {
        call_native!(Void, 0x20C6C7E4EB082A7Fu64, p_0);
    } // 0x20C6C7E4EB082A7F 0xA6459CAA b323
    pub unsafe fn set_srl_force_prestream(p_0: Any) {
        call_native!(Void, 0xF8155A7F03DDFC8Eu64, p_0);
    } // 0xF8155A7F03DDFC8E 0xF8F515E4 b323
    pub unsafe fn set_hd_area(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0xB85F26619073E775u64, x, y, z, radius);
    } // 0xB85F26619073E775 0x80BAA035 b323
    pub unsafe fn clear_hd_area() {
        call_native!(Void, 0xCE58B1CFB9290813u64);
    } // 0xCE58B1CFB9290813 0x7CAC6FA0 b323
    pub unsafe fn init_creator_budget() {
        call_native!(Void, 0xB5A4DB34FE89B88Au64);
    } // 0xB5A4DB34FE89B88A 0xE243B2AF b323
    pub unsafe fn shutdown_creator_budget() {
        call_native!(Void, 0xCCE26000E9A6FAD7u64);
    } // 0xCCE26000E9A6FAD7 0x897A510F b323
    pub unsafe fn add_model_to_creator_budget(model_hash: Hash) -> bool {
        call_native!(bool, 0x0BC3144DEB678666u64, model_hash)
    } // 0x0BC3144DEB678666 0xC0E83320 b323
    pub unsafe fn remove_model_from_creator_budget(model_hash: Hash) {
        call_native!(Void, 0xF086AD9354FAC3A3u64, model_hash);
    } // 0xF086AD9354FAC3A3 0x1C576388 b323
    pub unsafe fn get_used_creator_budget() -> f32 {
        call_native!(f32, 0x3D3D8B3BE5A83D35u64)
    } // 0x3D3D8B3BE5A83D35 0x3E9C4CBE b323
    pub unsafe fn set_island_enabled(name: *const i8, toggle: bool) {
        call_native!(Void, 0x9A9D1BA639675CF1u64, name, toggle);
    } // 0x9A9D1BA639675CF1  b2189
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod task {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn task_pause(ped: Ped, ms: i32) {
        call_native!(Void, 0xE73A266DB0CA9042u64, ped, ms);
    } // 0xE73A266DB0CA9042 0x17A64668 b323
    pub unsafe fn task_stand_still(ped: Ped, time: i32) {
        call_native!(Void, 0x919BE13EED931959u64, ped, time);
    } // 0x919BE13EED931959 0x6F80965D b323
    pub unsafe fn task_jump(
        ped: Ped,
        use_player_launch_force: bool,
        do_super_jump: bool,
        use_full_super_jump_force: bool,
    ) {
        call_native!(
            Void,
            0x0AE4086104E067B1u64,
            ped,
            use_player_launch_force,
            do_super_jump,
            use_full_super_jump_force
        );
    } // 0x0AE4086104E067B1 0x0356E3CE b323
    pub unsafe fn task_cower(ped: Ped, duration: i32) {
        call_native!(Void, 0x3EB1FE9E8E908E15u64, ped, duration);
    } // 0x3EB1FE9E8E908E15 0x9CF1C19B b323
    pub unsafe fn task_hands_up(
        ped: Ped,
        duration: i32,
        facing_ped: Ped,
        time_to_face_ped: i32,
        flags: i32,
    ) {
        call_native!(
            Void,
            0xF2EAB31979A7F910u64,
            ped,
            duration,
            facing_ped,
            time_to_face_ped,
            flags
        );
    } // 0xF2EAB31979A7F910 0x8DCC19C5 b323
    pub unsafe fn update_task_hands_up_duration(ped: Ped, duration: i32) {
        call_native!(Void, 0xA98FCAFD7893C834u64, ped, duration);
    } // 0xA98FCAFD7893C834 0x3AA39BE9 b323
    pub unsafe fn task_open_vehicle_door(
        ped: Ped,
        vehicle: Vehicle,
        time_out: i32,
        seat: i32,
        speed: f32,
    ) {
        call_native!(
            Void,
            0x965791A9A488A062u64,
            ped,
            vehicle,
            time_out,
            seat,
            speed
        );
    } // 0x965791A9A488A062 0x8EE06BF4 b323
    pub unsafe fn task_enter_vehicle(
        ped: Ped,
        vehicle: Vehicle,
        timeout: i32,
        seat: i32,
        speed: f32,
        flag: i32,
        override_entry_clipset_name: *const i8,
        p_7: Any,
    ) {
        call_native!(
            Void,
            0xC20E50AA46D09CA8u64,
            ped,
            vehicle,
            timeout,
            seat,
            speed,
            flag,
            override_entry_clipset_name,
            p_7
        );
    } // 0xC20E50AA46D09CA8 0xB8689B4E b323
    pub unsafe fn task_leave_vehicle(ped: Ped, vehicle: Vehicle, flags: i32) {
        call_native!(Void, 0xD3DBCE61A490BE02u64, ped, vehicle, flags);
    } // 0xD3DBCE61A490BE02 0x7B1141C6 b323
    pub unsafe fn task_get_off_boat(ped: Ped, boat: Vehicle) {
        call_native!(Void, 0x9C00E77AF14B2DFFu64, ped, boat);
    } // 0x9C00E77AF14B2DFF 0x4293601F b323
    pub unsafe fn task_sky_dive(ped: Ped, instant: bool) {
        call_native!(Void, 0x601736CFE536B0A0u64, ped, instant);
    } // 0x601736CFE536B0A0 0xD3874AFA b323
    pub unsafe fn task_parachute(ped: Ped, give_parachute_item: bool, instant: bool) {
        call_native!(
            Void,
            0xD2F1C53C97EE81ABu64,
            ped,
            give_parachute_item,
            instant
        );
    } // 0xD2F1C53C97EE81AB 0xEC3060A2 b323
    pub unsafe fn task_parachute_to_target(ped: Ped, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xB33E291AFA6BD03Au64, ped, x, y, z);
    } // 0xB33E291AFA6BD03A 0xE0104D6C b323
    pub unsafe fn set_parachute_task_target(ped: Ped, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xC313379AF0FCEDA7u64, ped, x, y, z);
    } // 0xC313379AF0FCEDA7 0x6ED3AD81 b323
    pub unsafe fn set_parachute_task_thrust(ped: Ped, thrust: f32) {
        call_native!(Void, 0x0729BAC1B8C64317u64, ped, thrust);
    } // 0x0729BAC1B8C64317 0xD07C8AAA b323
    pub unsafe fn task_rappel_from_heli(ped: Ped, min_height_above_ground: f32) {
        call_native!(Void, 0x09693B0312F91649u64, ped, min_height_above_ground);
    } // 0x09693B0312F91649 0x2C7ADB93 b323
    pub unsafe fn task_vehicle_drive_to_coord(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        speed: f32,
        p_6: Any,
        vehicle_model: Hash,
        driving_mode: i32,
        stop_range: f32,
        straight_line_distance: f32,
    ) {
        call_native!(
            Void,
            0xE2A2AA2F659D77A7u64,
            ped,
            vehicle,
            x,
            y,
            z,
            speed,
            p_6,
            vehicle_model,
            driving_mode,
            stop_range,
            straight_line_distance
        );
    } // 0xE2A2AA2F659D77A7 0xE4AC0387 b323
    pub unsafe fn task_vehicle_drive_to_coord_longrange(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        speed: f32,
        drive_mode: i32,
        stop_range: f32,
    ) {
        call_native!(
            Void,
            0x158BB33F920D360Cu64,
            ped,
            vehicle,
            x,
            y,
            z,
            speed,
            drive_mode,
            stop_range
        );
    } // 0x158BB33F920D360C 0x1490182A b323
    pub unsafe fn task_vehicle_drive_wander(
        ped: Ped,
        vehicle: Vehicle,
        speed: f32,
        driving_style: i32,
    ) {
        call_native!(
            Void,
            0x480142959D337D00u64,
            ped,
            vehicle,
            speed,
            driving_style
        );
    } // 0x480142959D337D00 0x36EC0EB0 b323
    pub unsafe fn task_follow_to_offset_of_entity(
        ped: Ped,
        entity: Entity,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        movement_speed: f32,
        timeout: i32,
        stopping_range: f32,
        persist_following: bool,
    ) {
        call_native!(
            Void,
            0x304AE42E357B8C7Eu64,
            ped,
            entity,
            offset_x,
            offset_y,
            offset_z,
            movement_speed,
            timeout,
            stopping_range,
            persist_following
        );
    } // 0x304AE42E357B8C7E 0x2DF5A6AC b323
    pub unsafe fn task_go_straight_to_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        speed: f32,
        timeout: i32,
        target_heading: f32,
        distance_to_slide: f32,
    ) {
        call_native!(
            Void,
            0xD76B57B44F1E6F8Bu64,
            ped,
            x,
            y,
            z,
            speed,
            timeout,
            target_heading,
            distance_to_slide
        );
    } // 0xD76B57B44F1E6F8B 0x80A9E7A7 b323
    pub unsafe fn task_go_straight_to_coord_relative_to_entity(
        ped: Ped,
        entity: Entity,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        time: i32,
    ) {
        call_native!(
            Void,
            0x61E360B7E040D12Eu64,
            ped,
            entity,
            x,
            y,
            z,
            move_blend_ratio,
            time
        );
    } // 0x61E360B7E040D12E 0xD26CAC68 b323
    pub unsafe fn task_achieve_heading(ped: Ped, heading: f32, timeout: i32) {
        call_native!(Void, 0x93B93A37987F1F3Du64, ped, heading, timeout);
    } // 0x93B93A37987F1F3D 0x0A0E9B42 b323
    pub unsafe fn task_flush_route() {
        call_native!(Void, 0x841142A1376E9006u64);
    } // 0x841142A1376E9006 0x34219154 b323
    pub unsafe fn task_extend_route(x: f32, y: f32, z: f32) {
        call_native!(Void, 0x1E7889778264843Au64, x, y, z);
    } // 0x1E7889778264843A 0x43271F69 b323
    pub unsafe fn task_follow_point_route(ped: Ped, speed: f32, mode: i32) {
        call_native!(Void, 0x595583281858626Eu64, ped, speed, mode);
    } // 0x595583281858626E 0xB837C816 b323
    pub unsafe fn task_go_to_entity(
        entity: Entity,
        target: Entity,
        duration: i32,
        distance: f32,
        move_blend_ratio: f32,
        slow_down_distance: f32,
        flags: i32,
    ) {
        call_native!(
            Void,
            0x6A071245EB0D1882u64,
            entity,
            target,
            duration,
            distance,
            move_blend_ratio,
            slow_down_distance,
            flags
        );
    } // 0x6A071245EB0D1882 0x374827C2 b323
    pub unsafe fn task_smart_flee_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        distance: f32,
        time: i32,
        prefer_pavements: bool,
        quit_if_out_of_range: bool,
    ) {
        call_native!(
            Void,
            0x94587F17E9C365D5u64,
            ped,
            x,
            y,
            z,
            distance,
            time,
            prefer_pavements,
            quit_if_out_of_range
        );
    } // 0x94587F17E9C365D5 0xB2E686FC b323
    pub unsafe fn task_smart_flee_ped(
        ped: Ped,
        flee_target: Ped,
        safe_distance: f32,
        flee_time: i32,
        prefer_pavements: bool,
        update_to_nearest_hated_ped: bool,
    ) {
        call_native!(
            Void,
            0x22B0D0E37CCB840Du64,
            ped,
            flee_target,
            safe_distance,
            flee_time,
            prefer_pavements,
            update_to_nearest_hated_ped
        );
    } // 0x22B0D0E37CCB840D 0xE52EB560 b323
    pub unsafe fn task_react_and_flee_ped(ped: Ped, flee_target: Ped) {
        call_native!(Void, 0x72C896464915D1B1u64, ped, flee_target);
    } // 0x72C896464915D1B1 0x8A632BD8 b323
    pub unsafe fn task_shocking_event_react(ped: Ped, event_handle: i32) {
        call_native!(Void, 0x452419CBD838065Bu64, ped, event_handle);
    } // 0x452419CBD838065B 0x9BD00ACF b323
    pub unsafe fn task_wander_in_area(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        minimal_length: f32,
        time_between_walks: f32,
    ) {
        call_native!(
            Void,
            0xE054346CA3A0F315u64,
            ped,
            x,
            y,
            z,
            radius,
            minimal_length,
            time_between_walks
        );
    } // 0xE054346CA3A0F315 0xC6981FB9 b323
    pub unsafe fn task_wander_standard(ped: Ped, heading: f32, flags: i32) {
        call_native!(Void, 0xBB9CE077274F6A1Bu64, ped, heading, flags);
    } // 0xBB9CE077274F6A1B 0xAF59151A b323
    pub unsafe fn task_wander_specific(
        ped: Ped,
        conditional_anim_group_str: *const i8,
        conditional_anim_str: *const i8,
        heading: f32,
    ) {
        call_native!(
            Void,
            0x6919A2F136426098u64,
            ped,
            conditional_anim_group_str,
            conditional_anim_str,
            heading
        );
    } // 0x6919A2F136426098  b1868
    pub unsafe fn task_vehicle_park(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        mode: i32,
        radius: f32,
        keep_engine_on: bool,
    ) {
        call_native!(
            Void,
            0x0F3E34E968EA374Eu64,
            ped,
            vehicle,
            x,
            y,
            z,
            heading,
            mode,
            radius,
            keep_engine_on
        );
    } // 0x0F3E34E968EA374E 0x5C85FF90 b323
    pub unsafe fn task_stealth_kill(
        killer: Ped,
        target: Ped,
        stealth_kill_action_result_hash: Hash,
        desired_move_blend_ratio: f32,
        stealth_flags: i32,
    ) {
        call_native!(
            Void,
            0xAA5DC05579D60BD9u64,
            killer,
            target,
            stealth_kill_action_result_hash,
            desired_move_blend_ratio,
            stealth_flags
        );
    } // 0xAA5DC05579D60BD9 0x0D64C2FA b323
    pub unsafe fn task_plant_bomb(ped: Ped, x: f32, y: f32, z: f32, heading: f32) {
        call_native!(Void, 0x965FEC691D55E9BFu64, ped, x, y, z, heading);
    } // 0x965FEC691D55E9BF 0x33457535 b323
    pub unsafe fn task_follow_nav_mesh_to_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        time: i32,
        target_radius: f32,
        flags: i32,
        target_heading: f32,
    ) {
        call_native!(
            Void,
            0x15D3A79D4E44B913u64,
            ped,
            x,
            y,
            z,
            move_blend_ratio,
            time,
            target_radius,
            flags,
            target_heading
        );
    } // 0x15D3A79D4E44B913 0xFE4A10D9 b323
    pub unsafe fn task_follow_nav_mesh_to_coord_advanced(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        time: i32,
        target_radius: f32,
        flags: i32,
        slide_to_coord_heading: f32,
        max_slope_navigable: f32,
        clamp_max_search_distance: f32,
        target_heading: f32,
    ) {
        call_native!(
            Void,
            0x17F58B88D085DBACu64,
            ped,
            x,
            y,
            z,
            move_blend_ratio,
            time,
            target_radius,
            flags,
            slide_to_coord_heading,
            max_slope_navigable,
            clamp_max_search_distance,
            target_heading
        );
    } // 0x17F58B88D085DBAC 0x6BF6E296 b323
    pub unsafe fn set_ped_path_can_use_climbovers(ped: Ped, _toggle: bool) {
        call_native!(Void, 0x8E06A6FE76C9EFF4u64, ped, _toggle);
    } // 0x8E06A6FE76C9EFF4 0xB7B7D442 b323
    pub unsafe fn set_ped_path_can_use_ladders(ped: Ped, _toggle: bool) {
        call_native!(Void, 0x77A5B103C87F476Eu64, ped, _toggle);
    } // 0x77A5B103C87F476E 0x53A879EE b323
    pub unsafe fn set_ped_path_can_drop_from_height(ped: Ped, _toggle: bool) {
        call_native!(Void, 0xE361C5C71C431A4Fu64, ped, _toggle);
    } // 0xE361C5C71C431A4F 0x394B7AC9 b323
    pub unsafe fn set_ped_path_climb_cost_modifier(ped: Ped, modifier: f32) {
        call_native!(Void, 0x88E32DB8C1A4AA4Bu64, ped, modifier);
    } // 0x88E32DB8C1A4AA4B 0x55E06443 b323
    pub unsafe fn set_ped_path_may_enter_water(ped: Ped, may_enter_water: bool) {
        call_native!(Void, 0xF35425A4204367ECu64, ped, may_enter_water);
    } // 0xF35425A4204367EC 0x9C606EE3 b323
    pub unsafe fn set_ped_path_prefer_to_avoid_water(ped: Ped, avoid_water: bool) {
        call_native!(Void, 0x38FE1EC73743793Cu64, ped, avoid_water);
    } // 0x38FE1EC73743793C 0x0EA39A29 b323
    pub unsafe fn set_ped_path_avoid_fire(ped: Ped, avoid_fire: bool) {
        call_native!(Void, 0x4455517B28441E60u64, ped, avoid_fire);
    } // 0x4455517B28441E60 0xDCC5B934 b323
    pub unsafe fn set_global_min_bird_flight_height(height: f32) {
        call_native!(Void, 0x6C6B148586F934F7u64, height);
    } // 0x6C6B148586F934F7 0x2AFB14B8 b323
    pub unsafe fn get_navmesh_route_distance_remaining(
        ped: Ped,
        distance_remaining: *mut f32,
        is_path_ready: *mut Bool,
    ) -> i32 {
        call_native!(
            i32,
            0xC6F5C0BCDC74D62Du64,
            ped,
            distance_remaining,
            is_path_ready
        )
    } // 0xC6F5C0BCDC74D62D 0xD9281778 b323
    pub unsafe fn get_navmesh_route_result(ped: Ped) -> i32 {
        call_native!(i32, 0x632E831F382A0FA8u64, ped)
    } // 0x632E831F382A0FA8 0x96491602 b323
    pub unsafe fn is_controlled_vehicle_unable_to_get_to_road(ped: Ped) -> bool {
        call_native!(bool, 0x3E38E28A1D80DDF6u64, ped)
    } // 0x3E38E28A1D80DDF6 0x54856309 b323
    pub unsafe fn task_go_to_coord_any_means(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        vehicle: Vehicle,
        use_long_range_vehicle_pathing: bool,
        driving_flags: i32,
        max_range_to_shoot_targets: f32,
    ) {
        call_native!(
            Void,
            0x5BC448CB78FA3E88u64,
            ped,
            x,
            y,
            z,
            move_blend_ratio,
            vehicle,
            use_long_range_vehicle_pathing,
            driving_flags,
            max_range_to_shoot_targets
        );
    } // 0x5BC448CB78FA3E88 0xF91DF93B b323
    pub unsafe fn task_go_to_coord_any_means_extra_params(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        vehicle: Vehicle,
        use_long_range_vehicle_pathing: bool,
        driving_flags: i32,
        max_range_to_shoot_targets: f32,
        extra_veh_to_target_dist_to_prefer_vehicle: f32,
        drive_straight_line_distance: f32,
        extra_flags: i32,
        warp_timer_m_s: f32,
    ) {
        call_native!(
            Void,
            0x1DD45F9ECFDB1BC9u64,
            ped,
            x,
            y,
            z,
            move_blend_ratio,
            vehicle,
            use_long_range_vehicle_pathing,
            driving_flags,
            max_range_to_shoot_targets,
            extra_veh_to_target_dist_to_prefer_vehicle,
            drive_straight_line_distance,
            extra_flags,
            warp_timer_m_s
        );
    } // 0x1DD45F9ECFDB1BC9 0x094B75EF b323
    pub unsafe fn task_go_to_coord_any_means_extra_params_with_cruise_speed(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        move_blend_ratio: f32,
        vehicle: Vehicle,
        use_long_range_vehicle_pathing: bool,
        driving_flags: i32,
        max_range_to_shoot_targets: f32,
        extra_veh_to_target_dist_to_prefer_vehicle: f32,
        drive_straight_line_distance: f32,
        extra_flags: i32,
        cruise_speed: f32,
        target_arrive_dist: f32,
    ) {
        call_native!(
            Void,
            0xB8ECD61F531A7B02u64,
            ped,
            x,
            y,
            z,
            move_blend_ratio,
            vehicle,
            use_long_range_vehicle_pathing,
            driving_flags,
            max_range_to_shoot_targets,
            extra_veh_to_target_dist_to_prefer_vehicle,
            drive_straight_line_distance,
            extra_flags,
            cruise_speed,
            target_arrive_dist
        );
    } // 0xB8ECD61F531A7B02 0x86DC03F9 b323
    pub unsafe fn task_play_anim(
        ped: Ped,
        anim_dictionary: *const i8,
        animation_name: *const i8,
        blend_in_speed: f32,
        blend_out_speed: f32,
        duration: i32,
        flag: i32,
        playback_rate: f32,
        lock_x: bool,
        lock_y: bool,
        lock_z: bool,
    ) {
        call_native!(
            Void,
            0xEA47FE3719165B94u64,
            ped,
            anim_dictionary,
            animation_name,
            blend_in_speed,
            blend_out_speed,
            duration,
            flag,
            playback_rate,
            lock_x,
            lock_y,
            lock_z
        );
    } // 0xEA47FE3719165B94 0x5AB552C6 b323
    pub unsafe fn task_play_anim_advanced(
        ped: Ped,
        anim_dict: *const i8,
        anim_name: *const i8,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        anim_enter_speed: f32,
        anim_exit_speed: f32,
        duration: i32,
        flag: Any,
        anim_time: f32,
        rot_order: i32,
        ik_flags: i32,
    ) {
        call_native!(
            Void,
            0x83CDB10EA29B370Bu64,
            ped,
            anim_dict,
            anim_name,
            pos_x,
            pos_y,
            pos_z,
            rot_x,
            rot_y,
            rot_z,
            anim_enter_speed,
            anim_exit_speed,
            duration,
            flag,
            anim_time,
            rot_order,
            ik_flags
        );
    } // 0x83CDB10EA29B370B 0x3DDEB0E6 b323
    pub unsafe fn stop_anim_task(
        entity: Entity,
        anim_dictionary: *const i8,
        animation_name: *const i8,
        blend_delta: f32,
    ) {
        call_native!(
            Void,
            0x97FF36A1D40EA00Au64,
            entity,
            anim_dictionary,
            animation_name,
            blend_delta
        );
    } // 0x97FF36A1D40EA00A 0x2B520A57 b323
    pub unsafe fn task_scripted_animation(
        ped: Ped,
        priority_low_data: *mut i32,
        priority_mid_data: *mut i32,
        priority_high_data: *mut i32,
        blend_in_delta: f32,
        blend_out_delta: f32,
    ) {
        call_native!(
            Void,
            0x126EF75F1E17ABE5u64,
            ped,
            priority_low_data,
            priority_mid_data,
            priority_high_data,
            blend_in_delta,
            blend_out_delta
        );
    } // 0x126EF75F1E17ABE5 0xFC2DCF47 b323
    pub unsafe fn play_entity_scripted_anim(
        entity: Entity,
        priority_low_data: *mut i32,
        priority_mid_data: *mut i32,
        priority_high_data: *mut i32,
        blend_in_delta: f32,
        blend_out_delta: f32,
    ) {
        call_native!(
            Void,
            0x77A1EEC547E7FCF1u64,
            entity,
            priority_low_data,
            priority_mid_data,
            priority_high_data,
            blend_in_delta,
            blend_out_delta
        );
    } // 0x77A1EEC547E7FCF1 0x02F72AE5 b323
    pub unsafe fn stop_anim_playback(entity: Entity, priority: i32, secondary: bool) {
        call_native!(Void, 0xEE08C992D238C5D1u64, entity, priority, secondary);
    } // 0xEE08C992D238C5D1 0xE5F16398 b323
    pub unsafe fn set_anim_weight(
        entity: Entity,
        weight: f32,
        priority: i32,
        index: i32,
        secondary: bool,
    ) {
        call_native!(
            Void,
            0x207F1A47C0342F48u64,
            entity,
            weight,
            priority,
            index,
            secondary
        );
    } // 0x207F1A47C0342F48 0x17229D98 b323
    pub unsafe fn set_anim_phase(entity: Entity, phase: f32, priority: i32, secondary: bool) {
        call_native!(
            Void,
            0xDDF3CB5A0A4C0B49u64,
            entity,
            phase,
            priority,
            secondary
        );
    } // 0xDDF3CB5A0A4C0B49 0xB621E7E4 b2372
    pub unsafe fn set_anim_rate(entity: Entity, rate: f32, priority: i32, secondary: bool) {
        call_native!(
            Void,
            0x032D49C5E359C847u64,
            entity,
            rate,
            priority,
            secondary
        );
    } // 0x032D49C5E359C847 0x6DB46584 b323
    pub unsafe fn set_anim_looped(entity: Entity, looped: bool, priority: i32, secondary: bool) {
        call_native!(
            Void,
            0x70033C3CC29A1FF4u64,
            entity,
            looped,
            priority,
            secondary
        );
    } // 0x70033C3CC29A1FF4 0x095D61A4 b323
    pub unsafe fn task_play_phone_gesture_animation(
        ped: Ped,
        anim_dict: *const i8,
        animation: *const i8,
        bone_mask_type: *const i8,
        blend_in_duration: f32,
        blend_out_duration: f32,
        is_looping: bool,
        hold_last_frame: bool,
    ) {
        call_native!(
            Void,
            0x8FBB6758B3B3E9ECu64,
            ped,
            anim_dict,
            animation,
            bone_mask_type,
            blend_in_duration,
            blend_out_duration,
            is_looping,
            hold_last_frame
        );
    } // 0x8FBB6758B3B3E9EC 0x1582162C b323
    pub unsafe fn task_stop_phone_gesture_animation(ped: Ped, blend_out_override: f32) {
        call_native!(Void, 0x3FA00D4F4641BFAEu64, ped, blend_out_override);
    } // 0x3FA00D4F4641BFAE 0x5A32D4B4 b323
    pub unsafe fn is_playing_phone_gesture_anim(ped: Ped) -> bool {
        call_native!(bool, 0xB8EBB1E9D3588C10u64, ped)
    } // 0xB8EBB1E9D3588C10 0x500B6805 b323
    pub unsafe fn get_phone_gesture_anim_current_time(ped: Ped) -> f32 {
        call_native!(f32, 0x47619ABE8B268C60u64, ped)
    } // 0x47619ABE8B268C60 0x7B72AFD1 b323
    pub unsafe fn get_phone_gesture_anim_total_time(ped: Ped) -> f32 {
        call_native!(f32, 0x1EE0F68A7C25DEC6u64, ped)
    } // 0x1EE0F68A7C25DEC6 0xEF8C3959 b323
    pub unsafe fn task_vehicle_play_anim(
        vehicle: Vehicle,
        animation_set: *const i8,
        animation_name: *const i8,
    ) {
        call_native!(
            Void,
            0x69F5C3BD0F3EBD89u64,
            vehicle,
            animation_set,
            animation_name
        );
    } // 0x69F5C3BD0F3EBD89 0x2B28F598 b323
    pub unsafe fn task_look_at_coord(
        entity: Entity,
        x: f32,
        y: f32,
        z: f32,
        duration: i32,
        flags: i32,
        priority: i32,
    ) {
        call_native!(
            Void,
            0x6FA46612594F7973u64,
            entity,
            x,
            y,
            z,
            duration,
            flags,
            priority
        );
    } // 0x6FA46612594F7973 0x7B784DD8 b323
    pub unsafe fn task_look_at_entity(
        ped: Ped,
        look_at: Entity,
        duration: i32,
        flags: i32,
        priority: i32,
    ) {
        call_native!(
            Void,
            0x69F4BE8C8CC4796Cu64,
            ped,
            look_at,
            duration,
            flags,
            priority
        );
    } // 0x69F4BE8C8CC4796C 0x991D6619 b323
    pub unsafe fn task_clear_look_at(ped: Ped) {
        call_native!(Void, 0x0F804F1DB19B9689u64, ped);
    } // 0x0F804F1DB19B9689 0x60EB4054 b323
    pub unsafe fn open_sequence_task(task_sequence_id: *mut i32) {
        call_native!(Void, 0xE8854A4326B9E12Bu64, task_sequence_id);
    } // 0xE8854A4326B9E12B 0xABA6923E b323
    pub unsafe fn close_sequence_task(task_sequence_id: i32) {
        call_native!(Void, 0x39E72BC99E6360CBu64, task_sequence_id);
    } // 0x39E72BC99E6360CB 0x1A7CEBD0 b323
    pub unsafe fn task_perform_sequence(ped: Ped, task_sequence_id: i32) {
        call_native!(Void, 0x5ABA3986D90D8A3Bu64, ped, task_sequence_id);
    } // 0x5ABA3986D90D8A3B 0x4D9FBD11 b323
    pub unsafe fn task_perform_sequence_locally(ped: Ped, task_sequence_id: i32) {
        call_native!(Void, 0x8C33220C8D78CA0Du64, ped, task_sequence_id);
    } // 0x8C33220C8D78CA0D  b944
    pub unsafe fn clear_sequence_task(task_sequence_id: *mut i32) {
        call_native!(Void, 0x3841422E9C488D8Cu64, task_sequence_id);
    } // 0x3841422E9C488D8C 0x47ED03CE b323
    pub unsafe fn set_sequence_to_repeat(task_sequence_id: i32, repeat: bool) {
        call_native!(Void, 0x58C70CF3A41E4AE7u64, task_sequence_id, repeat);
    } // 0x58C70CF3A41E4AE7 0xCDDF1508 b323
    pub unsafe fn get_sequence_progress(ped: Ped) -> i32 {
        call_native!(i32, 0x00A9010CFE1E3533u64, ped)
    } // 0x00A9010CFE1E3533 0xA3419909 b323
    pub unsafe fn get_is_task_active(ped: Ped, task_index: i32) -> bool {
        call_native!(bool, 0xB0760331C7AA4155u64, ped, task_index)
    } // 0xB0760331C7AA4155 0x86FDDF55 b323
    pub unsafe fn get_script_task_status(ped: Ped, task_hash: Hash) -> i32 {
        call_native!(i32, 0x77F1BEB8863288D5u64, ped, task_hash)
    } // 0x77F1BEB8863288D5 0xB2477B23 b323
    pub unsafe fn get_active_vehicle_mission_type(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x534AEBA6E5ED4CABu64, vehicle)
    } // 0x534AEBA6E5ED4CAB 0xAFA914EF b323
    pub unsafe fn task_leave_any_vehicle(ped: Ped, delay_time: i32, flags: i32) {
        call_native!(Void, 0x504D54DF3F6F2247u64, ped, delay_time, flags);
    } // 0x504D54DF3F6F2247 0xDBDD79FA b323
    pub unsafe fn task_aim_gun_scripted(
        ped: Ped,
        script_task: Hash,
        disable_blocking_clip: bool,
        instant_blend_to_aim: bool,
    ) {
        call_native!(
            Void,
            0x7A192BE16D373D00u64,
            ped,
            script_task,
            disable_blocking_clip,
            instant_blend_to_aim
        );
    } // 0x7A192BE16D373D00 0x9D296BCD b323
    pub unsafe fn task_aim_gun_scripted_with_target(
        ped: Ped,
        target: Ped,
        x: f32,
        y: f32,
        z: f32,
        gun_task_type: i32,
        disable_blocking_clip: bool,
        force_aim: bool,
    ) {
        call_native!(
            Void,
            0x8605AF0DE8B3A5ACu64,
            ped,
            target,
            x,
            y,
            z,
            gun_task_type,
            disable_blocking_clip,
            force_aim
        );
    } // 0x8605AF0DE8B3A5AC 0xFD517CE3 b323
    pub unsafe fn update_task_aim_gun_scripted_target(
        ped: Ped,
        target: Ped,
        x: f32,
        y: f32,
        z: f32,
        disable_blocking_clip: bool,
    ) {
        call_native!(
            Void,
            0x9724FB59A3E72AD0u64,
            ped,
            target,
            x,
            y,
            z,
            disable_blocking_clip
        );
    } // 0x9724FB59A3E72AD0 0x67E73525 b323
    pub unsafe fn get_clip_set_for_scripted_gun_task(gun_task_type: i32) -> *const i8 {
        call_native!(*const i8, 0x3A8CADC7D37AACC5u64, gun_task_type)
    } // 0x3A8CADC7D37AACC5 0x249EB4EB b323
    pub unsafe fn task_aim_gun_at_entity(
        ped: Ped,
        entity: Entity,
        duration: i32,
        instant_blend_to_aim: bool,
    ) {
        call_native!(
            Void,
            0x9B53BB6E8943AF53u64,
            ped,
            entity,
            duration,
            instant_blend_to_aim
        );
    } // 0x9B53BB6E8943AF53 0xBE32B3B6 b323
    pub unsafe fn task_turn_ped_to_face_entity(ped: Ped, entity: Entity, duration: i32) {
        call_native!(Void, 0x5AD23D40115353ACu64, ped, entity, duration);
    } // 0x5AD23D40115353AC 0x3C37C767 b323
    pub unsafe fn task_aim_gun_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        time: i32,
        instant_blend_to_aim: bool,
        play_anim_intro: bool,
    ) {
        call_native!(
            Void,
            0x6671F3EEC681BDA1u64,
            ped,
            x,
            y,
            z,
            time,
            instant_blend_to_aim,
            play_anim_intro
        );
    } // 0x6671F3EEC681BDA1 0xFBF44AD3 b323
    pub unsafe fn task_shoot_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        duration: i32,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x46A6CC01E0826106u64,
            ped,
            x,
            y,
            z,
            duration,
            firing_pattern
        );
    } // 0x46A6CC01E0826106 0x601C22E3 b323
    pub unsafe fn task_shuffle_to_next_vehicle_seat(
        ped: Ped,
        vehicle: Vehicle,
        use_alternate_shuffle: bool,
    ) {
        call_native!(
            Void,
            0x7AA80209BDA643EBu64,
            ped,
            vehicle,
            use_alternate_shuffle
        );
    } // 0x7AA80209BDA643EB 0xBEAF8F67 b323
    pub unsafe fn clear_ped_tasks(ped: Ped) {
        call_native!(Void, 0xE1EF3C1216AFF2CDu64, ped);
    } // 0xE1EF3C1216AFF2CD 0xDE3316AB b323
    pub unsafe fn clear_ped_secondary_task(ped: Ped) {
        call_native!(Void, 0x176CECF6F920D707u64, ped);
    } // 0x176CECF6F920D707 0xA635F451 b323
    pub unsafe fn task_everyone_leave_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0x7F93691AB4B92272u64, vehicle);
    } // 0x7F93691AB4B92272 0xC1971F30 b323
    pub unsafe fn task_goto_entity_offset(
        ped: Ped,
        entity: Entity,
        time: i32,
        seek_radius: f32,
        seek_angle_deg: f32,
        move_blend_ratio: f32,
        goto_entity_offset_flags: i32,
    ) {
        call_native!(
            Void,
            0xE39B4FF4FDEBDE27u64,
            ped,
            entity,
            time,
            seek_radius,
            seek_angle_deg,
            move_blend_ratio,
            goto_entity_offset_flags
        );
    } // 0xE39B4FF4FDEBDE27 0x1A17A85E b323
    pub unsafe fn task_goto_entity_offset_xy(
        ped: Ped,
        entity: Entity,
        duration: i32,
        target_radius: f32,
        offset_x: f32,
        offset_y: f32,
        move_blend_ratio: f32,
        goto_entity_offset_flags: i32,
    ) {
        call_native!(
            Void,
            0x338E7EF52B6095A9u64,
            ped,
            entity,
            duration,
            target_radius,
            offset_x,
            offset_y,
            move_blend_ratio,
            goto_entity_offset_flags
        );
    } // 0x338E7EF52B6095A9 0xBC1E3D0A b323
    pub unsafe fn task_turn_ped_to_face_coord(ped: Ped, x: f32, y: f32, z: f32, duration: i32) {
        call_native!(Void, 0x1DDA930A0AC38571u64, ped, x, y, z, duration);
    } // 0x1DDA930A0AC38571 0x30463D73 b323
    pub unsafe fn task_vehicle_temp_action(driver: Ped, vehicle: Vehicle, action: i32, time: i32) {
        call_native!(Void, 0xC429DCEEB339E129u64, driver, vehicle, action, time);
    } // 0xC429DCEEB339E129 0x0679DFB8 b323
    pub unsafe fn task_vehicle_mission(
        driver: Ped,
        vehicle: Vehicle,
        vehicle_target: Vehicle,
        mission_type: i32,
        cruise_speed: f32,
        driving_style: i32,
        target_reached: f32,
        straight_line_distance: f32,
        _drive_against_traffic: bool,
    ) {
        call_native!(
            Void,
            0x659427E0EF36BCDEu64,
            driver,
            vehicle,
            vehicle_target,
            mission_type,
            cruise_speed,
            driving_style,
            target_reached,
            straight_line_distance,
            _drive_against_traffic
        );
    } // 0x659427E0EF36BCDE 0x20609E56 b323
    pub unsafe fn task_vehicle_mission_ped_target(
        ped: Ped,
        vehicle: Vehicle,
        ped_target: Ped,
        mission_type: i32,
        max_speed: f32,
        driving_style: i32,
        min_distance: f32,
        straight_line_distance: f32,
        _drive_against_traffic: bool,
    ) {
        call_native!(
            Void,
            0x9454528DF15D657Au64,
            ped,
            vehicle,
            ped_target,
            mission_type,
            max_speed,
            driving_style,
            min_distance,
            straight_line_distance,
            _drive_against_traffic
        );
    } // 0x9454528DF15D657A 0xC81C4677 b323
    pub unsafe fn task_vehicle_mission_coors_target(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        mission: i32,
        cruise_speed: f32,
        driving_style: i32,
        target_reached: f32,
        straight_line_distance: f32,
        _drive_against_traffic: bool,
    ) {
        call_native!(
            Void,
            0xF0AF20AA7731F8C3u64,
            ped,
            vehicle,
            x,
            y,
            z,
            mission,
            cruise_speed,
            driving_style,
            target_reached,
            straight_line_distance,
            _drive_against_traffic
        );
    } // 0xF0AF20AA7731F8C3 0x6719C109 b323
    pub unsafe fn task_vehicle_escort(
        ped: Ped,
        vehicle: Vehicle,
        target_vehicle: Vehicle,
        mode: i32,
        speed: f32,
        driving_style: i32,
        min_distance: f32,
        min_height_above_terrain: i32,
        no_roads_distance: f32,
    ) {
        call_native!(
            Void,
            0x0FA6E4B75F302400u64,
            ped,
            vehicle,
            target_vehicle,
            mode,
            speed,
            driving_style,
            min_distance,
            min_height_above_terrain,
            no_roads_distance
        );
    } // 0x0FA6E4B75F302400 0x9FDCB250 b323
    pub unsafe fn task_vehicle_follow(
        driver: Ped,
        vehicle: Vehicle,
        target_entity: Entity,
        speed: f32,
        driving_style: i32,
        min_distance: i32,
    ) {
        call_native!(
            Void,
            0xFC545A9F0626E3B6u64,
            driver,
            vehicle,
            target_entity,
            speed,
            driving_style,
            min_distance
        );
    } // 0xFC545A9F0626E3B6 0xA8B917D7 b323
    pub unsafe fn task_vehicle_chase(driver: Ped, target_ent: Entity) {
        call_native!(Void, 0x3C08A8E30363B353u64, driver, target_ent);
    } // 0x3C08A8E30363B353 0x55634798 b323
    pub unsafe fn task_vehicle_heli_protect(
        pilot: Ped,
        vehicle: Vehicle,
        entity_to_follow: Entity,
        target_speed: f32,
        driving_flags: i32,
        radius: f32,
        altitude: i32,
        heli_flags: i32,
    ) {
        call_native!(
            Void,
            0x1E09C32048FEFD1Cu64,
            pilot,
            vehicle,
            entity_to_follow,
            target_speed,
            driving_flags,
            radius,
            altitude,
            heli_flags
        );
    } // 0x1E09C32048FEFD1C 0x0CB415EE b323
    pub unsafe fn set_task_vehicle_chase_behavior_flag(ped: Ped, flag: i32, set: bool) {
        call_native!(Void, 0xCC665AAC360D31E7u64, ped, flag, set);
    } // 0xCC665AAC360D31E7 0x2A83083F b323
    pub unsafe fn set_task_vehicle_chase_ideal_pursuit_distance(ped: Ped, distance: f32) {
        call_native!(Void, 0x639B642FACBE4EDDu64, ped, distance);
    } // 0x639B642FACBE4EDD 0x04FD3EE7 b323
    pub unsafe fn task_heli_chase(pilot: Ped, entity_to_follow: Entity, x: f32, y: f32, z: f32) {
        call_native!(
            Void,
            0xAC83B1DB38D0ADA0u64,
            pilot,
            entity_to_follow,
            x,
            y,
            z
        );
    } // 0xAC83B1DB38D0ADA0 0xAC290A21 b323
    pub unsafe fn task_plane_chase(pilot: Ped, entity_to_follow: Entity, x: f32, y: f32, z: f32) {
        call_native!(
            Void,
            0x2D2386F273FF7A25u64,
            pilot,
            entity_to_follow,
            x,
            y,
            z
        );
    } // 0x2D2386F273FF7A25 0x12FA1C28 b323
    pub unsafe fn task_plane_land(
        pilot: Ped,
        plane: Vehicle,
        runway_start_x: f32,
        runway_start_y: f32,
        runway_start_z: f32,
        runway_end_x: f32,
        runway_end_y: f32,
        runway_end_z: f32,
    ) {
        call_native!(
            Void,
            0xBF19721FA34D32C0u64,
            pilot,
            plane,
            runway_start_x,
            runway_start_y,
            runway_start_z,
            runway_end_x,
            runway_end_y,
            runway_end_z
        );
    } // 0xBF19721FA34D32C0 0x5F7E23EA b323
    pub unsafe fn clear_default_primary_task(ped: Ped) {
        call_native!(Void, 0x6100B3CEFD43452Eu64, ped);
    } // 0x6100B3CEFD43452E  b2189
    pub unsafe fn clear_primary_vehicle_task(vehicle: Vehicle) {
        call_native!(Void, 0xDBBC7A2432524127u64, vehicle);
    } // 0xDBBC7A2432524127  b1290
    pub unsafe fn clear_vehicle_crash_task(vehicle: Vehicle) {
        call_native!(Void, 0x53DDC75BC3AC0A90u64, vehicle);
    } // 0x53DDC75BC3AC0A90  b1290
    pub unsafe fn task_plane_goto_precise_vtol(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        flight_height: i32,
        min_height_above_terrain: i32,
        use_desired_orientation: bool,
        desired_orientation: f32,
        autopilot: bool,
    ) {
        call_native!(
            Void,
            0xF7F9DCCA89E7505Bu64,
            ped,
            vehicle,
            x,
            y,
            z,
            flight_height,
            min_height_above_terrain,
            use_desired_orientation,
            desired_orientation,
            autopilot
        );
    } // 0xF7F9DCCA89E7505B  b1290
    pub unsafe fn task_submarine_goto_and_stop(
        ped: Ped,
        submarine: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        autopilot: bool,
    ) {
        call_native!(
            Void,
            0xC22B40579A498CA4u64,
            ped,
            submarine,
            x,
            y,
            z,
            autopilot
        );
    } // 0xC22B40579A498CA4  b2189
    pub unsafe fn task_heli_mission(
        pilot: Ped,
        aircraft: Vehicle,
        target_vehicle: Vehicle,
        target_ped: Ped,
        destination_x: f32,
        destination_y: f32,
        destination_z: f32,
        mission_flag: i32,
        max_speed: f32,
        radius: f32,
        target_heading: f32,
        max_height: i32,
        min_height: i32,
        slow_down_distance: f32,
        behavior_flags: i32,
    ) {
        call_native!(
            Void,
            0xDAD029E187A2BEB4u64,
            pilot,
            aircraft,
            target_vehicle,
            target_ped,
            destination_x,
            destination_y,
            destination_z,
            mission_flag,
            max_speed,
            radius,
            target_heading,
            max_height,
            min_height,
            slow_down_distance,
            behavior_flags
        );
    } // 0xDAD029E187A2BEB4 0x0C143E97 b323
    pub unsafe fn task_heli_escort_heli(
        pilot: Ped,
        heli_1: Vehicle,
        heli_2: Vehicle,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
    ) {
        call_native!(
            Void,
            0xB385523325077210u64,
            pilot,
            heli_1,
            heli_2,
            offset_x,
            offset_y,
            offset_z
        );
    } // 0xB385523325077210  b1290
    pub unsafe fn task_plane_mission(
        pilot: Ped,
        aircraft: Vehicle,
        target_vehicle: Vehicle,
        target_ped: Ped,
        destination_x: f32,
        destination_y: f32,
        destination_z: f32,
        mission_flag: i32,
        angular_drag: f32,
        target_reached: f32,
        target_heading: f32,
        max_z: f32,
        min_z: f32,
        precise: bool,
    ) {
        call_native!(
            Void,
            0x23703CD154E83B88u64,
            pilot,
            aircraft,
            target_vehicle,
            target_ped,
            destination_x,
            destination_y,
            destination_z,
            mission_flag,
            angular_drag,
            target_reached,
            target_heading,
            max_z,
            min_z,
            precise
        );
    } // 0x23703CD154E83B88 0x1D007E65 b323
    pub unsafe fn task_plane_taxi(
        pilot: Ped,
        aircraft: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        cruise_speed: f32,
        target_reached: f32,
    ) {
        call_native!(
            Void,
            0x92C360B5F15D2302u64,
            pilot,
            aircraft,
            x,
            y,
            z,
            cruise_speed,
            target_reached
        );
    } // 0x92C360B5F15D2302  b1103
    pub unsafe fn task_boat_mission(
        ped_driver: Ped,
        vehicle: Vehicle,
        target_vehicle: Vehicle,
        target_ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        mission: i32,
        max_speed: f32,
        driving_style: i32,
        target_reached: f32,
        boat_flags: Any,
    ) {
        call_native!(
            Void,
            0x15C86013127CE63Fu64,
            ped_driver,
            vehicle,
            target_vehicle,
            target_ped,
            x,
            y,
            z,
            mission,
            max_speed,
            driving_style,
            target_reached,
            boat_flags
        );
    } // 0x15C86013127CE63F 0x5865B031 b323
    pub unsafe fn task_drive_by(
        driver_ped: Ped,
        target_ped: Ped,
        target_vehicle: Vehicle,
        target_x: f32,
        target_y: f32,
        target_z: f32,
        distance_to_shoot: f32,
        ped_accuracy: i32,
        push_underneath_driving_task_if_driving: bool,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x2F8AF0E82773A171u64,
            driver_ped,
            target_ped,
            target_vehicle,
            target_x,
            target_y,
            target_z,
            distance_to_shoot,
            ped_accuracy,
            push_underneath_driving_task_if_driving,
            firing_pattern
        );
    } // 0x2F8AF0E82773A171 0x2B84D1C4 b323
    pub unsafe fn set_driveby_task_target(
        shooting_ped: Ped,
        target_ped: Ped,
        target_vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
    ) {
        call_native!(
            Void,
            0xE5B302114D8162EEu64,
            shooting_ped,
            target_ped,
            target_vehicle,
            x,
            y,
            z
        );
    } // 0xE5B302114D8162EE 0xDA6A6FC1 b323
    pub unsafe fn clear_driveby_task_underneath_driving_task(ped: Ped) {
        call_native!(Void, 0xC35B5CDB2824CF69u64, ped);
    } // 0xC35B5CDB2824CF69 0x9B76F7E6 b323
    pub unsafe fn is_driveby_task_underneath_driving_task(ped: Ped) -> bool {
        call_native!(bool, 0x8785E6E40C7A8818u64, ped)
    } // 0x8785E6E40C7A8818 0xB23F46E6 b323
    pub unsafe fn control_mounted_weapon(ped: Ped) -> bool {
        call_native!(bool, 0xDCFE42068FE0135Au64, ped)
    } // 0xDCFE42068FE0135A 0x500D9244 b323
    pub unsafe fn set_mounted_weapon_target(
        shooting_ped: Ped,
        target_ped: Ped,
        target_vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        task_mode: i32,
        ignore_target_veh_dead_check: bool,
    ) {
        call_native!(
            Void,
            0xCCD892192C6D2BB9u64,
            shooting_ped,
            target_ped,
            target_vehicle,
            x,
            y,
            z,
            task_mode,
            ignore_target_veh_dead_check
        );
    } // 0xCCD892192C6D2BB9 0x98713C68 b323
    pub unsafe fn is_mounted_weapon_task_underneath_driving_task(ped: Ped) -> bool {
        call_native!(bool, 0xA320EF046186FA3Bu64, ped)
    } // 0xA320EF046186FA3B 0x291E938C b323
    pub unsafe fn task_use_mobile_phone(ped: Ped, use_phone: bool, desired_phone_mode: i32) {
        call_native!(
            Void,
            0xBD2A8EC3AF4DE7DBu64,
            ped,
            use_phone,
            desired_phone_mode
        );
    } // 0xBD2A8EC3AF4DE7DB 0x225A38C8 b323
    pub unsafe fn task_use_mobile_phone_timed(ped: Ped, duration: i32) {
        call_native!(Void, 0x5EE02954A14C69DBu64, ped, duration);
    } // 0x5EE02954A14C69DB 0xC99C19F5 b323
    pub unsafe fn task_chat_to_ped(
        ped: Ped,
        target: Ped,
        flags: i32,
        go_to_location_x: f32,
        go_to_location_y: f32,
        go_to_location_z: f32,
        heading_degs: f32,
        idle_time: f32,
    ) {
        call_native!(
            Void,
            0x8C338E0263E4FD19u64,
            ped,
            target,
            flags,
            go_to_location_x,
            go_to_location_y,
            go_to_location_z,
            heading_degs,
            idle_time
        );
    } // 0x8C338E0263E4FD19 0xA2BE1821 b323
    pub unsafe fn task_warp_ped_into_vehicle(ped: Ped, vehicle: Vehicle, seat: i32) {
        call_native!(Void, 0x9A7D091411C5F684u64, ped, vehicle, seat);
    } // 0x9A7D091411C5F684 0x65D4A35D b323
    pub unsafe fn task_shoot_at_entity(
        entity: Entity,
        target: Entity,
        duration: i32,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x08DA95E8298AE772u64,
            entity,
            target,
            duration,
            firing_pattern
        );
    } // 0x08DA95E8298AE772 0xAC0631C9 b323
    pub unsafe fn task_climb(ped: Ped, use_player_launch_force: bool) {
        call_native!(Void, 0x89D9FCC2435112F1u64, ped, use_player_launch_force);
    } // 0x89D9FCC2435112F1 0x90847790 b323
    pub unsafe fn task_climb_ladder(ped: Ped, fast: bool) {
        call_native!(Void, 0xB6C987F9285A3814u64, ped, fast);
    } // 0xB6C987F9285A3814 0x35BB4EE0 b323
    pub unsafe fn task_rappel_down_wall_using_clipset_override(
        ped: Ped,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        min_z: f32,
        rope_handle: i32,
        clip_set: *const i8,
        p_1_0: Any,
        p_1_1: Any,
    ) {
        call_native!(
            Void,
            0xEAF66ACDDC794793u64,
            ped,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            min_z,
            rope_handle,
            clip_set,
            p_1_0,
            p_1_1
        );
    } // 0xEAF66ACDDC794793  b1868
    pub unsafe fn get_task_rappel_down_wall_state(ped: Ped) -> i32 {
        call_native!(i32, 0x9D252648778160DFu64, ped)
    } // 0x9D252648778160DF  b1868
    pub unsafe fn clear_ped_tasks_immediately(ped: Ped) {
        call_native!(Void, 0xAAA34F8A7CB32098u64, ped);
    } // 0xAAA34F8A7CB32098 0xBC045625 b323
    pub unsafe fn task_perform_sequence_from_progress(
        ped: Ped,
        task_index: i32,
        progress_1: i32,
        progress_2: i32,
    ) {
        call_native!(
            Void,
            0x89221B16730234F0u64,
            ped,
            task_index,
            progress_1,
            progress_2
        );
    } // 0x89221B16730234F0 0xFA60601B b323
    pub unsafe fn set_next_desired_move_state(next_move_state: f32) {
        call_native!(Void, 0xF1B9F16E89E2C93Au64, next_move_state);
    } // 0xF1B9F16E89E2C93A 0x4E937D57 b323
    pub unsafe fn set_ped_desired_move_blend_ratio(ped: Ped, new_move_blend_ratio: f32) {
        call_native!(Void, 0x1E982AC8716912C5u64, ped, new_move_blend_ratio);
    } // 0x1E982AC8716912C5 0xC65FC712 b323
    pub unsafe fn get_ped_desired_move_blend_ratio(ped: Ped) -> f32 {
        call_native!(f32, 0x8517D4A6CA8513EDu64, ped)
    } // 0x8517D4A6CA8513ED 0x5FEFAB72 b323
    pub unsafe fn task_goto_entity_aiming(
        ped: Ped,
        target: Entity,
        distance_to_stop_at: f32,
        _start_aiming_dist: f32,
    ) {
        call_native!(
            Void,
            0xA9DA48FAB8A76C12u64,
            ped,
            target,
            distance_to_stop_at,
            _start_aiming_dist
        );
    } // 0xA9DA48FAB8A76C12 0xF1C493CF b323
    pub unsafe fn task_set_decision_maker(ped: Ped, decision_maker_id: Hash) {
        call_native!(Void, 0xEB8517DDA73720DAu64, ped, decision_maker_id);
    } // 0xEB8517DDA73720DA 0x830AD50C b323
    pub unsafe fn task_set_sphere_defensive_area(ped: Ped, x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0x933C06518B52A9A4u64, ped, x, y, z, radius);
    } // 0x933C06518B52A9A4 0x9F3C5D6A b323
    pub unsafe fn task_clear_defensive_area(ped: Ped) {
        call_native!(Void, 0x95A6C46A31D1917Du64, ped);
    } // 0x95A6C46A31D1917D 0x7A05BF0D b323
    pub unsafe fn task_ped_slide_to_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        speed: f32,
    ) {
        call_native!(Void, 0xD04FE6765D990A06u64, ped, x, y, z, heading, speed);
    } // 0xD04FE6765D990A06 0x225380EF b323
    pub unsafe fn task_ped_slide_to_coord_hdg_rate(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        speed: f32,
        heading_change_rate: f32,
    ) {
        call_native!(
            Void,
            0x5A4A6A6D3DC64F52u64,
            ped,
            x,
            y,
            z,
            heading,
            speed,
            heading_change_rate
        );
    } // 0x5A4A6A6D3DC64F52 0x38A995C1 b323
    pub unsafe fn add_cover_point(
        x: f32,
        y: f32,
        z: f32,
        direction: f32,
        usage: i32,
        height: i32,
        arc: i32,
        is_priority: bool,
    ) -> ScrHandle {
        call_native!(
            ScrHandle,
            0xD5C12A75C7B9497Fu64,
            x,
            y,
            z,
            direction,
            usage,
            height,
            arc,
            is_priority
        )
    } // 0xD5C12A75C7B9497F 0xA0AF0B98 b323
    pub unsafe fn remove_cover_point(coverpoint: ScrHandle) {
        call_native!(Void, 0xAE287C923D891715u64, coverpoint);
    } // 0xAE287C923D891715 0x0776888B b323
    pub unsafe fn does_scripted_cover_point_exist_at_coords(x: f32, y: f32, z: f32) -> bool {
        call_native!(bool, 0xA98B8E3C088E5A31u64, x, y, z)
    } // 0xA98B8E3C088E5A31 0x29F97A71 b323
    pub unsafe fn get_scripted_cover_point_coords(coverpoint: ScrHandle) -> Vector3 {
        call_native!(Vector3, 0x594A1028FC2A3E85u64, coverpoint)
    } // 0x594A1028FC2A3E85 0xC6B6CCC1 b323
    pub unsafe fn add_scripted_cover_area(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0x28B7B9BFDAF274AAu64, x, y, z, radius);
    } // 0x28B7B9BFDAF274AA  b2545
    pub unsafe fn task_combat_ped(
        ped: Ped,
        target_ped: Ped,
        combat_flags: i32,
        threat_response_flags: i32,
    ) {
        call_native!(
            Void,
            0xF166E48407BAC484u64,
            ped,
            target_ped,
            combat_flags,
            threat_response_flags
        );
    } // 0xF166E48407BAC484 0xCB0D8932 b323
    pub unsafe fn task_combat_ped_timed(ped: Ped, target: Ped, time: i32, flags: i32) {
        call_native!(Void, 0x944F30DCB7096BDEu64, ped, target, time, flags);
    } // 0x944F30DCB7096BDE 0xF5CA2A45 b323
    pub unsafe fn task_seek_cover_from_pos(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        duration: i32,
        allow_peeking_and_firing: bool,
    ) {
        call_native!(
            Void,
            0x75AC2B60386D89F2u64,
            ped,
            x,
            y,
            z,
            duration,
            allow_peeking_and_firing
        );
    } // 0x75AC2B60386D89F2 0x83F18EE9 b323
    pub unsafe fn task_seek_cover_from_ped(
        ped: Ped,
        target: Ped,
        duration: i32,
        allow_peeking_and_firing: bool,
    ) {
        call_native!(
            Void,
            0x84D32B3BEC531324u64,
            ped,
            target,
            duration,
            allow_peeking_and_firing
        );
    } // 0x84D32B3BEC531324 0xC1EC907E b323
    pub unsafe fn task_seek_cover_to_cover_point(
        ped: Ped,
        coverpoint: ScrHandle,
        x: f32,
        y: f32,
        z: f32,
        time: i32,
        allow_peeking_and_firing: bool,
    ) {
        call_native!(
            Void,
            0xD43D95C7A869447Fu64,
            ped,
            coverpoint,
            x,
            y,
            z,
            time,
            allow_peeking_and_firing
        );
    } // 0xD43D95C7A869447F 0x3D026B29 b323
    pub unsafe fn task_seek_cover_to_coords(
        ped: Ped,
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        timeout: i32,
        short_route: bool,
    ) {
        call_native!(
            Void,
            0x39246A6958EF072Cu64,
            ped,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            timeout,
            short_route
        );
    } // 0x39246A6958EF072C 0xFFFE754E b323
    pub unsafe fn task_put_ped_directly_into_cover(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        time: i32,
        allow_peeking_and_firing: bool,
        blend_in_duration: f32,
        force_initial_facing_direction: bool,
        force_face_left: bool,
        identifier: i32,
        do_entry: bool,
    ) {
        call_native!(
            Void,
            0x4172393E6BE1FECEu64,
            ped,
            x,
            y,
            z,
            time,
            allow_peeking_and_firing,
            blend_in_duration,
            force_initial_facing_direction,
            force_face_left,
            identifier,
            do_entry
        );
    } // 0x4172393E6BE1FECE 0xC9F00E68 b323
    pub unsafe fn task_warp_ped_directly_into_cover(
        ped: Ped,
        time: i32,
        allow_peeking_and_firing: bool,
        force_initial_facing_direction: bool,
        force_face_left: bool,
        identifier: i32,
    ) {
        call_native!(
            Void,
            0x6E01E9E8D89F8276u64,
            ped,
            time,
            allow_peeking_and_firing,
            force_initial_facing_direction,
            force_face_left,
            identifier
        );
    } // 0x6E01E9E8D89F8276  b2545
    pub unsafe fn task_exit_cover(ped: Ped, exit_type: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x79B258E397854D29u64, ped, exit_type, x, y, z);
    } // 0x79B258E397854D29 0xC829FAC9 b323
    pub unsafe fn task_put_ped_directly_into_melee(
        ped: Ped,
        melee_target: Ped,
        blend_in_duration: f32,
        time_in_melee: f32,
        strafe_phase_sync: f32,
        ai_combat_flags: i32,
    ) {
        call_native!(
            Void,
            0x1C6CD14A876FFE39u64,
            ped,
            melee_target,
            blend_in_duration,
            time_in_melee,
            strafe_phase_sync,
            ai_combat_flags
        );
    } // 0x1C6CD14A876FFE39 0x79E1D27D b323
    pub unsafe fn task_toggle_duck(ped: Ped, toggle_type: i32) {
        call_native!(Void, 0xAC96609B9995EDF8u64, ped, toggle_type);
    } // 0xAC96609B9995EDF8 0x61CFBCBF b323
    pub unsafe fn task_guard_current_position(
        ped: Ped,
        max_patrol_proximity: f32,
        defensive_area_radius: f32,
        set_defensive_area: bool,
    ) {
        call_native!(
            Void,
            0x4A58A47A72E3FCB4u64,
            ped,
            max_patrol_proximity,
            defensive_area_radius,
            set_defensive_area
        );
    } // 0x4A58A47A72E3FCB4 0x2FB099E9 b323
    pub unsafe fn task_guard_assigned_defensive_area(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        max_patrol_proximity: f32,
        timer: i32,
    ) {
        call_native!(
            Void,
            0xD2A207EEBDF9889Bu64,
            ped,
            x,
            y,
            z,
            heading,
            max_patrol_proximity,
            timer
        );
    } // 0xD2A207EEBDF9889B 0x7AF0133D b323
    pub unsafe fn task_guard_sphere_defensive_area(
        ped: Ped,
        defend_position_x: f32,
        defend_position_y: f32,
        defend_position_z: f32,
        heading: f32,
        max_patrol_proximity: f32,
        time: i32,
        x: f32,
        y: f32,
        z: f32,
        defensive_area_radius: f32,
    ) {
        call_native!(
            Void,
            0xC946FE14BE0EB5E2u64,
            ped,
            defend_position_x,
            defend_position_y,
            defend_position_z,
            heading,
            max_patrol_proximity,
            time,
            x,
            y,
            z,
            defensive_area_radius
        );
    } // 0xC946FE14BE0EB5E2 0x86B76CB7 b323
    pub unsafe fn task_stand_guard(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        scenario_name: *const i8,
    ) {
        call_native!(
            Void,
            0xAE032F8BBA959E90u64,
            ped,
            x,
            y,
            z,
            heading,
            scenario_name
        );
    } // 0xAE032F8BBA959E90 0xD130F636 b323
    pub unsafe fn set_drive_task_cruise_speed(driver: Ped, cruise_speed: f32) {
        call_native!(Void, 0x5C9B84BD7D31D908u64, driver, cruise_speed);
    } // 0x5C9B84BD7D31D908 0x3CEC07B1 b323
    pub unsafe fn set_drive_task_max_cruise_speed(ped: Ped, speed: f32) {
        call_native!(Void, 0x404A5AA9B9F0B746u64, ped, speed);
    } // 0x404A5AA9B9F0B746 0x7FDF6131 b323
    pub unsafe fn set_drive_task_driving_style(ped: Ped, driving_style: i32) {
        call_native!(Void, 0xDACE1BE37D88AF67u64, ped, driving_style);
    } // 0xDACE1BE37D88AF67 0x59C5FAD7 b323
    pub unsafe fn add_cover_blocking_area(
        start_x: f32,
        start_y: f32,
        start_z: f32,
        end_x: f32,
        end_y: f32,
        end_z: f32,
        block_objects: bool,
        block_vehicles: bool,
        block_map: bool,
        block_player: bool,
    ) {
        call_native!(
            Void,
            0x45C597097DD7CB81u64,
            start_x,
            start_y,
            start_z,
            end_x,
            end_y,
            end_z,
            block_objects,
            block_vehicles,
            block_map,
            block_player
        );
    } // 0x45C597097DD7CB81 0x3536946F b323
    pub unsafe fn remove_all_cover_blocking_areas() {
        call_native!(Void, 0xDB6708C0B46F56D8u64);
    } // 0xDB6708C0B46F56D8 0xCF9221A7 b323
    pub unsafe fn remove_cover_blocking_areas_at_position(x: f32, y: f32, z: f32) {
        call_native!(Void, 0xFA83CA6776038F64u64, x, y, z);
    } // 0xFA83CA6776038F64  b1493
    pub unsafe fn remove_specific_cover_blocking_areas(
        start_x: f32,
        start_y: f32,
        start_z: f32,
        end_x: f32,
        end_y: f32,
        end_z: f32,
        block_objects: bool,
        block_vehicles: bool,
        block_map: bool,
        block_player: bool,
    ) {
        call_native!(
            Void,
            0x1F351CF1C6475734u64,
            start_x,
            start_y,
            start_z,
            end_x,
            end_y,
            end_z,
            block_objects,
            block_vehicles,
            block_map,
            block_player
        );
    } // 0x1F351CF1C6475734  b505
    pub unsafe fn task_start_scenario_in_place(
        ped: Ped,
        scenario_name: *const i8,
        unk_delay: i32,
        play_enter_anim: bool,
    ) {
        call_native!(
            Void,
            0x142A02425FF02BD9u64,
            ped,
            scenario_name,
            unk_delay,
            play_enter_anim
        );
    } // 0x142A02425FF02BD9 0xE50D6DDE b323
    pub unsafe fn task_start_scenario_at_position(
        ped: Ped,
        scenario_name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        duration: i32,
        sitting_scenario: bool,
        teleport: bool,
    ) {
        call_native!(
            Void,
            0xFA4EFC79F69D4F07u64,
            ped,
            scenario_name,
            x,
            y,
            z,
            heading,
            duration,
            sitting_scenario,
            teleport
        );
    } // 0xFA4EFC79F69D4F07 0xAA2C4AC2 b323
    pub unsafe fn task_use_nearest_scenario_to_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        distance: f32,
        duration: i32,
    ) {
        call_native!(
            Void,
            0x277F471BA9DB000Bu64,
            ped,
            x,
            y,
            z,
            distance,
            duration
        );
    } // 0x277F471BA9DB000B 0x9C50FBF0 b323
    pub unsafe fn task_use_nearest_scenario_to_coord_warp(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        time_to_leave: i32,
    ) {
        call_native!(
            Void,
            0x58E2E0F23F6B76C3u64,
            ped,
            x,
            y,
            z,
            radius,
            time_to_leave
        );
    } // 0x58E2E0F23F6B76C3 0x1BE9D65C b323
    pub unsafe fn task_use_nearest_scenario_chain_to_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        max_range: f32,
        time_to_leave: i32,
    ) {
        call_native!(
            Void,
            0x9FDA1B3D7E7028B3u64,
            ped,
            x,
            y,
            z,
            max_range,
            time_to_leave
        );
    } // 0x9FDA1B3D7E7028B3 0xE32FFB22 b323
    pub unsafe fn task_use_nearest_scenario_chain_to_coord_warp(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        time_to_leave: i32,
    ) {
        call_native!(
            Void,
            0x97A28E63F0BA5631u64,
            ped,
            x,
            y,
            z,
            radius,
            time_to_leave
        );
    } // 0x97A28E63F0BA5631 0xBAB4C0AE b323
    pub unsafe fn does_scenario_exist_in_area(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        must_be_free: bool,
    ) -> bool {
        call_native!(bool, 0x5A59271FFADD33C1u64, x, y, z, radius, must_be_free)
    } // 0x5A59271FFADD33C1 0xFA7F5047 b323
    pub unsafe fn does_scenario_of_type_exist_in_area(
        x: f32,
        y: f32,
        z: f32,
        scenario_name: *const i8,
        radius: f32,
        must_be_free: bool,
    ) -> bool {
        call_native!(
            bool,
            0x0A9D0C2A3BBC86C1u64,
            x,
            y,
            z,
            scenario_name,
            radius,
            must_be_free
        )
    } // 0x0A9D0C2A3BBC86C1 0x0FB138A5 b323
    pub unsafe fn is_scenario_occupied(
        x: f32,
        y: f32,
        z: f32,
        max_range: f32,
        only_users_actually_at_scenario: bool,
    ) -> bool {
        call_native!(
            bool,
            0x788756D73AC2E07Cu64,
            x,
            y,
            z,
            max_range,
            only_users_actually_at_scenario
        )
    } // 0x788756D73AC2E07C 0x697FC008 b323
    pub unsafe fn ped_has_use_scenario_task(ped: Ped) -> bool {
        call_native!(bool, 0x295E3CCEC879CCD7u64, ped)
    } // 0x295E3CCEC879CCD7 0x9BE9C691 b323
    pub unsafe fn play_anim_on_running_scenario(
        ped: Ped,
        anim_dict: *const i8,
        anim_name: *const i8,
    ) {
        call_native!(Void, 0x748040460F8DF5DCu64, ped, anim_dict, anim_name);
    } // 0x748040460F8DF5DC 0x1984A5D1 b323
    pub unsafe fn does_scenario_group_exist(scenario_group: *const i8) -> bool {
        call_native!(bool, 0xF9034C136C9E00D3u64, scenario_group)
    } // 0xF9034C136C9E00D3 0x5F072EB9 b323
    pub unsafe fn is_scenario_group_enabled(scenario_group: *const i8) -> bool {
        call_native!(bool, 0x367A09DED4E05B99u64, scenario_group)
    } // 0x367A09DED4E05B99 0x90991122 b323
    pub unsafe fn set_scenario_group_enabled(scenario_group: *const i8, enabled: bool) {
        call_native!(Void, 0x02C8E5B49848664Eu64, scenario_group, enabled);
    } // 0x02C8E5B49848664E 0x116997B1 b323
    pub unsafe fn reset_scenario_groups_enabled() {
        call_native!(Void, 0xDD902D0349AFAD3Au64);
    } // 0xDD902D0349AFAD3A 0xBF55025D b323
    pub unsafe fn set_exclusive_scenario_group(scenario_group: *const i8) {
        call_native!(Void, 0x535E97E1F7FC0C6Au64, scenario_group);
    } // 0x535E97E1F7FC0C6A 0x59DB8F26 b323
    pub unsafe fn reset_exclusive_scenario_group() {
        call_native!(Void, 0x4202BBCB8684563Du64);
    } // 0x4202BBCB8684563D 0x17F9DFE8 b323
    pub unsafe fn is_scenario_type_enabled(scenario_type: *const i8) -> bool {
        call_native!(bool, 0x3A815DB3EA088722u64, scenario_type)
    } // 0x3A815DB3EA088722 0xAE37E969 b323
    pub unsafe fn set_scenario_type_enabled(scenario_type: *const i8, toggle: bool) {
        call_native!(Void, 0xEB47EC4E34FB7EE1u64, scenario_type, toggle);
    } // 0xEB47EC4E34FB7EE1 0xDB18E5DE b323
    pub unsafe fn reset_scenario_types_enabled() {
        call_native!(Void, 0x0D40EE2A7F2B2D6Du64);
    } // 0x0D40EE2A7F2B2D6D 0xF58FDEB4 b323
    pub unsafe fn is_ped_active_in_scenario(ped: Ped) -> bool {
        call_native!(bool, 0xAA135F9482C82CC3u64, ped)
    } // 0xAA135F9482C82CC3 0x05038F1A b323
    pub unsafe fn is_ped_playing_base_clip_in_scenario(ped: Ped) -> bool {
        call_native!(bool, 0x621C6E4729388E41u64, ped)
    } // 0x621C6E4729388E41 0xA0DA6B1D b323
    pub unsafe fn set_ped_can_play_ambient_idles(
        ped: Ped,
        block_idle_clips: bool,
        remove_idle_clip_if_playing: bool,
    ) {
        call_native!(
            Void,
            0x8FD89A6240813FD0u64,
            ped,
            block_idle_clips,
            remove_idle_clip_if_playing
        );
    } // 0x8FD89A6240813FD0 0xB5AD044E b323
    pub unsafe fn task_combat_hated_targets_in_area(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        combat_flags: i32,
    ) {
        call_native!(
            Void,
            0x4CF5F55DAC3280A0u64,
            ped,
            x,
            y,
            z,
            radius,
            combat_flags
        );
    } // 0x4CF5F55DAC3280A0 0xDF099E18 b323
    pub unsafe fn task_combat_hated_targets_around_ped(ped: Ped, radius: f32, combat_flags: i32) {
        call_native!(Void, 0x7BF835BB9E2698C8u64, ped, radius, combat_flags);
    } // 0x7BF835BB9E2698C8 0x2E7064E4 b323
    pub unsafe fn task_combat_hated_targets_around_ped_timed(
        ped: Ped,
        radius: f32,
        time: i32,
        combat_flags: i32,
    ) {
        call_native!(Void, 0x2BBA30B854534A0Cu64, ped, radius, time, combat_flags);
    } // 0x2BBA30B854534A0C 0xF127AD6A b323
    pub unsafe fn task_throw_projectile(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        ignore_collision_entity_index: i32,
        create_invincible_projectile: bool,
    ) {
        call_native!(
            Void,
            0x7285951DBF6B5A51u64,
            ped,
            x,
            y,
            z,
            ignore_collision_entity_index,
            create_invincible_projectile
        );
    } // 0x7285951DBF6B5A51 0xF65C20A7 b323
    pub unsafe fn task_swap_weapon(ped: Ped, draw_weapon: bool) {
        call_native!(Void, 0xA21C51255B205245u64, ped, draw_weapon);
    } // 0xA21C51255B205245 0xDAF4F8FC b323
    pub unsafe fn task_reload_weapon(ped: Ped, draw_weapon: bool) {
        call_native!(Void, 0x62D2916F56B9CD2Du64, ped, draw_weapon);
    } // 0x62D2916F56B9CD2D 0xCA6E91FD b323
    pub unsafe fn is_ped_getting_up(ped: Ped) -> bool {
        call_native!(bool, 0x2A74E1D5F2F00EECu64, ped)
    } // 0x2A74E1D5F2F00EEC 0x320813E6 b323
    pub unsafe fn task_writhe(
        ped: Ped,
        target: Ped,
        min_fire_loops: i32,
        start_state: i32,
        force_shoot_on_ground: bool,
        shoot_from_ground_timer: i32,
    ) {
        call_native!(
            Void,
            0xCDDC2B77CE54AC6Eu64,
            ped,
            target,
            min_fire_loops,
            start_state,
            force_shoot_on_ground,
            shoot_from_ground_timer
        );
    } // 0xCDDC2B77CE54AC6E 0x0FDC54FC b323
    pub unsafe fn is_ped_in_writhe(ped: Ped) -> bool {
        call_native!(bool, 0xDEB6D52126E7D640u64, ped)
    } // 0xDEB6D52126E7D640 0x09E61921 b323
    pub unsafe fn open_patrol_route(patrol_route: *const i8) {
        call_native!(Void, 0xA36BFB5EE89F3D82u64, patrol_route);
    } // 0xA36BFB5EE89F3D82 0xF33F83CA b323
    pub unsafe fn close_patrol_route() {
        call_native!(Void, 0xB043ECA801B8CBC1u64);
    } // 0xB043ECA801B8CBC1 0x67305E59 b323
    pub unsafe fn add_patrol_route_node(
        node_id: i32,
        node_type: *const i8,
        pos_x: f32,
        pos_y: f32,
        pos_z: f32,
        heading_x: f32,
        heading_y: f32,
        heading_z: f32,
        duration: i32,
    ) {
        call_native!(
            Void,
            0x8EDF950167586B7Cu64,
            node_id,
            node_type,
            pos_x,
            pos_y,
            pos_z,
            heading_x,
            heading_y,
            heading_z,
            duration
        );
    } // 0x8EDF950167586B7C 0x21B48F10 b323
    pub unsafe fn add_patrol_route_link(node_id_1: i32, node_id_2: i32) {
        call_native!(Void, 0x23083260DEC3A551u64, node_id_1, node_id_2);
    } // 0x23083260DEC3A551 0xD8761BB3 b323
    pub unsafe fn create_patrol_route() {
        call_native!(Void, 0xAF8A443CCC8018DCu64);
    } // 0xAF8A443CCC8018DC 0x0A6C7864 b323
    pub unsafe fn delete_patrol_route(patrol_route: *const i8) {
        call_native!(Void, 0x7767DD9D65E91319u64, patrol_route);
    } // 0x7767DD9D65E91319 0x2A4E6706 b323
    pub unsafe fn get_patrol_task_info(
        ped: Ped,
        time_left_at_node: *mut i32,
        node_id: *mut i32,
    ) -> bool {
        call_native!(bool, 0x52F734CEBE20DFBAu64, ped, time_left_at_node, node_id)
    } // 0x52F734CEBE20DFBA  b2545
    pub unsafe fn task_patrol(
        ped: Ped,
        patrol_route_name: *const i8,
        alert_state: i32,
        can_chat_to_peds: bool,
        use_head_look_at: bool,
    ) {
        call_native!(
            Void,
            0xBDA5DF49D080FE4Eu64,
            ped,
            patrol_route_name,
            alert_state,
            can_chat_to_peds,
            use_head_look_at
        );
    } // 0xBDA5DF49D080FE4E 0xB92E5AF6 b323
    pub unsafe fn task_stay_in_cover(ped: Ped) {
        call_native!(Void, 0xE5DA8615A6180789u64, ped);
    } // 0xE5DA8615A6180789 0xA27A9413 b323
    pub unsafe fn add_vehicle_subtask_attack_coord(ped: Ped, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x5CF0D8F9BBA0DD75u64, ped, x, y, z);
    } // 0x5CF0D8F9BBA0DD75 0x50779A2C b323
    pub unsafe fn add_vehicle_subtask_attack_ped(ped: Ped, target: Ped) {
        call_native!(Void, 0x85F462BADC7DA47Fu64, ped, target);
    } // 0x85F462BADC7DA47F 0x80461113 b323
    pub unsafe fn task_vehicle_shoot_at_ped(ped: Ped, target: Ped, fire_tolerance: f32) {
        call_native!(Void, 0x10AB107B887214D8u64, ped, target, fire_tolerance);
    } // 0x10AB107B887214D8 0x59677BA0 b323
    pub unsafe fn task_vehicle_aim_at_ped(ped: Ped, target: Ped) {
        call_native!(Void, 0xE41885592B08B097u64, ped, target);
    } // 0xE41885592B08B097 0x920AE6DB b323
    pub unsafe fn task_vehicle_shoot_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        fire_tolerance: f32,
    ) {
        call_native!(Void, 0x5190796ED39C9B6Du64, ped, x, y, z, fire_tolerance);
    } // 0x5190796ED39C9B6D 0xA7AAA4D6 b323
    pub unsafe fn task_vehicle_aim_at_coord(ped: Ped, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x447C1E9EF844BC0Fu64, ped, x, y, z);
    } // 0x447C1E9EF844BC0F 0x010F47CE b323
    pub unsafe fn task_vehicle_goto_navmesh(
        ped: Ped,
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        speed: f32,
        behavior_flag: i32,
        stopping_range: f32,
    ) {
        call_native!(
            Void,
            0x195AEEB13CEFE2EEu64,
            ped,
            vehicle,
            x,
            y,
            z,
            speed,
            behavior_flag,
            stopping_range
        );
    } // 0x195AEEB13CEFE2EE 0x55CF3BCD b323
    pub unsafe fn task_go_to_coord_while_aiming_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        aim_at_x: f32,
        aim_at_y: f32,
        aim_at_z: f32,
        move_blend_ratio: f32,
        shoot: bool,
        target_radius: f32,
        slow_distance: f32,
        use_nav_mesh: bool,
        nav_flags: i32,
        instant_blend_to_aim: bool,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x11315AB3385B8AC0u64,
            ped,
            x,
            y,
            z,
            aim_at_x,
            aim_at_y,
            aim_at_z,
            move_blend_ratio,
            shoot,
            target_radius,
            slow_distance,
            use_nav_mesh,
            nav_flags,
            instant_blend_to_aim,
            firing_pattern
        );
    } // 0x11315AB3385B8AC0 0x1552DC91 b323
    pub unsafe fn task_go_to_coord_while_aiming_at_entity(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        aim_at_i_d: Entity,
        move_blend_ratio: f32,
        shoot: bool,
        target_radius: f32,
        slow_distance: f32,
        use_nav_mesh: bool,
        nav_flags: i32,
        instant_blend_to_aim: bool,
        firing_pattern: Hash,
        time: i32,
    ) {
        call_native!(
            Void,
            0xB2A16444EAD9AE47u64,
            ped,
            x,
            y,
            z,
            aim_at_i_d,
            move_blend_ratio,
            shoot,
            target_radius,
            slow_distance,
            use_nav_mesh,
            nav_flags,
            instant_blend_to_aim,
            firing_pattern,
            time
        );
    } // 0xB2A16444EAD9AE47 0x9BD52ABD b323
    pub unsafe fn task_go_to_coord_and_aim_at_hated_entities_near_coord(
        ped_handle: Ped,
        go_to_location_x: f32,
        go_to_location_y: f32,
        go_to_location_z: f32,
        focus_location_x: f32,
        focus_location_y: f32,
        focus_location_z: f32,
        speed: f32,
        shoot_at_enemies: bool,
        distance_to_stop_at: f32,
        no_roads_distance: f32,
        use_nav_mesh: bool,
        nav_flags: i32,
        task_flags: i32,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0xA55547801EB331FCu64,
            ped_handle,
            go_to_location_x,
            go_to_location_y,
            go_to_location_z,
            focus_location_x,
            focus_location_y,
            focus_location_z,
            speed,
            shoot_at_enemies,
            distance_to_stop_at,
            no_roads_distance,
            use_nav_mesh,
            nav_flags,
            task_flags,
            firing_pattern
        );
    } // 0xA55547801EB331FC 0x3F91358E b323
    pub unsafe fn task_go_to_entity_while_aiming_at_coord(
        ped: Ped,
        entity: Entity,
        aim_x: f32,
        aim_y: f32,
        aim_z: f32,
        move_blend_ratio: f32,
        shoot: bool,
        target_radius: f32,
        slow_distance: f32,
        use_nav_mesh: bool,
        instant_blend_to_aim: bool,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x04701832B739DCE5u64,
            ped,
            entity,
            aim_x,
            aim_y,
            aim_z,
            move_blend_ratio,
            shoot,
            target_radius,
            slow_distance,
            use_nav_mesh,
            instant_blend_to_aim,
            firing_pattern
        );
    } // 0x04701832B739DCE5 0xD896CD82 b323
    pub unsafe fn task_go_to_entity_while_aiming_at_entity(
        ped: Ped,
        entity_to_walk_to: Entity,
        entity_to_aim_at: Entity,
        speed: f32,
        shootat_entity: bool,
        target_radius: f32,
        slow_distance: f32,
        use_nav_mesh: bool,
        instant_blend_to_aim: bool,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x97465886D35210E9u64,
            ped,
            entity_to_walk_to,
            entity_to_aim_at,
            speed,
            shootat_entity,
            target_radius,
            slow_distance,
            use_nav_mesh,
            instant_blend_to_aim,
            firing_pattern
        );
    } // 0x97465886D35210E9 0x68E36B7A b323
    pub unsafe fn set_high_fall_task(ped: Ped, min_time: i32, max_time: i32, entry_type: i32) {
        call_native!(
            Void,
            0x8C825BDC7741D37Cu64,
            ped,
            min_time,
            max_time,
            entry_type
        );
    } // 0x8C825BDC7741D37C 0xBBB26172 b323
    pub unsafe fn request_waypoint_recording(name: *const i8) {
        call_native!(Void, 0x9EEFB62EB27B5792u64, name);
    } // 0x9EEFB62EB27B5792 0xAFABFB5D b323
    pub unsafe fn get_is_waypoint_recording_loaded(name: *const i8) -> bool {
        call_native!(bool, 0xCB4E8BE8A0063C5Du64, name)
    } // 0xCB4E8BE8A0063C5D 0x87125F5D b323
    pub unsafe fn remove_waypoint_recording(name: *const i8) {
        call_native!(Void, 0xFF1B8B4AA1C25DC8u64, name);
    } // 0xFF1B8B4AA1C25DC8 0x624530B0 b323
    pub unsafe fn waypoint_recording_get_num_points(name: *const i8, points: *mut i32) -> bool {
        call_native!(bool, 0x5343532C01A07234u64, name, points)
    } // 0x5343532C01A07234 0xF5F9B71E b323
    pub unsafe fn waypoint_recording_get_coord(
        name: *const i8,
        point: i32,
        coord: *mut Vector3,
    ) -> bool {
        call_native!(bool, 0x2FB897405C90B361u64, name, point, coord)
    } // 0x2FB897405C90B361 0x19266913 b323
    pub unsafe fn waypoint_recording_get_speed_at_point(name: *const i8, point: i32) -> f32 {
        call_native!(f32, 0x005622AEBC33ACA9u64, name, point)
    } // 0x005622AEBC33ACA9 0xC765633A b323
    pub unsafe fn waypoint_recording_get_closest_waypoint(
        name: *const i8,
        x: f32,
        y: f32,
        z: f32,
        point: *mut i32,
    ) -> bool {
        call_native!(bool, 0xB629A298081F876Fu64, name, x, y, z, point)
    } // 0xB629A298081F876F 0xC4CD35AF b323
    pub unsafe fn task_follow_waypoint_recording(
        ped: Ped,
        name: *const i8,
        p_2: i32,
        p_3: i32,
        p_4: i32,
    ) {
        call_native!(Void, 0x0759591819534F7Bu64, ped, name, p_2, p_3, p_4);
    } // 0x0759591819534F7B 0xADF9904D b323
    pub unsafe fn is_waypoint_playback_going_on_for_ped(ped: Ped) -> bool {
        call_native!(bool, 0xE03B3F2D3DC59B64u64, ped)
    } // 0xE03B3F2D3DC59B64 0x85B7725F b323
    pub unsafe fn get_ped_waypoint_progress(ped: Ped) -> i32 {
        call_native!(i32, 0x2720AAA75001E094u64, ped)
    } // 0x2720AAA75001E094 0x3595B104 b323
    pub unsafe fn get_ped_waypoint_distance(p_0: Any) -> f32 {
        call_native!(f32, 0xE6A877C64CAF1BC5u64, p_0)
    } // 0xE6A877C64CAF1BC5 0x084B35B0 b323
    pub unsafe fn set_ped_waypoint_route_offset(ped: Ped, x: f32, y: f32, z: f32) -> bool {
        call_native!(bool, 0xED98E10B0AFCE4B4u64, ped, x, y, z)
    } // 0xED98E10B0AFCE4B4 0xF867F747 b323
    pub unsafe fn get_waypoint_distance_along_route(name: *const i8, point: i32) -> f32 {
        call_native!(f32, 0xA5B769058763E497u64, name, point)
    } // 0xA5B769058763E497 0xE8422AC4 b323
    pub unsafe fn waypoint_playback_get_is_paused(p_0: Any) -> bool {
        call_native!(bool, 0x701375A7D43F01CBu64, p_0)
    } // 0x701375A7D43F01CB 0xA6BB5717 b323
    pub unsafe fn waypoint_playback_pause(p_0: Any, p_1: bool, p_2: bool) {
        call_native!(Void, 0x0F342546AA06FED5u64, p_0, p_1, p_2);
    } // 0x0F342546AA06FED5 0xFE39ECF8 b323
    pub unsafe fn waypoint_playback_resume(p_0: Any, p_1: bool, p_2: Any, p_3: Any) {
        call_native!(Void, 0x244F70C84C547D2Du64, p_0, p_1, p_2, p_3);
    } // 0x244F70C84C547D2D 0x50F392EF b323
    pub unsafe fn waypoint_playback_override_speed(p_0: Any, p_1: f32, p_2: bool) {
        call_native!(Void, 0x7D7D2B47FA788E85u64, p_0, p_1, p_2);
    } // 0x7D7D2B47FA788E85 0x23E6BA96 b323
    pub unsafe fn waypoint_playback_use_default_speed(p_0: Any) {
        call_native!(Void, 0x6599D834B12D0800u64, p_0);
    } // 0x6599D834B12D0800 0x1BBB2CAC b323
    pub unsafe fn use_waypoint_recording_as_assisted_movement_route(
        name: *const i8,
        p_1: bool,
        p_2: f32,
        p_3: f32,
    ) {
        call_native!(Void, 0x5A353B8E6B1095B5u64, name, p_1, p_2, p_3);
    } // 0x5A353B8E6B1095B5 0x4DFD5FEC b323
    pub unsafe fn waypoint_playback_start_aiming_at_ped(ped: Ped, target: Ped, p_2: bool) {
        call_native!(Void, 0x20E330937C399D29u64, ped, target, p_2);
    } // 0x20E330937C399D29 0x75E60CF6 b323
    pub unsafe fn waypoint_playback_start_aiming_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        p_4: bool,
    ) {
        call_native!(Void, 0x8968400D900ED8B3u64, ped, x, y, z, p_4);
    } // 0x8968400D900ED8B3 0xF120A34E b323
    pub unsafe fn waypoint_playback_start_shooting_at_ped(
        ped: Ped,
        ped_2: Ped,
        p_2: bool,
        p_3: bool,
    ) {
        call_native!(Void, 0xE70BA7B90F8390DCu64, ped, ped_2, p_2, p_3);
    } // 0xE70BA7B90F8390DC 0xBD5F0EB8 b323
    pub unsafe fn waypoint_playback_start_shooting_at_coord(
        ped: Ped,
        x: f32,
        y: f32,
        z: f32,
        p_4: bool,
        firing_pattern: Hash,
    ) {
        call_native!(
            Void,
            0x057A25CFCC9DB671u64,
            ped,
            x,
            y,
            z,
            p_4,
            firing_pattern
        );
    } // 0x057A25CFCC9DB671 0xCDDB44D5 b323
    pub unsafe fn waypoint_playback_stop_aiming_or_shooting(ped: Ped) {
        call_native!(Void, 0x47EFA040EBB8E2EAu64, ped);
    } // 0x47EFA040EBB8E2EA 0x6D7CF40C b323
    pub unsafe fn assisted_movement_request_route(route: *const i8) {
        call_native!(Void, 0x817268968605947Au64, route);
    } // 0x817268968605947A 0x48262EDA b323
    pub unsafe fn assisted_movement_remove_route(route: *const i8) {
        call_native!(Void, 0x3548536485DD792Bu64, route);
    } // 0x3548536485DD792B 0xB3CEC06F b323
    pub unsafe fn assisted_movement_is_route_loaded(route: *const i8) -> bool {
        call_native!(bool, 0x60F9A4393A21F741u64, route)
    } // 0x60F9A4393A21F741 0x79B067AF b323
    pub unsafe fn assisted_movement_set_route_properties(route: *const i8, props: i32) {
        call_native!(Void, 0xD5002D78B7162E1Bu64, route, props);
    } // 0xD5002D78B7162E1B 0x01CAAFCC b323
    pub unsafe fn assisted_movement_override_load_distance_this_frame(dist: f32) {
        call_native!(Void, 0x13945951E16EF912u64, dist);
    } // 0x13945951E16EF912 0x8FB923EC b323
    pub unsafe fn task_vehicle_follow_waypoint_recording(
        ped: Ped,
        vehicle: Vehicle,
        _w_p_recording: *const i8,
        p_3: i32,
        p_4: i32,
        p_5: i32,
        p_6: i32,
        p_7: f32,
        p_8: bool,
        p_9: f32,
    ) {
        call_native!(
            Void,
            0x3123FAA6DB1CF7EDu64,
            ped,
            vehicle,
            _w_p_recording,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            p_9
        );
    } // 0x3123FAA6DB1CF7ED 0x959818B6 b323
    pub unsafe fn is_waypoint_playback_going_on_for_vehicle(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xF5134943EA29868Cu64, vehicle)
    } // 0xF5134943EA29868C 0x80DD15DB b323
    pub unsafe fn get_vehicle_waypoint_progress(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x9824CFF8FC66E159u64, vehicle)
    } // 0x9824CFF8FC66E159 0xD3CCF64E b323
    pub unsafe fn get_vehicle_waypoint_target_point(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x416B62AC8B9E5BBDu64, vehicle)
    } // 0x416B62AC8B9E5BBD 0x81049608 b323
    pub unsafe fn vehicle_waypoint_playback_pause(vehicle: Vehicle) {
        call_native!(Void, 0x8A4E6AC373666BC5u64, vehicle);
    } // 0x8A4E6AC373666BC5 0x7C00B415 b323
    pub unsafe fn vehicle_waypoint_playback_resume(vehicle: Vehicle) {
        call_native!(Void, 0xDC04FCAA7839D492u64, vehicle);
    } // 0xDC04FCAA7839D492 0xBEB14C82 b323
    pub unsafe fn vehicle_waypoint_playback_use_default_speed(vehicle: Vehicle) {
        call_native!(Void, 0x5CEB25A7D2848963u64, vehicle);
    } // 0x5CEB25A7D2848963 0x923C3AA4 b323
    pub unsafe fn vehicle_waypoint_playback_override_speed(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0x121F0593E0A431D7u64, vehicle, speed);
    } // 0x121F0593E0A431D7 0xBE1E7BB4 b323
    pub unsafe fn task_set_blocking_of_non_temporary_events(ped: Ped, toggle: bool) {
        call_native!(Void, 0x90D2156198831D69u64, ped, toggle);
    } // 0x90D2156198831D69 0x1B54FB6B b323
    pub unsafe fn task_force_motion_state(ped: Ped, state: Hash, force_restart: bool) {
        call_native!(Void, 0x4F056E1AFFEF17ABu64, ped, state, force_restart);
    } // 0x4F056E1AFFEF17AB 0xCAD2EF77 b323
    pub unsafe fn task_move_network_by_name(
        ped: Ped,
        task: *const i8,
        multiplier: f32,
        allow_override_clone_update: bool,
        anim_dict: *const i8,
        flags: i32,
    ) {
        call_native!(
            Void,
            0x2D537BA194896636u64,
            ped,
            task,
            multiplier,
            allow_override_clone_update,
            anim_dict,
            flags
        );
    } // 0x2D537BA194896636 0x6F5D215F b323
    pub unsafe fn task_move_network_advanced_by_name(
        ped: Ped,
        network: *const i8,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        rot_order: i32,
        blend_duration: f32,
        allow_override_clone_update: bool,
        anim_dict: *const i8,
        flags: i32,
    ) {
        call_native!(
            Void,
            0xD5B35BEA41919ACBu64,
            ped,
            network,
            x,
            y,
            z,
            rot_x,
            rot_y,
            rot_z,
            rot_order,
            blend_duration,
            allow_override_clone_update,
            anim_dict,
            flags
        );
    } // 0xD5B35BEA41919ACB 0x71A5C5DB b323
    pub unsafe fn task_move_network_by_name_with_init_params(
        ped: Ped,
        network: *const i8,
        initial_parameters: *mut i32,
        blend_duration: f32,
        allow_override_clone_update: bool,
        anim_dict: *const i8,
        flags: i32,
    ) {
        call_native!(
            Void,
            0x3D45B0B355C5E0C9u64,
            ped,
            network,
            initial_parameters,
            blend_duration,
            allow_override_clone_update,
            anim_dict,
            flags
        );
    } // 0x3D45B0B355C5E0C9  b1493
    pub unsafe fn task_move_network_advanced_by_name_with_init_params(
        ped: Ped,
        network: *const i8,
        initial_parameters: *mut i32,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        rot_order: i32,
        blend_duration: f32,
        allow_override_clone_update: bool,
        dictionary: *const i8,
        flags: i32,
    ) {
        call_native!(
            Void,
            0x29682E2CCF21E9B5u64,
            ped,
            network,
            initial_parameters,
            x,
            y,
            z,
            rot_x,
            rot_y,
            rot_z,
            rot_order,
            blend_duration,
            allow_override_clone_update,
            dictionary,
            flags
        );
    } // 0x29682E2CCF21E9B5  b1868
    pub unsafe fn is_task_move_network_active(ped: Ped) -> bool {
        call_native!(bool, 0x921CE12C489C4C41u64, ped)
    } // 0x921CE12C489C4C41 0x902656EB b323
    pub unsafe fn is_task_move_network_ready_for_transition(ped: Ped) -> bool {
        call_native!(bool, 0x30ED88D5E0C56A37u64, ped)
    } // 0x30ED88D5E0C56A37 0x92FDBAE6 b323
    pub unsafe fn request_task_move_network_state_transition(ped: Ped, name: *const i8) -> bool {
        call_native!(bool, 0xD01015C7316AE176u64, ped, name)
    } // 0xD01015C7316AE176 0x885724DE b323
    pub unsafe fn set_expected_clone_next_task_move_network_state(
        ped: Ped,
        state: *const i8,
    ) -> bool {
        call_native!(bool, 0xAB13A5565480B6D9u64, ped, state)
    } // 0xAB13A5565480B6D9 0x1E58A7AD b323
    pub unsafe fn get_task_move_network_state(ped: Ped) -> *const i8 {
        call_native!(*const i8, 0x717E4D1F2048376Du64, ped)
    } // 0x717E4D1F2048376D 0x96C0277B b323
    pub unsafe fn set_task_move_network_anim_set(
        ped: Ped,
        clip_set: Hash,
        variable_clip_set: Hash,
    ) {
        call_native!(
            Void,
            0x8423541E8B3A1589u64,
            ped,
            clip_set,
            variable_clip_set
        );
    } // 0x8423541E8B3A1589  b1493
    pub unsafe fn set_task_move_network_signal_float(ped: Ped, signal_name: *const i8, value: f32) {
        call_native!(Void, 0xD5BB4025AE449A4Eu64, ped, signal_name, value);
    } // 0xD5BB4025AE449A4E 0xA79BE783 b323
    pub unsafe fn set_task_move_network_signal_local_float(
        ped: Ped,
        signal_name: *const i8,
        value: f32,
    ) {
        call_native!(Void, 0x373EF409B82697A3u64, ped, signal_name, value);
    } // 0x373EF409B82697A3  b1493
    pub unsafe fn set_task_move_network_signal_float_lerp_rate(
        ped: Ped,
        signal_name: *const i8,
        value: f32,
    ) {
        call_native!(Void, 0x8634CEF2522D987Bu64, ped, signal_name, value);
    } // 0x8634CEF2522D987B  b1493
    pub unsafe fn set_task_move_network_signal_bool(ped: Ped, signal_name: *const i8, value: bool) {
        call_native!(Void, 0xB0A6CFD2C69C1088u64, ped, signal_name, value);
    } // 0xB0A6CFD2C69C1088 0xF3538041 b323
    pub unsafe fn get_task_move_network_signal_float(ped: Ped, signal_name: *const i8) -> f32 {
        call_native!(f32, 0x44AB0B3AFECCE242u64, ped, signal_name)
    } // 0x44AB0B3AFECCE242  b1493
    pub unsafe fn get_task_move_network_signal_bool(ped: Ped, signal_name: *const i8) -> bool {
        call_native!(bool, 0xA7FFBA498E4AAF67u64, ped, signal_name)
    } // 0xA7FFBA498E4AAF67 0x1EBB6F3D b323
    pub unsafe fn get_task_move_network_event(ped: Ped, event_name: *const i8) -> bool {
        call_native!(bool, 0xB4F47213DF45A64Cu64, ped, event_name)
    } // 0xB4F47213DF45A64C 0x72FA5EF2 b323
    pub unsafe fn set_task_move_network_enable_collision_on_network_clone_when_fixed(
        ped: Ped,
        enable: bool,
    ) -> bool {
        call_native!(bool, 0x0FFB3C758E8C07B9u64, ped, enable)
    } // 0x0FFB3C758E8C07B9  b2060
    pub unsafe fn _set_script_task_enable_collision_on_network_clone_when_fixed(
        ped: Ped,
        enable: bool,
    ) {
        call_native!(Void, 0x32F6EEF031F943DCu64, ped, enable);
    } // 0x32F6EEF031F943DC  b3095
    pub unsafe fn is_move_blend_ratio_still(ped: Ped) -> bool {
        call_native!(bool, 0x349CE7B56DAFD95Cu64, ped)
    } // 0x349CE7B56DAFD95C 0xE9DAF877 b323
    pub unsafe fn is_move_blend_ratio_walking(ped: Ped) -> bool {
        call_native!(bool, 0xF133BBBE91E1691Fu64, ped)
    } // 0xF133BBBE91E1691F 0xD21639A8 b323
    pub unsafe fn is_move_blend_ratio_running(ped: Ped) -> bool {
        call_native!(bool, 0xD4D8636C0199A939u64, ped)
    } // 0xD4D8636C0199A939 0xE76A2353 b323
    pub unsafe fn is_move_blend_ratio_sprinting(ped: Ped) -> bool {
        call_native!(bool, 0x24A2AD74FA9814E2u64, ped)
    } // 0x24A2AD74FA9814E2 0xDD616893 b323
    pub unsafe fn is_ped_still(ped: Ped) -> bool {
        call_native!(bool, 0xAC29253EEF8F0180u64, ped)
    } // 0xAC29253EEF8F0180 0x09E3418D b323
    pub unsafe fn is_ped_walking(ped: Ped) -> bool {
        call_native!(bool, 0xDE4C184B2B9B071Au64, ped)
    } // 0xDE4C184B2B9B071A 0x4B865C4A b323
    pub unsafe fn is_ped_running(ped: Ped) -> bool {
        call_native!(bool, 0xC5286FFC176F28A2u64, ped)
    } // 0xC5286FFC176F28A2 0xE9A5578F b323
    pub unsafe fn is_ped_sprinting(ped: Ped) -> bool {
        call_native!(bool, 0x57E457CD2C0FC168u64, ped)
    } // 0x57E457CD2C0FC168 0x4F3E0633 b323
    pub unsafe fn is_ped_strafing(ped: Ped) -> bool {
        call_native!(bool, 0xE45B7F222DE47E09u64, ped)
    } // 0xE45B7F222DE47E09 0xEFEED13C b323
    pub unsafe fn task_synchronized_scene(
        ped: Ped,
        scene: i32,
        anim_dictionary: *const i8,
        animation_name: *const i8,
        blend_in: f32,
        blend_out: f32,
        flags: i32,
        ragdoll_blocking_flags: i32,
        mover_blend_delta: f32,
        ik_flags: i32,
    ) {
        call_native!(
            Void,
            0xEEA929141F699854u64,
            ped,
            scene,
            anim_dictionary,
            animation_name,
            blend_in,
            blend_out,
            flags,
            ragdoll_blocking_flags,
            mover_blend_delta,
            ik_flags
        );
    } // 0xEEA929141F699854 0x4F217E7B b323
    pub unsafe fn task_agitated_action_confront_response(ped: Ped, ped_2: Ped) {
        call_native!(Void, 0x19D1B791CB3670FEu64, ped, ped_2);
    } // 0x19D1B791CB3670FE  b877
    pub unsafe fn task_sweep_aim_entity(
        ped: Ped,
        anim_dict: *const i8,
        low_anim_name: *const i8,
        med_anim_name: *const i8,
        hi_anim_name: *const i8,
        runtime: i32,
        target_entity: Entity,
        turn_rate: f32,
        blend_in_duration: f32,
    ) {
        call_native!(
            Void,
            0x2047C02158D6405Au64,
            ped,
            anim_dict,
            low_anim_name,
            med_anim_name,
            hi_anim_name,
            runtime,
            target_entity,
            turn_rate,
            blend_in_duration
        );
    } // 0x2047C02158D6405A 0x4D210467 b323
    pub unsafe fn update_task_sweep_aim_entity(ped: Ped, entity: Entity) {
        call_native!(Void, 0xE4973DBDBE6E44B3u64, ped, entity);
    } // 0xE4973DBDBE6E44B3 0xF65F0F4F b323
    pub unsafe fn task_sweep_aim_position(
        ped: Ped,
        anim_dict: *const i8,
        low_anim_name: *const i8,
        med_anim_name: *const i8,
        hi_anim_name: *const i8,
        runtime: i32,
        x: f32,
        y: f32,
        z: f32,
        turn_rate: f32,
        blend_in_duration: f32,
    ) {
        call_native!(
            Void,
            0x7AFE8FDC10BC07D2u64,
            ped,
            anim_dict,
            low_anim_name,
            med_anim_name,
            hi_anim_name,
            runtime,
            x,
            y,
            z,
            turn_rate,
            blend_in_duration
        );
    } // 0x7AFE8FDC10BC07D2 0x1683FE66 b323
    pub unsafe fn update_task_sweep_aim_position(ped: Ped, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xBB106883F5201FC4u64, ped, x, y, z);
    } // 0xBB106883F5201FC4 0x6345EC80 b323
    pub unsafe fn task_arrest_ped(ped: Ped, target: Ped) {
        call_native!(Void, 0xF3B9A78A178572B1u64, ped, target);
    } // 0xF3B9A78A178572B1 0xBC0F153D b323
    pub unsafe fn is_ped_running_arrest_task(ped: Ped) -> bool {
        call_native!(bool, 0x3DC52677769B4AE0u64, ped)
    } // 0x3DC52677769B4AE0 0x6942DB7A b323
    pub unsafe fn is_ped_being_arrested(ped: Ped) -> bool {
        call_native!(bool, 0x90A09F3A45FED688u64, ped)
    } // 0x90A09F3A45FED688 0x5FF6C2ED b323
    pub unsafe fn uncuff_ped(ped: Ped) {
        call_native!(Void, 0x67406F2C8F87FC4Fu64, ped);
    } // 0x67406F2C8F87FC4F 0xA23A1D61 b323
    pub unsafe fn is_ped_cuffed(ped: Ped) -> bool {
        call_native!(bool, 0x74E559B3BC910685u64, ped)
    } // 0x74E559B3BC910685 0x511CE741 b323
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod vehicle {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn create_vehicle(
        model_hash: Hash,
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        is_network: bool,
        b_script_host_veh: bool,
        p_7: bool,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0xAF35D0D2583051B0u64,
            model_hash,
            x,
            y,
            z,
            heading,
            is_network,
            b_script_host_veh,
            p_7
        )
    } // 0xAF35D0D2583051B0 0xDD75460A b323
    pub unsafe fn delete_vehicle(vehicle: *mut Vehicle) {
        call_native!(Void, 0xEA386986E786A54Fu64, vehicle);
    } // 0xEA386986E786A54F 0x9803AF60 b323
    pub unsafe fn set_vehicle_allow_homing_missle_lockon(
        vehicle: Vehicle,
        toggle: bool,
        p_2: bool,
    ) {
        call_native!(Void, 0x7D6F9A3EF26136A0u64, vehicle, toggle, p_2);
    } // 0x7D6F9A3EF26136A0 0xBB54ECCA b323
    pub unsafe fn set_vehicle_allow_homing_missle_lockon_synced(
        vehicle: Vehicle,
        can_be_locked_on: bool,
        p_2: bool,
    ) {
        call_native!(Void, 0x1DDA078D12879EEEu64, vehicle, can_be_locked_on, p_2);
    } // 0x1DDA078D12879EEE  b463
    pub unsafe fn set_vehicle_allow_no_passengers_lockon(veh: Vehicle, toggle: bool) {
        call_native!(Void, 0x5D14D4154BFE7B2Cu64, veh, toggle);
    } // 0x5D14D4154BFE7B2C 0x8BAAC437 b323
    pub unsafe fn get_vehicle_homing_lockon_state(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xE6B0E8CFC3633BF0u64, vehicle)
    } // 0xE6B0E8CFC3633BF0 0xFBDE9FD8 b323
    pub unsafe fn get_vehicle_homing_lockedonto_state(p_0: Any) -> i32 {
        call_native!(i32, 0x6EAAEFC76ACC311Fu64, p_0)
    } // 0x6EAAEFC76ACC311F  b757
    pub unsafe fn set_vehicle_homing_lockedonto_state(p_0: Any, p_1: Any) {
        call_native!(Void, 0x407DC5E97DB1A4D3u64, p_0, p_1);
    } // 0x407DC5E97DB1A4D3  b1493
    pub unsafe fn is_vehicle_model(vehicle: Vehicle, model: Hash) -> bool {
        call_native!(bool, 0x423E8DE37D934D89u64, vehicle, model)
    } // 0x423E8DE37D934D89 0x013B10B6 b323
    pub unsafe fn does_script_vehicle_generator_exist(vehicle_generator: i32) -> bool {
        call_native!(bool, 0xF6086BC836400876u64, vehicle_generator)
    } // 0xF6086BC836400876 0xF6BDDA30 b323
    pub unsafe fn create_script_vehicle_generator(
        x: f32,
        y: f32,
        z: f32,
        heading: f32,
        p_4: f32,
        p_5: f32,
        model_hash: Hash,
        p_7: i32,
        p_8: i32,
        p_9: i32,
        p_1_0: i32,
        p_1_1: bool,
        p_1_2: bool,
        p_1_3: bool,
        p_1_4: bool,
        p_1_5: bool,
        p_1_6: i32,
    ) -> i32 {
        call_native!(
            i32,
            0x9DEF883114668116u64,
            x,
            y,
            z,
            heading,
            p_4,
            p_5,
            model_hash,
            p_7,
            p_8,
            p_9,
            p_1_0,
            p_1_1,
            p_1_2,
            p_1_3,
            p_1_4,
            p_1_5,
            p_1_6
        )
    } // 0x9DEF883114668116 0x25A9A261 b323
    pub unsafe fn delete_script_vehicle_generator(vehicle_generator: i32) {
        call_native!(Void, 0x22102C9ABFCF125Du64, vehicle_generator);
    } // 0x22102C9ABFCF125D 0xE4328E3F b323
    pub unsafe fn set_script_vehicle_generator(vehicle_generator: i32, enabled: bool) {
        call_native!(Void, 0xD9D620E0AC6DC4B0u64, vehicle_generator, enabled);
    } // 0xD9D620E0AC6DC4B0 0x40D73747 b323
    pub unsafe fn set_all_vehicle_generators_active_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        toggle: bool,
        p_7: bool,
    ) {
        call_native!(
            Void,
            0xC12321827687FE4Du64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            toggle,
            p_7
        );
    } // 0xC12321827687FE4D 0xB4E0E69A b323
    pub unsafe fn set_all_vehicle_generators_active() {
        call_native!(Void, 0x34AD89078831A4BCu64);
    } // 0x34AD89078831A4BC 0xAB1FDD76 b323
    pub unsafe fn set_all_low_priority_vehicle_generators_active(active: bool) {
        call_native!(Void, 0x608207E7A8FB787Cu64, active);
    } // 0x608207E7A8FB787C 0x87F767F2 b323
    pub unsafe fn set_vehicle_generator_area_of_interest(x: f32, y: f32, z: f32, radius: f32) {
        call_native!(Void, 0x9A75585FB2E54FADu64, x, y, z, radius);
    } // 0x9A75585FB2E54FAD 0x935A95DA b323
    pub unsafe fn clear_vehicle_generator_area_of_interest() {
        call_native!(Void, 0x0A436B8643716D14u64);
    } // 0x0A436B8643716D14 0x6C73E45A b323
    pub unsafe fn set_vehicle_on_ground_properly(vehicle: Vehicle, p_1: f32) -> bool {
        call_native!(bool, 0x49733E92263139D1u64, vehicle, p_1)
    } // 0x49733E92263139D1 0xE14FDBA6 b323
    pub unsafe fn set_vehicle_use_cutscene_wheel_compression(
        p_0: Vehicle,
        p_1: bool,
        p_2: bool,
        p_3: bool,
    ) -> bool {
        call_native!(bool, 0xE023E8AC4EF7C117u64, p_0, p_1, p_2, p_3)
    } // 0xE023E8AC4EF7C117 0xA0909ADB b323
    pub unsafe fn is_vehicle_stuck_on_roof(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xB497F06B288DCFDFu64, vehicle)
    } // 0xB497F06B288DCFDF 0x18D07C6C b323
    pub unsafe fn add_vehicle_upsidedown_check(vehicle: Vehicle) {
        call_native!(Void, 0xB72E26D81006005Bu64, vehicle);
    } // 0xB72E26D81006005B 0x3A13D384 b323
    pub unsafe fn remove_vehicle_upsidedown_check(vehicle: Vehicle) {
        call_native!(Void, 0xC53EB42A499A7E90u64, vehicle);
    } // 0xC53EB42A499A7E90 0xF390BA1B b323
    pub unsafe fn is_vehicle_stopped(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x5721B434AD84D57Au64, vehicle)
    } // 0x5721B434AD84D57A 0x655F072C b323
    pub unsafe fn get_vehicle_number_of_passengers(
        vehicle: Vehicle,
        include_driver: bool,
        include_dead_occupants: bool,
    ) -> i32 {
        call_native!(
            i32,
            0x24CB2137731FFE89u64,
            vehicle,
            include_driver,
            include_dead_occupants
        )
    } // 0x24CB2137731FFE89 0x1EF20849 b323
    pub unsafe fn get_vehicle_max_number_of_passengers(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xA7C4F2C6E744A550u64, vehicle)
    } // 0xA7C4F2C6E744A550 0x0A2FC08C b323
    pub unsafe fn get_vehicle_model_number_of_seats(model_hash: Hash) -> i32 {
        call_native!(i32, 0x2AD93716F184EDA4u64, model_hash)
    } // 0x2AD93716F184EDA4 0x838F7BF7 b323
    pub unsafe fn is_seat_warp_only(vehicle: Vehicle, seat_index: i32) -> bool {
        call_native!(bool, 0xF7F203E31F96F6A1u64, vehicle, seat_index)
    } // 0xF7F203E31F96F6A1 0x769E5CF2 b323
    pub unsafe fn is_turret_seat(vehicle: Vehicle, seat_index: i32) -> bool {
        call_native!(bool, 0xE33FFA906CE74880u64, vehicle, seat_index)
    } // 0xE33FFA906CE74880 0x7C43D32A b323
    pub unsafe fn does_vehicle_allow_rappel(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x4E417C547182C84Du64, vehicle)
    } // 0x4E417C547182C84D  b757
    pub unsafe fn set_vehicle_density_multiplier_this_frame(multiplier: f32) {
        call_native!(Void, 0x245A6883D966D537u64, multiplier);
    } // 0x245A6883D966D537 0xF4187E51 b323
    pub unsafe fn set_random_vehicle_density_multiplier_this_frame(multiplier: f32) {
        call_native!(Void, 0xB3B3359379FE77D3u64, multiplier);
    } // 0xB3B3359379FE77D3 0x543F712B b323
    pub unsafe fn set_parked_vehicle_density_multiplier_this_frame(multiplier: f32) {
        call_native!(Void, 0xEAE6DCC7EEE3DB1Du64, multiplier);
    } // 0xEAE6DCC7EEE3DB1D 0xDD46CEBE b323
    pub unsafe fn set_disable_random_trains_this_frame(toggle: bool) {
        call_native!(Void, 0xD4B8E3D1917BC86Bu64, toggle);
    } // 0xD4B8E3D1917BC86B 0x09462665 b323
    pub unsafe fn set_ambient_vehicle_range_multiplier_this_frame(value: f32) {
        call_native!(Void, 0x90B6DA738A9A25DAu64, value);
    } // 0x90B6DA738A9A25DA 0xDAE2A2BE b323
    pub unsafe fn set_far_draw_vehicles(toggle: bool) {
        call_native!(Void, 0x26324F33423F3CC3u64, toggle);
    } // 0x26324F33423F3CC3 0x9F019C49 b323
    pub unsafe fn set_number_of_parked_vehicles(value: i32) {
        call_native!(Void, 0xCAA15F13EBD417FFu64, value);
    } // 0xCAA15F13EBD417FF 0x206A58E8 b323
    pub unsafe fn set_vehicle_doors_locked(vehicle: Vehicle, door_lock_status: i32) {
        call_native!(Void, 0xB664292EAECF7FA6u64, vehicle, door_lock_status);
    } // 0xB664292EAECF7FA6 0x4CDD35D0 b323
    pub unsafe fn set_vehicle_individual_doors_locked(
        vehicle: Vehicle,
        door_id: i32,
        door_lock_status: i32,
    ) {
        call_native!(
            Void,
            0xBE70724027F85BCDu64,
            vehicle,
            door_id,
            door_lock_status
        );
    } // 0xBE70724027F85BCD 0xD61D182D b323
    pub unsafe fn set_vehicle_has_muted_sirens(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xD8050E0EB60CF274u64, vehicle, toggle);
    } // 0xD8050E0EB60CF274 0xC54156A9 b323
    pub unsafe fn set_vehicle_doors_locked_for_player(
        vehicle: Vehicle,
        player: Player,
        toggle: bool,
    ) {
        call_native!(Void, 0x517AAF684BB50CD1u64, vehicle, player, toggle);
    } // 0x517AAF684BB50CD1 0x49829236 b323
    pub unsafe fn get_vehicle_doors_locked_for_player(vehicle: Vehicle, player: Player) -> bool {
        call_native!(bool, 0xF6AF6CB341349015u64, vehicle, player)
    } // 0xF6AF6CB341349015 0x1DC50247 b323
    pub unsafe fn set_vehicle_doors_locked_for_all_players(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xA2F80B8D040727CCu64, vehicle, toggle);
    } // 0xA2F80B8D040727CC 0x891BA8A4 b323
    pub unsafe fn set_vehicle_doors_locked_for_non_script_players(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x9737A37136F07E75u64, vehicle, toggle);
    } // 0x9737A37136F07E75 0xE4EF6514 b323
    pub unsafe fn set_vehicle_doors_locked_for_team(vehicle: Vehicle, team: i32, toggle: bool) {
        call_native!(Void, 0xB81F6D4A8F5EEBA8u64, vehicle, team, toggle);
    } // 0xB81F6D4A8F5EEBA8 0x4F85E783 b323
    pub unsafe fn set_vehicle_doors_locked_for_all_teams(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x203B527D1B77904Cu64, vehicle, toggle);
    } // 0x203B527D1B77904C  b1365
    pub unsafe fn set_vehicle_dont_terminate_task_when_achieved(vehicle: Vehicle) {
        call_native!(Void, 0x76D26A22750E849Eu64, vehicle);
    } // 0x76D26A22750E849E  b1103
    pub unsafe fn _set_vehicle_max_launch_engine_revs(vehicle: Vehicle, modifier: f32) {
        call_native!(Void, 0x5AE614ECA5FDD423u64, vehicle, modifier);
    } // 0x5AE614ECA5FDD423  b3095
    pub unsafe fn _get_vehicle_throttle(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x92D96892FC06AF22u64, vehicle)
    } // 0x92D96892FC06AF22  b3095
    pub unsafe fn explode_vehicle(vehicle: Vehicle, is_audible: bool, is_invisible: bool) {
        call_native!(
            Void,
            0xBA71116ADF5B514Cu64,
            vehicle,
            is_audible,
            is_invisible
        );
    } // 0xBA71116ADF5B514C 0xBEDEACEB b323
    pub unsafe fn set_vehicle_out_of_control(
        vehicle: Vehicle,
        kill_driver: bool,
        explode_on_impact: bool,
    ) {
        call_native!(
            Void,
            0xF19D095E42D430CCu64,
            vehicle,
            kill_driver,
            explode_on_impact
        );
    } // 0xF19D095E42D430CC 0x3764D734 b323
    pub unsafe fn set_vehicle_timed_explosion(vehicle: Vehicle, ped: Ped, toggle: bool) {
        call_native!(Void, 0x2E0A74E1002380B1u64, vehicle, ped, toggle);
    } // 0x2E0A74E1002380B1 0xDB8CB8E2 b323
    pub unsafe fn add_vehicle_phone_explosive_device(vehicle: Vehicle) {
        call_native!(Void, 0x99AD4CCCB128CBC9u64, vehicle);
    } // 0x99AD4CCCB128CBC9 0x811373DE b323
    pub unsafe fn clear_vehicle_phone_explosive_device() {
        call_native!(Void, 0xAA3F739ABDDCF21Fu64);
    } // 0xAA3F739ABDDCF21F  b463
    pub unsafe fn has_vehicle_phone_explosive_device() -> bool {
        call_native!(bool, 0x6ADAABD3068C5235u64)
    } // 0x6ADAABD3068C5235 0xA4E69134 b323
    pub unsafe fn detonate_vehicle_phone_explosive_device() {
        call_native!(Void, 0xEF49CF0270307CBEu64);
    } // 0xEF49CF0270307CBE 0x65255524 b323
    pub unsafe fn have_vehicle_rear_doors_been_blown_open_by_stickybomb(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x6B407F2525E93644u64, vehicle)
    } // 0x6B407F2525E93644  b2944
    pub unsafe fn set_taxi_lights(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x598803E85E8448D9u64, vehicle, state);
    } // 0x598803E85E8448D9 0x68639D85 b323
    pub unsafe fn is_taxi_light_on(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x7504C0F113AB50FCu64, vehicle)
    } // 0x7504C0F113AB50FC 0x6FC4924A b323
    pub unsafe fn is_vehicle_in_garage_area(garage_name: *const i8, vehicle: Vehicle) -> bool {
        call_native!(bool, 0xCEE4490CD57BB3C2u64, garage_name, vehicle)
    } // 0xCEE4490CD57BB3C2 0xA90EC257 b323
    pub unsafe fn set_vehicle_colours(vehicle: Vehicle, color_primary: i32, color_secondary: i32) {
        call_native!(
            Void,
            0x4F1D4BE3A7F24601u64,
            vehicle,
            color_primary,
            color_secondary
        );
    } // 0x4F1D4BE3A7F24601 0x57F24253 b323
    pub unsafe fn set_vehicle_fullbeam(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8B7FD87F0DDB421Eu64, vehicle, toggle);
    } // 0x8B7FD87F0DDB421E 0x9C49CC15 b323
    pub unsafe fn set_vehicle_is_racing(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x07116E24E9D1929Du64, vehicle, toggle);
    } // 0x07116E24E9D1929D 0xA59E3DCD b323
    pub unsafe fn set_vehicle_custom_primary_colour(vehicle: Vehicle, r: i32, g: i32, b: i32) {
        call_native!(Void, 0x7141766F91D15BEAu64, vehicle, r, g, b);
    } // 0x7141766F91D15BEA 0x8DF9F9BC b323
    pub unsafe fn get_vehicle_custom_primary_colour(
        vehicle: Vehicle,
        r: *mut i32,
        g: *mut i32,
        b: *mut i32,
    ) {
        call_native!(Void, 0xB64CF2CCA9D95F52u64, vehicle, r, g, b);
    } // 0xB64CF2CCA9D95F52 0x1C2B9FEF b323
    pub unsafe fn clear_vehicle_custom_primary_colour(vehicle: Vehicle) {
        call_native!(Void, 0x55E1D2758F34E437u64, vehicle);
    } // 0x55E1D2758F34E437 0x51E1E33D b323
    pub unsafe fn get_is_vehicle_primary_colour_custom(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xF095C0405307B21Bu64, vehicle)
    } // 0xF095C0405307B21B 0xD7EC8760 b323
    pub unsafe fn set_vehicle_custom_secondary_colour(vehicle: Vehicle, r: i32, g: i32, b: i32) {
        call_native!(Void, 0x36CED73BFED89754u64, vehicle, r, g, b);
    } // 0x36CED73BFED89754 0x9D77259E b323
    pub unsafe fn get_vehicle_custom_secondary_colour(
        vehicle: Vehicle,
        r: *mut i32,
        g: *mut i32,
        b: *mut i32,
    ) {
        call_native!(Void, 0x8389CD56CA8072DCu64, vehicle, r, g, b);
    } // 0x8389CD56CA8072DC 0x3FF247A2 b323
    pub unsafe fn clear_vehicle_custom_secondary_colour(vehicle: Vehicle) {
        call_native!(Void, 0x5FFBDEEC3E8E2009u64, vehicle);
    } // 0x5FFBDEEC3E8E2009 0x7CE00B29 b323
    pub unsafe fn get_is_vehicle_secondary_colour_custom(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x910A32E7AAD2656Cu64, vehicle)
    } // 0x910A32E7AAD2656C 0x288AD228 b323
    pub unsafe fn set_vehicle_enveff_scale(vehicle: Vehicle, fade: f32) {
        call_native!(Void, 0x3AFDC536C3D01674u64, vehicle, fade);
    } // 0x3AFDC536C3D01674 0x8332730C b323
    pub unsafe fn get_vehicle_enveff_scale(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xA82819CAC9C4C403u64, vehicle)
    } // 0xA82819CAC9C4C403 0xD5F1EEE1 b323
    pub unsafe fn set_can_respray_vehicle(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x52BBA29D5EC69356u64, vehicle, state);
    } // 0x52BBA29D5EC69356 0x37677590 b323
    pub unsafe fn set_goon_boss_vehicle(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xAB31EF4DE6800CE9u64, vehicle, toggle);
    } // 0xAB31EF4DE6800CE9  b573
    pub unsafe fn set_open_rear_doors_on_explosion(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1B212B26DD3C04DFu64, vehicle, toggle);
    } // 0x1B212B26DD3C04DF  b757
    pub unsafe fn force_submarine_surface_mode(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x33506883545AC0DFu64, vehicle, toggle);
    } // 0x33506883545AC0DF 0x54E9EE75 b323
    pub unsafe fn force_submarine_neurtal_buoyancy(p_0: Any, p_1: Any) {
        call_native!(Void, 0xC67DB108A9ADE3BEu64, p_0, p_1);
    } // 0xC67DB108A9ADE3BE  b2189
    pub unsafe fn set_submarine_crush_depths(
        vehicle: Vehicle,
        p_1: bool,
        depth_1: f32,
        depth_2: f32,
        depth_3: f32,
    ) {
        call_native!(
            Void,
            0xC59872A5134879C7u64,
            vehicle,
            p_1,
            depth_1,
            depth_2,
            depth_3
        );
    } // 0xC59872A5134879C7 0x4A46E814 b323
    pub unsafe fn get_submarine_is_under_design_depth(submarine: Vehicle) -> bool {
        call_native!(bool, 0x3E71D0B300B7AA79u64, submarine)
    } // 0x3E71D0B300B7AA79  b2189
    pub unsafe fn get_submarine_number_of_air_leaks(submarine: Vehicle) -> i32 {
        call_native!(i32, 0x093D6DDCA5B8FBAEu64, submarine)
    } // 0x093D6DDCA5B8FBAE  b2189
    pub unsafe fn set_boat_ignore_land_probes(p_0: Any, p_1: Any) {
        call_native!(Void, 0xED5EDE9E676643C9u64, p_0, p_1);
    } // 0xED5EDE9E676643C9  b944
    pub unsafe fn _set_bounds_affect_water_probes(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x85FC953F6C6CBDE1u64, vehicle, toggle);
    } // 0x85FC953F6C6CBDE1  b2802
    pub unsafe fn set_boat_anchor(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x75DBEC174AEEAD10u64, vehicle, toggle);
    } // 0x75DBEC174AEEAD10 0xA3906284 b323
    pub unsafe fn can_anchor_boat_here(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x26C10ECBDA5D043Bu64, vehicle)
    } // 0x26C10ECBDA5D043B 0xE97A4F5E b323
    pub unsafe fn can_anchor_boat_here_ignore_players(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x24F4121D07579880u64, vehicle)
    } // 0x24F4121D07579880  b678
    pub unsafe fn set_boat_remains_anchored_while_player_is_driver(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xE3EBAAE484798530u64, vehicle, toggle);
    } // 0xE3EBAAE484798530 0x0ED84792 b323
    pub unsafe fn set_force_low_lod_anchor_mode(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xB28B1FE5BFADD7F5u64, vehicle, p_1);
    } // 0xB28B1FE5BFADD7F5 0xA739012A b323
    pub unsafe fn set_boat_low_lod_anchor_distance(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0xE842A9398079BD82u64, vehicle, value);
    } // 0xE842A9398079BD82 0x66FA450C b323
    pub unsafe fn is_boat_anchored(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xB0AD1238A709B1A2u64, vehicle)
    } // 0xB0AD1238A709B1A2  b573
    pub unsafe fn set_boat_sinks_when_wrecked(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8F719973E1445BA2u64, vehicle, toggle);
    } // 0x8F719973E1445BA2 0x35614622 b323
    pub unsafe fn set_boat_wrecked(vehicle: Vehicle) {
        call_native!(Void, 0xBD32E46AA95C1DD2u64, vehicle);
    } // 0xBD32E46AA95C1DD2  b757
    pub unsafe fn set_vehicle_siren(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xF4924635A19EB37Du64, vehicle, toggle);
    } // 0xF4924635A19EB37D 0x4AC1EFC7 b323
    pub unsafe fn is_vehicle_siren_on(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x4C9BF537BE2634B2u64, vehicle)
    } // 0x4C9BF537BE2634B2 0x25EB5873 b323
    pub unsafe fn is_vehicle_siren_audio_on(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xB5CC40FBCB586380u64, vehicle)
    } // 0xB5CC40FBCB586380 0xC9458688 b323
    pub unsafe fn set_vehicle_strong(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x3E8C8727991A8A0Bu64, vehicle, toggle);
    } // 0x3E8C8727991A8A0B 0xC758D19F b323
    pub unsafe fn remove_vehicle_stuck_check(vehicle: Vehicle) {
        call_native!(Void, 0x8386BFB614D06749u64, vehicle);
    } // 0x8386BFB614D06749 0x81594917 b323
    pub unsafe fn get_vehicle_colours(
        vehicle: Vehicle,
        color_primary: *mut i32,
        color_secondary: *mut i32,
    ) {
        call_native!(
            Void,
            0xA19435F193E081ACu64,
            vehicle,
            color_primary,
            color_secondary
        );
    } // 0xA19435F193E081AC 0x40D82D88 b323
    pub unsafe fn is_vehicle_seat_free(
        vehicle: Vehicle,
        seat_index: i32,
        is_task_running: bool,
    ) -> bool {
        call_native!(
            bool,
            0x22AC59A870E6A669u64,
            vehicle,
            seat_index,
            is_task_running
        )
    } // 0x22AC59A870E6A669 0xDAF42B02 b323
    pub unsafe fn get_ped_in_vehicle_seat(vehicle: Vehicle, seat_index: i32, p_2: bool) -> Ped {
        call_native!(Ped, 0xBB40DD2270B65366u64, vehicle, seat_index, p_2)
    } // 0xBB40DD2270B65366 0x388FDE9A b323
    pub unsafe fn get_last_ped_in_vehicle_seat(vehicle: Vehicle, seat_index: i32) -> Ped {
        call_native!(Ped, 0x83F969AA1EE2A664u64, vehicle, seat_index)
    } // 0x83F969AA1EE2A664 0xF7C6792D b323
    pub unsafe fn get_vehicle_lights_state(
        vehicle: Vehicle,
        lights_on: *mut Bool,
        highbeams_on: *mut Bool,
    ) -> bool {
        call_native!(
            bool,
            0xB91B4C20085BD12Fu64,
            vehicle,
            lights_on,
            highbeams_on
        )
    } // 0xB91B4C20085BD12F 0x7C278621 b323
    pub unsafe fn is_vehicle_tyre_burst(
        vehicle: Vehicle,
        wheel_i_d: i32,
        completely: bool,
    ) -> bool {
        call_native!(bool, 0xBA291848A0815CA9u64, vehicle, wheel_i_d, completely)
    } // 0xBA291848A0815CA9 0x48C80210 b323
    pub unsafe fn set_vehicle_forward_speed(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0xAB54A438726D25D5u64, vehicle, speed);
    } // 0xAB54A438726D25D5 0x69880D14 b323
    pub unsafe fn set_vehicle_forward_speed_xy(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0x6501129C9E0FFA05u64, vehicle, speed);
    } // 0x6501129C9E0FFA05  b877
    pub unsafe fn bring_vehicle_to_halt(vehicle: Vehicle, distance: f32, duration: i32, p_3: bool) {
        call_native!(
            Void,
            0x260BE8F09E326A20u64,
            vehicle,
            distance,
            duration,
            p_3
        );
    } // 0x260BE8F09E326A20 0xCBC7D3C8 b323
    pub unsafe fn set_vehicle_steer_for_buildings(vehicle: Vehicle, p_1: Any) {
        call_native!(Void, 0xDCE97BDF8A0EABC8u64, vehicle, p_1);
    } // 0xDCE97BDF8A0EABC8  b1103
    pub unsafe fn set_vehicle_causes_swerving(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x9849DE24FCF23CCCu64, vehicle, toggle);
    } // 0x9849DE24FCF23CCC  b1604
    pub unsafe fn set_ignore_planes_small_pitch_change(p_0: Any, p_1: Any) {
        call_native!(Void, 0x8664170EF165C4A6u64, p_0, p_1);
    } // 0x8664170EF165C4A6  b2189
    pub unsafe fn stop_bringing_vehicle_to_halt(vehicle: Vehicle) {
        call_native!(Void, 0x7C06330BFDDA182Eu64, vehicle);
    } // 0x7C06330BFDDA182E  b1103
    pub unsafe fn is_vehicle_being_brought_to_halt(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xC69BB1D832A710EFu64, vehicle)
    } // 0xC69BB1D832A710EF  b1493
    pub unsafe fn lower_forklift_forks(forklift: Vehicle) {
        call_native!(Void, 0x923A293361DF44E5u64, forklift);
    } // 0x923A293361DF44E5  b2802
    pub unsafe fn set_forklift_fork_height(vehicle: Vehicle, height: f32) {
        call_native!(Void, 0x37EBBF3117BD6A25u64, vehicle, height);
    } // 0x37EBBF3117BD6A25 0x943A6CFC b323
    pub unsafe fn is_entity_attached_to_handler_frame(vehicle: Vehicle, entity: Entity) -> bool {
        call_native!(bool, 0x57715966069157ADu64, vehicle, entity)
    } // 0x57715966069157AD 0x7FB25568 b323
    pub unsafe fn is_any_entity_attached_to_handler_frame(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x62CA17B74C435651u64, vehicle)
    } // 0x62CA17B74C435651 0x593143B9 b323
    pub unsafe fn find_handler_vehicle_container_is_attached_to(entity: Entity) -> Vehicle {
        call_native!(Vehicle, 0x375E7FC44F21C8ABu64, entity)
    } // 0x375E7FC44F21C8AB 0x70DD5E25 b323
    pub unsafe fn is_handler_frame_lined_up_with_container(
        vehicle: Vehicle,
        entity: Entity,
    ) -> bool {
        call_native!(bool, 0x89D630CF5EA96D23u64, vehicle, entity)
    } // 0x89D630CF5EA96D23 0xFBF5536A b323
    pub unsafe fn attach_container_to_handler_frame_when_lined_up(
        vehicle: Vehicle,
        entity: Entity,
    ) {
        call_native!(Void, 0x6A98C2ECF57FA5D4u64, vehicle, entity);
    } // 0x6A98C2ECF57FA5D4 0x20AB5783 b323
    pub unsafe fn detach_container_from_handler_frame(vehicle: Vehicle) {
        call_native!(Void, 0x7C0043FDFF6436BCu64, vehicle);
    } // 0x7C0043FDFF6436BC 0x0F11D01F b323
    pub unsafe fn set_vehicle_disable_height_map_avoidance(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x8AA9180DE2FEDD45u64, vehicle, p_1);
    } // 0x8AA9180DE2FEDD45 0xAE040377 b323
    pub unsafe fn set_boat_disable_avoidance(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x0A6A279F3AA4FD70u64, vehicle, p_1);
    } // 0x0A6A279F3AA4FD70 0x4C0E4031 b323
    pub unsafe fn is_heli_landing_area_blocked(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x634148744F385576u64, vehicle)
    } // 0x634148744F385576 0x6346B7CC b323
    pub unsafe fn set_short_slowdown_for_landing(vehicle: Vehicle) {
        call_native!(Void, 0x107A473D7A6647A9u64, vehicle);
    } // 0x107A473D7A6647A9  b1290
    pub unsafe fn set_heli_turbulence_scalar(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0xE6F13851780394DAu64, vehicle, p_1);
    } // 0xE6F13851780394DA 0xCCB41A55 b323
    pub unsafe fn set_car_boot_open(vehicle: Vehicle) {
        call_native!(Void, 0xFC40CBF7B90CA77Cu64, vehicle);
    } // 0xFC40CBF7B90CA77C  b877
    pub unsafe fn set_vehicle_tyre_burst(vehicle: Vehicle, index: i32, on_rim: bool, p_3: f32) {
        call_native!(Void, 0xEC6A202EE4960385u64, vehicle, index, on_rim, p_3);
    } // 0xEC6A202EE4960385 0x89D28068 b323
    pub unsafe fn set_vehicle_doors_shut(vehicle: Vehicle, close_instantly: bool) {
        call_native!(Void, 0x781B3D62BB013EF5u64, vehicle, close_instantly);
    } // 0x781B3D62BB013EF5 0xBB1FF6E7 b323
    pub unsafe fn set_vehicle_tyres_can_burst(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xEB9DC3C7D8596C46u64, vehicle, toggle);
    } // 0xEB9DC3C7D8596C46 0xA198DB54 b323
    pub unsafe fn get_vehicle_tyres_can_burst(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x678B9BB8C3F58FEBu64, vehicle)
    } // 0x678B9BB8C3F58FEB 0x4D76CD2F b323
    pub unsafe fn set_vehicle_wheels_can_break(vehicle: Vehicle, enabled: bool) {
        call_native!(Void, 0x29B18B4FD460CA8Fu64, vehicle, enabled);
    } // 0x29B18B4FD460CA8F 0x829ED654 b323
    pub unsafe fn set_vehicle_door_open(
        vehicle: Vehicle,
        door_id: i32,
        loose: bool,
        open_instantly: bool,
    ) {
        call_native!(
            Void,
            0x7C65DAC73C35C862u64,
            vehicle,
            door_id,
            loose,
            open_instantly
        );
    } // 0x7C65DAC73C35C862 0xBB75D38B b323
    pub unsafe fn set_vehicle_door_auto_lock(vehicle: Vehicle, door_id: i32, toggle: bool) {
        call_native!(Void, 0x3B458DDB57038F08u64, vehicle, door_id, toggle);
    } // 0x3B458DDB57038F08  b877
    pub unsafe fn set_fleeing_vehicles_use_switched_off_nodes(p_0: Any) {
        call_native!(Void, 0xA247F9EF01D8082Eu64, p_0);
    } // 0xA247F9EF01D8082E  b1103
    pub unsafe fn remove_vehicle_window(vehicle: Vehicle, window_index: i32) {
        call_native!(Void, 0xA711568EEDB43069u64, vehicle, window_index);
    } // 0xA711568EEDB43069 0xBB8104A3 b323
    pub unsafe fn roll_down_windows(vehicle: Vehicle) {
        call_native!(Void, 0x85796B0549DDE156u64, vehicle);
    } // 0x85796B0549DDE156 0x51A16DC6 b323
    pub unsafe fn roll_down_window(vehicle: Vehicle, window_index: i32) {
        call_native!(Void, 0x7AD9E6CE657D69E3u64, vehicle, window_index);
    } // 0x7AD9E6CE657D69E3 0xF840134C b323
    pub unsafe fn roll_up_window(vehicle: Vehicle, window_index: i32) {
        call_native!(Void, 0x602E548F46E24D59u64, vehicle, window_index);
    } // 0x602E548F46E24D59 0x83B7E06A b323
    pub unsafe fn smash_vehicle_window(vehicle: Vehicle, window_index: i32) {
        call_native!(Void, 0x9E5B5E4D2CCD2259u64, vehicle, window_index);
    } // 0x9E5B5E4D2CCD2259 0xDDD9A8C2 b323
    pub unsafe fn fix_vehicle_window(vehicle: Vehicle, window_index: i32) {
        call_native!(Void, 0x772282EBEB95E682u64, vehicle, window_index);
    } // 0x772282EBEB95E682 0x6B8E990D b323
    pub unsafe fn pop_out_vehicle_windscreen(vehicle: Vehicle) {
        call_native!(Void, 0x6D645D59FB5F5AD3u64, vehicle);
    } // 0x6D645D59FB5F5AD3 0xCC95C96B b323
    pub unsafe fn pop_off_vehicle_roof_with_impulse(vehicle: Vehicle, x: f32, y: f32, z: f32) {
        call_native!(Void, 0xE38CB9D7D39FDBCCu64, vehicle, x, y, z);
    } // 0xE38CB9D7D39FDBCC 0xFDA7B6CA b323
    pub unsafe fn set_vehicle_lights(vehicle: Vehicle, state: i32) {
        call_native!(Void, 0x34E710FF01247C5Au64, vehicle, state);
    } // 0x34E710FF01247C5A 0xE8930226 b323
    pub unsafe fn set_vehicle_use_player_light_settings(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xC45C27EF50F36ADCu64, vehicle, toggle);
    } // 0xC45C27EF50F36ADC 0x4221E435 b323
    pub unsafe fn set_vehicle_headlight_shadows(vehicle: Vehicle, p_1: i32) {
        call_native!(Void, 0x1FD09E7390A74D54u64, vehicle, p_1);
    } // 0x1FD09E7390A74D54  b323
    pub unsafe fn set_vehicle_alarm(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0xCDE5E70C1DDB954Cu64, vehicle, state);
    } // 0xCDE5E70C1DDB954C 0x24877D84 b323
    pub unsafe fn start_vehicle_alarm(vehicle: Vehicle) {
        call_native!(Void, 0xB8FF7AB45305C345u64, vehicle);
    } // 0xB8FF7AB45305C345 0x5B451FF7 b323
    pub unsafe fn is_vehicle_alarm_activated(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x4319E335B71FFF34u64, vehicle)
    } // 0x4319E335B71FFF34 0xF2630A4C b323
    pub unsafe fn set_vehicle_interiorlight(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xBC2042F090AF6AD3u64, vehicle, toggle);
    } // 0xBC2042F090AF6AD3 0x9AD1FE1E b323
    pub unsafe fn set_vehicle_force_interiorlight(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8821196D91FA2DE5u64, vehicle, toggle);
    } // 0x8821196D91FA2DE5  b1290
    pub unsafe fn set_vehicle_light_multiplier(vehicle: Vehicle, multiplier: f32) {
        call_native!(Void, 0xB385454F8791F57Cu64, vehicle, multiplier);
    } // 0xB385454F8791F57C 0x48039D6A b323
    pub unsafe fn attach_vehicle_to_trailer(vehicle: Vehicle, trailer: Vehicle, radius: f32) {
        call_native!(Void, 0x3C7D42D58F770B54u64, vehicle, trailer, radius);
    } // 0x3C7D42D58F770B54 0x2133977F b323
    pub unsafe fn attach_vehicle_on_to_trailer(
        vehicle: Vehicle,
        trailer: Vehicle,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
        coords_x: f32,
        coords_y: f32,
        coords_z: f32,
        rotation_x: f32,
        rotation_y: f32,
        rotation_z: f32,
        disable_collisions: f32,
    ) {
        call_native!(
            Void,
            0x16B5E274BDE402F8u64,
            vehicle,
            trailer,
            offset_x,
            offset_y,
            offset_z,
            coords_x,
            coords_y,
            coords_z,
            rotation_x,
            rotation_y,
            rotation_z,
            disable_collisions
        );
    } // 0x16B5E274BDE402F8 0x12AC1A16 b323
    pub unsafe fn stabilise_entity_attached_to_heli(vehicle: Vehicle, entity: Entity, p_2: f32) {
        call_native!(Void, 0x374706271354CB18u64, vehicle, entity, p_2);
    } // 0x374706271354CB18 0x40C4763F b323
    pub unsafe fn detach_vehicle_from_trailer(vehicle: Vehicle) {
        call_native!(Void, 0x90532EDF0D2BDD86u64, vehicle);
    } // 0x90532EDF0D2BDD86 0xB5DBF91D b323
    pub unsafe fn is_vehicle_attached_to_trailer(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xE7CF3C4F9F489F0Cu64, vehicle)
    } // 0xE7CF3C4F9F489F0C 0xE142BBCC b323
    pub unsafe fn set_trailer_inverse_mass_scale(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0x2A8F319B392E7B3Fu64, vehicle, p_1);
    } // 0x2A8F319B392E7B3F 0xE74E85CE b323
    pub unsafe fn set_trailer_legs_raised(vehicle: Vehicle) {
        call_native!(Void, 0x95CF53B3D687F9FAu64, vehicle);
    } // 0x95CF53B3D687F9FA 0x06C47A6F b323
    pub unsafe fn set_trailer_legs_lowered(vehicle: Vehicle) {
        call_native!(Void, 0x878C75C09FBDB942u64, vehicle);
    } // 0x878C75C09FBDB942  b1103
    pub unsafe fn set_vehicle_tyre_fixed(vehicle: Vehicle, tyre_index: i32) {
        call_native!(Void, 0x6E13FC662B882D1Du64, vehicle, tyre_index);
    } // 0x6E13FC662B882D1D 0xA42EFA6B b323
    pub unsafe fn set_vehicle_number_plate_text(vehicle: Vehicle, plate_text: *const i8) {
        call_native!(Void, 0x95A88F0B409CDA47u64, vehicle, plate_text);
    } // 0x95A88F0B409CDA47 0x400F9556 b323
    pub unsafe fn get_vehicle_number_plate_text(vehicle: Vehicle) -> *const i8 {
        call_native!(*const i8, 0x7CE1CCB9B293020Eu64, vehicle)
    } // 0x7CE1CCB9B293020E 0xE8522D58 b323
    pub unsafe fn get_number_of_vehicle_number_plates() -> i32 {
        call_native!(i32, 0x4C4D6B2644F458CBu64)
    } // 0x4C4D6B2644F458CB 0xD24BC1AE b323
    pub unsafe fn set_vehicle_number_plate_text_index(vehicle: Vehicle, plate_index: i32) {
        call_native!(Void, 0x9088EB5A43FFB0A1u64, vehicle, plate_index);
    } // 0x9088EB5A43FFB0A1 0xA1A1890E b323
    pub unsafe fn get_vehicle_number_plate_text_index(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xF11BC2DD9A3E7195u64, vehicle)
    } // 0xF11BC2DD9A3E7195 0x499747B6 b323
    pub unsafe fn set_random_trains(toggle: bool) {
        call_native!(Void, 0x80D9F74197EA47D9u64, toggle);
    } // 0x80D9F74197EA47D9 0xD461CA7F b323
    pub unsafe fn create_mission_train(
        variation: i32,
        x: f32,
        y: f32,
        z: f32,
        direction: bool,
        p_5: Any,
        p_6: Any,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0x63C6CCA8E68AE8C8u64,
            variation,
            x,
            y,
            z,
            direction,
            p_5,
            p_6
        )
    } // 0x63C6CCA8E68AE8C8 0xD4C2EAFD b323
    pub unsafe fn switch_train_track(track_id: i32, state: bool) {
        call_native!(Void, 0xFD813BB7DB977F20u64, track_id, state);
    } // 0xFD813BB7DB977F20 0x68BFDD61 b323
    pub unsafe fn set_train_track_spawn_frequency(track_index: i32, frequency: i32) {
        call_native!(Void, 0x21973BBF8D17EDFAu64, track_index, frequency);
    } // 0x21973BBF8D17EDFA 0xD5774FB7 b323
    pub unsafe fn allow_train_to_be_removed_by_population(p_0: Any) {
        call_native!(Void, 0x2310A8F9421EBF43u64, p_0);
    } // 0x2310A8F9421EBF43  b2372
    pub unsafe fn delete_all_trains() {
        call_native!(Void, 0x736A718577F39C7Du64);
    } // 0x736A718577F39C7D 0x83DE7ABF b323
    pub unsafe fn set_train_speed(train: Vehicle, speed: f32) {
        call_native!(Void, 0xAA0BC91BE0B796E3u64, train, speed);
    } // 0xAA0BC91BE0B796E3 0xDFC35E4D b323
    pub unsafe fn set_train_cruise_speed(train: Vehicle, speed: f32) {
        call_native!(Void, 0x16469284DB8C62B5u64, train, speed);
    } // 0x16469284DB8C62B5 0xB507F51D b323
    pub unsafe fn set_random_boats(toggle: bool) {
        call_native!(Void, 0x84436EC293B1415Fu64, toggle);
    } // 0x84436EC293B1415F 0xB505BD89 b323
    pub unsafe fn set_random_boats_mp(toggle: bool) {
        call_native!(Void, 0xDA5E12F728DB30CAu64, toggle);
    } // 0xDA5E12F728DB30CA  b2372
    pub unsafe fn set_garbage_trucks(toggle: bool) {
        call_native!(Void, 0x2AFD795EEAC8D30Du64, toggle);
    } // 0x2AFD795EEAC8D30D 0xD9ABB0FF b323
    pub unsafe fn does_vehicle_have_stuck_vehicle_check(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x57E4C39DE5EE8470u64, vehicle)
    } // 0x57E4C39DE5EE8470 0x5D91D9AC b323
    pub unsafe fn get_vehicle_recording_id(recording: i32, script: *const i8) -> i32 {
        call_native!(i32, 0x21543C612379DB3Cu64, recording, script)
    } // 0x21543C612379DB3C 0x328D601D b323
    pub unsafe fn request_vehicle_recording(recording: i32, script: *const i8) {
        call_native!(Void, 0xAF514CABE74CBF15u64, recording, script);
    } // 0xAF514CABE74CBF15 0x91AFEFD9 b323
    pub unsafe fn has_vehicle_recording_been_loaded(recording: i32, script: *const i8) -> bool {
        call_native!(bool, 0x300D614A4C785FC4u64, recording, script)
    } // 0x300D614A4C785FC4 0xF52CD7F5 b323
    pub unsafe fn remove_vehicle_recording(recording: i32, script: *const i8) {
        call_native!(Void, 0xF1160ACCF98A3FC8u64, recording, script);
    } // 0xF1160ACCF98A3FC8 0xD3C05B00 b323
    pub unsafe fn get_position_of_vehicle_recording_id_at_time(id: i32, time: f32) -> Vector3 {
        call_native!(Vector3, 0x92523B76657A517Du64, id, time)
    } // 0x92523B76657A517D 0xF31973BB b323
    pub unsafe fn get_position_of_vehicle_recording_at_time(
        recording: i32,
        time: f32,
        script: *const i8,
    ) -> Vector3 {
        call_native!(Vector3, 0xD242728AA6F0FBA2u64, recording, time, script)
    } // 0xD242728AA6F0FBA2 0x7178558D b323
    pub unsafe fn get_rotation_of_vehicle_recording_id_at_time(id: i32, time: f32) -> Vector3 {
        call_native!(Vector3, 0xF0F2103EFAF8CBA7u64, id, time)
    } // 0xF0F2103EFAF8CBA7 0x4D1C15C2 b323
    pub unsafe fn get_rotation_of_vehicle_recording_at_time(
        recording: i32,
        time: f32,
        script: *const i8,
    ) -> Vector3 {
        call_native!(Vector3, 0x2058206FBE79A8ADu64, recording, time, script)
    } // 0x2058206FBE79A8AD 0xD96DEC68 b323
    pub unsafe fn get_total_duration_of_vehicle_recording_id(id: i32) -> f32 {
        call_native!(f32, 0x102D125411A7B6E6u64, id)
    } // 0x102D125411A7B6E6 0x7116785E b323
    pub unsafe fn get_total_duration_of_vehicle_recording(
        recording: i32,
        script: *const i8,
    ) -> f32 {
        call_native!(f32, 0x0E48D1C262390950u64, recording, script)
    } // 0x0E48D1C262390950 0x5B35EEB7 b323
    pub unsafe fn get_position_in_recording(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x2DACD605FC681475u64, vehicle)
    } // 0x2DACD605FC681475 0x7DCD644C b323
    pub unsafe fn get_time_position_in_recording(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x5746F3A7AB7FE544u64, vehicle)
    } // 0x5746F3A7AB7FE544 0xF8C3E4A2 b323
    pub unsafe fn start_playback_recorded_vehicle(
        vehicle: Vehicle,
        recording: i32,
        script: *const i8,
        p_3: bool,
    ) {
        call_native!(Void, 0x3F878F92B3A7A071u64, vehicle, recording, script, p_3);
    } // 0x3F878F92B3A7A071 0xCF614CA8 b323
    pub unsafe fn start_playback_recorded_vehicle_with_flags(
        vehicle: Vehicle,
        recording: i32,
        script: *const i8,
        flags: i32,
        time: i32,
        driving_style: i32,
    ) {
        call_native!(
            Void,
            0x7D80FD645D4DA346u64,
            vehicle,
            recording,
            script,
            flags,
            time,
            driving_style
        );
    } // 0x7D80FD645D4DA346 0x4E721AD2 b323
    pub unsafe fn force_playback_recorded_vehicle_update(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x1F2E4E06DEA8992Bu64, vehicle, p_1);
    } // 0x1F2E4E06DEA8992B 0x01B91CD0 b323
    pub unsafe fn stop_playback_recorded_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0x54833611C17ABDEAu64, vehicle);
    } // 0x54833611C17ABDEA 0xAE99C57C b323
    pub unsafe fn pause_playback_recorded_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0x632A689BF42301B1u64, vehicle);
    } // 0x632A689BF42301B1 0xCCF54912 b323
    pub unsafe fn unpause_playback_recorded_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0x8879EE09268305D5u64, vehicle);
    } // 0x8879EE09268305D5 0x59060F75 b323
    pub unsafe fn is_playback_going_on_for_vehicle(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x1C8A4C2C19E68EECu64, vehicle)
    } // 0x1C8A4C2C19E68EEC 0x61F7650D b323
    pub unsafe fn is_playback_using_ai_going_on_for_vehicle(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xAEA8FD591FAD4106u64, vehicle)
    } // 0xAEA8FD591FAD4106 0x63022C58 b323
    pub unsafe fn get_current_playback_for_vehicle(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x42BC05C27A946054u64, vehicle)
    } // 0x42BC05C27A946054 0xA3F44390 b323
    pub unsafe fn skip_to_end_and_stop_playback_recorded_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0xAB8E2EDA0C0A5883u64, vehicle);
    } // 0xAB8E2EDA0C0A5883 0x8DEA18C8 b323
    pub unsafe fn set_playback_speed(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0x6683AB880E427778u64, vehicle, speed);
    } // 0x6683AB880E427778 0x684E26E4 b323
    pub unsafe fn start_playback_recorded_vehicle_using_ai(
        vehicle: Vehicle,
        recording: i32,
        script: *const i8,
        speed: f32,
        driving_style: i32,
    ) {
        call_native!(
            Void,
            0x29DE5FA52D00428Cu64,
            vehicle,
            recording,
            script,
            speed,
            driving_style
        );
    } // 0x29DE5FA52D00428C 0x8DE8E24E b323
    pub unsafe fn skip_time_in_playback_recorded_vehicle(vehicle: Vehicle, time: f32) {
        call_native!(Void, 0x9438F7AD68771A20u64, vehicle, time);
    } // 0x9438F7AD68771A20 0xCF3EFA4B b323
    pub unsafe fn set_playback_to_use_ai(vehicle: Vehicle, driving_style: i32) {
        call_native!(Void, 0xA549C3B37EA28131u64, vehicle, driving_style);
    } // 0xA549C3B37EA28131 0xB536CCD7 b323
    pub unsafe fn set_playback_to_use_ai_try_to_revert_back_later(
        vehicle: Vehicle,
        time: i32,
        driving_style: i32,
        p_3: bool,
    ) {
        call_native!(
            Void,
            0x6E63860BBB190730u64,
            vehicle,
            time,
            driving_style,
            p_3
        );
    } // 0x6E63860BBB190730 0x0C8ABAA4 b323
    pub unsafe fn set_additional_rotation_for_recorded_vehicle_playback(
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        p_4: Any,
    ) {
        call_native!(Void, 0x5845066D8A1EA7F7u64, vehicle, x, y, z, p_4);
    } // 0x5845066D8A1EA7F7 0x943A58EB b323
    pub unsafe fn set_position_offset_for_recorded_vehicle_playback(
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
    ) {
        call_native!(Void, 0x796A877E459B99EAu64, vehicle, x, y, z);
    } // 0x796A877E459B99EA 0x5C9F477C b323
    pub unsafe fn set_global_position_offset_for_recorded_vehicle_playback(
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
    ) {
        call_native!(Void, 0xFAF2A78061FD9EF4u64, vehicle, x, y, z);
    } // 0xFAF2A78061FD9EF4 0xCD83C393 b323
    pub unsafe fn set_should_lerp_from_ai_to_full_recording(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x063AE2B2CC273588u64, vehicle, p_1);
    } // 0x063AE2B2CC273588 0x2EF8435C b323
    pub unsafe fn explode_vehicle_in_cutscene(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x786A4EB67B01BF0Bu64, vehicle, p_1);
    } // 0x786A4EB67B01BF0B 0xA85207B5 b323
    pub unsafe fn add_vehicle_stuck_check_with_warp(
        p_0: Any,
        p_1: f32,
        p_2: Any,
        p_3: bool,
        p_4: bool,
        p_5: bool,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x2FA9923062DD396Cu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        );
    } // 0x2FA9923062DD396C 0xC8B789AD b323
    pub unsafe fn set_vehicle_model_is_suppressed(model: Hash, suppressed: bool) {
        call_native!(Void, 0x0FC2D89AC25A5814u64, model, suppressed);
    } // 0x0FC2D89AC25A5814 0x42A08C9B b323
    pub unsafe fn get_random_vehicle_in_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        flags: i32,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0x386F6CE5BAF6091Cu64,
            x,
            y,
            z,
            radius,
            model_hash,
            flags
        )
    } // 0x386F6CE5BAF6091C 0x57216D03 b323
    pub unsafe fn get_random_vehicle_front_bumper_in_sphere(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: i32,
        p_5: i32,
        p_6: i32,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0xC5574E0AEB86BA68u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0xC5574E0AEB86BA68 0xDCADEB66 b323
    pub unsafe fn get_random_vehicle_back_bumper_in_sphere(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: i32,
        p_5: i32,
        p_6: i32,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0xB50807EABE20A8DCu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0xB50807EABE20A8DC 0xD6343F6B b323
    pub unsafe fn get_closest_vehicle(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        model_hash: Hash,
        flags: i32,
    ) -> Vehicle {
        call_native!(
            Vehicle,
            0xF73EB622C4F1689Bu64,
            x,
            y,
            z,
            radius,
            model_hash,
            flags
        )
    } // 0xF73EB622C4F1689B 0xD7E26B2C b323
    pub unsafe fn get_train_carriage(train: Vehicle, trailer_number: i32) -> Vehicle {
        call_native!(Vehicle, 0x08AAFD0814722BC3u64, train, trailer_number)
    } // 0x08AAFD0814722BC3 0x2544E7A6 b323
    pub unsafe fn is_mission_train(train: Vehicle) -> bool {
        call_native!(bool, 0xAD464F2E18836BFCu64, train)
    } // 0xAD464F2E18836BFC  b2372
    pub unsafe fn delete_mission_train(train: *mut Vehicle) {
        call_native!(Void, 0x5B76B14AE875C795u64, train);
    } // 0x5B76B14AE875C795 0x86C9497D b323
    pub unsafe fn set_mission_train_as_no_longer_needed(train: *mut Vehicle, p_1: bool) {
        call_native!(Void, 0xBBE7648349B49BE8u64, train, p_1);
    } // 0xBBE7648349B49BE8 0x19808560 b323
    pub unsafe fn set_mission_train_coords(train: Vehicle, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x591CA673AA6AB736u64, train, x, y, z);
    } // 0x591CA673AA6AB736 0xD6D70803 b323
    pub unsafe fn is_this_model_a_boat(model: Hash) -> bool {
        call_native!(bool, 0x45A9187928F4B9E3u64, model)
    } // 0x45A9187928F4B9E3 0x10F6085C b323
    pub unsafe fn is_this_model_a_jetski(model: Hash) -> bool {
        call_native!(bool, 0x9537097412CF75FEu64, model)
    } // 0x9537097412CF75FE  b323
    pub unsafe fn is_this_model_a_plane(model: Hash) -> bool {
        call_native!(bool, 0xA0948AB42D7BA0DEu64, model)
    } // 0xA0948AB42D7BA0DE 0x3B3907BB b323
    pub unsafe fn is_this_model_a_heli(model: Hash) -> bool {
        call_native!(bool, 0xDCE4334788AF94EAu64, model)
    } // 0xDCE4334788AF94EA 0x8AF7F568 b323
    pub unsafe fn is_this_model_a_car(model: Hash) -> bool {
        call_native!(bool, 0x7F6DB52EEFC96DF8u64, model)
    } // 0x7F6DB52EEFC96DF8 0x60E4C22F b323
    pub unsafe fn is_this_model_a_train(model: Hash) -> bool {
        call_native!(bool, 0xAB935175B22E822Bu64, model)
    } // 0xAB935175B22E822B 0xF87DCFFD b323
    pub unsafe fn is_this_model_a_bike(model: Hash) -> bool {
        call_native!(bool, 0xB50C0B0CEDC6CE84u64, model)
    } // 0xB50C0B0CEDC6CE84 0x7E702CDD b323
    pub unsafe fn is_this_model_a_bicycle(model: Hash) -> bool {
        call_native!(bool, 0xBF94DD42F63BDED2u64, model)
    } // 0xBF94DD42F63BDED2 0x328E6FF5 b323
    pub unsafe fn is_this_model_a_quadbike(model: Hash) -> bool {
        call_native!(bool, 0x39DAC362EE65FA28u64, model)
    } // 0x39DAC362EE65FA28 0xC1625277 b323
    pub unsafe fn is_this_model_an_amphibious_car(model: Hash) -> bool {
        call_native!(bool, 0x633F6F44A537EBB6u64, model)
    } // 0x633F6F44A537EBB6  b944
    pub unsafe fn is_this_model_an_amphibious_quadbike(model: Hash) -> bool {
        call_native!(bool, 0xA1A9FC1C76A6730Du64, model)
    } // 0xA1A9FC1C76A6730D  b1103
    pub unsafe fn set_heli_blades_full_speed(vehicle: Vehicle) {
        call_native!(Void, 0xA178472EBB8AE60Du64, vehicle);
    } // 0xA178472EBB8AE60D 0x033A9408 b323
    pub unsafe fn set_heli_blades_speed(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0xFD280B4D7F3ABC4Du64, vehicle, speed);
    } // 0xFD280B4D7F3ABC4D 0x5C7D4EA9 b323
    pub unsafe fn force_sub_throttle_for_time(vehicle: Vehicle, p_1: f32, p_2: f32) {
        call_native!(Void, 0x99CAD8E7AFDB60FAu64, vehicle, p_1, p_2);
    } // 0x99CAD8E7AFDB60FA 0x1128A45B b323
    pub unsafe fn set_vehicle_can_be_targetted(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x3750146A28097A82u64, vehicle, state);
    } // 0x3750146A28097A82 0x64B70B1D b323
    pub unsafe fn set_dont_allow_player_to_enter_vehicle_if_locked_for_player(
        vehicle: Vehicle,
        p_1: bool,
    ) {
        call_native!(Void, 0xDBC631F109350B8Cu64, vehicle, p_1);
    } // 0xDBC631F109350B8C 0x486C1280 b323
    pub unsafe fn set_vehicle_can_be_visibly_damaged(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x4C7028F78FFD3681u64, vehicle, state);
    } // 0x4C7028F78FFD3681 0xC5D94017 b323
    pub unsafe fn set_vehicle_has_unbreakable_lights(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1AA8A837D2169D94u64, vehicle, toggle);
    } // 0x1AA8A837D2169D94 0x009AB49E b323
    pub unsafe fn set_vehicle_respects_locks_when_has_driver(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x2311DD7159F00582u64, vehicle, p_1);
    } // 0x2311DD7159F00582 0x758C5E2E b323
    pub unsafe fn set_vehicle_can_eject_passengers_if_locked(p_0: Any, p_1: Any) {
        call_native!(Void, 0x065D03A9D6B2C6B5u64, p_0, p_1);
    } // 0x065D03A9D6B2C6B5  b463
    pub unsafe fn get_vehicle_dirt_level(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x8F17BC8BA08DA62Bu64, vehicle)
    } // 0x8F17BC8BA08DA62B 0xFD15C065 b323
    pub unsafe fn set_vehicle_dirt_level(vehicle: Vehicle, dirt_level: f32) {
        call_native!(Void, 0x79D3B596FE44EE8Bu64, vehicle, dirt_level);
    } // 0x79D3B596FE44EE8B 0x2B39128B b323
    pub unsafe fn get_does_vehicle_have_damage_decals(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xBCDC5017D3CE1E9Eu64, vehicle)
    } // 0xBCDC5017D3CE1E9E 0xDAC523BC b323
    pub unsafe fn is_vehicle_door_fully_open(vehicle: Vehicle, door_id: i32) -> bool {
        call_native!(bool, 0x3E933CFF7B111C22u64, vehicle, door_id)
    } // 0x3E933CFF7B111C22 0xC2385B6F b323
    pub unsafe fn set_vehicle_engine_on(
        vehicle: Vehicle,
        value: bool,
        instantly: bool,
        disable_auto_start: bool,
    ) {
        call_native!(
            Void,
            0x2497C4717C8B881Eu64,
            vehicle,
            value,
            instantly,
            disable_auto_start
        );
    } // 0x2497C4717C8B881E 0x7FBC86F1 b323
    pub unsafe fn set_vehicle_undriveable(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8ABA6AF54B942B95u64, vehicle, toggle);
    } // 0x8ABA6AF54B942B95 0x48D02A4E b323
    pub unsafe fn set_vehicle_provides_cover(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x5AFEEDD9BB2899D7u64, vehicle, toggle);
    } // 0x5AFEEDD9BB2899D7 0xEFC01CA9 b323
    pub unsafe fn set_vehicle_door_control(vehicle: Vehicle, door_id: i32, speed: i32, angle: f32) {
        call_native!(Void, 0xF2BFA0430F0A0FCBu64, vehicle, door_id, speed, angle);
    } // 0xF2BFA0430F0A0FCB 0x572DD360 b323
    pub unsafe fn set_vehicle_door_latched(
        vehicle: Vehicle,
        door_id: i32,
        p_2: bool,
        p_3: bool,
        p_4: bool,
    ) {
        call_native!(Void, 0xA5A9653A8D2CAF48u64, vehicle, door_id, p_2, p_3, p_4);
    } // 0xA5A9653A8D2CAF48 0x4EB7BBFC b323
    pub unsafe fn get_vehicle_door_angle_ratio(vehicle: Vehicle, door_id: i32) -> f32 {
        call_native!(f32, 0xFE3F9C29F7B32BD5u64, vehicle, door_id)
    } // 0xFE3F9C29F7B32BD5 0x0E399C26 b323
    pub unsafe fn get_ped_using_vehicle_door(vehicle: Vehicle, doord: i32) -> Ped {
        call_native!(Ped, 0x218297BF0CFD853Bu64, vehicle, doord)
    } // 0x218297BF0CFD853B 0x0630101F b323
    pub unsafe fn set_vehicle_door_shut(vehicle: Vehicle, door_id: i32, close_instantly: bool) {
        call_native!(
            Void,
            0x93D9BD300D7789E5u64,
            vehicle,
            door_id,
            close_instantly
        );
    } // 0x93D9BD300D7789E5 0x142606BD b323
    pub unsafe fn set_vehicle_door_broken(vehicle: Vehicle, door_id: i32, delete_door: bool) {
        call_native!(Void, 0xD4D4F6A4AB575A33u64, vehicle, door_id, delete_door);
    } // 0xD4D4F6A4AB575A33 0x8147FEA7 b323
    pub unsafe fn set_vehicle_can_break(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x59BF8C3D52C92F66u64, vehicle, toggle);
    } // 0x59BF8C3D52C92F66 0x90A810D1 b323
    pub unsafe fn does_vehicle_have_roof(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x8AC862B0B32C5B80u64, vehicle)
    } // 0x8AC862B0B32C5B80 0xDB817403 b323
    pub unsafe fn set_vehicle_remove_aggressive_carjack_mission(p_0: Any) {
        call_native!(Void, 0xC4B3347BD68BD609u64, p_0);
    } // 0xC4B3347BD68BD609  b573
    pub unsafe fn set_vehicle_avoid_player_vehicle_riot_van_mission(p_0: Any) {
        call_native!(Void, 0xD3301660A57C9272u64, p_0);
    } // 0xD3301660A57C9272  b757
    pub unsafe fn set_carjack_mission_removal_parameters(p_0: Any, p_1: Any) {
        call_native!(Void, 0xB9562064627FF9DBu64, p_0, p_1);
    } // 0xB9562064627FF9DB  b573
    pub unsafe fn is_big_vehicle(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x9F243D3919F442FEu64, vehicle)
    } // 0x9F243D3919F442FE 0x9CDBA8DE b323
    pub unsafe fn get_number_of_vehicle_colours(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x3B963160CD65D41Eu64, vehicle)
    } // 0x3B963160CD65D41E 0xF2442EE2 b323
    pub unsafe fn set_vehicle_colour_combination(vehicle: Vehicle, color_combination: i32) {
        call_native!(Void, 0x33E8CD3322E2FE31u64, vehicle, color_combination);
    } // 0x33E8CD3322E2FE31 0xA557AEAD b323
    pub unsafe fn get_vehicle_colour_combination(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x6A842D197F845D56u64, vehicle)
    } // 0x6A842D197F845D56 0x77AC1B4C b323
    pub unsafe fn set_vehicle_xenon_light_color_index(vehicle: Vehicle, color_index: i32) {
        call_native!(Void, 0xE41033B25D003A07u64, vehicle, color_index);
    } // 0xE41033B25D003A07  b1604
    pub unsafe fn get_vehicle_xenon_light_color_index(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x3DFF319A831E0CDBu64, vehicle)
    } // 0x3DFF319A831E0CDB  b1604
    pub unsafe fn set_vehicle_is_considered_by_player(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x31B927BBC44156CDu64, vehicle, toggle);
    } // 0x31B927BBC44156CD 0x14413319 b323
    pub unsafe fn set_vehicle_will_force_other_vehicles_to_stop(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xBE5C1255A1830FF5u64, vehicle, toggle);
    } // 0xBE5C1255A1830FF5 0xA6D8D7A5 b323
    pub unsafe fn set_vehicle_act_as_if_has_siren_on(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x9BECD4B9FEF3F8A6u64, vehicle, p_1);
    } // 0x9BECD4B9FEF3F8A6 0xACAB8FF3 b323
    pub unsafe fn set_vehicle_use_more_restrictive_spawn_checks(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x88BC673CA9E0AE99u64, vehicle, p_1);
    } // 0x88BC673CA9E0AE99 0xF0E5C41D b323
    pub unsafe fn set_vehicle_may_be_used_by_goto_point_any_means(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xE851E480B814D4BAu64, vehicle, p_1);
    } // 0xE851E480B814D4BA 0x2F98B4B7 b323
    pub unsafe fn get_random_vehicle_model_in_memory(
        p_0: bool,
        model_hash: *mut Hash,
        success_indicator: *mut i32,
    ) {
        call_native!(
            Void,
            0x055BF0AC0C34F4FDu64,
            p_0,
            model_hash,
            success_indicator
        );
    } // 0x055BF0AC0C34F4FD 0xE2C45631 b323
    pub unsafe fn get_vehicle_door_lock_status(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x25BC98A59C2EA962u64, vehicle)
    } // 0x25BC98A59C2EA962 0x0D72CEF2 b323
    pub unsafe fn get_vehicle_individual_door_lock_status(vehicle: Vehicle, door_id: i32) -> i32 {
        call_native!(i32, 0xCA4AC3EAAE46EC7Bu64, vehicle, door_id)
    } // 0xCA4AC3EAAE46EC7B  b1103
    pub unsafe fn is_vehicle_door_damaged(veh: Vehicle, door_i_d: i32) -> bool {
        call_native!(bool, 0xB8E181E559464527u64, veh, door_i_d)
    } // 0xB8E181E559464527 0x4999E3C3 b323
    pub unsafe fn set_door_allowed_to_be_broken_off(
        vehicle: Vehicle,
        door_id: i32,
        is_breakable: bool,
    ) {
        call_native!(Void, 0x2FA133A4A9D37ED8u64, vehicle, door_id, is_breakable);
    } // 0x2FA133A4A9D37ED8 0x065B92B3 b323
    pub unsafe fn is_vehicle_bumper_bouncing(vehicle: Vehicle, front_bumper: bool) -> bool {
        call_native!(bool, 0x27B926779DEB502Du64, vehicle, front_bumper)
    } // 0x27B926779DEB502D 0xB3A2CC4F b323
    pub unsafe fn is_vehicle_bumper_broken_off(vehicle: Vehicle, front_bumper: bool) -> bool {
        call_native!(bool, 0x468056A6BB6F3846u64, vehicle, front_bumper)
    } // 0x468056A6BB6F3846 0xAF25C027 b323
    pub unsafe fn is_cop_vehicle_in_area_3d(
        x_1: f32,
        x_2: f32,
        y_1: f32,
        y_2: f32,
        z_1: f32,
        z_2: f32,
    ) -> bool {
        call_native!(bool, 0x7EEF65D5F153E26Au64, x_1, x_2, y_1, y_2, z_1, z_2)
    } // 0x7EEF65D5F153E26A 0xFB16C6D1 b323
    pub unsafe fn is_vehicle_on_all_wheels(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xB104CD1BABF302E2u64, vehicle)
    } // 0xB104CD1BABF302E2 0x10089F8E b323
    pub unsafe fn get_vehicle_model_value(vehicle_model: Hash) -> i32 {
        call_native!(i32, 0x5873C14A52D74236u64, vehicle_model)
    } // 0x5873C14A52D74236 0x58FEFC3D b463
    pub unsafe fn get_vehicle_layout_hash(vehicle: Vehicle) -> Hash {
        call_native!(Hash, 0x28D37D4F71AC5C58u64, vehicle)
    } // 0x28D37D4F71AC5C58 0xE0B35187 b323
    pub unsafe fn get_in_vehicle_clipset_hash_for_seat(vehicle: Vehicle, p_1: i32) -> Hash {
        call_native!(Hash, 0xA01BC64DD4BFBBACu64, vehicle, p_1)
    } // 0xA01BC64DD4BFBBAC  b323
    pub unsafe fn set_render_train_as_derailed(train: Vehicle, toggle: bool) {
        call_native!(Void, 0x317B11A312DF5534u64, train, toggle);
    } // 0x317B11A312DF5534 0x899D9092 b323
    pub unsafe fn set_vehicle_extra_colours(
        vehicle: Vehicle,
        pearlescent_color: i32,
        wheel_color: i32,
    ) {
        call_native!(
            Void,
            0x2036F561ADD12E33u64,
            vehicle,
            pearlescent_color,
            wheel_color
        );
    } // 0x2036F561ADD12E33 0x515DB2A0 b323
    pub unsafe fn get_vehicle_extra_colours(
        vehicle: Vehicle,
        pearlescent_color: *mut i32,
        wheel_color: *mut i32,
    ) {
        call_native!(
            Void,
            0x3BC4245933A166F7u64,
            vehicle,
            pearlescent_color,
            wheel_color
        );
    } // 0x3BC4245933A166F7 0x80E4659B b323
    pub unsafe fn set_vehicle_extra_colour_5(vehicle: Vehicle, color: i32) {
        call_native!(Void, 0xF40DD601A65F7F19u64, vehicle, color);
    } // 0xF40DD601A65F7F19  b505
    pub unsafe fn get_vehicle_extra_colour_5(vehicle: Vehicle, color: *mut i32) {
        call_native!(Void, 0x7D1464D472D32136u64, vehicle, color);
    } // 0x7D1464D472D32136  b505
    pub unsafe fn set_vehicle_extra_colour_6(vehicle: Vehicle, color: i32) {
        call_native!(Void, 0x6089CDF6A57F326Cu64, vehicle, color);
    } // 0x6089CDF6A57F326C  b505
    pub unsafe fn get_vehicle_extra_colour_6(vehicle: Vehicle, color: *mut i32) {
        call_native!(Void, 0xB7635E80A5C31BFFu64, vehicle, color);
    } // 0xB7635E80A5C31BFF  b505
    pub unsafe fn stop_all_garage_activity() {
        call_native!(Void, 0x0F87E938BDF29D66u64);
    } // 0x0F87E938BDF29D66 0x17A0BCE5 b323
    pub unsafe fn set_vehicle_fixed(vehicle: Vehicle) {
        call_native!(Void, 0x115722B1B9C14C1Cu64, vehicle);
    } // 0x115722B1B9C14C1C 0x17469AA1 b323
    pub unsafe fn set_vehicle_deformation_fixed(vehicle: Vehicle) {
        call_native!(Void, 0x953DA1E1B12C0491u64, vehicle);
    } // 0x953DA1E1B12C0491 0xDD2920C8 b323
    pub unsafe fn set_vehicle_can_engine_missfire(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x206BC5DC9D1AC70Au64, vehicle, toggle);
    } // 0x206BC5DC9D1AC70A 0x8EACBD13 b323
    pub unsafe fn set_vehicle_can_leak_oil(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x51BB2D88D31A914Bu64, vehicle, toggle);
    } // 0x51BB2D88D31A914B 0x88F0F7E7 b323
    pub unsafe fn set_vehicle_can_leak_petrol(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x192547247864DFDDu64, vehicle, toggle);
    } // 0x192547247864DFDD 0x90D6EE57 b323
    pub unsafe fn set_disable_vehicle_petrol_tank_fires(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x465BF26AB9684352u64, vehicle, toggle);
    } // 0x465BF26AB9684352 0xC40192B5 b323
    pub unsafe fn set_disable_vehicle_petrol_tank_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x37C8252A7C92D017u64, vehicle, toggle);
    } // 0x37C8252A7C92D017 0xAD3E05F2 b323
    pub unsafe fn set_disable_vehicle_engine_fires(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x91A0BD635321F145u64, vehicle, toggle);
    } // 0x91A0BD635321F145 0x1784BA1A b323
    pub unsafe fn set_vehicle_limit_speed_when_player_inactive(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xC50CE861B55EAB8Bu64, vehicle, toggle);
    } // 0xC50CE861B55EAB8B 0x40C323AE b323
    pub unsafe fn set_vehicle_stop_instantly_when_player_inactive(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x6EBFB22D646FFC18u64, vehicle, toggle);
    } // 0x6EBFB22D646FFC18 0x847F1304 b323
    pub unsafe fn set_disable_pretend_occupants(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x25367DE49D64CF16u64, vehicle, toggle);
    } // 0x25367DE49D64CF16 0xCBD98BA1 b323
    pub unsafe fn remove_vehicles_from_generators_in_area(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        p_6: Any,
    ) {
        call_native!(
            Void,
            0x46A1E1A299EC4BBAu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            p_6
        );
    } // 0x46A1E1A299EC4BBA 0x42CC15E0 b323
    pub unsafe fn set_vehicle_steer_bias(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0x42A8EC77D5150CBEu64, vehicle, value);
    } // 0x42A8EC77D5150CBE 0x7357C1EB b323
    pub unsafe fn is_vehicle_extra_turned_on(vehicle: Vehicle, extra_id: i32) -> bool {
        call_native!(bool, 0xD2E6822DBFD6C8BDu64, vehicle, extra_id)
    } // 0xD2E6822DBFD6C8BD 0x042098B5 b323
    pub unsafe fn set_vehicle_extra(vehicle: Vehicle, extra_id: i32, disable: bool) {
        call_native!(Void, 0x7EE3A3C5E4A40CC9u64, vehicle, extra_id, disable);
    } // 0x7EE3A3C5E4A40CC9 0x642D065C b323
    pub unsafe fn does_extra_exist(vehicle: Vehicle, extra_id: i32) -> bool {
        call_native!(bool, 0x1262D55792428154u64, vehicle, extra_id)
    } // 0x1262D55792428154 0x409411CC b323
    pub unsafe fn is_extra_broken_off(vehicle: Vehicle, extra_id: i32) -> bool {
        call_native!(bool, 0x534E36D4DB9ECC5Du64, vehicle, extra_id)
    } // 0x534E36D4DB9ECC5D  b1493
    pub unsafe fn set_convertible_roof(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xF39C4F538B5124C2u64, vehicle, p_1);
    } // 0xF39C4F538B5124C2 0xC87B6A51 b323
    pub unsafe fn lower_convertible_roof(vehicle: Vehicle, instantly_lower: bool) {
        call_native!(Void, 0xDED51F703D0FA83Du64, vehicle, instantly_lower);
    } // 0xDED51F703D0FA83D 0xC5F72EAE b323
    pub unsafe fn raise_convertible_roof(vehicle: Vehicle, instantly_raise: bool) {
        call_native!(Void, 0x8F5FB35D7E88FC70u64, vehicle, instantly_raise);
    } // 0x8F5FB35D7E88FC70 0xA4E4CBA3 b323
    pub unsafe fn get_convertible_roof_state(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xF8C397922FC03F41u64, vehicle)
    } // 0xF8C397922FC03F41 0x1B09714D b323
    pub unsafe fn is_vehicle_a_convertible(vehicle: Vehicle, p_1: bool) -> bool {
        call_native!(bool, 0x52F357A30698BCCEu64, vehicle, p_1)
    } // 0x52F357A30698BCCE 0x6EF54490 b323
    pub unsafe fn transform_to_submarine(vehicle: Vehicle, no_animation: bool) -> bool {
        call_native!(bool, 0xBE4C854FFDB6EEBEu64, vehicle, no_animation)
    } // 0xBE4C854FFDB6EEBE 0xCAFE5FE0 b1365
    pub unsafe fn transform_to_car(vehicle: Vehicle, no_animation: bool) {
        call_native!(Void, 0x2A69FFD1B42BFF9Eu64, vehicle, no_animation);
    } // 0x2A69FFD1B42BFF9E 0xD8B90941 b1290
    pub unsafe fn is_vehicle_in_submarine_mode(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xA77DC70BD689A1E5u64, vehicle)
    } // 0xA77DC70BD689A1E5 0xE2FF06DB b1290
    pub unsafe fn is_vehicle_stopped_at_traffic_lights(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x2959F696AE390A99u64, vehicle)
    } // 0x2959F696AE390A99 0x69200FA4 b323
    pub unsafe fn set_vehicle_damage(
        vehicle: Vehicle,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        damage: f32,
        radius: f32,
        focus_on_model: bool,
    ) {
        call_native!(
            Void,
            0xA1DD317EA8FD4F29u64,
            vehicle,
            x_offset,
            y_offset,
            z_offset,
            damage,
            radius,
            focus_on_model
        );
    } // 0xA1DD317EA8FD4F29 0x21B458B2 b323
    pub unsafe fn set_vehicle_occupants_take_explosive_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x35BB21DE06784373u64, vehicle, toggle);
    } // 0x35BB21DE06784373  b463
    pub unsafe fn get_vehicle_engine_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xC45D23BAF168AAB8u64, vehicle)
    } // 0xC45D23BAF168AAB8 0x8880038A b323
    pub unsafe fn set_vehicle_engine_health(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0x45F6D8EEF34ABEF1u64, vehicle, health);
    } // 0x45F6D8EEF34ABEF1 0x1B760FB5 b323
    pub unsafe fn set_plane_engine_health(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0x2A86A0475B6A1434u64, vehicle, health);
    } // 0x2A86A0475B6A1434  b1103
    pub unsafe fn get_vehicle_petrol_tank_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x7D5DABE888D2D074u64, vehicle)
    } // 0x7D5DABE888D2D074 0xE41595CE b323
    pub unsafe fn set_vehicle_petrol_tank_health(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0x70DB57649FA8D0D8u64, vehicle, health);
    } // 0x70DB57649FA8D0D8 0x660A3692 b323
    pub unsafe fn is_vehicle_stuck_timer_up(vehicle: Vehicle, p_1: i32, ms: i32) -> bool {
        call_native!(bool, 0x679BE1DAF71DA874u64, vehicle, p_1, ms)
    } // 0x679BE1DAF71DA874 0x2FCF58C1 b323
    pub unsafe fn reset_vehicle_stuck_timer(vehicle: Vehicle, null_attributes: i32) {
        call_native!(Void, 0xD7591B0065AFAA7Au64, vehicle, null_attributes);
    } // 0xD7591B0065AFAA7A 0xEF2A6016 b323
    pub unsafe fn is_vehicle_driveable(vehicle: Vehicle, is_on_fire_check: bool) -> bool {
        call_native!(bool, 0x4C241E39B23DF959u64, vehicle, is_on_fire_check)
    } // 0x4C241E39B23DF959 0x41A7267A b323
    pub unsafe fn set_vehicle_has_been_owned_by_player(vehicle: Vehicle, owned: bool) {
        call_native!(Void, 0x2B5F9D2AF1F1722Du64, vehicle, owned);
    } // 0x2B5F9D2AF1F1722D 0xB4D3DBFB b323
    pub unsafe fn set_vehicle_needs_to_be_hotwired(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xFBA550EA44404EE6u64, vehicle, toggle);
    } // 0xFBA550EA44404EE6 0xD8260751 b323
    pub unsafe fn set_vehicle_blip_throttle_randomly(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x9F3F689B814F2599u64, vehicle, p_1);
    } // 0x9F3F689B814F2599  b323
    pub unsafe fn set_police_focus_will_track_vehicle(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x4E74E62E0A97E901u64, vehicle, toggle);
    } // 0x4E74E62E0A97E901 0x5690F6C3 b323
    pub unsafe fn start_vehicle_horn(vehicle: Vehicle, duration: i32, mode: Hash, forever: bool) {
        call_native!(
            Void,
            0x9C8C6504B5B63D2Cu64,
            vehicle,
            duration,
            mode,
            forever
        );
    } // 0x9C8C6504B5B63D2C 0x0DF5ADB3 b323
    pub unsafe fn set_vehicle_in_car_mod_shop(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x9D44FCCE98450843u64, vehicle, toggle);
    } // 0x9D44FCCE98450843 0x968E5770 b323
    pub unsafe fn set_vehicle_has_strong_axles(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x92F0CF722BC4202Fu64, vehicle, toggle);
    } // 0x92F0CF722BC4202F 0x0D1CBC65 b323
    pub unsafe fn get_display_name_from_vehicle_model(model_hash: Hash) -> *const i8 {
        call_native!(*const i8, 0xB215AAC32D25D019u64, model_hash)
    } // 0xB215AAC32D25D019 0xEC86DF39 b323
    pub unsafe fn get_make_name_from_vehicle_model(model_hash: Hash) -> *const i8 {
        call_native!(*const i8, 0xF7AF4F159FF99F97u64, model_hash)
    } // 0xF7AF4F159FF99F97  b1868
    pub unsafe fn get_vehicle_deformation_at_pos(
        vehicle: Vehicle,
        offset_x: f32,
        offset_y: f32,
        offset_z: f32,
    ) -> Vector3 {
        call_native!(
            Vector3,
            0x4EC6CFBC7B2E9536u64,
            vehicle,
            offset_x,
            offset_y,
            offset_z
        )
    } // 0x4EC6CFBC7B2E9536 0xABF02075 b323
    pub unsafe fn set_vehicle_livery(vehicle: Vehicle, livery: i32) {
        call_native!(Void, 0x60BF608F1B8CD1B6u64, vehicle, livery);
    } // 0x60BF608F1B8CD1B6 0x7AD87059 b323
    pub unsafe fn get_vehicle_livery(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x2BB9230590DA5E8Au64, vehicle)
    } // 0x2BB9230590DA5E8A 0xEC82A51D b323
    pub unsafe fn get_vehicle_livery_count(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x87B63E25A529D526u64, vehicle)
    } // 0x87B63E25A529D526 0xFB0CA947 b323
    pub unsafe fn set_vehicle_livery2(vehicle: Vehicle, livery: i32) {
        call_native!(Void, 0xA6D3A8750DC73270u64, vehicle, livery);
    } // 0xA6D3A8750DC73270  b505
    pub unsafe fn get_vehicle_livery2(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x60190048C0764A26u64, vehicle)
    } // 0x60190048C0764A26  b505
    pub unsafe fn get_vehicle_livery2_count(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x5ECB40269053C0D4u64, vehicle)
    } // 0x5ECB40269053C0D4  b505
    pub unsafe fn is_vehicle_window_intact(vehicle: Vehicle, window_index: i32) -> bool {
        call_native!(bool, 0x46E571A0E20D01F1u64, vehicle, window_index)
    } // 0x46E571A0E20D01F1 0xAC4EF23D b323
    pub unsafe fn are_all_vehicle_windows_intact(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x11D862A3E977A9EFu64, vehicle)
    } // 0x11D862A3E977A9EF 0xBB619744 b323
    pub unsafe fn are_any_vehicle_seats_free(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x2D34FC3BC4ADB780u64, vehicle)
    } // 0x2D34FC3BC4ADB780 0x648E685A b323
    pub unsafe fn reset_vehicle_wheels(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x21D2E5662C1F6FEDu64, vehicle, toggle);
    } // 0x21D2E5662C1F6FED 0xD5FFE779 b323
    pub unsafe fn is_heli_part_broken(vehicle: Vehicle, p_1: bool, p_2: bool, p_3: bool) -> bool {
        call_native!(bool, 0xBC74B4BE25EB6C8Au64, vehicle, p_1, p_2, p_3)
    } // 0xBC74B4BE25EB6C8A 0xF4E4C439 b323
    pub unsafe fn get_heli_main_rotor_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xE4CB7541F413D2C5u64, vehicle)
    } // 0xE4CB7541F413D2C5 0xF01E2AAB b323
    pub unsafe fn get_heli_tail_rotor_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xAE8CE82A4219AC8Cu64, vehicle)
    } // 0xAE8CE82A4219AC8C 0xA41BC13D b323
    pub unsafe fn get_heli_tail_boom_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xAC51915D27E4A5F7u64, vehicle)
    } // 0xAC51915D27E4A5F7 0x8A68388F b323
    pub unsafe fn set_heli_main_rotor_health(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0x4056EA1105F5ABD7u64, vehicle, health);
    } // 0x4056EA1105F5ABD7  b463
    pub unsafe fn set_heli_tail_rotor_health(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0xFE205F38AAA58E5Bu64, vehicle, health);
    } // 0xFE205F38AAA58E5B  b463
    pub unsafe fn set_heli_tail_boom_can_break_off(vehicle: Vehicle, toggle: bool) -> bool {
        call_native!(bool, 0x3EC8BF18AA453FE9u64, vehicle, toggle)
    } // 0x3EC8BF18AA453FE9 0x2916D69B b323
    pub unsafe fn set_vehicle_name_debug(vehicle: Vehicle, name: *const i8) {
        call_native!(Void, 0xBFDF984E2C22B94Fu64, vehicle, name);
    } // 0xBFDF984E2C22B94F 0xA712FF5C b323
    pub unsafe fn set_vehicle_explodes_on_high_explosion_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x71B0892EC081D60Au64, vehicle, toggle);
    } // 0x71B0892EC081D60A 0x38CC692B b323
    pub unsafe fn set_vehicle_explodes_on_explosion_damage_at_zero_body_health(
        vehicle: Vehicle,
        toggle: bool,
    ) {
        call_native!(Void, 0xD565F438137F0E10u64, vehicle, toggle);
    } // 0xD565F438137F0E10  b1103
    pub unsafe fn set_allow_vehicle_explodes_on_contact(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x3441CAD2F2231923u64, vehicle, toggle);
    } // 0x3441CAD2F2231923 0xC306A9A3 b323
    pub unsafe fn set_vehicle_disable_towing(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x2B6747FAA9DB9D6Bu64, vehicle, toggle);
    } // 0x2B6747FAA9DB9D6B 0x95A9ACCB b323
    pub unsafe fn get_vehicle_has_landing_gear(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xE43701C36CAFF1A4u64, vehicle)
    } // 0xE43701C36CAFF1A4  b1180
    pub unsafe fn control_landing_gear(vehicle: Vehicle, state: i32) {
        call_native!(Void, 0xCFC8BE9A5E1FE575u64, vehicle, state);
    } // 0xCFC8BE9A5E1FE575 0x24F873FB b323
    pub unsafe fn get_landing_gear_state(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x9B0F3DCA3DB0F4CDu64, vehicle)
    } // 0x9B0F3DCA3DB0F4CD 0xA6F02670 b323
    pub unsafe fn is_any_vehicle_near_point(x: f32, y: f32, z: f32, radius: f32) -> bool {
        call_native!(bool, 0x61E1DD6125A3EEE6u64, x, y, z, radius)
    } // 0x61E1DD6125A3EEE6 0x2867A834 b323
    pub unsafe fn request_vehicle_high_detail_model(vehicle: Vehicle) {
        call_native!(Void, 0xA6E9FDCB2C76785Eu64, vehicle);
    } // 0xA6E9FDCB2C76785E 0x9DA21956 b323
    pub unsafe fn _get_vehicle_model_num_drive_gears(vehicle_model: Hash) -> i32 {
        call_native!(i32, 0x61F02E4E9A7A61EAu64, vehicle_model)
    } // 0x61F02E4E9A7A61EA  b3095
    pub unsafe fn _get_vehicle_max_drive_gear_count(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x24910C3D66BA770Du64, vehicle)
    } // 0x24910C3D66BA770D  b3095
    pub unsafe fn _get_vehicle_current_drive_gear(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x56185A25D45A0DCDu64, vehicle)
    } // 0x56185A25D45A0DCD  b3095
    pub unsafe fn _get_vehicle_current_rev_ratio(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xF9DDA40BC293A61Eu64, vehicle)
    } // 0xF9DDA40BC293A61E  b3095
    pub unsafe fn remove_vehicle_high_detail_model(vehicle: Vehicle) {
        call_native!(Void, 0x00689CDE5F7C6787u64, vehicle);
    } // 0x00689CDE5F7C6787 0x382BE070 b323
    pub unsafe fn is_vehicle_high_detail(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x1F25887F3C104278u64, vehicle)
    } // 0x1F25887F3C104278 0x55D41928 b323
    pub unsafe fn request_vehicle_asset(vehicle_hash: Hash, vehicle_asset: i32) {
        call_native!(Void, 0x81A15811460FAB3Au64, vehicle_hash, vehicle_asset);
    } // 0x81A15811460FAB3A 0x902B4F06 b323
    pub unsafe fn has_vehicle_asset_loaded(vehicle_asset: i32) -> bool {
        call_native!(bool, 0x1BBE0523B8DB9A21u64, vehicle_asset)
    } // 0x1BBE0523B8DB9A21 0x8DAAC3CB b323
    pub unsafe fn remove_vehicle_asset(vehicle_asset: i32) {
        call_native!(Void, 0xACE699C71AB9DEB5u64, vehicle_asset);
    } // 0xACE699C71AB9DEB5 0x9620E9C6 b323
    pub unsafe fn set_vehicle_tow_truck_arm_position(vehicle: Vehicle, position: f32) {
        call_native!(Void, 0xFE54B92A344583CAu64, vehicle, position);
    } // 0xFE54B92A344583CA 0x88236E22 b323
    pub unsafe fn _set_attached_vehicle_to_tow_truck_arm(tow_truck: Vehicle, vehicle: Vehicle) {
        call_native!(Void, 0x48BD57D0DD17786Au64, tow_truck, vehicle);
    } // 0x48BD57D0DD17786A  b3095
    pub unsafe fn attach_vehicle_to_tow_truck(
        tow_truck: Vehicle,
        vehicle: Vehicle,
        rear: bool,
        hook_offset_x: f32,
        hook_offset_y: f32,
        hook_offset_z: f32,
    ) {
        call_native!(
            Void,
            0x29A16F8D621C4508u64,
            tow_truck,
            vehicle,
            rear,
            hook_offset_x,
            hook_offset_y,
            hook_offset_z
        );
    } // 0x29A16F8D621C4508 0x8151571A b323
    pub unsafe fn detach_vehicle_from_tow_truck(tow_truck: Vehicle, vehicle: Vehicle) {
        call_native!(Void, 0xC2DB6B6708350ED8u64, tow_truck, vehicle);
    } // 0xC2DB6B6708350ED8 0xC666CF33 b323
    pub unsafe fn detach_vehicle_from_any_tow_truck(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xD0E9CE05A1E68CD8u64, vehicle)
    } // 0xD0E9CE05A1E68CD8 0x3BF93651 b323
    pub unsafe fn is_vehicle_attached_to_tow_truck(tow_truck: Vehicle, vehicle: Vehicle) -> bool {
        call_native!(bool, 0x146DF9EC4C4B9FD4u64, tow_truck, vehicle)
    } // 0x146DF9EC4C4B9FD4 0x9699CFDC b323
    pub unsafe fn get_entity_attached_to_tow_truck(tow_truck: Vehicle) -> Entity {
        call_native!(Entity, 0xEFEA18DCF10F8F75u64, tow_truck)
    } // 0xEFEA18DCF10F8F75 0x11EC7844 b323
    pub unsafe fn set_vehicle_automatically_attaches(
        vehicle: Vehicle,
        p_1: bool,
        p_2: Any,
    ) -> Entity {
        call_native!(Entity, 0x8BA6F76BC53A1493u64, vehicle, p_1, p_2)
    } // 0x8BA6F76BC53A1493 0x4273A8D3 b323
    pub unsafe fn set_vehicle_bulldozer_arm_position(vehicle: Vehicle, position: f32, p_2: bool) {
        call_native!(Void, 0xF8EBCCC96ADB9FB7u64, vehicle, position, p_2);
    } // 0xF8EBCCC96ADB9FB7 0xED23C8A3 b323
    pub unsafe fn set_vehicle_tank_turret_position(vehicle: Vehicle, position: f32, p_2: bool) {
        call_native!(Void, 0x56B94C6D7127DFBAu64, vehicle, position, p_2);
    } // 0x56B94C6D7127DFBA 0xB1A52EF7 b323
    pub unsafe fn set_vehicle_turret_target(
        vehicle: Vehicle,
        p_1: bool,
        x: f32,
        y: f32,
        z: f32,
        p_5: bool,
    ) {
        call_native!(Void, 0x0581730AB9380412u64, vehicle, p_1, x, y, z, p_5);
    } // 0x0581730AB9380412  b1103
    pub unsafe fn set_vehicle_tank_stationary(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x737E398138550FFFu64, vehicle, p_1);
    } // 0x737E398138550FFF  b944
    pub unsafe fn set_vehicle_turret_speed_this_frame(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0x1093408B4B9D1146u64, vehicle, speed);
    } // 0x1093408B4B9D1146 0xF30C566F b323
    pub unsafe fn disable_vehicle_turret_movement_this_frame(vehicle: Vehicle) {
        call_native!(Void, 0x32CAEDF24A583345u64, vehicle);
    } // 0x32CAEDF24A583345  b463
    pub unsafe fn set_vehicle_flight_nozzle_position(vehicle: Vehicle, angle_ratio: f32) {
        call_native!(Void, 0x30D779DE7C4F6DD3u64, vehicle, angle_ratio);
    } // 0x30D779DE7C4F6DD3 0xA7DF64D7 b323
    pub unsafe fn set_vehicle_flight_nozzle_position_immediate(vehicle: Vehicle, angle: f32) {
        call_native!(Void, 0x9AA47FFF660CB932u64, vehicle, angle);
    } // 0x9AA47FFF660CB932 0xDD7936F5 b323
    pub unsafe fn get_vehicle_flight_nozzle_position(plane: Vehicle) -> f32 {
        call_native!(f32, 0xDA62027C8BDB326Eu64, plane)
    } // 0xDA62027C8BDB326E 0xAD40AD55 b1180
    pub unsafe fn set_disable_vertical_flight_mode_transition(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xCE2B43770B655F8Fu64, vehicle, toggle);
    } // 0xCE2B43770B655F8F  b1290
    pub unsafe fn generate_vehicle_creation_pos_from_paths(
        out_vec: *mut Vector3,
        p_1: Any,
        out_vec_1: *mut Vector3,
        p_3: Any,
        p_4: Any,
        p_5: Any,
        p_6: Any,
        p_7: Any,
        p_8: Any,
    ) -> bool {
        call_native!(
            bool,
            0xA4822F1CF23F4810u64,
            out_vec,
            p_1,
            out_vec_1,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8
        )
    } // 0xA4822F1CF23F4810 0x34E02FCD b323
    pub unsafe fn set_vehicle_burnout(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xFB8794444A7D60FBu64, vehicle, toggle);
    } // 0xFB8794444A7D60FB 0x9B6EF0EA b323
    pub unsafe fn is_vehicle_in_burnout(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x1297A88E081430EBu64, vehicle)
    } // 0x1297A88E081430EB 0x6632BC12 b323
    pub unsafe fn set_vehicle_reduce_grip(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x222FF6A823D122E2u64, vehicle, toggle);
    } // 0x222FF6A823D122E2 0x90D3A0D9 b323
    pub unsafe fn set_vehicle_reduce_grip_level(vehicle: Vehicle, val: i32) {
        call_native!(Void, 0x6DEE944E1EE90CFBu64, vehicle, val);
    } // 0x6DEE944E1EE90CFB  b1604
    pub unsafe fn set_vehicle_indicator_lights(vehicle: Vehicle, turn_signal: i32, toggle: bool) {
        call_native!(Void, 0xB5D45264751B7DF0u64, vehicle, turn_signal, toggle);
    } // 0xB5D45264751B7DF0 0xA6073B5D b323
    pub unsafe fn set_vehicle_brake_lights(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x92B35082E0B42F66u64, vehicle, toggle);
    } // 0x92B35082E0B42F66 0x6D9BA11E b323
    pub unsafe fn set_vehicle_tail_lights(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x5815BD2763178DF4u64, vehicle, toggle);
    } // 0x5815BD2763178DF4  b2802
    pub unsafe fn set_vehicle_handbrake(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x684785568EF26A22u64, vehicle, toggle);
    } // 0x684785568EF26A22 0xBA729A25 b323
    pub unsafe fn set_vehicle_brake(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xE4E2FD323574965Cu64, vehicle, toggle);
    } // 0xE4E2FD323574965C 0x5A36BC37 b757
    pub unsafe fn instantly_fill_vehicle_population() {
        call_native!(Void, 0x48ADC8A773564670u64);
    } // 0x48ADC8A773564670 0x37BC6ACB b323
    pub unsafe fn has_instant_fill_vehicle_population_finished() -> bool {
        call_native!(bool, 0x91D6DD290888CBABu64)
    } // 0x91D6DD290888CBAB 0x71D898EF b323
    pub unsafe fn network_enable_empty_crowding_vehicles_removal(toggle: bool) {
        call_native!(Void, 0x51DB102F4A3BA5E0u64, toggle);
    } // 0x51DB102F4A3BA5E0 0x0B0523B0 b323
    pub unsafe fn network_cap_empty_crowding_vehicles_removal(p_0: i32) {
        call_native!(Void, 0xA4A9A4C40E615885u64, p_0);
    } // 0xA4A9A4C40E615885  b1604
    pub unsafe fn get_vehicle_trailer_vehicle(vehicle: Vehicle, trailer: *mut Vehicle) -> bool {
        call_native!(bool, 0x1CDD6BADC297830Du64, vehicle, trailer)
    } // 0x1CDD6BADC297830D 0xAE84D758 b323
    pub unsafe fn _get_vehicle_trailer_parent_vehicle(trailer: Vehicle) -> Vehicle {
        call_native!(Vehicle, 0x80D9D32636369C92u64, trailer)
    } // 0x80D9D32636369C92  b2802
    pub unsafe fn set_vehicle_uses_large_rear_ramp(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xCAC66558B944DA67u64, vehicle, toggle);
    } // 0xCAC66558B944DA67 0x0B200CE2 b323
    pub unsafe fn set_vehicle_rudder_broken(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x09606148B6C71DEFu64, vehicle, toggle);
    } // 0x09606148B6C71DEF 0x3FAC3CD4 b323
    pub unsafe fn set_convertible_roof_latch_state(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x1A78AD3D8240536Fu64, vehicle, state);
    } // 0x1A78AD3D8240536F 0x0858678C b323
    pub unsafe fn get_vehicle_estimated_max_speed(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x53AF99BAA671CA47u64, vehicle)
    } // 0x53AF99BAA671CA47 0x7D1A0616 b323
    pub unsafe fn get_vehicle_max_braking(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xAD7E85FC227197C4u64, vehicle)
    } // 0xAD7E85FC227197C4 0x03B926F6 b323
    pub unsafe fn get_vehicle_max_traction(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xA132FB5370554DB0u64, vehicle)
    } // 0xA132FB5370554DB0 0x7E5A1587 b323
    pub unsafe fn get_vehicle_acceleration(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x5DD35C8D074E57AEu64, vehicle)
    } // 0x5DD35C8D074E57AE 0x00478321 b323
    pub unsafe fn get_vehicle_model_estimated_max_speed(model_hash: Hash) -> f32 {
        call_native!(f32, 0xF417C2502FFFED43u64, model_hash)
    } // 0xF417C2502FFFED43 0x8F291C4A b323
    pub unsafe fn get_vehicle_model_max_braking(model_hash: Hash) -> f32 {
        call_native!(f32, 0xDC53FD41B4ED944Cu64, model_hash)
    } // 0xDC53FD41B4ED944C 0x7EF02883 b323
    pub unsafe fn get_vehicle_model_max_braking_max_mods(model_hash: Hash) -> f32 {
        call_native!(f32, 0xBFBA3BA79CFF7EBFu64, model_hash)
    } // 0xBFBA3BA79CFF7EBF 0xF3A7293F b323
    pub unsafe fn get_vehicle_model_max_traction(model_hash: Hash) -> f32 {
        call_native!(f32, 0x539DE94D44FDFD0Du64, model_hash)
    } // 0x539DE94D44FDFD0D 0x7F985597 b323
    pub unsafe fn get_vehicle_model_acceleration(model_hash: Hash) -> f32 {
        call_native!(f32, 0x8C044C5C84505B6Au64, model_hash)
    } // 0x8C044C5C84505B6A 0x29CB3537 b323
    pub unsafe fn get_vehicle_model_acceleration_max_mods(model_hash: Hash) -> f32 {
        call_native!(f32, 0x53409B5163D5B846u64, model_hash)
    } // 0x53409B5163D5B846 0x37FBA7BC b323
    pub unsafe fn get_flying_vehicle_model_agility(model_hash: Hash) -> f32 {
        call_native!(f32, 0xC6AD107DDC9054CCu64, model_hash)
    } // 0xC6AD107DDC9054CC 0x95BB67EB b323
    pub unsafe fn get_boat_vehicle_model_agility(model_hash: Hash) -> f32 {
        call_native!(f32, 0x5AA3F878A178C4FCu64, model_hash)
    } // 0x5AA3F878A178C4FC 0x87C5D271 b323
    pub unsafe fn get_vehicle_class_estimated_max_speed(vehicle_class: i32) -> f32 {
        call_native!(f32, 0x00C09F246ABEDD82u64, vehicle_class)
    } // 0x00C09F246ABEDD82 0xCE67162C b323
    pub unsafe fn get_vehicle_class_max_traction(vehicle_class: i32) -> f32 {
        call_native!(f32, 0xDBC86D85C5059461u64, vehicle_class)
    } // 0xDBC86D85C5059461 0x5B4FDC16 b323
    pub unsafe fn get_vehicle_class_max_agility(vehicle_class: i32) -> f32 {
        call_native!(f32, 0x4F930AD022D6DE3Bu64, vehicle_class)
    } // 0x4F930AD022D6DE3B 0x45F2BD83 b323
    pub unsafe fn get_vehicle_class_max_acceleration(vehicle_class: i32) -> f32 {
        call_native!(f32, 0x2F83E7E45D9EA7AEu64, vehicle_class)
    } // 0x2F83E7E45D9EA7AE 0x3E220A9B b323
    pub unsafe fn get_vehicle_class_max_braking(vehicle_class: i32) -> f32 {
        call_native!(f32, 0x4BF54C16EC8FEC03u64, vehicle_class)
    } // 0x4BF54C16EC8FEC03 0xD08CC1A5 b323
    pub unsafe fn add_road_node_speed_zone(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        speed: f32,
        p_5: bool,
    ) -> i32 {
        call_native!(i32, 0x2CE544C68FB812A0u64, x, y, z, radius, speed, p_5)
    } // 0x2CE544C68FB812A0 0xD6685803 b323
    pub unsafe fn remove_road_node_speed_zone(speedzone: i32) -> bool {
        call_native!(bool, 0x1033371FC8E842A7u64, speedzone)
    } // 0x1033371FC8E842A7 0x0C0332A6 b323
    pub unsafe fn open_bomb_bay_doors(vehicle: Vehicle) {
        call_native!(Void, 0x87E7F24270732CB1u64, vehicle);
    } // 0x87E7F24270732CB1 0x6574041D b323
    pub unsafe fn close_bomb_bay_doors(vehicle: Vehicle) {
        call_native!(Void, 0x3556041742A0DC74u64, vehicle);
    } // 0x3556041742A0DC74 0xF8EC5751 b323
    pub unsafe fn get_are_bomb_bay_doors_open(aircraft: Vehicle) -> bool {
        call_native!(bool, 0xD0917A423314BBA8u64, aircraft)
    } // 0xD0917A423314BBA8  b1180
    pub unsafe fn is_vehicle_searchlight_on(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xC0F97FCE55094987u64, vehicle)
    } // 0xC0F97FCE55094987 0xADAF3513 b323
    pub unsafe fn set_vehicle_searchlight(heli: Vehicle, toggle: bool, can_be_used_by_a_i: bool) {
        call_native!(
            Void,
            0x14E85C5EE7A4D542u64,
            heli,
            toggle,
            can_be_used_by_a_i
        );
    } // 0x14E85C5EE7A4D542 0xE2C0DD8A b323
    pub unsafe fn does_vehicle_have_searchlight(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x99015ED7DBEA5113u64, vehicle)
    } // 0x99015ED7DBEA5113  b2189
    pub unsafe fn is_entry_point_for_seat_clear(
        ped: Ped,
        vehicle: Vehicle,
        seat_index: i32,
        side: bool,
        on_enter: bool,
    ) -> bool {
        call_native!(
            bool,
            0x639431E895B9AA57u64,
            ped,
            vehicle,
            seat_index,
            side,
            on_enter
        )
    } // 0x639431E895B9AA57 0xAB0E79EB b323
    pub unsafe fn get_entry_point_position(vehicle: Vehicle, door_id: i32) -> Vector3 {
        call_native!(Vector3, 0xC0572928C0ABFDA3u64, vehicle, door_id)
    } // 0xC0572928C0ABFDA3  b944
    pub unsafe fn can_shuffle_seat(vehicle: Vehicle, seat_index: i32) -> bool {
        call_native!(bool, 0x30785D90C956BF35u64, vehicle, seat_index)
    } // 0x30785D90C956BF35 0xB3EB01ED b323
    pub unsafe fn get_num_mod_kits(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x33F2E3FE70EAAE1Du64, vehicle)
    } // 0x33F2E3FE70EAAE1D 0xE4903AA0 b323
    pub unsafe fn set_vehicle_mod_kit(vehicle: Vehicle, mod_kit: i32) {
        call_native!(Void, 0x1F2AA07F00B3217Au64, vehicle, mod_kit);
    } // 0x1F2AA07F00B3217A 0xB8132158 b323
    pub unsafe fn get_vehicle_mod_kit(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x6325D1A044AE510Du64, vehicle)
    } // 0x6325D1A044AE510D 0x9FE60927 b323
    pub unsafe fn get_vehicle_mod_kit_type(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xFC058F5121E54C32u64, vehicle)
    } // 0xFC058F5121E54C32 0xE5F76765 b323
    pub unsafe fn get_vehicle_wheel_type(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xB3ED1BFB4BE636DCu64, vehicle)
    } // 0xB3ED1BFB4BE636DC 0xDA58D7AE b323
    pub unsafe fn set_vehicle_wheel_type(vehicle: Vehicle, _wheel_type: i32) {
        call_native!(Void, 0x487EB21CC7295BA1u64, vehicle, _wheel_type);
    } // 0x487EB21CC7295BA1 0x64BDAAAD b323
    pub unsafe fn get_num_mod_colors(paint_type: i32, p_1: bool) -> i32 {
        call_native!(i32, 0xA551BE18C11A476Du64, paint_type, p_1)
    } // 0xA551BE18C11A476D 0x73722CD9 b323
    pub unsafe fn set_vehicle_mod_color_1(
        vehicle: Vehicle,
        paint_type: i32,
        color: i32,
        pearlescent_color: i32,
    ) {
        call_native!(
            Void,
            0x43FEB945EE7F85B8u64,
            vehicle,
            paint_type,
            color,
            pearlescent_color
        );
    } // 0x43FEB945EE7F85B8 0xCBE9A54D b323
    pub unsafe fn set_vehicle_mod_color_2(vehicle: Vehicle, paint_type: i32, color: i32) {
        call_native!(Void, 0x816562BADFDEC83Eu64, vehicle, paint_type, color);
    } // 0x816562BADFDEC83E 0xC32613C2 b323
    pub unsafe fn get_vehicle_mod_color_1(
        vehicle: Vehicle,
        paint_type: *mut i32,
        color: *mut i32,
        pearlescent_color: *mut i32,
    ) {
        call_native!(
            Void,
            0xE8D65CA700C9A693u64,
            vehicle,
            paint_type,
            color,
            pearlescent_color
        );
    } // 0xE8D65CA700C9A693 0xE625510A b323
    pub unsafe fn get_vehicle_mod_color_2(vehicle: Vehicle, paint_type: *mut i32, color: *mut i32) {
        call_native!(Void, 0x81592BE4E3878728u64, vehicle, paint_type, color);
    } // 0x81592BE4E3878728 0x9B76BB8E b323
    pub unsafe fn get_vehicle_mod_color_1_name(vehicle: Vehicle, p_1: bool) -> *const i8 {
        call_native!(*const i8, 0xB45085B721EFD38Cu64, vehicle, p_1)
    } // 0xB45085B721EFD38C 0x9A0840FD b323
    pub unsafe fn get_vehicle_mod_color_2_name(vehicle: Vehicle) -> *const i8 {
        call_native!(*const i8, 0x4967A516ED23A5A1u64, vehicle)
    } // 0x4967A516ED23A5A1 0x9BDC0B49 b323
    pub unsafe fn have_vehicle_mods_streamed_in(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x9A83F5F9963775EFu64, vehicle)
    } // 0x9A83F5F9963775EF 0x112D637A b323
    pub unsafe fn is_vehicle_mod_gen9_exclusive(
        vehicle: Vehicle,
        mod_type: i32,
        mod_index: i32,
    ) -> bool {
        call_native!(bool, 0x00834EAC4A96E010u64, vehicle, mod_type, mod_index)
    } // 0x00834EAC4A96E010  b2699
    pub unsafe fn set_vehicle_mod(
        vehicle: Vehicle,
        mod_type: i32,
        mod_index: i32,
        custom_tires: bool,
    ) {
        call_native!(
            Void,
            0x6AF0636DDEDCB6DDu64,
            vehicle,
            mod_type,
            mod_index,
            custom_tires
        );
    } // 0x6AF0636DDEDCB6DD 0xB52E5ED5 b323
    pub unsafe fn get_vehicle_mod(vehicle: Vehicle, mod_type: i32) -> i32 {
        call_native!(i32, 0x772960298DA26FDBu64, vehicle, mod_type)
    } // 0x772960298DA26FDB 0xDC520069 b323
    pub unsafe fn get_vehicle_mod_variation(vehicle: Vehicle, mod_type: i32) -> i32 {
        call_native!(i32, 0xB3924ECD70E095DCu64, vehicle, mod_type)
    } // 0xB3924ECD70E095DC 0xC1B92003 b323
    pub unsafe fn get_num_vehicle_mods(vehicle: Vehicle, mod_type: i32) -> i32 {
        call_native!(i32, 0xE38E9162A2500646u64, vehicle, mod_type)
    } // 0xE38E9162A2500646 0x8A814FF9 b323
    pub unsafe fn remove_vehicle_mod(vehicle: Vehicle, mod_type: i32) {
        call_native!(Void, 0x92D619E420858204u64, vehicle, mod_type);
    } // 0x92D619E420858204 0x9CC80A43 b323
    pub unsafe fn toggle_vehicle_mod(vehicle: Vehicle, mod_type: i32, toggle: bool) {
        call_native!(Void, 0x2A1F4F37F95BAD08u64, vehicle, mod_type, toggle);
    } // 0x2A1F4F37F95BAD08 0xD095F811 b323
    pub unsafe fn is_toggle_mod_on(vehicle: Vehicle, mod_type: i32) -> bool {
        call_native!(bool, 0x84B233A8C8FC8AE7u64, vehicle, mod_type)
    } // 0x84B233A8C8FC8AE7 0xF0E1689F b323
    pub unsafe fn get_mod_text_label(vehicle: Vehicle, mod_type: i32, mod_value: i32) -> *const i8 {
        call_native!(
            *const i8,
            0x8935624F8C5592CCu64,
            vehicle,
            mod_type,
            mod_value
        )
    } // 0x8935624F8C5592CC 0x0BA39CA7 b323
    pub unsafe fn get_mod_slot_name(vehicle: Vehicle, mod_type: i32) -> *const i8 {
        call_native!(*const i8, 0x51F0FEB9F6AE98C0u64, vehicle, mod_type)
    } // 0x51F0FEB9F6AE98C0 0x5E113483 b323
    pub unsafe fn get_livery_name(vehicle: Vehicle, livery_index: i32) -> *const i8 {
        call_native!(*const i8, 0xB4C7A93837C91A1Fu64, vehicle, livery_index)
    } // 0xB4C7A93837C91A1F 0xED80B5BE b323
    pub unsafe fn get_vehicle_mod_modifier_value(
        vehicle: Vehicle,
        mod_type: i32,
        mod_index: i32,
    ) -> i32 {
        call_native!(i32, 0x90A38E9838E0A8C1u64, vehicle, mod_type, mod_index)
    } // 0x90A38E9838E0A8C1 0x73AE5505 b323
    pub unsafe fn get_vehicle_mod_identifier_hash(
        vehicle: Vehicle,
        mod_type: i32,
        mod_index: i32,
    ) -> Hash {
        call_native!(Hash, 0x4593CF82AA179706u64, vehicle, mod_type, mod_index)
    } // 0x4593CF82AA179706 0x94850968 b323
    pub unsafe fn preload_vehicle_mod(vehicle: Vehicle, mod_type: i32, mod_index: i32) {
        call_native!(Void, 0x758F49C24925568Au64, vehicle, mod_type, mod_index);
    } // 0x758F49C24925568A 0x6EA5F4A8 b323
    pub unsafe fn has_preload_mods_finished(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x06F43E5175EB6D96u64, vehicle)
    } // 0x06F43E5175EB6D96 0xA8A0D246 b323
    pub unsafe fn release_preload_mods(vehicle: Vehicle) {
        call_native!(Void, 0x445D79F995508307u64, vehicle);
    } // 0x445D79F995508307 0xD442521F b323
    pub unsafe fn set_vehicle_tyre_smoke_color(vehicle: Vehicle, r: i32, g: i32, b: i32) {
        call_native!(Void, 0xB5BA80F839791C0Fu64, vehicle, r, g, b);
    } // 0xB5BA80F839791C0F 0x3EDEC0DB b323
    pub unsafe fn get_vehicle_tyre_smoke_color(
        vehicle: Vehicle,
        r: *mut i32,
        g: *mut i32,
        b: *mut i32,
    ) {
        call_native!(Void, 0xB635392A4938B3C3u64, vehicle, r, g, b);
    } // 0xB635392A4938B3C3 0x75280015 b323
    pub unsafe fn set_vehicle_window_tint(vehicle: Vehicle, tint: i32) {
        call_native!(Void, 0x57C51E6BAD752696u64, vehicle, tint);
    } // 0x57C51E6BAD752696 0x497C8787 b323
    pub unsafe fn get_vehicle_window_tint(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x0EE21293DAD47C95u64, vehicle)
    } // 0x0EE21293DAD47C95 0x13D53892 b323
    pub unsafe fn get_num_vehicle_window_tints() -> i32 {
        call_native!(i32, 0x9D1224004B3A6707u64)
    } // 0x9D1224004B3A6707 0x625C7B66 b323
    pub unsafe fn get_vehicle_color(vehicle: Vehicle, r: *mut i32, g: *mut i32, b: *mut i32) {
        call_native!(Void, 0xF3CC740D36221548u64, vehicle, r, g, b);
    } // 0xF3CC740D36221548 0x03BC8F1B b323
    pub unsafe fn get_vehicle_colours_which_can_be_set(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xEEBFC7A7EFDC35B4u64, vehicle)
    } // 0xEEBFC7A7EFDC35B4 0x749DEEA2 b323
    pub unsafe fn get_vehicle_cause_of_destruction(vehicle: Vehicle) -> Hash {
        call_native!(Hash, 0xE495D1EF4C91FD20u64, vehicle)
    } // 0xE495D1EF4C91FD20 0x7F8C20DD b323
    pub unsafe fn override_plane_damage_threhsold(vehicle: Vehicle, health: f32) {
        call_native!(Void, 0x5EE5632F47AE9695u64, vehicle, health);
    } // 0x5EE5632F47AE9695  b463
    pub unsafe fn _set_transmission_reduced_gear_ratio(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x337EF33DA3DDB990u64, vehicle, toggle);
    } // 0x337EF33DA3DDB990  b3095
    pub unsafe fn _get_vehicle_desired_drive_gear(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xFD8CE53356B5D745u64, vehicle)
    } // 0xFD8CE53356B5D745  b3095
    pub unsafe fn get_is_left_vehicle_headlight_damaged(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x5EF77C9ADD3B11A3u64, vehicle)
    } // 0x5EF77C9ADD3B11A3 0xA0777943 b323
    pub unsafe fn get_is_right_vehicle_headlight_damaged(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xA7ECB73355EB2F20u64, vehicle)
    } // 0xA7ECB73355EB2F20 0xF178390B b323
    pub unsafe fn get_both_vehicle_headlights_damaged(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xEC69ADF931AAE0C3u64, vehicle)
    } // 0xEC69ADF931AAE0C3  b505
    pub unsafe fn modify_vehicle_top_speed(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0x93A3996368C94158u64, vehicle, value);
    } // 0x93A3996368C94158 0xE943B09C b323
    pub unsafe fn set_vehicle_max_speed(vehicle: Vehicle, speed: f32) {
        call_native!(Void, 0xBAA045B4E42F3C06u64, vehicle, speed);
    } // 0xBAA045B4E42F3C06  b1103
    pub unsafe fn set_vehicle_stays_frozen_when_cleaned_up(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1CF38D529D7441D9u64, vehicle, toggle);
    } // 0x1CF38D529D7441D9 0xDF594D8D b323
    pub unsafe fn set_vehicle_act_as_if_high_speed_for_frag_smashing(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x1F9FB66F3A3842D2u64, vehicle, p_1);
    } // 0x1F9FB66F3A3842D2 0x4D840FC4 b323
    pub unsafe fn set_peds_can_fall_off_this_vehicle_from_large_fall_damage(
        vehicle: Vehicle,
        toggle: bool,
        p_2: f32,
    ) {
        call_native!(Void, 0x59C3757B3B7408E8u64, vehicle, toggle, p_2);
    } // 0x59C3757B3B7408E8  b1493
    pub unsafe fn add_vehicle_combat_angled_avoidance_area(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
    ) -> i32 {
        call_native!(
            i32,
            0x54B0F614960F4A5Fu64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6
        )
    } // 0x54B0F614960F4A5F 0x5AB26C2B b323
    pub unsafe fn remove_vehicle_combat_avoidance_area(p_0: i32) {
        call_native!(Void, 0xE30524E1871F481Du64, p_0);
    } // 0xE30524E1871F481D 0xEF05F807 b323
    pub unsafe fn is_any_ped_rappelling_from_heli(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x291E373D483E7EE7u64, vehicle)
    } // 0x291E373D483E7EE7 0xD656E7E5 b323
    pub unsafe fn set_vehicle_cheat_power_increase(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0xB59E4BD37AE292DBu64, vehicle, value);
    } // 0xB59E4BD37AE292DB 0x642DA5AA b323
    pub unsafe fn set_vehicle_influences_wanted_level(p_0: Any, p_1: bool) {
        call_native!(Void, 0x0AD9E8F87FF7C16Fu64, p_0, p_1);
    } // 0x0AD9E8F87FF7C16F 0x04F5546C b323
    pub unsafe fn set_vehicle_is_wanted(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0xF7EC25A3EBEEC726u64, vehicle, state);
    } // 0xF7EC25A3EBEEC726 0xDAA388E8 b323
    pub unsafe fn swing_boat_boom_to_ratio(vehicle: Vehicle, ratio: f32) {
        call_native!(Void, 0xF488C566413B4232u64, vehicle, ratio);
    } // 0xF488C566413B4232 0xA25CCB8C b323
    pub unsafe fn swing_boat_boom_freely(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xC1F981A6F74F0C23u64, vehicle, toggle);
    } // 0xC1F981A6F74F0C23 0x00966934 b323
    pub unsafe fn allow_boat_boom_to_animate(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x0F3B4D4E43177236u64, vehicle, toggle);
    } // 0x0F3B4D4E43177236 0x113DF5FD b323
    pub unsafe fn get_boat_boom_position_ratio(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x6636C535F6CC2725u64, vehicle)
    } // 0x6636C535F6CC2725 0x7C8D6464 b323
    pub unsafe fn disable_plane_aileron(vehicle: Vehicle, p_1: bool, p_2: bool) {
        call_native!(Void, 0x23428FC53C60919Cu64, vehicle, p_1, p_2);
    } // 0x23428FC53C60919C 0x7E84C45C b323
    pub unsafe fn get_is_vehicle_engine_running(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xAE31E7DF9B5B132Eu64, vehicle)
    } // 0xAE31E7DF9B5B132E 0x7DC6D022 b323
    pub unsafe fn set_vehicle_use_alternate_handling(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1D97D1E3A70A649Fu64, vehicle, toggle);
    } // 0x1D97D1E3A70A649F 0xA03E42DF b323
    pub unsafe fn set_bike_on_stand(vehicle: Vehicle, x: f32, y: f32) {
        call_native!(Void, 0x9CFA4896C3A53CBBu64, vehicle, x, y);
    } // 0x9CFA4896C3A53CBB 0x15D40761 b323
    pub unsafe fn set_vehicle_not_stealable_ambiently(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xAB04325045427AAEu64, vehicle, p_1);
    } // 0xAB04325045427AAE 0x1984F88D b323
    pub unsafe fn lock_doors_when_no_longer_needed(vehicle: Vehicle) {
        call_native!(Void, 0xCFD778E7904C255Eu64, vehicle);
    } // 0xCFD778E7904C255E 0x3FBE904F b323
    pub unsafe fn set_last_driven_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0xACFB2463CC22BED2u64, vehicle);
    } // 0xACFB2463CC22BED2 0xD1B71A25 b323
    pub unsafe fn get_last_driven_vehicle() -> Vehicle {
        call_native!(Vehicle, 0xB2D06FAEDE65B577u64)
    } // 0xB2D06FAEDE65B577 0xFEB0C0C8 b323
    pub unsafe fn clear_last_driven_vehicle() {
        call_native!(Void, 0xE01903C47C7AC89Eu64);
    } // 0xE01903C47C7AC89E 0x07186AD9 b323
    pub unsafe fn set_vehicle_has_been_driven_flag(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x02398B627547189Cu64, vehicle, toggle);
    } // 0x02398B627547189C 0x08CD58F9 b323
    pub unsafe fn set_task_vehicle_goto_plane_min_height_above_terrain(
        plane: Vehicle,
        height: i32,
    ) {
        call_native!(Void, 0xB893215D8D4C015Bu64, plane, height);
    } // 0xB893215D8D4C015B 0x8C4B63E2 b323
    pub unsafe fn set_vehicle_lod_multiplier(vehicle: Vehicle, multiplier: f32) {
        call_native!(Void, 0x93AE6A61BE015BF1u64, vehicle, multiplier);
    } // 0x93AE6A61BE015BF1 0x569E5AE3 b323
    pub unsafe fn set_vehicle_can_save_in_garage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x428BACCDF5E26EADu64, vehicle, toggle);
    } // 0x428BACCDF5E26EAD 0x1604C2F5 b323
    pub unsafe fn get_vehicle_num_of_broken_off_parts(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x42A4BEB35D372407u64, vehicle)
    } // 0x42A4BEB35D372407 0x8CDB0C09 b323
    pub unsafe fn get_vehicle_num_of_broken_loosen_parts(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x2C8CBFE1EA5FC631u64, vehicle)
    } // 0x2C8CBFE1EA5FC631 0xABC99E21 b323
    pub unsafe fn set_force_vehicle_engine_damage_by_bullet(p_0: Any, p_1: bool) {
        call_native!(Void, 0x4D9D109F63FEE1D4u64, p_0, p_1);
    } // 0x4D9D109F63FEE1D4 0x900C878C b323
    pub unsafe fn set_vehicle_generates_engine_shocking_events(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x279D50DE5652D935u64, vehicle, toggle);
    } // 0x279D50DE5652D935 0xB3200F72 b323
    pub unsafe fn copy_vehicle_damages(source_vehicle: Vehicle, target_vehicle: Vehicle) {
        call_native!(Void, 0xE44A982368A4AF23u64, source_vehicle, target_vehicle);
    } // 0xE44A982368A4AF23 0xBAE491C7 b323
    pub unsafe fn disable_vehicle_explosion_break_off_parts() {
        call_native!(Void, 0xF25E02CB9C5818F8u64);
    } // 0xF25E02CB9C5818F8 0xF0E59BC1 b323
    pub unsafe fn set_lights_cutoff_distance_tweak(distance: f32) {
        call_native!(Void, 0xBC3CCA5844452B06u64, distance);
    } // 0xBC3CCA5844452B06 0x929801C6 b323
    pub unsafe fn set_vehicle_shoot_at_target(
        driver: Ped,
        entity: Entity,
        x_target: f32,
        y_target: f32,
        z_target: f32,
    ) {
        call_native!(
            Void,
            0x74CD9A9327A282EAu64,
            driver,
            entity,
            x_target,
            y_target,
            z_target
        );
    } // 0x74CD9A9327A282EA 0x2343FFDF b323
    pub unsafe fn get_vehicle_lock_on_target(vehicle: Vehicle, entity: *mut Entity) -> bool {
        call_native!(bool, 0x8F5EBAB1F260CFCEu64, vehicle, entity)
    } // 0x8F5EBAB1F260CFCE 0x4A557117 b323
    pub unsafe fn set_force_hd_vehicle(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x97CE68CB032583F0u64, vehicle, toggle);
    } // 0x97CE68CB032583F0 0xE0FC6A32 b323
    pub unsafe fn set_vehicle_custom_path_node_streaming_radius(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0x182F266C2D9E2BEBu64, vehicle, p_1);
    } // 0x182F266C2D9E2BEB 0x7D0DE7EA b323
    pub unsafe fn get_vehicle_plate_type(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x9CCC9525BF2408E0u64, vehicle)
    } // 0x9CCC9525BF2408E0 0x65CA9286 b323
    pub unsafe fn track_vehicle_visibility(vehicle: Vehicle) {
        call_native!(Void, 0x64473AEFDCF47DCAu64, vehicle);
    } // 0x64473AEFDCF47DCA 0x78122DC1 b323
    pub unsafe fn is_vehicle_visible(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xAA0A52D24FB98293u64, vehicle)
    } // 0xAA0A52D24FB98293 0x7E0D6056 b323
    pub unsafe fn set_vehicle_gravity(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x89F149B6131E57DAu64, vehicle, toggle);
    } // 0x89F149B6131E57DA 0x07B2A6DC b323
    pub unsafe fn set_enable_vehicle_slipstreaming(toggle: bool) {
        call_native!(Void, 0xE6C0C80B8C867537u64, toggle);
    } // 0xE6C0C80B8C867537 0xD2B8ACBD b323
    pub unsafe fn set_vehicle_slipstreaming_should_time_out(toggle: bool) {
        call_native!(Void, 0xF051D9BFB6BA39C0u64, toggle);
    } // 0xF051D9BFB6BA39C0  b877
    pub unsafe fn get_vehicle_current_time_in_slip_stream(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x36492C2F0D134C56u64, vehicle)
    } // 0x36492C2F0D134C56 0xA4A75FCF b323
    pub unsafe fn is_vehicle_producing_slip_stream(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x48C633E94A8142A7u64, vehicle)
    } // 0x48C633E94A8142A7  b877
    pub unsafe fn set_vehicle_inactive_during_playback(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x06582AFF74894C75u64, vehicle, toggle);
    } // 0x06582AFF74894C75 0x50F89338 b323
    pub unsafe fn set_vehicle_active_during_playback(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xDFFCEF48E511DB48u64, vehicle, toggle);
    } // 0xDFFCEF48E511DB48 0xEB7D7C27 b323
    pub unsafe fn is_vehicle_sprayable(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x8D474C8FAEFF6CDEu64, vehicle)
    } // 0x8D474C8FAEFF6CDE 0x5EB00A6A b323
    pub unsafe fn set_vehicle_engine_can_degrade(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x983765856F2564F9u64, vehicle, toggle);
    } // 0x983765856F2564F9 0x081DAC12 b323
    pub unsafe fn disable_vehcile_dynamic_ambient_scales(vehicle: Vehicle, p_1: i32, p_2: i32) {
        call_native!(Void, 0xF0E4BA16D1DB546Cu64, vehicle, p_1, p_2);
    } // 0xF0E4BA16D1DB546C 0x5BD8D82D b323
    pub unsafe fn enable_vehicle_dynamic_ambient_scales(vehicle: Vehicle) {
        call_native!(Void, 0xF87D9F2301F7D206u64, vehicle);
    } // 0xF87D9F2301F7D206 0x450AD03A b323
    pub unsafe fn is_plane_landing_gear_intact(plane: Vehicle) -> bool {
        call_native!(bool, 0x4198AB0022B15F87u64, plane)
    } // 0x4198AB0022B15F87 0xBD085DCA b323
    pub unsafe fn are_plane_propellers_intact(plane: Vehicle) -> bool {
        call_native!(bool, 0x755D6D5267CBBD7Eu64, plane)
    } // 0x755D6D5267CBBD7E 0xABBDD5C6 b323
    pub unsafe fn set_plane_propeller_health(plane: Vehicle, health: f32) -> bool {
        call_native!(bool, 0x4C815EB175086F84u64, plane, health)
    } // 0x4C815EB175086F84  b1103
    pub unsafe fn set_vehicle_can_deform_wheels(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x0CDDA42F9E360CA6u64, vehicle, toggle);
    } // 0x0CDDA42F9E360CA6 0x9B581DE7 b323
    pub unsafe fn is_vehicle_stolen(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x4AF9BD80EEBEB453u64, vehicle)
    } // 0x4AF9BD80EEBEB453 0x20B61DDE b323
    pub unsafe fn set_vehicle_is_stolen(vehicle: Vehicle, is_stolen: bool) {
        call_native!(Void, 0x67B2C79AA7FF5738u64, vehicle, is_stolen);
    } // 0x67B2C79AA7FF5738 0x70912E42 b323
    pub unsafe fn set_plane_turbulence_multiplier(vehicle: Vehicle, multiplier: f32) {
        call_native!(Void, 0xAD2D28A1AFDFF131u64, vehicle, multiplier);
    } // 0xAD2D28A1AFDFF131 0xED159AE6 b323
    pub unsafe fn are_wings_of_plane_intact(plane: Vehicle) -> bool {
        call_native!(bool, 0x5991A01434CE9677u64, plane)
    } // 0x5991A01434CE9677 0xAF8CB3DF b323
    pub unsafe fn allow_ambient_vehicles_to_avoid_adverse_conditions(vehicle: Vehicle) {
        call_native!(Void, 0xB264C4D2F2B0A78Bu64, vehicle);
    } // 0xB264C4D2F2B0A78B 0x45F72495 b323
    pub unsafe fn detach_vehicle_from_cargobob(vehicle: Vehicle, cargobob: Vehicle) {
        call_native!(Void, 0x0E21D3DF1051399Du64, vehicle, cargobob);
    } // 0x0E21D3DF1051399D 0x83D3D331 b323
    pub unsafe fn detach_vehicle_from_any_cargobob(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xADF7BE450512C12Fu64, vehicle)
    } // 0xADF7BE450512C12F 0x50E0EABE b323
    pub unsafe fn detach_entity_from_cargobob(cargobob: Vehicle, entity: Entity) -> bool {
        call_native!(bool, 0xAF03011701811146u64, cargobob, entity)
    } // 0xAF03011701811146  b678
    pub unsafe fn is_vehicle_attached_to_cargobob(
        cargobob: Vehicle,
        vehicle_attached: Vehicle,
    ) -> bool {
        call_native!(bool, 0xD40148F22E81A1D9u64, cargobob, vehicle_attached)
    } // 0xD40148F22E81A1D9 0x5DEEC76C b323
    pub unsafe fn get_vehicle_attached_to_cargobob(cargobob: Vehicle) -> Vehicle {
        call_native!(Vehicle, 0x873B82D42AC2B9E5u64, cargobob)
    } // 0x873B82D42AC2B9E5 0x301A1D24 b323
    pub unsafe fn get_entity_attached_to_cargobob(p_0: Any) -> Entity {
        call_native!(Entity, 0x99093F60746708CAu64, p_0)
    } // 0x99093F60746708CA  b1103
    pub unsafe fn attach_vehicle_to_cargobob(
        cargobob: Vehicle,
        vehicle: Vehicle,
        p_2: i32,
        x: f32,
        y: f32,
        z: f32,
    ) {
        call_native!(Void, 0x4127F1D84E347769u64, cargobob, vehicle, p_2, x, y, z);
    } // 0x4127F1D84E347769 0x607DC9D5 b323
    pub unsafe fn attach_entity_to_cargobob(
        p_0: Any,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
        p_5: Any,
    ) {
        call_native!(Void, 0xA1DD82F3CCF9A01Eu64, p_0, p_1, p_2, p_3, p_4, p_5);
    } // 0xA1DD82F3CCF9A01E 0xAEB29F98 b944
    pub unsafe fn set_cargobob_force_dont_detach_vehicle(cargobob: Vehicle, toggle: bool) {
        call_native!(Void, 0x571FEB383F629926u64, cargobob, toggle);
    } // 0x571FEB383F629926 0x49949FDA b323
    pub unsafe fn set_cargobob_exclude_from_pickup_entity(p_0: Any, p_1: Any) {
        call_native!(Void, 0x1F34B0626C594380u64, p_0, p_1);
    } // 0x1F34B0626C594380  b757
    pub unsafe fn can_cargobob_pick_up_entity(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0x2C1D8B3B19E517CCu64, p_0, p_1)
    } // 0x2C1D8B3B19E517CC  b757
    pub unsafe fn get_attached_pick_up_hook_position(cargobob: Vehicle) -> Vector3 {
        call_native!(Vector3, 0xCBDB9B923CACC92Du64, cargobob)
    } // 0xCBDB9B923CACC92D 0xE6633DCF b323
    pub unsafe fn does_cargobob_have_pick_up_rope(cargobob: Vehicle) -> bool {
        call_native!(bool, 0x1821D91AD4B56108u64, cargobob)
    } // 0x1821D91AD4B56108 0xAF769B81 b323
    pub unsafe fn create_pick_up_rope_for_cargobob(cargobob: Vehicle, state: i32) {
        call_native!(Void, 0x7BEB0C7A235F6F3Bu64, cargobob, state);
    } // 0x7BEB0C7A235F6F3B 0x4D3C9A99 b323
    pub unsafe fn remove_pick_up_rope_for_cargobob(cargobob: Vehicle) {
        call_native!(Void, 0x9768CF648F54C804u64, cargobob);
    } // 0x9768CF648F54C804 0xA8211EE9 b323
    pub unsafe fn set_pickup_rope_length_for_cargobob(
        cargobob: Vehicle,
        length_1: f32,
        length_2: f32,
        p_3: bool,
    ) {
        call_native!(
            Void,
            0x877C1EAEAC531023u64,
            cargobob,
            length_1,
            length_2,
            p_3
        );
    } // 0x877C1EAEAC531023 0x3A8AB081 b323
    pub unsafe fn set_pickup_rope_length_without_creating_rope_for_cargobob(
        p_0: Any,
        p_1: Any,
        p_2: Any,
    ) {
        call_native!(Void, 0xC0ED6438E6D39BA8u64, p_0, p_1, p_2);
    } // 0xC0ED6438E6D39BA8  b944
    pub unsafe fn set_cargobob_pickup_rope_damping_multiplier(p_0: Any, p_1: Any) {
        call_native!(Void, 0xCF1182F682F65307u64, p_0, p_1);
    } // 0xCF1182F682F65307 0x7D927E1B b323
    pub unsafe fn set_cargobob_pickup_rope_type(p_0: Any, p_1: Any) {
        call_native!(Void, 0x0D5F65A8F4EBDAB5u64, p_0, p_1);
    } // 0x0D5F65A8F4EBDAB5 0xF258ADA1 b1103
    pub unsafe fn does_cargobob_have_pickup_magnet(cargobob: Vehicle) -> bool {
        call_native!(bool, 0x6E08BF5B3722BAC9u64, cargobob)
    } // 0x6E08BF5B3722BAC9 0x4778CA0A b323
    pub unsafe fn set_cargobob_pickup_magnet_active(cargobob: Vehicle, is_active: bool) {
        call_native!(Void, 0x9A665550F8DA349Bu64, cargobob, is_active);
    } // 0x9A665550F8DA349B 0xF57066DA b323
    pub unsafe fn set_cargobob_pickup_magnet_strength(cargobob: Vehicle, strength: f32) {
        call_native!(Void, 0xBCBFCD9D1DAC19E2u64, cargobob, strength);
    } // 0xBCBFCD9D1DAC19E2 0xCC3CF97D b323
    pub unsafe fn set_cargobob_pickup_magnet_falloff(cargobob: Vehicle, p_1: f32) {
        call_native!(Void, 0xA17BAD153B51547Eu64, cargobob, p_1);
    } // 0xA17BAD153B51547E  b323
    pub unsafe fn set_cargobob_pickup_magnet_reduced_strength(cargobob: Vehicle, p_1: f32) {
        call_native!(Void, 0x66979ACF5102FD2Fu64, cargobob, p_1);
    } // 0x66979ACF5102FD2F  b323
    pub unsafe fn set_cargobob_pickup_magnet_reduced_falloff(cargobob: Vehicle, p_1: f32) {
        call_native!(Void, 0x6D8EAC07506291FBu64, cargobob, p_1);
    } // 0x6D8EAC07506291FB  b323
    pub unsafe fn set_cargobob_pickup_magnet_pull_strength(cargobob: Vehicle, p_1: f32) {
        call_native!(Void, 0xED8286F71A819BAAu64, cargobob, p_1);
    } // 0xED8286F71A819BAA 0x8191BC1A b323
    pub unsafe fn set_cargobob_pickup_magnet_pull_rope_length(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0x685D5561680D088Bu64, vehicle, p_1);
    } // 0x685D5561680D088B  b323
    pub unsafe fn set_cargobob_pickup_magnet_set_targeted_mode(
        vehicle: Vehicle,
        cargobob: Vehicle,
    ) {
        call_native!(Void, 0xE301BD63E9E13CF0u64, vehicle, cargobob);
    } // 0xE301BD63E9E13CF0  b323
    pub unsafe fn set_cargobob_pickup_magnet_set_ambient_mode(
        vehicle: Vehicle,
        p_1: bool,
        p_2: bool,
    ) {
        call_native!(Void, 0x9BDDC73CC6A115D4u64, vehicle, p_1, p_2);
    } // 0x9BDDC73CC6A115D4 0x50CDB295 b323
    pub unsafe fn set_cargobob_pickup_magnet_ensure_pickup_entity_upright(
        vehicle: Vehicle,
        p_1: bool,
    ) {
        call_native!(Void, 0x56EB5E94318D3FB6u64, vehicle, p_1);
    } // 0x56EB5E94318D3FB6 0x30F43FE3 b323
    pub unsafe fn does_vehicle_have_weapons(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x25ECB9F8017D98E0u64, vehicle)
    } // 0x25ECB9F8017D98E0 0xB2E1E1FB b323
    pub unsafe fn set_vehicle_will_tell_others_to_hurry(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0x2C4A1590ABF43E8Bu64, vehicle, p_1);
    } // 0x2C4A1590ABF43E8B 0x2EC19A8B b323
    pub unsafe fn disable_vehicle_weapon(
        disabled: bool,
        weapon_hash: Hash,
        vehicle: Vehicle,
        owner: Ped,
    ) {
        call_native!(
            Void,
            0xF4FC6A6F67D8D856u64,
            disabled,
            weapon_hash,
            vehicle,
            owner
        );
    } // 0xF4FC6A6F67D8D856 0xA688B7D1 b323
    pub unsafe fn is_vehicle_weapon_disabled(
        weapon_hash: Hash,
        vehicle: Vehicle,
        owner: Ped,
    ) -> bool {
        call_native!(bool, 0x563B65A643ED072Eu64, weapon_hash, vehicle, owner)
    } // 0x563B65A643ED072E  b1011
    pub unsafe fn set_vehicle_used_for_pilot_school(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xE05DD0E9707003A3u64, vehicle, toggle);
    } // 0xE05DD0E9707003A3 0x123E5B90 b323
    pub unsafe fn set_vehicle_active_for_ped_navigation(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x21115BCD6E44656Au64, vehicle, toggle);
    } // 0x21115BCD6E44656A 0xEBC225C1 b323
    pub unsafe fn get_vehicle_class(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x29439776AAA00A62u64, vehicle)
    } // 0x29439776AAA00A62 0xC025338E b323
    pub unsafe fn get_vehicle_class_from_name(model_hash: Hash) -> i32 {
        call_native!(i32, 0xDEDF1C8BD47C2200u64, model_hash)
    } // 0xDEDF1C8BD47C2200 0xEA469980 b323
    pub unsafe fn set_players_last_vehicle(vehicle: Vehicle) {
        call_native!(Void, 0xBCDF8BAF56C87B6Au64, vehicle);
    } // 0xBCDF8BAF56C87B6A 0xDE86447D b323
    pub unsafe fn set_vehicle_can_be_used_by_fleeing_peds(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x300504B23BD3B711u64, vehicle, toggle);
    } // 0x300504B23BD3B711 0x5130DB1E b323
    pub unsafe fn set_aircraft_pilot_skill_noise_scalar(vehicle: Vehicle, p_1: f32) {
        call_native!(Void, 0xE5810AC70602F2F5u64, vehicle, p_1);
    } // 0xE5810AC70602F2F5 0xB6BE07E0 b323
    pub unsafe fn set_vehicle_drops_money_when_blown_up(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x068F64F2470F9656u64, vehicle, toggle);
    } // 0x068F64F2470F9656 0x4BB5605D b323
    pub unsafe fn set_vehicle_keep_engine_on_when_abandoned(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xB8FBC8B1330CA9B4u64, vehicle, toggle);
    } // 0xB8FBC8B1330CA9B4 0x51E0064F b323
    pub unsafe fn set_vehicle_impatience_timer(vehicle: Vehicle, p_1: Any) {
        call_native!(Void, 0x6A973569BA094650u64, vehicle, p_1);
    } // 0x6A973569BA094650  b1604
    pub unsafe fn set_vehicle_handling_override(vehicle: Vehicle, hash: Hash) {
        call_native!(Void, 0x10655FAB9915623Du64, vehicle, hash);
    } // 0x10655FAB9915623D  b323
    pub unsafe fn set_vehicle_extended_removal_range(vehicle: Vehicle, range: i32) {
        call_native!(Void, 0x79DF7E806202CE01u64, vehicle, range);
    } // 0x79DF7E806202CE01 0xAEF9611C b323
    pub unsafe fn set_vehicle_steering_bias_scalar(p_0: Any, p_1: f32) {
        call_native!(Void, 0x9007A2F21DC108D4u64, p_0, p_1);
    } // 0x9007A2F21DC108D4 0x585E49B6 b323
    pub unsafe fn set_heli_control_lagging_rate_scalar(helicopter: Vehicle, multiplier: f32) {
        call_native!(Void, 0x6E0859B530A365CCu64, helicopter, multiplier);
    } // 0x6E0859B530A365CC 0x6E67FD35 b323
    pub unsafe fn set_vehicle_friction_override(vehicle: Vehicle, friction: f32) {
        call_native!(Void, 0x1837AF7C627009BAu64, vehicle, friction);
    } // 0x1837AF7C627009BA 0x32AFD42E b323
    pub unsafe fn set_vehicle_wheels_can_break_off_when_blow_up(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xA37B9A517B133349u64, vehicle, toggle);
    } // 0xA37B9A517B133349 0x670913A4 b323
    pub unsafe fn are_plane_control_panels_intact(vehicle: Vehicle, p_1: bool) -> bool {
        call_native!(bool, 0xF78F94D60248C737u64, vehicle, p_1)
    } // 0xF78F94D60248C737 0x3B51B348 b323
    pub unsafe fn set_vehicle_ceiling_height(vehicle: Vehicle, height: f32) {
        call_native!(Void, 0xA46413066687A328u64, vehicle, height);
    } // 0xA46413066687A328 0x98A10A86 b323
    pub unsafe fn set_vehicle_no_explosion_damage_from_driver(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x5E569EC46EC21CAEu64, vehicle, toggle);
    } // 0x5E569EC46EC21CAE 0xBC649C49 b323
    pub unsafe fn clear_vehicle_route_history(vehicle: Vehicle) {
        call_native!(Void, 0x6D6AF961B72728AEu64, vehicle);
    } // 0x6D6AF961B72728AE 0x8DD9AA0C b323
    pub unsafe fn does_vehicle_exist_with_decorator(decorator: *const i8) -> Vehicle {
        call_native!(Vehicle, 0x956B409B984D9BF7u64, decorator)
    } // 0x956B409B984D9BF7 0x39E68EDD b323
    pub unsafe fn set_vehicle_ai_can_use_exclusive_seats(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x41062318F23ED854u64, vehicle, toggle);
    } // 0x41062318F23ED854  b323
    pub unsafe fn set_vehicle_exclusive_driver(vehicle: Vehicle, ped: Ped, index: i32) {
        call_native!(Void, 0xB5C51B5502E85E83u64, vehicle, ped, index);
    } // 0xB5C51B5502E85E83 0xAA8BD440 b323
    pub unsafe fn is_ped_exclusive_driver_of_vehicle(
        ped: Ped,
        vehicle: Vehicle,
        out_index: *mut i32,
    ) -> bool {
        call_native!(bool, 0xB09D25E77C33EB3Fu64, ped, vehicle, out_index)
    } // 0xB09D25E77C33EB3F  b463
    pub unsafe fn disable_individual_plane_propeller(vehicle: Vehicle, propeller: i32) {
        call_native!(Void, 0x500873A45724C863u64, vehicle, propeller);
    } // 0x500873A45724C863 0x004926A3 b323
    pub unsafe fn set_vehicle_force_afterburner(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xB055A34527CB8FD7u64, vehicle, toggle);
    } // 0xB055A34527CB8FD7 0xC195803B b323
    pub unsafe fn set_dont_process_vehicle_glass(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1087BC8EC540DAEBu64, vehicle, toggle);
    } // 0x1087BC8EC540DAEB  b1103
    pub unsafe fn set_disable_wanted_cones_response(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x4AD280EB48B2D8E6u64, vehicle, toggle);
    } // 0x4AD280EB48B2D8E6  b1868
    pub unsafe fn set_use_desired_z_cruise_speed_for_landing(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xB68CFAF83A02768Du64, vehicle, toggle);
    } // 0xB68CFAF83A02768D  b1290
    pub unsafe fn set_arrive_distance_override_for_vehicle_persuit_attack(
        vehicle: Vehicle,
        p_1: f32,
    ) {
        call_native!(Void, 0x0205F5365292D2EBu64, vehicle, p_1);
    } // 0x0205F5365292D2EB  b1290
    pub unsafe fn set_vehicle_ready_for_cleanup(p_0: Any) {
        call_native!(Void, 0xCF9159024555488Cu64, p_0);
    } // 0xCF9159024555488C  b944
    pub unsafe fn set_distant_cars_enabled(toggle: bool) {
        call_native!(Void, 0xF796359A959DF65Du64, toggle);
    } // 0xF796359A959DF65D 0xB5CC548B b323
    pub unsafe fn set_vehicle_neon_colour(vehicle: Vehicle, r: i32, g: i32, b: i32) {
        call_native!(Void, 0x8E0A582209A62695u64, vehicle, r, g, b);
    } // 0x8E0A582209A62695  b323
    pub unsafe fn set_vehicle_neon_index_colour(vehicle: Vehicle, index: i32) {
        call_native!(Void, 0xB93B2867F7B479D1u64, vehicle, index);
    } // 0xB93B2867F7B479D1  b1493
    pub unsafe fn get_vehicle_neon_colour(vehicle: Vehicle, r: *mut i32, g: *mut i32, b: *mut i32) {
        call_native!(Void, 0x7619EEE8C886757Fu64, vehicle, r, g, b);
    } // 0x7619EEE8C886757F  b323
    pub unsafe fn set_vehicle_neon_enabled(vehicle: Vehicle, index: i32, toggle: bool) {
        call_native!(Void, 0x2AA720E4287BF269u64, vehicle, index, toggle);
    } // 0x2AA720E4287BF269  b323
    pub unsafe fn get_vehicle_neon_enabled(vehicle: Vehicle, index: i32) -> bool {
        call_native!(bool, 0x8C4B92553E4766A5u64, vehicle, index)
    } // 0x8C4B92553E4766A5  b323
    pub unsafe fn set_ambient_vehicle_neon_enabled(p_0: bool) {
        call_native!(Void, 0x35E0654F4BAD7971u64, p_0);
    } // 0x35E0654F4BAD7971  b323
    pub unsafe fn suppress_neons_on_vehicle(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x83F813570FF519DEu64, vehicle, toggle);
    } // 0x83F813570FF519DE  b573
    pub unsafe fn set_disable_superdummy(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xB088E9A47AE6EDD5u64, vehicle, p_1);
    } // 0xB088E9A47AE6EDD5  b323
    pub unsafe fn request_vehicle_dial(vehicle: Vehicle) {
        call_native!(Void, 0xDBA3C090E3D74690u64, vehicle);
    } // 0xDBA3C090E3D74690  b323
    pub unsafe fn get_vehicle_body_health(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xF271147EB7B40F12u64, vehicle)
    } // 0xF271147EB7B40F12 0x2B2FCC28 b323
    pub unsafe fn set_vehicle_body_health(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0xB77D05AC8C78AADBu64, vehicle, value);
    } // 0xB77D05AC8C78AADB 0x920C2517 b323
    pub unsafe fn get_vehicle_size(vehicle: Vehicle, out_1: *mut Vector3, out_2: *mut Vector3) {
        call_native!(Void, 0xDF7E3EEB29642C38u64, vehicle, out_1, out_2);
    } // 0xDF7E3EEB29642C38  b323
    pub unsafe fn get_fake_suspension_lowering_amount(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0x53952FD2BAA19F17u64, vehicle)
    } // 0x53952FD2BAA19F17 0xB73A1486 b323
    pub unsafe fn set_car_high_speed_bump_severity_multiplier(multiplier: f32) {
        call_native!(Void, 0x84FD40F56075E816u64, multiplier);
    } // 0x84FD40F56075E816  b323
    pub unsafe fn get_number_of_vehicle_doors(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0x92922A607497B14Du64, vehicle)
    } // 0x92922A607497B14D  b463
    pub unsafe fn set_hydraulics_control(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x28B18377EB6E25F6u64, vehicle, toggle);
    } // 0x28B18377EB6E25F6  b505
    pub unsafe fn set_can_adjust_ground_clearance(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xA7DCDF4DED40A8F4u64, vehicle, p_1);
    } // 0xA7DCDF4DED40A8F4  b323
    pub unsafe fn get_vehicle_health_percentage(
        vehicle: Vehicle,
        max_engine_health: f32,
        max_petrol_tank_health: f32,
        max_body_health: f32,
        max_main_rotor_health: f32,
        max_tail_rotor_health: f32,
        max_unk_health: f32,
    ) -> f32 {
        call_native!(
            f32,
            0xB8EF61207C2393A9u64,
            vehicle,
            max_engine_health,
            max_petrol_tank_health,
            max_body_health,
            max_main_rotor_health,
            max_tail_rotor_health,
            max_unk_health
        )
    } // 0xB8EF61207C2393A9 0x196BA503 b323
    pub unsafe fn get_vehicle_is_mercenary(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xD4C4642CB7F50B5Du64, vehicle)
    } // 0xD4C4642CB7F50B5D 0x575504DE b323
    pub unsafe fn set_vehicle_broken_parts_dont_affect_ai_handling(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xC361AA040D6637A8u64, vehicle, p_1);
    } // 0xC361AA040D6637A8 0x819CD954 b323
    pub unsafe fn set_vehicle_kers_allowed(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x99C82F8A139F3E4Eu64, vehicle, toggle);
    } // 0x99C82F8A139F3E4E 0x71CDD52F b323
    pub unsafe fn get_vehicle_has_kers(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x50634E348C8D44EFu64, vehicle)
    } // 0x50634E348C8D44EF 0x0761E635 b372
    pub unsafe fn set_plane_resist_to_explosion(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xE16142B94664DEFDu64, vehicle, toggle);
    } // 0xE16142B94664DEFD 0xFBBA699A b323
    pub unsafe fn set_heli_resist_to_explosion(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8074CC1886802912u64, vehicle, toggle);
    } // 0x8074CC1886802912  b2545
    pub unsafe fn set_disable_bmx_extra_trick_forces(p_0: Any) {
        call_native!(Void, 0x26D99D5A82FD18E8u64, p_0);
    } // 0x26D99D5A82FD18E8  b463
    pub unsafe fn set_hydraulic_suspension_raise_factor(
        vehicle: Vehicle,
        wheel_id: i32,
        value: f32,
    ) {
        call_native!(Void, 0x84EA99C62CB3EF0Cu64, vehicle, wheel_id, value);
    } // 0x84EA99C62CB3EF0C  b505
    pub unsafe fn get_hydraulic_suspension_raise_factor(vehicle: Vehicle, wheel_id: i32) -> f32 {
        call_native!(f32, 0x0BB5CBDDD0F25AE3u64, vehicle, wheel_id)
    } // 0x0BB5CBDDD0F25AE3  b2372
    pub unsafe fn set_can_use_hydraulics(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x1201E8A3290A3B98u64, vehicle, toggle);
    } // 0x1201E8A3290A3B98  b505
    pub unsafe fn set_hydraulic_vehicle_state(vehicle: Vehicle, state: i32) {
        call_native!(Void, 0x8EA86DF356801C7Du64, vehicle, state);
    } // 0x8EA86DF356801C7D  b505
    pub unsafe fn set_hydraulic_wheel_state(
        vehicle: Vehicle,
        wheel_id: i32,
        state: i32,
        value: f32,
        p_4: Any,
    ) {
        call_native!(
            Void,
            0xC24075310A8B9CD1u64,
            vehicle,
            wheel_id,
            state,
            value,
            p_4
        );
    } // 0xC24075310A8B9CD1  b505
    pub unsafe fn has_vehicle_petroltank_set_on_fire_by_entity(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0x5BA68A0840D546ACu64, p_0, p_1)
    } // 0x5BA68A0840D546AC  b463
    pub unsafe fn clear_vehicle_petroltank_fire_culprit(vehicle: Vehicle) {
        call_native!(Void, 0x4419966C9936071Au64, vehicle);
    } // 0x4419966C9936071A  b463
    pub unsafe fn set_vehicle_bobblehead_velocity(x: f32, y: f32, p_2: f32) {
        call_native!(Void, 0x870B8B7A766615C8u64, x, y, p_2);
    } // 0x870B8B7A766615C8  b505
    pub unsafe fn get_vehicle_is_dummy(p_0: Any) -> bool {
        call_native!(bool, 0x8533CAFDE1F0F336u64, p_0)
    } // 0x8533CAFDE1F0F336  b505
    pub unsafe fn set_vehicle_damage_scale(vehicle: Vehicle, p_1: f32) -> bool {
        call_native!(bool, 0x4E20D2A627011E8Eu64, vehicle, p_1)
    } // 0x4E20D2A627011E8E  b757
    pub unsafe fn set_vehicle_weapon_damage_scale(vehicle: Vehicle, multiplier: f32) -> bool {
        call_native!(bool, 0x45A561A9421AB6ADu64, vehicle, multiplier)
    } // 0x45A561A9421AB6AD  b944
    pub unsafe fn set_disable_damage_with_picked_up_entity(p_0: Any, p_1: Any) -> bool {
        call_native!(bool, 0xD4196117AF7BB974u64, p_0, p_1)
    } // 0xD4196117AF7BB974  b757
    pub unsafe fn set_vehicle_uses_mp_player_damage_multiplier(p_0: Any, p_1: Any) {
        call_native!(Void, 0xBB2333BB87DDD87Fu64, p_0, p_1);
    } // 0xBB2333BB87DDD87F  b757
    pub unsafe fn set_bike_easy_to_land(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x73561D4425A021A2u64, vehicle, toggle);
    } // 0x73561D4425A021A2  b791
    pub unsafe fn set_invert_vehicle_controls(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x5B91B229243351A8u64, vehicle, state);
    } // 0x5B91B229243351A8  b791
    pub unsafe fn set_speed_boost_effect_disabled(disabled: bool) {
        call_native!(Void, 0x7BBE7FF626A591FEu64, disabled);
    } // 0x7BBE7FF626A591FE  b877
    pub unsafe fn set_slow_down_effect_disabled(disabled: bool) {
        call_native!(Void, 0x65B080555EA48149u64, disabled);
    } // 0x65B080555EA48149  b1011
    pub unsafe fn set_formation_leader(vehicle: Vehicle, x: f32, y: f32, z: f32, p_4: f32) {
        call_native!(Void, 0x428AD3E26C8D9EB0u64, vehicle, x, y, z, p_4);
    } // 0x428AD3E26C8D9EB0  b877
    pub unsafe fn reset_formation_leader() {
        call_native!(Void, 0xE2F53F172B45EDE1u64);
    } // 0xE2F53F172B45EDE1  b877
    pub unsafe fn get_is_boat_capsized(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xBA91D045575699ADu64, vehicle)
    } // 0xBA91D045575699AD  b877
    pub unsafe fn set_allow_ramming_soop_or_ramp(p_0: Any, p_1: Any) {
        call_native!(Void, 0x80E3357FDEF45C21u64, p_0, p_1);
    } // 0x80E3357FDEF45C21  b944
    pub unsafe fn set_script_ramp_impulse_scale(vehicle: Vehicle, impulse_scale: f32) {
        call_native!(Void, 0xEFC13B1CE30D755Du64, vehicle, impulse_scale);
    } // 0xEFC13B1CE30D755D  b944
    pub unsafe fn get_is_door_valid(vehicle: Vehicle, door_id: i32) -> bool {
        call_native!(bool, 0x645F4B6E8499F632u64, vehicle, door_id)
    } // 0x645F4B6E8499F632  b944
    pub unsafe fn set_script_rocket_boost_recharge_time(vehicle: Vehicle, seconds: f32) {
        call_native!(Void, 0xE00F2AB100B76E89u64, vehicle, seconds);
    } // 0xE00F2AB100B76E89  b944
    pub unsafe fn get_has_rocket_boost(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x36D782F68B309BDAu64, vehicle)
    } // 0x36D782F68B309BDA  b944
    pub unsafe fn is_rocket_boost_active(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x3D34E80EED4AE3BEu64, vehicle)
    } // 0x3D34E80EED4AE3BE  b944
    pub unsafe fn set_rocket_boost_active(vehicle: Vehicle, active: bool) {
        call_native!(Void, 0x81E1552E35DC3839u64, vehicle, active);
    } // 0x81E1552E35DC3839  b944
    pub unsafe fn get_has_retractable_wheels(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xDCA174A42133F08Cu64, vehicle)
    } // 0xDCA174A42133F08C  b944
    pub unsafe fn get_is_wheels_retracted(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x1DA0DA9CB3F0C8BFu64, vehicle)
    } // 0x1DA0DA9CB3F0C8BF  b944
    pub unsafe fn set_wheels_extended_instantly(vehicle: Vehicle) {
        call_native!(Void, 0xF660602546D27BA8u64, vehicle);
    } // 0xF660602546D27BA8  b944
    pub unsafe fn set_wheels_retracted_instantly(vehicle: Vehicle) {
        call_native!(Void, 0x5335BE58C083E74Eu64, vehicle);
    } // 0x5335BE58C083E74E  b1011
    pub unsafe fn get_car_has_jump(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x9078C0C5EF8C19E9u64, vehicle)
    } // 0x9078C0C5EF8C19E9  b944
    pub unsafe fn set_use_higher_car_jump(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xF06A16CA55D138D8u64, vehicle, toggle);
    } // 0xF06A16CA55D138D8  b944
    pub unsafe fn set_clear_freeze_waiting_on_collision_once_player_enters(
        vehicle: Vehicle,
        toggle: bool,
    ) {
        call_native!(Void, 0xB2E0C0D6922D31F2u64, vehicle, toggle);
    } // 0xB2E0C0D6922D31F2  b944
    pub unsafe fn set_vehicle_weapon_restricted_ammo(
        vehicle: Vehicle,
        weapon_index: i32,
        capacity: i32,
    ) {
        call_native!(Void, 0x44CD1F493DB2A0A6u64, vehicle, weapon_index, capacity);
    } // 0x44CD1F493DB2A0A6  b944
    pub unsafe fn get_vehicle_weapon_restricted_ammo(vehicle: Vehicle, weapon_index: i32) -> i32 {
        call_native!(i32, 0x8181CE2F25CB9BB7u64, vehicle, weapon_index)
    } // 0x8181CE2F25CB9BB7  b1011
    pub unsafe fn get_vehicle_has_parachute(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xBC9CFF381338CB4Fu64, vehicle)
    } // 0xBC9CFF381338CB4F  b944
    pub unsafe fn get_vehicle_can_deploy_parachute(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xA916396DF4154EE3u64, vehicle)
    } // 0xA916396DF4154EE3  b944
    pub unsafe fn vehicle_start_parachuting(vehicle: Vehicle, active: bool) {
        call_native!(Void, 0x0BFFB028B3DD0A97u64, vehicle, active);
    } // 0x0BFFB028B3DD0A97  b944
    pub unsafe fn is_vehicle_parachute_deployed(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x3DE51E9C80B116CFu64, vehicle)
    } // 0x3DE51E9C80B116CF  b1011
    pub unsafe fn vehicle_set_ramp_and_ramming_cars_take_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x28D034A93FE31BF5u64, vehicle, toggle);
    } // 0x28D034A93FE31BF5  b944
    pub unsafe fn vehicle_set_enable_ramp_car_side_impulse(p_0: Any, p_1: Any) {
        call_native!(Void, 0x1BBAC99C0BC53656u64, p_0, p_1);
    } // 0x1BBAC99C0BC53656  b944
    pub unsafe fn vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(p_0: Any, p_1: Any) {
        call_native!(Void, 0x756AE6E962168A04u64, p_0, p_1);
    } // 0x756AE6E962168A04  b944
    pub unsafe fn vehicle_set_jet_wash_force_enabled(p_0: Any) {
        call_native!(Void, 0x9D30687C57BAA0BBu64, p_0);
    } // 0x9D30687C57BAA0BB  b1011
    pub unsafe fn set_vehicle_weapon_can_target_objects(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x86B4B6212CB8B627u64, vehicle, toggle);
    } // 0x86B4B6212CB8B627  b1011
    pub unsafe fn set_vehicle_use_boost_button_for_wheel_retract(toggle: bool) {
        call_native!(Void, 0x41290B40FA63E6DAu64, toggle);
    } // 0x41290B40FA63E6DA  b1011
    pub unsafe fn _set_vehicle_use_horn_button_for_nitrous(toggle: bool) {
        call_native!(Void, 0x1980F68872CC2C3Du64, toggle);
    } // 0x1980F68872CC2C3D  b3095
    pub unsafe fn vehicle_set_parachute_model_override(vehicle: Vehicle, model_hash: Hash) {
        call_native!(Void, 0x4D610C6B56031351u64, vehicle, model_hash);
    } // 0x4D610C6B56031351  b1011
    pub unsafe fn vehicle_set_parachute_model_tint_index(vehicle: Vehicle, texture_variation: i32) {
        call_native!(Void, 0xA74AD2439468C883u64, vehicle, texture_variation);
    } // 0xA74AD2439468C883  b1011
    pub unsafe fn vehicle_set_override_extenable_side_ratio(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0x0419B167EE128F33u64, p_0, p_1)
    } // 0x0419B167EE128F33  b1103
    pub unsafe fn vehicle_set_extenable_side_target_ratio(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0xF3B0E0AED097A3F5u64, p_0, p_1)
    } // 0xF3B0E0AED097A3F5  b1103
    pub unsafe fn vehicle_set_override_side_ratio(p_0: Any, p_1: Any) -> i32 {
        call_native!(i32, 0xD3E51C0AB8C26EEEu64, p_0, p_1)
    } // 0xD3E51C0AB8C26EEE  b1103
    pub unsafe fn get_all_vehicles(vehs_struct: *mut Any) -> i32 {
        call_native!(i32, 0x9B8E1BF04B51F2E8u64, vehs_struct)
    } // 0x9B8E1BF04B51F2E8  b1103
    pub unsafe fn set_cargobob_exta_pickup_range(p_0: Any, p_1: Any) {
        call_native!(Void, 0x72BECCF4B829522Eu64, p_0, p_1);
    } // 0x72BECCF4B829522E  b1103
    pub unsafe fn set_override_vehicle_door_torque(p_0: Any, p_1: Any, p_2: Any) {
        call_native!(Void, 0x66E3AAFACE2D1EB8u64, p_0, p_1, p_2);
    } // 0x66E3AAFACE2D1EB8  b1103
    pub unsafe fn set_wheelie_enabled(vehicle: Vehicle, enabled: bool) {
        call_native!(Void, 0x1312DDD8385AEE4Eu64, vehicle, enabled);
    } // 0x1312DDD8385AEE4E  b1103
    pub unsafe fn set_disable_heli_explode_from_body_damage(p_0: Any, p_1: Any) {
        call_native!(Void, 0xEDBC8405B3895CC9u64, p_0, p_1);
    } // 0xEDBC8405B3895CC9  b1103
    pub unsafe fn set_disable_explode_from_body_damage_on_collision(vehicle: Vehicle, value: f32) {
        call_native!(Void, 0x26E13D440E7F6064u64, vehicle, value);
    } // 0x26E13D440E7F6064  b1290
    pub unsafe fn set_trailer_attachment_enabled(p_0: Any, p_1: Any) {
        call_native!(Void, 0x2FA2494B47FDD009u64, p_0, p_1);
    } // 0x2FA2494B47FDD009  b1103
    pub unsafe fn set_rocket_boost_fill(vehicle: Vehicle, percentage: f32) {
        call_native!(Void, 0xFEB2DDED3509562Eu64, vehicle, percentage);
    } // 0xFEB2DDED3509562E  b1103
    pub unsafe fn set_glider_active(vehicle: Vehicle, state: bool) {
        call_native!(Void, 0x544996C0081ABDEBu64, vehicle, state);
    } // 0x544996C0081ABDEB  b1103
    pub unsafe fn set_should_reset_turret_in_scripted_cameras(
        vehicle: Vehicle,
        should_reset: bool,
    ) {
        call_native!(Void, 0x78CEEE41F49F421Fu64, vehicle, should_reset);
    } // 0x78CEEE41F49F421F  b1103
    pub unsafe fn set_vehicle_disable_collision_upon_creation(vehicle: Vehicle, disable: bool) {
        call_native!(Void, 0xAF60E6A2936F982Au64, vehicle, disable);
    } // 0xAF60E6A2936F982A  b1103
    pub unsafe fn set_ground_effect_reduces_drag(toggle: bool) {
        call_native!(Void, 0x430A7631A84C9BE7u64, toggle);
    } // 0x430A7631A84C9BE7  b1180
    pub unsafe fn set_disable_map_collision(vehicle: Vehicle) {
        call_native!(Void, 0x75627043C6AA90ADu64, vehicle);
    } // 0x75627043C6AA90AD  b1180
    pub unsafe fn set_disable_ped_stand_on_top(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x8235F1BEAD557629u64, vehicle, toggle);
    } // 0x8235F1BEAD557629  b1180
    pub unsafe fn set_vehicle_damage_scales(
        vehicle: Vehicle,
        p_1: Any,
        p_2: Any,
        p_3: Any,
        p_4: Any,
    ) {
        call_native!(Void, 0x9640E30A7F395E4Bu64, vehicle, p_1, p_2, p_3, p_4);
    } // 0x9640E30A7F395E4B  b1290
    pub unsafe fn set_plane_section_damage_scale(vehicle: Vehicle, p_1: Any, p_2: Any) {
        call_native!(Void, 0x0BBB9A7A8FFE931Bu64, vehicle, p_1, p_2);
    } // 0x0BBB9A7A8FFE931B  b1290
    pub unsafe fn set_heli_can_pickup_entity_that_has_pick_up_disabled(
        vehicle: Vehicle,
        toggle: bool,
    ) {
        call_native!(Void, 0x94A68DA412C4007Du64, vehicle, toggle);
    } // 0x94A68DA412C4007D  b1180
    pub unsafe fn set_vehicle_bomb_ammo(vehicle: Vehicle, bomb_count: i32) {
        call_native!(Void, 0xF4B2ED59DEB5D774u64, vehicle, bomb_count);
    } // 0xF4B2ED59DEB5D774  b1180
    pub unsafe fn get_vehicle_bomb_ammo(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xEA12BD130D7569A1u64, vehicle)
    } // 0xEA12BD130D7569A1  b1180
    pub unsafe fn set_vehicle_countermeasure_ammo(vehicle: Vehicle, counter_measure_count: i32) {
        call_native!(Void, 0x9BDA23BF666F0855u64, vehicle, counter_measure_count);
    } // 0x9BDA23BF666F0855  b1180
    pub unsafe fn get_vehicle_countermeasure_ammo(vehicle: Vehicle) -> i32 {
        call_native!(i32, 0xF846AA63DF56B804u64, vehicle)
    } // 0xF846AA63DF56B804  b1180
    pub unsafe fn set_heli_combat_offset(vehicle: Vehicle, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x0A3F820A9A9A9AC5u64, vehicle, x, y, z);
    } // 0x0A3F820A9A9A9AC5  b1180
    pub unsafe fn get_can_vehicle_be_placed_here(
        vehicle: Vehicle,
        x: f32,
        y: f32,
        z: f32,
        rot_x: f32,
        rot_y: f32,
        rot_z: f32,
        p_7: i32,
        p_8: Any,
    ) -> bool {
        call_native!(
            bool,
            0x51F30DB60626A20Eu64,
            vehicle,
            x,
            y,
            z,
            rot_x,
            rot_y,
            rot_z,
            p_7,
            p_8
        )
    } // 0x51F30DB60626A20E  b1180
    pub unsafe fn set_disable_automatic_crash_task(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x97841634EF7DF1D6u64, vehicle, toggle);
    } // 0x97841634EF7DF1D6  b1180
    pub unsafe fn set_special_flight_mode_ratio(vehicle: Vehicle, ratio: f32) {
        call_native!(Void, 0xD138FA15C9776837u64, vehicle, ratio);
    } // 0xD138FA15C9776837  b1290
    pub unsafe fn set_special_flight_mode_target_ratio(vehicle: Vehicle, target_ratio: f32) {
        call_native!(Void, 0x438B3D7CA026FE91u64, vehicle, target_ratio);
    } // 0x438B3D7CA026FE91  b1290
    pub unsafe fn set_special_flight_mode_allowed(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xF1211889DF15A763u64, vehicle, toggle);
    } // 0xF1211889DF15A763  b1290
    pub unsafe fn set_disable_hover_mode_flight(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x2D55FE374D5FDB91u64, vehicle, toggle);
    } // 0x2D55FE374D5FDB91  b1290
    pub unsafe fn get_outriggers_deployed(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x3A9128352EAC9E85u64, vehicle)
    } // 0x3A9128352EAC9E85  b1290
    pub unsafe fn find_spawn_coordinates_for_heli(ped: Ped) -> Vector3 {
        call_native!(Vector3, 0x8DC9675797123522u64, ped)
    } // 0x8DC9675797123522  b1290
    pub unsafe fn set_deploy_folding_wings(vehicle: Vehicle, deploy: bool, p_2: bool) {
        call_native!(Void, 0xB251E0B33E58B424u64, vehicle, deploy, p_2);
    } // 0xB251E0B33E58B424  b1290
    pub unsafe fn are_folding_wings_deployed(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xAEF12960FA943792u64, vehicle)
    } // 0xAEF12960FA943792  b1290
    pub unsafe fn _set_deploy_missile_bays(vehicle: Vehicle, deploy: bool) {
        call_native!(Void, 0x0C02468829E4AA65u64, vehicle, deploy);
    } // 0x0C02468829E4AA65  b2944
    pub unsafe fn _are_missile_bays_deployed(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xEA4743874D515F13u64, vehicle)
    } // 0xEA4743874D515F13  b2944
    pub unsafe fn set_dip_straight_down_when_crashing_plane(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xAA653AE61924B0A0u64, vehicle, toggle);
    } // 0xAA653AE61924B0A0  b1290
    pub unsafe fn set_turret_hidden(vehicle: Vehicle, index: i32, toggle: bool) {
        call_native!(Void, 0xC60060EB0D8AC7B1u64, vehicle, index, toggle);
    } // 0xC60060EB0D8AC7B1  b1290
    pub unsafe fn set_hover_mode_wing_ratio(vehicle: Vehicle, ratio: f32) {
        call_native!(Void, 0x70A252F60A3E036Bu64, vehicle, ratio);
    } // 0x70A252F60A3E036B  b1365
    pub unsafe fn set_disable_turret_movement(vehicle: Vehicle, turret_id: i32) {
        call_native!(Void, 0xE615BB7A7752C76Au64, vehicle, turret_id);
    } // 0xE615BB7A7752C76A  b1365
    pub unsafe fn set_force_fix_link_matrices(vehicle: Vehicle) {
        call_native!(Void, 0x887FA38787DE8C72u64, vehicle);
    } // 0x887FA38787DE8C72  b1365
    pub unsafe fn set_transform_rate_for_animation(vehicle: Vehicle, transform_rate: f32) {
        call_native!(Void, 0x498218259FB7C72Du64, vehicle, transform_rate);
    } // 0x498218259FB7C72D  b1365
    pub unsafe fn set_transform_to_submarine_uses_alternate_input(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x41B9FB92EDED32A6u64, vehicle, toggle);
    } // 0x41B9FB92EDED32A6  b1365
    pub unsafe fn set_vehicle_combat_mode(toggle: bool) {
        call_native!(Void, 0x36DE109527A2C0C4u64, toggle);
    } // 0x36DE109527A2C0C4  b1604
    pub unsafe fn set_vehicle_detonation_mode(toggle: bool) {
        call_native!(Void, 0x82E0AC411E41A5B4u64, toggle);
    } // 0x82E0AC411E41A5B4  b1604
    pub unsafe fn set_vehicle_shunt_on_stick(toggle: bool) {
        call_native!(Void, 0x99A05839C46CE316u64, toggle);
    } // 0x99A05839C46CE316  b1604
    pub unsafe fn get_is_vehicle_shunting(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xA2459F72C14E2E8Du64, vehicle)
    } // 0xA2459F72C14E2E8D  b1604
    pub unsafe fn get_has_vehicle_been_hit_by_shunt(vehicle: Vehicle) -> bool {
        call_native!(bool, 0xE8718FAF591FD224u64, vehicle)
    } // 0xE8718FAF591FD224  b1604
    pub unsafe fn get_last_shunt_vehicle(vehicle: Vehicle) -> Vehicle {
        call_native!(Vehicle, 0x04F2FA6E234162F7u64, vehicle)
    } // 0x04F2FA6E234162F7  b1604
    pub unsafe fn set_disable_vehicle_explosions_damage(toggle: bool) {
        call_native!(Void, 0x143921E45EC44D62u64, toggle);
    } // 0x143921E45EC44D62  b1604
    pub unsafe fn set_override_nitrous_level(
        vehicle: Vehicle,
        toggle: bool,
        level: f32,
        power: f32,
        recharge_time: f32,
        disable_sound: bool,
    ) {
        call_native!(
            Void,
            0xC8E9B6B71B8E660Du64,
            vehicle,
            toggle,
            level,
            power,
            recharge_time,
            disable_sound
        );
    } // 0xC8E9B6B71B8E660D  b1604
    pub unsafe fn set_nitrous_is_active(vehicle: Vehicle, enabled: bool) {
        call_native!(Void, 0x465EEA70AF251045u64, vehicle, enabled);
    } // 0x465EEA70AF251045  b3095
    pub unsafe fn _set_override_traction_loss_multiplier(vehicle: Vehicle, modifier: f32) {
        call_native!(Void, 0xAFD262ACCA64479Au64, vehicle, modifier);
    } // 0xAFD262ACCA64479A  b3095
    pub unsafe fn _set_drift_slip_angle_limits(
        vehicle: Vehicle,
        duration_scalar: f32,
        amplitude_scalar: f32,
        slip_angle_limit: f32,
    ) {
        call_native!(
            Void,
            0xDAF4C98C18AC6F06u64,
            vehicle,
            duration_scalar,
            amplitude_scalar,
            slip_angle_limit
        );
    } // 0xDAF4C98C18AC6F06  b3095
    pub unsafe fn _set_minimum_time_between_gear_shifts(vehicle: Vehicle, time: i32) {
        call_native!(Void, 0x16CFBC5E7EB32861u64, vehicle, time);
    } // 0x16CFBC5E7EB32861  b3095
    pub unsafe fn fully_charge_nitrous(vehicle: Vehicle) {
        call_native!(Void, 0x1A2BCC8C636F9226u64, vehicle);
    } // 0x1A2BCC8C636F9226  b3095
    pub unsafe fn _get_remaining_nitrous_duration(vehicle: Vehicle) -> f32 {
        call_native!(f32, 0xBEC4B8653462450Eu64, vehicle)
    } // 0xBEC4B8653462450E  b3095
    pub unsafe fn is_nitrous_active(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x491E822B2C464FE4u64, vehicle)
    } // 0x491E822B2C464FE4  b3095
    pub unsafe fn clear_nitrous(vehicle: Vehicle) {
        call_native!(Void, 0xC889AE921400E1EDu64, vehicle);
    } // 0xC889AE921400E1ED  b3095
    pub unsafe fn set_increase_wheel_crush_damage(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x2970EAA18FD5E42Fu64, vehicle, toggle);
    } // 0x2970EAA18FD5E42F  b1604
    pub unsafe fn set_disable_weapon_blade_forces(toggle: bool) {
        call_native!(Void, 0x211E95CE9903940Cu64, toggle);
    } // 0x211E95CE9903940C  b1604
    pub unsafe fn set_use_double_click_for_car_jump(toggle: bool) {
        call_native!(Void, 0x5BBCF35BF6E456F7u64, toggle);
    } // 0x5BBCF35BF6E456F7  b1604
    pub unsafe fn get_does_vehicle_have_tombstone(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x71AFB258CCED3A27u64, vehicle)
    } // 0x71AFB258CCED3A27  b1604
    pub unsafe fn hide_tombstone(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xAE71FB656C600587u64, vehicle, toggle);
    } // 0xAE71FB656C600587  b1604
    pub unsafe fn apply_emp_effect(vehicle: Vehicle) {
        call_native!(Void, 0x249249D74F813EB2u64, vehicle);
    } // 0x249249D74F813EB2  b3095
    pub unsafe fn get_is_vehicle_disabled_by_emp(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x0506ED94363AD905u64, vehicle)
    } // 0x0506ED94363AD905  b1604
    pub unsafe fn set_disable_retracting_weapon_blades(toggle: bool) {
        call_native!(Void, 0x8F0D5BA1C2CC91D7u64, toggle);
    } // 0x8F0D5BA1C2CC91D7  b1604
    pub unsafe fn get_tyre_health(vehicle: Vehicle, wheel_index: i32) -> f32 {
        call_native!(f32, 0x55EAB010FAEE9380u64, vehicle, wheel_index)
    } // 0x55EAB010FAEE9380  b1868
    pub unsafe fn set_tyre_health(vehicle: Vehicle, wheel_index: i32, health: f32) {
        call_native!(Void, 0x74C68EF97645E79Du64, vehicle, wheel_index, health);
    } // 0x74C68EF97645E79D  b1868
    pub unsafe fn get_tyre_wear_rate(vehicle: Vehicle, wheel_index: i32) -> f32 {
        call_native!(f32, 0x6E387895952F4F71u64, vehicle, wheel_index)
    } // 0x6E387895952F4F71  b2060
    pub unsafe fn set_tyre_wear_rate(vehicle: Vehicle, wheel_index: i32, multiplier: f32) {
        call_native!(
            Void,
            0x01894E2EDE923CA2u64,
            vehicle,
            wheel_index,
            multiplier
        );
    } // 0x01894E2EDE923CA2  b1868
    pub unsafe fn set_tyre_wear_rate_scale(vehicle: Vehicle, wheel_index: i32, multiplier: f32) {
        call_native!(
            Void,
            0x392183BB9EA57697u64,
            vehicle,
            wheel_index,
            multiplier
        );
    } // 0x392183BB9EA57697  b2060
    pub unsafe fn set_tyre_maximum_grip_difference_due_to_wear_rate(
        vehicle: Vehicle,
        wheel_index: i32,
        multiplier: f32,
    ) {
        call_native!(
            Void,
            0xC970D0E0FC31D768u64,
            vehicle,
            wheel_index,
            multiplier
        );
    } // 0xC970D0E0FC31D768  b2060
    pub unsafe fn set_aircraft_ignore_hightmap_optimisation(vehicle: Vehicle, p_1: i32) {
        call_native!(Void, 0xF8B49F5BA7F850E7u64, vehicle, p_1);
    } // 0xF8B49F5BA7F850E7  b2060
    pub unsafe fn set_reduced_suspension_force(vehicle: Vehicle, enable: bool) {
        call_native!(Void, 0x3A375167F5782A65u64, vehicle, enable);
    } // 0x3A375167F5782A65  b2372
    pub unsafe fn set_drift_tyres(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x5AC79C98C5C17F05u64, vehicle, toggle);
    } // 0x5AC79C98C5C17F05  b2372
    pub unsafe fn get_drift_tyres_set(vehicle: Vehicle) -> bool {
        call_native!(bool, 0x2F5A72430E78C8D3u64, vehicle)
    } // 0x2F5A72430E78C8D3  b2372
    pub unsafe fn network_use_high_precision_train_blending(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0xEC0C1D4922AF9754u64, vehicle, toggle);
    } // 0xEC0C1D4922AF9754  b2372
    pub unsafe fn set_check_for_enough_room_for_ped(vehicle: Vehicle, p_1: bool) {
        call_native!(Void, 0xEF9D388F8D377F44u64, vehicle, p_1);
    } // 0xEF9D388F8D377F44  b2699
    pub unsafe fn _set_allow_collision_when_in_vehicle(vehicle: Vehicle, toggle: bool) {
        call_native!(Void, 0x27D27223E8EF22EDu64, vehicle, toggle);
    } // 0x27D27223E8EF22ED  b3095
    pub unsafe fn _is_vehicle_gen9_exclusive_model(vehicle_model: Hash) -> bool {
        call_native!(bool, 0x6638C0F19DE692FEu64, vehicle_model)
    } // 0x6638C0F19DE692FE  b3095
    pub unsafe fn _get_vehicle_max_exhaust_bone_count() -> i32 {
        call_native!(i32, 0x3EE18B00CD86C54Fu64)
    } // 0x3EE18B00CD86C54F  b3095
    pub unsafe fn _get_vehicle_exhaust_bone(
        vehicle: Vehicle,
        index: i32,
        bone_index: *mut i32,
        axis_x: *mut Bool,
    ) -> bool {
        call_native!(
            bool,
            0xE728F090D538CB18u64,
            vehicle,
            index,
            bone_index,
            axis_x
        )
    } // 0xE728F090D538CB18  b3095
}

#[allow(dead_code)]
#[allow(unused_imports)]
pub mod water {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_water_height(x: f32, y: f32, z: f32, height: *mut f32) -> bool {
        call_native!(bool, 0xF6829842C06AE524u64, x, y, z, height)
    } // 0xF6829842C06AE524 0xD864E17C b323
    pub unsafe fn get_water_height_no_waves(x: f32, y: f32, z: f32, height: *mut f32) -> bool {
        call_native!(bool, 0x8EE6B53CE13A9794u64, x, y, z, height)
    } // 0x8EE6B53CE13A9794 0x262017F8 b323
    pub unsafe fn test_probe_against_water(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        result: *mut Vector3,
    ) -> bool {
        call_native!(
            bool,
            0xFFA5D878809819DBu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            result
        )
    } // 0xFFA5D878809819DB 0xAA4AE00C b323
    pub unsafe fn test_probe_against_all_water(
        x_1: f32,
        y_1: f32,
        z_1: f32,
        x_2: f32,
        y_2: f32,
        z_2: f32,
        flags: i32,
        water_height: *mut f32,
    ) -> i32 {
        call_native!(
            i32,
            0x8974647ED222EA5Fu64,
            x_1,
            y_1,
            z_1,
            x_2,
            y_2,
            z_2,
            flags,
            water_height
        )
    } // 0x8974647ED222EA5F 0x4A962D55 b323
    pub unsafe fn test_vertical_probe_against_all_water(
        x: f32,
        y: f32,
        z: f32,
        flags: i32,
        water_height: *mut f32,
    ) -> i32 {
        call_native!(i32, 0x2B3451FA1E3142E2u64, x, y, z, flags, water_height)
    } // 0x2B3451FA1E3142E2 0x4C71D143 b323
    pub unsafe fn modify_water(x: f32, y: f32, radius: f32, height: f32) {
        call_native!(Void, 0xC443FD757C3BA637u64, x, y, radius, height);
    } // 0xC443FD757C3BA637 0xC49E005A b323
    pub unsafe fn add_extra_calming_quad(
        x_low: f32,
        y_low: f32,
        x_high: f32,
        y_high: f32,
        height: f32,
    ) -> i32 {
        call_native!(
            i32,
            0xFDBF4CDBC07E1706u64,
            x_low,
            y_low,
            x_high,
            y_high,
            height
        )
    } // 0xFDBF4CDBC07E1706 0xA9419B6D b323
    pub unsafe fn remove_extra_calming_quad(calming_quad: i32) {
        call_native!(Void, 0xB1252E3E59A82AAFu64, calming_quad);
    } // 0xB1252E3E59A82AAF 0x45268B6F b323
    pub unsafe fn set_deep_ocean_scaler(intensity: f32) {
        call_native!(Void, 0xB96B00E976BE977Fu64, intensity);
    } // 0xB96B00E976BE977F 0x53B694B1 b323
    pub unsafe fn get_deep_ocean_scaler() -> f32 {
        call_native!(f32, 0x2B2A2CC86778B619u64)
    } // 0x2B2A2CC86778B619 0xBD0A67FB b323
    pub unsafe fn set_calmed_wave_height_scaler(height: f32) {
        call_native!(Void, 0x547237AA71AB44DEu64, height);
    } // 0x547237AA71AB44DE  b573
    pub unsafe fn reset_deep_ocean_scaler() {
        call_native!(Void, 0x5E5E99285AE812DBu64);
    } // 0x5E5E99285AE812DB 0x4AD23212 b323
}

#[allow(unused_imports)]
pub mod weapon {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn enable_laser_sight_rendering(toggle: bool) {
        call_native!(Void, 0xC8B46D7727D864AAu64, toggle);
    } // 0xC8B46D7727D864AA 0xE3438955 b323
    pub unsafe fn get_weapon_component_type_model(component_hash: Hash) -> Hash {
        call_native!(Hash, 0x0DB57B41EC1DB083u64, component_hash)
    } // 0x0DB57B41EC1DB083 0x324FA47A b323
    pub unsafe fn get_weapontype_model(weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0xF46CDC33180FDA94u64, weapon_hash)
    } // 0xF46CDC33180FDA94 0x44E1C269 b323
    pub unsafe fn get_weapontype_slot(weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0x4215460B9B8B7FA0u64, weapon_hash)
    } // 0x4215460B9B8B7FA0 0x2E3759AF b323
    pub unsafe fn get_weapontype_group(weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0xC3287EE3050FB74Cu64, weapon_hash)
    } // 0xC3287EE3050FB74C 0x5F2DE833 b323
    pub unsafe fn get_weapon_component_variant_extra_count(component_hash: Hash) -> i32 {
        call_native!(i32, 0x6558AC7C17BFEF58u64, component_hash)
    } // 0x6558AC7C17BFEF58  b372
    pub unsafe fn get_weapon_component_variant_extra_model(
        component_hash: Hash,
        extra_component_index: i32,
    ) -> Hash {
        call_native!(
            Hash,
            0x4D1CB8DC40208A17u64,
            component_hash,
            extra_component_index
        )
    } // 0x4D1CB8DC40208A17  b372
    pub unsafe fn set_current_ped_weapon(ped: Ped, weapon_hash: Hash, b_force_in_hand: bool) {
        call_native!(
            Void,
            0xADF692B254977C0Cu64,
            ped,
            weapon_hash,
            b_force_in_hand
        );
    } // 0xADF692B254977C0C 0xB8278882 b323
    pub unsafe fn get_current_ped_weapon(ped: Ped, weapon_hash: *mut Hash, p_2: bool) -> bool {
        call_native!(bool, 0x3A87E44BB9A01D54u64, ped, weapon_hash, p_2)
    } // 0x3A87E44BB9A01D54 0xB0237302 b323
    pub unsafe fn get_current_ped_weapon_entity_index(ped: Ped, p_1: Any) -> Entity {
        call_native!(Entity, 0x3B390A939AF0B5FCu64, ped, p_1)
    } // 0x3B390A939AF0B5FC 0x5D73CD20 b323
    pub unsafe fn get_best_ped_weapon(ped: Ped, p_1: bool) -> Hash {
        call_native!(Hash, 0x8483E98E8B888AE2u64, ped, p_1)
    } // 0x8483E98E8B888AE2 0xB998D444 b323
    pub unsafe fn set_current_ped_vehicle_weapon(ped: Ped, weapon_hash: Hash) -> bool {
        call_native!(bool, 0x75C55983C2C39DAAu64, ped, weapon_hash)
    } // 0x75C55983C2C39DAA 0x8E6F2AF1 b323
    pub unsafe fn get_current_ped_vehicle_weapon(ped: Ped, weapon_hash: *mut Hash) -> bool {
        call_native!(bool, 0x1017582BCD3832DCu64, ped, weapon_hash)
    } // 0x1017582BCD3832DC 0xF26C5D65 b323
    pub unsafe fn set_ped_cycle_vehicle_weapons_only(ped: Ped) {
        call_native!(Void, 0x50276EF8172F5F12u64, ped);
    } // 0x50276EF8172F5F12  b1734
    pub unsafe fn is_ped_armed(ped: Ped, type_flags: i32) -> bool {
        call_native!(bool, 0x475768A975D5AD17u64, ped, type_flags)
    } // 0x475768A975D5AD17 0x0BFC892C b323
    pub unsafe fn is_weapon_valid(weapon_hash: Hash) -> bool {
        call_native!(bool, 0x937C71165CF334B3u64, weapon_hash)
    } // 0x937C71165CF334B3 0x38CA2954 b323
    pub unsafe fn has_ped_got_weapon(ped: Ped, weapon_hash: Hash, p_2: bool) -> bool {
        call_native!(bool, 0x8DECB02F88F428BCu64, ped, weapon_hash, p_2)
    } // 0x8DECB02F88F428BC 0x43D2FA82 b323
    pub unsafe fn is_ped_weapon_ready_to_shoot(ped: Ped) -> bool {
        call_native!(bool, 0xB80CA294F2F26749u64, ped)
    } // 0xB80CA294F2F26749 0x02A32CB0 b323
    pub unsafe fn get_ped_weapontype_in_slot(ped: Ped, weapon_slot: Hash) -> Hash {
        call_native!(Hash, 0xEFFED78E9011134Du64, ped, weapon_slot)
    } // 0xEFFED78E9011134D 0x9BC64E16 b323
    pub unsafe fn get_ammo_in_ped_weapon(ped: Ped, weaponhash: Hash) -> i32 {
        call_native!(i32, 0x015A522136D7F951u64, ped, weaponhash)
    } // 0x015A522136D7F951 0x0C755733 b323
    pub unsafe fn add_ammo_to_ped(ped: Ped, weapon_hash: Hash, ammo: i32) {
        call_native!(Void, 0x78F0424C34306220u64, ped, weapon_hash, ammo);
    } // 0x78F0424C34306220 0x7F0580C7 b323
    pub unsafe fn set_ped_ammo(ped: Ped, weapon_hash: Hash, ammo: i32, p_3: bool) {
        call_native!(Void, 0x14E56BC5B5DB6A19u64, ped, weapon_hash, ammo, p_3);
    } // 0x14E56BC5B5DB6A19 0xBF90DF1A b323
    pub unsafe fn set_ped_infinite_ammo(ped: Ped, toggle: bool, weapon_hash: Hash) {
        call_native!(Void, 0x3EDCB0505123623Bu64, ped, toggle, weapon_hash);
    } // 0x3EDCB0505123623B 0x9CB8D278 b323
    pub unsafe fn set_ped_infinite_ammo_clip(ped: Ped, toggle: bool) {
        call_native!(Void, 0x183DADC6AA953186u64, ped, toggle);
    } // 0x183DADC6AA953186 0x5A5E3B67 b323
    pub unsafe fn set_ped_stun_gun_finite_ammo(p_0: Any, p_1: Any) {
        call_native!(Void, 0x24C024BA8379A70Au64, p_0, p_1);
    } // 0x24C024BA8379A70A  b1868
    pub unsafe fn give_weapon_to_ped(
        ped: Ped,
        weapon_hash: Hash,
        ammo_count: i32,
        is_hidden: bool,
        b_force_in_hand: bool,
    ) {
        call_native!(
            Void,
            0xBF0FD6E56C964FCBu64,
            ped,
            weapon_hash,
            ammo_count,
            is_hidden,
            b_force_in_hand
        );
    } // 0xBF0FD6E56C964FCB 0xC4D88A85 b323
    pub unsafe fn give_delayed_weapon_to_ped(
        ped: Ped,
        weapon_hash: Hash,
        ammo_count: i32,
        b_force_in_hand: bool,
    ) {
        call_native!(
            Void,
            0xB282DC6EBD803C75u64,
            ped,
            weapon_hash,
            ammo_count,
            b_force_in_hand
        );
    } // 0xB282DC6EBD803C75 0x5868D20D b323
    pub unsafe fn remove_all_ped_weapons(ped: Ped, p_1: bool) {
        call_native!(Void, 0xF25DF915FA38C5F3u64, ped, p_1);
    } // 0xF25DF915FA38C5F3 0xA44CE817 b323
    pub unsafe fn remove_weapon_from_ped(ped: Ped, weapon_hash: Hash) {
        call_native!(Void, 0x4899CB088EDF59B8u64, ped, weapon_hash);
    } // 0x4899CB088EDF59B8 0x9C37F220 b323
    pub unsafe fn hide_ped_weapon_for_scripted_cutscene(ped: Ped, toggle: bool) {
        call_native!(Void, 0x6F6981D2253C208Fu64, ped, toggle);
    } // 0x6F6981D2253C208F 0x00CFD6E9 b323
    pub unsafe fn set_ped_current_weapon_visible(
        ped: Ped,
        visible: bool,
        deselect_weapon: bool,
        p_3: bool,
        p_4: bool,
    ) {
        call_native!(
            Void,
            0x0725A4CCFDED9A70u64,
            ped,
            visible,
            deselect_weapon,
            p_3,
            p_4
        );
    } // 0x0725A4CCFDED9A70 0x00BECD77 b323
    pub unsafe fn set_ped_drops_weapons_when_dead(ped: Ped, toggle: bool) {
        call_native!(Void, 0x476AE72C1D19D1A8u64, ped, toggle);
    } // 0x476AE72C1D19D1A8 0x8A444056 b323
    pub unsafe fn has_ped_been_damaged_by_weapon(
        ped: Ped,
        weapon_hash: Hash,
        weapon_type: i32,
    ) -> bool {
        call_native!(bool, 0x2D343D2219CD027Au64, ped, weapon_hash, weapon_type)
    } // 0x2D343D2219CD027A 0xCDFBBCC6 b323
    pub unsafe fn clear_ped_last_weapon_damage(ped: Ped) {
        call_native!(Void, 0x0E98F88A24C5F4B8u64, ped);
    } // 0x0E98F88A24C5F4B8 0x52C68832 b323
    pub unsafe fn has_entity_been_damaged_by_weapon(
        entity: Entity,
        weapon_hash: Hash,
        weapon_type: i32,
    ) -> bool {
        call_native!(
            bool,
            0x131D401334815E94u64,
            entity,
            weapon_hash,
            weapon_type
        )
    } // 0x131D401334815E94 0x6DAABB39 b323
    pub unsafe fn clear_entity_last_weapon_damage(entity: Entity) {
        call_native!(Void, 0xAC678E40BE7C74D2u64, entity);
    } // 0xAC678E40BE7C74D2 0xCEC2732B b323
    pub unsafe fn set_ped_drops_weapon(ped: Ped) {
        call_native!(Void, 0x6B7513D9966FBEC0u64, ped);
    } // 0x6B7513D9966FBEC0 0x3D3329FA b323
    pub unsafe fn set_ped_drops_inventory_weapon(
        ped: Ped,
        weapon_hash: Hash,
        x_offset: f32,
        y_offset: f32,
        z_offset: f32,
        ammo_count: i32,
    ) {
        call_native!(
            Void,
            0x208A1888007FC0E6u64,
            ped,
            weapon_hash,
            x_offset,
            y_offset,
            z_offset,
            ammo_count
        );
    } // 0x208A1888007FC0E6 0x81FFB874 b323
    pub unsafe fn get_max_ammo_in_clip(ped: Ped, weapon_hash: Hash, p_2: bool) -> i32 {
        call_native!(i32, 0xA38DCFFCEA8962FAu64, ped, weapon_hash, p_2)
    } // 0xA38DCFFCEA8962FA 0x6961E2A4 b323
    pub unsafe fn get_ammo_in_clip(ped: Ped, weapon_hash: Hash, ammo: *mut i32) -> bool {
        call_native!(bool, 0x2E1202248937775Cu64, ped, weapon_hash, ammo)
    } // 0x2E1202248937775C 0x73C100C3 b323
    pub unsafe fn set_ammo_in_clip(ped: Ped, weapon_hash: Hash, ammo: i32) -> bool {
        call_native!(bool, 0xDCD2A934D65CB497u64, ped, weapon_hash, ammo)
    } // 0xDCD2A934D65CB497 0xA54B0B10 b323
    pub unsafe fn get_max_ammo(ped: Ped, weapon_hash: Hash, ammo: *mut i32) -> bool {
        call_native!(bool, 0xDC16122C7A20C933u64, ped, weapon_hash, ammo)
    } // 0xDC16122C7A20C933 0x0B294796 b323
    pub unsafe fn get_max_ammo_by_type(ped: Ped, ammo_type_hash: Hash, ammo: *mut i32) -> bool {
        call_native!(bool, 0x585847C5E4E11709u64, ped, ammo_type_hash, ammo)
    } // 0x585847C5E4E11709  b1103
    pub unsafe fn add_ped_ammo_by_type(ped: Ped, ammo_type_hash: Hash, ammo: i32) {
        call_native!(Void, 0x2472622CE1F2D45Fu64, ped, ammo_type_hash, ammo);
    } // 0x2472622CE1F2D45F  b1103
    pub unsafe fn set_ped_ammo_by_type(ped: Ped, ammo_type_hash: Hash, ammo: i32) {
        call_native!(Void, 0x5FD1E1F011E76D7Eu64, ped, ammo_type_hash, ammo);
    } // 0x5FD1E1F011E76D7E 0x311C52BB b323
    pub unsafe fn get_ped_ammo_by_type(ped: Ped, ammo_type_hash: Hash) -> i32 {
        call_native!(i32, 0x39D22031557946C1u64, ped, ammo_type_hash)
    } // 0x39D22031557946C1 0x54077C4D b323
    pub unsafe fn set_ped_ammo_to_drop(ped: Ped, p_1: i32) {
        call_native!(Void, 0xA4EFEF9440A5B0EFu64, ped, p_1);
    } // 0xA4EFEF9440A5B0EF 0x2386A307 b323
    pub unsafe fn set_pickup_ammo_amount_scaler(p_0: f32) {
        call_native!(Void, 0xE620FD3512A04F18u64, p_0);
    } // 0xE620FD3512A04F18 0xD6460EA2 b323
    pub unsafe fn get_ped_ammo_type_from_weapon(ped: Ped, weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0x7FEAD38B326B9F74u64, ped, weapon_hash)
    } // 0x7FEAD38B326B9F74 0x09337863 b323
    pub unsafe fn get_ped_original_ammo_type_from_weapon(ped: Ped, weapon_hash: Hash) -> Hash {
        call_native!(Hash, 0xF489B44DD5AF4BD9u64, ped, weapon_hash)
    } // 0xF489B44DD5AF4BD9  b1103
    pub unsafe fn get_ped_last_weapon_impact_coord(ped: Ped, coords: *mut Vector3) -> bool {
        call_native!(bool, 0x6C4D0409BA1A2BC2u64, ped, coords)
    } // 0x6C4D0409BA1A2BC2 0x9B266079 b323
    pub unsafe fn set_ped_gadget(ped: Ped, gadget_hash: Hash, p_2: bool) {
        call_native!(Void, 0xD0D7B1E680ED4A1Au64, ped, gadget_hash, p_2);
    } // 0xD0D7B1E680ED4A1A 0x8A256D0A b323
    pub unsafe fn get_is_ped_gadget_equipped(ped: Ped, gadget_hash: Hash) -> bool {
        call_native!(bool, 0xF731332072F5156Cu64, ped, gadget_hash)
    } // 0xF731332072F5156C 0x8DDD0B5B b323
    pub unsafe fn get_selected_ped_weapon(ped: Ped) -> Hash {
        call_native!(Hash, 0x0A6DB4965674D243u64, ped)
    } // 0x0A6DB4965674D243 0xD240123E b323
    pub unsafe fn explode_projectiles(ped: Ped, weapon_hash: Hash, p_2: bool) {
        call_native!(Void, 0xFC4BD125DE7611E4u64, ped, weapon_hash, p_2);
    } // 0xFC4BD125DE7611E4 0x35A0B955 b323
    pub unsafe fn remove_all_projectiles_of_type(weapon_hash: Hash, explode: bool) {
        call_native!(Void, 0xFC52E0F37E446528u64, weapon_hash, explode);
    } // 0xFC52E0F37E446528 0xA5F89919 b323
    pub unsafe fn get_lockon_distance_of_current_ped_weapon(ped: Ped) -> f32 {
        call_native!(f32, 0x840F03E9041E2C9Cu64, ped)
    } // 0x840F03E9041E2C9C 0x3612110D b323
    pub unsafe fn get_max_range_of_current_ped_weapon(ped: Ped) -> f32 {
        call_native!(f32, 0x814C9D19DFD69679u64, ped)
    } // 0x814C9D19DFD69679 0xB2B2BBAA b323
    pub unsafe fn has_vehicle_got_projectile_attached(
        driver: Ped,
        vehicle: Vehicle,
        weapon_hash: Hash,
        p_3: Any,
    ) -> bool {
        call_native!(
            bool,
            0x717C8481234E3B88u64,
            driver,
            vehicle,
            weapon_hash,
            p_3
        )
    } // 0x717C8481234E3B88 0xA57E2E80 b323
    pub unsafe fn give_weapon_component_to_ped(ped: Ped, weapon_hash: Hash, component_hash: Hash) {
        call_native!(
            Void,
            0xD966D51AA5B28BB9u64,
            ped,
            weapon_hash,
            component_hash
        );
    } // 0xD966D51AA5B28BB9 0x3E1E286D b323
    pub unsafe fn remove_weapon_component_from_ped(
        ped: Ped,
        weapon_hash: Hash,
        component_hash: Hash,
    ) {
        call_native!(
            Void,
            0x1E8BE90C74FB4C09u64,
            ped,
            weapon_hash,
            component_hash
        );
    } // 0x1E8BE90C74FB4C09 0x412AA00D b323
    pub unsafe fn has_ped_got_weapon_component(
        ped: Ped,
        weapon_hash: Hash,
        component_hash: Hash,
    ) -> bool {
        call_native!(
            bool,
            0xC593212475FAE340u64,
            ped,
            weapon_hash,
            component_hash
        )
    } // 0xC593212475FAE340 0xDC0FC145 b323
    pub unsafe fn is_ped_weapon_component_active(
        ped: Ped,
        weapon_hash: Hash,
        component_hash: Hash,
    ) -> bool {
        call_native!(
            bool,
            0x0D78DE0572D3969Eu64,
            ped,
            weapon_hash,
            component_hash
        )
    } // 0x0D78DE0572D3969E 0x7565FB19 b323
    pub unsafe fn refill_ammo_instantly(ped: Ped) -> bool {
        call_native!(bool, 0x8C0D57EA686FAD87u64, ped)
    } // 0x8C0D57EA686FAD87 0x82EEAF0F b323
    pub unsafe fn make_ped_reload(ped: Ped) -> bool {
        call_native!(bool, 0x20AE33F3AC9C0033u64, ped)
    } // 0x20AE33F3AC9C0033 0x515292C2 b323
    pub unsafe fn request_weapon_asset(weapon_hash: Hash, p_1: i32, p_2: i32) {
        call_native!(Void, 0x5443438F033E29C3u64, weapon_hash, p_1, p_2);
    } // 0x5443438F033E29C3 0x65D139A5 b323
    pub unsafe fn has_weapon_asset_loaded(weapon_hash: Hash) -> bool {
        call_native!(bool, 0x36E353271F0E90EEu64, weapon_hash)
    } // 0x36E353271F0E90EE 0x1891D5BB b323
    pub unsafe fn remove_weapon_asset(weapon_hash: Hash) {
        call_native!(Void, 0xAA08EF13F341C8FCu64, weapon_hash);
    } // 0xAA08EF13F341C8FC 0x2C0DFE3C b323
    pub unsafe fn create_weapon_object(
        weapon_hash: Hash,
        ammo_count: i32,
        x: f32,
        y: f32,
        z: f32,
        show_world_model: bool,
        scale: f32,
        p_7: Any,
        p_8: Any,
        p_9: Any,
    ) -> Object {
        call_native!(
            Object,
            0x9541D3CF0D398F36u64,
            weapon_hash,
            ammo_count,
            x,
            y,
            z,
            show_world_model,
            scale,
            p_7,
            p_8,
            p_9
        )
    } // 0x9541D3CF0D398F36 0x62F5987F b323
    pub unsafe fn give_weapon_component_to_weapon_object(
        weapon_object: Object,
        component_hash: Hash,
    ) {
        call_native!(Void, 0x33E179436C0B31DBu64, weapon_object, component_hash);
    } // 0x33E179436C0B31DB 0xF7612A37 b323
    pub unsafe fn remove_weapon_component_from_weapon_object(object: Object, component_hash: Hash) {
        call_native!(Void, 0xF7D82B0D66777611u64, object, component_hash);
    } // 0xF7D82B0D66777611 0xA6E7ED3C b323
    pub unsafe fn has_weapon_got_weapon_component(weapon: Object, component_hash: Hash) -> bool {
        call_native!(bool, 0x76A18844E743BF91u64, weapon, component_hash)
    } // 0x76A18844E743BF91 0x1D368510 b323
    pub unsafe fn give_weapon_object_to_ped(weapon_object: Object, ped: Ped) {
        call_native!(Void, 0xB1FA61371AF7C4B7u64, weapon_object, ped);
    } // 0xB1FA61371AF7C4B7 0x639AF3EF b323
    pub unsafe fn does_weapon_take_weapon_component(
        weapon_hash: Hash,
        component_hash: Hash,
    ) -> bool {
        call_native!(bool, 0x5CEE3DF569CECAB0u64, weapon_hash, component_hash)
    } // 0x5CEE3DF569CECAB0 0xB1817BAA b323
    pub unsafe fn get_weapon_object_from_ped(ped: Ped, p_1: bool) -> Object {
        call_native!(Object, 0xCAE1DC9A0E22A16Du64, ped, p_1)
    } // 0xCAE1DC9A0E22A16D 0xDF939A38 b323
    pub unsafe fn give_loadout_to_ped(ped: Ped, loadout_hash: Hash) {
        call_native!(Void, 0x68F8BE6AF5CDF8A6u64, ped, loadout_hash);
    } // 0x68F8BE6AF5CDF8A6  b505
    pub unsafe fn set_ped_weapon_tint_index(ped: Ped, weapon_hash: Hash, tint_index: i32) {
        call_native!(Void, 0x50969B9B89ED5738u64, ped, weapon_hash, tint_index);
    } // 0x50969B9B89ED5738 0xEB2A7B23 b323
    pub unsafe fn get_ped_weapon_tint_index(ped: Ped, weapon_hash: Hash) -> i32 {
        call_native!(i32, 0x2B9EEDC07BD06B9Fu64, ped, weapon_hash)
    } // 0x2B9EEDC07BD06B9F 0x3F9C90A7 b323
    pub unsafe fn set_weapon_object_tint_index(weapon: Object, tint_index: i32) {
        call_native!(Void, 0xF827589017D4E4A9u64, weapon, tint_index);
    } // 0xF827589017D4E4A9 0x44ACC1DA b323
    pub unsafe fn get_weapon_object_tint_index(weapon: Object) -> i32 {
        call_native!(i32, 0xCD183314F7CD2E57u64, weapon)
    } // 0xCD183314F7CD2E57 0xD91D9576 b323
    pub unsafe fn get_weapon_tint_count(weapon_hash: Hash) -> i32 {
        call_native!(i32, 0x5DCF6C5CAB2E9BF7u64, weapon_hash)
    } // 0x5DCF6C5CAB2E9BF7 0x99E4EAAB b323
    pub unsafe fn set_ped_weapon_component_tint_index(
        ped: Ped,
        weapon_hash: Hash,
        camo_component_hash: Hash,
        color_index: i32,
    ) {
        call_native!(
            Void,
            0x9FE5633880ECD8EDu64,
            ped,
            weapon_hash,
            camo_component_hash,
            color_index
        );
    } // 0x9FE5633880ECD8ED  b1103
    pub unsafe fn get_ped_weapon_component_tint_index(
        ped: Ped,
        weapon_hash: Hash,
        camo_component_hash: Hash,
    ) -> i32 {
        call_native!(
            i32,
            0xF0A60040BE558F2Du64,
            ped,
            weapon_hash,
            camo_component_hash
        )
    } // 0xF0A60040BE558F2D  b1103
    pub unsafe fn set_weapon_object_component_tint_index(
        weapon_object: Object,
        camo_component_hash: Hash,
        color_index: i32,
    ) {
        call_native!(
            Void,
            0x5DA825A85D0EA6E6u64,
            weapon_object,
            camo_component_hash,
            color_index
        );
    } // 0x5DA825A85D0EA6E6  b1103
    pub unsafe fn get_weapon_object_component_tint_index(
        weapon_object: Object,
        camo_component_hash: Hash,
    ) -> i32 {
        call_native!(
            i32,
            0xB3EA4FEABF41464Bu64,
            weapon_object,
            camo_component_hash
        )
    } // 0xB3EA4FEABF41464B  b1103
    pub unsafe fn get_ped_weapon_camo_index(ped: Ped, weapon_hash: Hash) -> i32 {
        call_native!(i32, 0xA2C9AC24B4061285u64, ped, weapon_hash)
    } // 0xA2C9AC24B4061285  b1103
    pub unsafe fn set_weapon_object_camo_index(weapon_object: Object, p_1: i32) {
        call_native!(Void, 0x977CA98939E82E4Bu64, weapon_object, p_1);
    } // 0x977CA98939E82E4B  b1103
    pub unsafe fn get_weapon_hud_stats(weapon_hash: Hash, out_data: *mut Any) -> bool {
        call_native!(bool, 0xD92C739EE34C9EBAu64, weapon_hash, out_data)
    } // 0xD92C739EE34C9EBA 0xA9AD3D98 b323
    pub unsafe fn get_weapon_component_hud_stats(component_hash: Hash, out_data: *mut Any) -> bool {
        call_native!(bool, 0xB3CAF387AE12E9F8u64, component_hash, out_data)
    } // 0xB3CAF387AE12E9F8 0xBB5498F4 b323
    pub unsafe fn get_weapon_damage(weapon_hash: Hash, component_hash: Hash) -> f32 {
        call_native!(f32, 0x3133B907D8B32053u64, weapon_hash, component_hash)
    } // 0x3133B907D8B32053 0xE81649C0 b323
    pub unsafe fn get_weapon_clip_size(weapon_hash: Hash) -> i32 {
        call_native!(i32, 0x583BE370B1EC6EB4u64, weapon_hash)
    } // 0x583BE370B1EC6EB4 0x8D515E66 b323
    pub unsafe fn get_weapon_time_between_shots(weapon_hash: Hash) -> f32 {
        call_native!(f32, 0x065D2AACAD8CF7A4u64, weapon_hash)
    } // 0x065D2AACAD8CF7A4  b1290
    pub unsafe fn set_ped_chance_of_firing_blanks(ped: Ped, x_bias: f32, y_bias: f32) {
        call_native!(Void, 0x8378627201D5497Du64, ped, x_bias, y_bias);
    } // 0x8378627201D5497D 0xB4F44C6E b323
    pub unsafe fn set_ped_shoot_ordnance_weapon(ped: Ped, p_1: f32) -> Object {
        call_native!(Object, 0xB4C8D77C80C0421Eu64, ped, p_1)
    } // 0xB4C8D77C80C0421E 0xEC2E5304 b323
    pub unsafe fn request_weapon_high_detail_model(weapon_object: Entity) {
        call_native!(Void, 0x48164DBB970AC3F0u64, weapon_object);
    } // 0x48164DBB970AC3F0 0xE3BD00F9 b323
    pub unsafe fn _set_weapon_ped_damage_modifier(weapon: Hash, damage_modifier: f32) {
        call_native!(Void, 0x1091922715B68DF0u64, weapon, damage_modifier);
    } // 0x1091922715B68DF0  b3095
    pub unsafe fn set_weapon_damage_modifier(weapon_hash: Hash, damage_multiplier: f32) {
        call_native!(Void, 0x4757F00BC6323CFEu64, weapon_hash, damage_multiplier);
    } // 0x4757F00BC6323CFE  b505
    pub unsafe fn set_weapon_aoe_modifier(weapon_hash: Hash, multiplier: f32) {
        call_native!(Void, 0x4AE5AC8B852D642Cu64, weapon_hash, multiplier);
    } // 0x4AE5AC8B852D642C  b2372
    pub unsafe fn set_weapon_effect_duration_modifier(p_0: Hash, p_1: f32) {
        call_native!(Void, 0xE6D2CEDD370FF98Eu64, p_0, p_1);
    } // 0xE6D2CEDD370FF98E  b2372
    pub unsafe fn is_ped_current_weapon_silenced(ped: Ped) -> bool {
        call_native!(bool, 0x65F0C5AE05943EC7u64, ped)
    } // 0x65F0C5AE05943EC7 0xBAF7BFBE b323
    pub unsafe fn is_flash_light_on(ped: Ped) -> bool {
        call_native!(bool, 0x4B7620C47217126Cu64, ped)
    } // 0x4B7620C47217126C 0x76876154 b323
    pub unsafe fn set_flash_light_fade_distance(distance: f32) -> bool {
        call_native!(bool, 0xCEA66DAD478CD39Bu64, distance)
    } // 0xCEA66DAD478CD39B 0xB0127EA7 b323
    pub unsafe fn set_flash_light_active_history(ped: Ped, toggle: bool) {
        call_native!(Void, 0x988DB6FE9B3AC000u64, ped, toggle);
    } // 0x988DB6FE9B3AC000  b2060
    pub unsafe fn set_weapon_animation_override(ped: Ped, anim_style: Hash) {
        call_native!(Void, 0x1055AC3A667F09D9u64, ped, anim_style);
    } // 0x1055AC3A667F09D9 0xA5DF7484 b323
    pub unsafe fn get_weapon_damage_type(weapon_hash: Hash) -> i32 {
        call_native!(i32, 0x3BE0BB12D25FB305u64, weapon_hash)
    } // 0x3BE0BB12D25FB305 0x013AFC13 b323
    pub unsafe fn set_eqipped_weapon_start_spinning_at_full_speed(ped: Ped) {
        call_native!(Void, 0xE4DCEC7FD5B739A5u64, ped);
    } // 0xE4DCEC7FD5B739A5 0x64646F1D b323
    pub unsafe fn can_use_weapon_on_parachute(weapon_hash: Hash) -> bool {
        call_native!(bool, 0xBC7BE5ABC0879F74u64, weapon_hash)
    } // 0xBC7BE5ABC0879F74 0x135E7AD4 b323
    pub unsafe fn create_air_defence_sphere(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        weapon_hash: Hash,
    ) -> i32 {
        call_native!(
            i32,
            0x91EF34584710BE99u64,
            x,
            y,
            z,
            radius,
            p_4,
            p_5,
            p_6,
            weapon_hash
        )
    } // 0x91EF34584710BE99  b573
    pub unsafe fn create_air_defence_angled_area(
        p_0: f32,
        p_1: f32,
        p_2: f32,
        p_3: f32,
        p_4: f32,
        p_5: f32,
        p_6: f32,
        p_7: f32,
        p_8: f32,
        radius: f32,
        weapon_hash: Hash,
    ) -> i32 {
        call_native!(
            i32,
            0x9DA58CDBF6BDBC08u64,
            p_0,
            p_1,
            p_2,
            p_3,
            p_4,
            p_5,
            p_6,
            p_7,
            p_8,
            radius,
            weapon_hash
        )
    } // 0x9DA58CDBF6BDBC08  b1011
    pub unsafe fn remove_air_defence_sphere(zone_id: i32) -> bool {
        call_native!(bool, 0x0ABF535877897560u64, zone_id)
    } // 0x0ABF535877897560  b573
    pub unsafe fn remove_all_air_defence_spheres() {
        call_native!(Void, 0x1E45B34ADEBEE48Eu64);
    } // 0x1E45B34ADEBEE48E  b573
    pub unsafe fn set_player_targettable_for_air_defence_sphere(
        player: Player,
        zone_id: i32,
        enable: bool,
    ) {
        call_native!(Void, 0xECDC202B25E5CF48u64, player, zone_id, enable);
    } // 0xECDC202B25E5CF48  b573
    pub unsafe fn is_air_defence_sphere_in_area(
        x: f32,
        y: f32,
        z: f32,
        radius: f32,
        out_zone_id: *mut i32,
    ) -> bool {
        call_native!(bool, 0xDAB963831DBFD3F4u64, x, y, z, radius, out_zone_id)
    } // 0xDAB963831DBFD3F4  b1103
    pub unsafe fn fire_air_defence_sphere_weapon_at_position(zone_id: i32, x: f32, y: f32, z: f32) {
        call_native!(Void, 0x44F1012B69313374u64, zone_id, x, y, z);
    } // 0x44F1012B69313374  b573
    pub unsafe fn does_air_defence_sphere_exist(zone_id: i32) -> bool {
        call_native!(bool, 0xCD79A550999D7D4Fu64, zone_id)
    } // 0xCD79A550999D7D4F  b678
    pub unsafe fn set_can_ped_select_inventory_weapon(ped: Ped, weapon_hash: Hash, toggle: bool) {
        call_native!(Void, 0xB4771B9AAF4E68E4u64, ped, weapon_hash, toggle);
    } // 0xB4771B9AAF4E68E4  b1103
    pub unsafe fn set_can_ped_select_all_weapons(ped: Ped, toggle: bool) {
        call_native!(Void, 0xEFF296097FF1E509u64, ped, toggle);
    } // 0xEFF296097FF1E509  b1103
}

pub mod zone {
    use crate::native_call::*;
    use crate::types::*;

    pub unsafe fn get_zone_at_coords(x: f32, y: f32, z: f32) -> i32 {
        call_native!(i32, 0x27040C25DE6CB2F4u64, x, y, z)
    } // 0x27040C25DE6CB2F4 0xC9018181 b323
    pub unsafe fn get_zone_from_name_id(zone_name: *const i8) -> i32 {
        call_native!(i32, 0x98CD1D2934B76CC1u64, zone_name)
    } // 0x98CD1D2934B76CC1 0x8EC68304 b323
    pub unsafe fn get_zone_popschedule(zone_id: i32) -> i32 {
        call_native!(i32, 0x4334BC40AA0CB4BBu64, zone_id)
    } // 0x4334BC40AA0CB4BB 0x20AB2FC9 b323
    pub unsafe fn get_name_of_zone(x: f32, y: f32, z: f32) -> *const i8 {
        call_native!(*const i8, 0xCD90657D4C30E1CAu64, x, y, z)
    } // 0xCD90657D4C30E1CA 0x7875CE91 b323
    pub unsafe fn set_zone_enabled(zone_id: i32, toggle: bool) {
        call_native!(Void, 0xBA5ECEEA120E5611u64, zone_id, toggle);
    } // 0xBA5ECEEA120E5611 0x04E21B03 b323
    pub unsafe fn get_zone_scumminess(zone_id: i32) -> i32 {
        call_native!(i32, 0x5F7B268D15BA0739u64, zone_id)
    } // 0x5F7B268D15BA0739 0xB2FB5C4C b323
    pub unsafe fn override_popschedule_vehicle_model(schedule_id: i32, vehicle_hash: Hash) {
        call_native!(Void, 0x5F7D596BAC2E7777u64, schedule_id, vehicle_hash);
    } // 0x5F7D596BAC2E7777 0x3F0A3680 b323
    pub unsafe fn clear_popschedule_override_vehicle_model(schedule_id: i32) {
        call_native!(Void, 0x5C0DE367AA0D911Cu64, schedule_id);
    } // 0x5C0DE367AA0D911C 0x7A72A24E b323
    pub unsafe fn get_hash_of_map_area_at_coords(x: f32, y: f32, z: f32) -> Hash {
        call_native!(Hash, 0x7EE64D51E8498728u64, x, y, z)
    } // 0x7EE64D51E8498728 0xB5C5C99B b323
}
